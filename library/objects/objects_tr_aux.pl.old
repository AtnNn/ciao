%%------------------------------------------------------------------------
%%
%% O'CIAO: Object Oriented Programming in CIAO/Prolog
%%
%% AUXILIARY FILE FOR
%% SOURCE-TO-SOURCE EXPANSION FOR OBJECT USAGE
%%
%% USAGE:
%% :- include(library('objects/objects_tr_aux')).
%%
%% AUTHOR : Angel Fernandez Pineda
%% DATE   : July 1999
%%
%%------------------------------------------------------------------------
%% This file is used by objects_tr.pl in order to perform semantic analisys
%%
%%------------------------------------------------------------------------

%%------------------------------------------------------------------------
%%
%% PERFORM CLAUSE BODY SEMANTIC CHECKING
%%
%%------------------------------------------------------------------------

semantic_checking(Var,InProp,InProp) :-
	var(Var),
	!.

semantic_checking(Body,InProp,OutProp) :-
	( functor(Body,',',2) ; functor(Body,'->',2) ),
	!,
	arg(1,Body,Left),
	arg(2,Body,Right),
	semantic_checking(Left,InProp,MidProp),
	semantic_checking(Right,MidProp,OutProp).

semantic_checking(if(C,T,E),InProp,InProp) :-
	!,
	semantic_checking(C,InProp,MidProp),
	semantic_checking(T,MidProp,_),
	semantic_checking(E,MidProp,_).

semantic_checking(Body,InProp,InProp) :-
	functor(Body,';',2),
	!,
	arg(1,Body,Left),
	arg(2,Body,Right),
	semantic_checking(Left,InProp,_),
	semantic_checking(Right,InProp,_).

semantic_checking(call(Goal),InProp,OutProp) :-
	!,
	semantic_checking(Goal,InProp,OutProp).

semantic_checking(Goal,InProp,OutProp) :-
	goal_checking(Goal,InProp,OutProp),
	!,
	arg_checking(Goal,InProp).

semantic_checking(Goal,InProp,InProp) :-
	!,
	arg_checking(Goal,InProp).

semantic_checking(_,Prop,Prop).

%%------------------------------------------------------------------------
%%
%% SIMPLE GOAL CHECKING
%%
%%------------------------------------------------------------------------
	
goal_checking(Var,_,_) :-
	var(Var),
	!,
	fail.

goal_checking(Objects_rt:X,InProp,OutProp) :-
	nonvar(Objects_rt),
	Objects_rt = objects_rt,
	!,
	goal_checking(X,InProp,OutProp).

%%------------------------------------------------------------------------
%% new/2
%%------------------------------------------------------------------------

%% invalid call to new/2

goal_checking(new(Var,Cons),_,_) :-
	nonvar(Var),
	!,
	message(error,
	 ['invalid first argument in call to ',new(Var,Cons)]),
	fail.

goal_checking(new(_,Cons),_,_) :-
	var(Cons),
	!,
	fail.

%% Instance is known to be derived from any other class

goal_checking(new(Var,Cons),InProp,_) :-
	check_property(prop(Var,_),InProp),
	!,
	message(warning,
	 ['invalid call to new(?,',Cons,
	  ') : first argument will not be a free variable']),
	fail.

%% Given constructor does not correspond to any used class

goal_checking(new(_,Cons),_,_) :-
	functor(Cons,Class,_),
	module(Module),
	\+ used_class(Module,Class),
	!,
	message(error,
	 ['unkown class in call to new(?,',Cons,')']),
	fail.

%% Given constructor is not defined at given class

goal_checking(new(_,Cons),_,_) :-
	functor(Cons,Class,0),
	defines_module(Base,Class),
	\+ c_itf:decl(Base,method(Class/0)),
	c_itf:decl(Base,method(Class/_)),
	!,
	message(error,
	 ['unkown constructor in call to new(?,',Cons,')']),
	fail.

goal_checking(new(_,Cons),_,_) :-
	functor(Cons,Class,Arity),
	Arity > 0,
	defines_module(Base,Class),
	\+ c_itf:decl(Base,method(Class/Arity)),
	!,
	message(error,
	 ['unkown constructor in call to new(?,',Cons,')']),
	fail.

%% Everything allright about this stuff

goal_checking(new(Var,Cons),InProp,
	[prop(Var,interface(Class))|InProp]) :-
	functor(Cons,Class,_),
	!.

%%------------------------------------------------------------------------
%% interface/2
%%------------------------------------------------------------------------

%% invalid call

goal_checking(interface(Var,Class),_,_) :-
	nonvar(Var),
	!,
	message(error,
	 ['invalid first argument in call to ',interface(Var,Class)]),
	fail.

%% Class is unknown at compile time

goal_checking(interface(_,Class),_,_) :-
	var(Class),
	!,
	fail.

%%

goal_checking(interface(Var,Itf),Prop,[prop(Var,interface(Itf))|Prop]) :-
	!.

%%------------------------------------------------------------------------
%% instance_of/2
%%------------------------------------------------------------------------

%goal_checking(true(instance_of(Var,Class)),InProp,OutProp) :-
%	!,
%	goal_checking(instance_of(Var,Class),InProp,OutProp).

%% invalid call to instance_of/2.

goal_checking(instance_of(Var,Class),_,_) :-
	nonvar(Var),
	!,
	message(error,
	 ['invalid first argument in call to ',instance_of(Var,Class)]),
	fail.

%% Class is unknown at compile time

goal_checking(instance_of(_,Class),_,_) :-
	var(Class),
	!,
	fail.

%% Second argument is not a class

goal_checking(instance_of(_,Class),_,_) :-
	module(Module),
	\+ used_class(Module,Class),
	message(note,
	['given class (',Class,') at instance_of/2 is unknown.']),
	fail.
	
%% Everything allright about this stuff

goal_checking(instance_of(Var,Class),
	InProp,[prop(Var,interface(Class))|InProp]) :-
	!.

%%------------------------------------------------------------------------
%% derived_from/2
%%------------------------------------------------------------------------

%% invalid call to instance_of/2.

goal_checking(derived_from(Var,Class),_,_) :-
	nonvar(Var),
	!,
	message(error,
	 ['invalid first argument in call to ',derived_from(Var,Class)]),
	fail.

%% Class is unknown at compile time

goal_checking(derived_from(_,Class),_,_) :-
	var(Class),
	!,
	fail.

%% Second argument is not a class

goal_checking(derived_from(_,Class),_,_) :-
	\+ used_class(Class,_),
	message(note,
	['given class (',Class,') at derived_from/2 is unknown.']),
	!,
	fail.

%% Everything allright about this stuff

goal_checking(derived_from(Var,Class),
	InProp,[prop(Var,interface(Class))|InProp]) :-
	!.

%%------------------------------------------------------------------------
%% method callling
%%------------------------------------------------------------------------


% goal unknown at compile time

goal_checking(Var:_,_,_) :-
	nonvar(Var),
	!,
	fail.

goal_checking(_:Method,_,_) :-
	var(Method),
	!,
	fail.

% Instance is known to be compatible with one or more interfaces, but
% the called method is not public at any of those interfaces.

goal_checking(Var:Method,Prop,_) :-
	functor(Method,F,A),
	check_property(prop(Var,interface(Itf)),Prop),
	public_pred(Itf,_,F,A),
	!,
	fail.

goal_checking(Var:Method,Prop,_) :-
	check_property(prop(Var,interface(_)),Prop),
	!,
	message(error,
	['call to non-public ',Method]),
	fail.

% Instance is not known to be compatible with any interface,
% but, the given method is not public at any used class.

goal_checking(_:Method,_,_) :-
	functor(Method,F,A),
	module(Module),
	used_class(Module,Class),
	public_pred(Class,_,F,A),
	!,
	fail.

goal_checking(_:Method,_,_) :-
	!,
	message(warning,
	 ['called ',Method,' is not public at any used class']),
	fail.

%%------------------------------------------------------------------------
%%
%% PERFORM GOAL ARGUMENT CHECKING
%%
%%------------------------------------------------------------------------

arg_checking(Var,_) :-
	var(Var),
	!.

arg_checking(\+ Goal,InProp) :-
	!,
	arg_checking(Goal,InProp).

arg_checking(Body,InProp) :-
	( functor(Body,',',2) ; functor(Body,'->',2) ; 
	  functor(Body,';',2)
	),
	!,
	arg(1,Body,Left),
	arg(2,Body,Right),
	arg_checking(Left,InProp),
	arg_checking(Right,InProp).

arg_checking(if(C,T,E),InProp) :-
	!,
	arg_checking(C,InProp),
	arg_checking(T,MidProp),
	arg_checking(E,MidProp).

arg_checking(Module:Goal,InProp) :-
	atom(Module),
	functor(Goal,Functor,Arity),
	functor(Meta,Functor,Arity),
	meta_args(Module,Meta),
	!,
	Goal =.. [_|Args],
	Meta =.. [_|MetaSpec],
	arg_chk_aux(MetaSpec,Args,InProp).

% Meta-predicate was defined at current source...

arg_checking(Goal,InProp) :-
	functor(Goal,Functor,Arity),
	functor(Meta,Functor,Arity),
	module(Module),
	meta_args(Module,Meta),
	Meta \== 0,
	!,
	Goal =.. [_|Args],
	Meta =.. [_|MetaSpec],
	arg_chk_aux(MetaSpec,Args,InProp).

% Meta-predicate was defined at other source...

arg_checking(Goal,InProp) :-
	functor(Goal,Functor,Arity),
	functor(Meta,Functor,Arity),
	module(Module),
	defines_module(Base,Module),
	imports_pred(Base,_,Functor,Arity,_,Meta,_),
	Meta \== 0,
	!,
	Goal =.. [_|Args],
	Meta =.. [_|MetaSpec],
	arg_chk_aux(MetaSpec,Args,InProp).

arg_checking(_,_).

%%------------------------------------------------------------------------

arg_chk_aux([],[],_).

arg_chk_aux([goal|Ns],[Arg|Na],Prop) :-
	!,
	semantic_checking(Arg,Prop,_),
	arg_chk_aux(Ns,Na,Prop).

arg_chk_aux([_|Ns],[_|Na],Prop) :-
	!,
	arg_chk_aux(Ns,Na,Prop).

%%------------------------------------------------------------------------
%% PROPERTY CHECKING FOR A VARIABLE 
%%------------------------------------------------------------------------

check_property(prop(Var,P),[prop(A_Var,_)|Np]) :-
	Var \== A_Var,
	!,
	check_property(prop(Var,P),Np).

check_property(prop(_,P),[prop(_,P)|_]).

check_property(prop(Var,P),[_|Np]) :-
	!,
	check_property(prop(Var,P),Np).

%%------------------------------------------------------------------------
%% RETRACT PROPERTIES OF VARIABLE
%%------------------------------------------------------------------------

retractall_property(_,[],[]).

retractall_property(prop(Var,P),[prop(Var,P)|Np],RNp) :-
	!,
	retractall_property(prop(Var,P),Np,RNp).

retractall_property(prop(V,P),[Prop|Np],[Prop|RNp]) :-
	!,
	retractall_property(prop(V,P),Np,RNp).

%%------------------------------------------------------------------------
