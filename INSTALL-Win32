[WARNING: do not edit, file automatically generated by lpdoc/texinfo]
 
INSTALL-Win32
*************

Windows installation from the precompiled distribution
======================================================

   This describes the installation of Ciao after downloading the
Windows *precompiled* distribution. This is the simplest Windows
installation, since it requires no compilation and is highly
recommended.

Installation of the precompiled distribution
--------------------------------------------

   Please follow these steps (below we use the terms *folder* and
*directory* interchangeably):

  1. Download the precompiled distribution and unpack it into any
     suitable folder, such as, e.g., `C:\Program Files' (this will
     create there a folder whose name reflects the Ciao version). Due
     to limitations of Windows related to file associations, do not
     put Ciao too deep in the folder hierarchy. For unpacking you
     will need a recent version of a zip archive manager - there are
     many freely available such as `WinZip', `unzip', `pkunzip',
     etc.). If you have a previous version of Ciao installed, make
     sure you do not have any Ciao applications (including, e.g., a
     toplevel shell) running, or the extraction process may not be
     able to complete. You may want to delete the entire folder of
     the previous installation to save space.

  2. Run (e.g. by double-clicking on it) the `install'(`.bat')
     script. This will update the windows registry (the file
     `ciao.reg' lists the additions) and also create some `.bat'
     files for running Ciao executables from the command line. It
     also creates initialization scripts for the `emacs' editor.
     After that, you may need to reboot for the changes in the
     registry to take effect.

  3. You may want to add a *windows shortcut* in a convenient place,
     such as the desktop, to `ciaosh.cpx', the standard interactive
     toplevel shell. It is located inside the `shell' folder (e.g.,
     click on the file `ciaosh.cpx' with the right mouse button and
     select the appropriate option, `Send to->Desktop as shortcut').

  4. You may also want to add another shortcut to the file
     `ciao.html' located inside `doc\reference\ciao_html' so that you
     can open the Ciao manual by simply double-clicking on this
     shortcut.


Getting started after Windows installation
------------------------------------------

   The actions and registry changes performed by the installation
procedure, in addition to setting icons for ciao-related file types,
make several other things possible:

   * Double-clicking on the shortcut made above to `ciao.html' should
     show the Ciao manual in your default WWW browser. Make sure you
     configure your browser to use *style sheets* for correct
     formatting of the manual (note, however, some older versions of
     Explorer did not support style sheets well and will give better
     results turning them off). The `doc\reference' folder contains
     the manual also in the other formats present in the
     distribution, such as `info' (very convenient for users of the
     `emacs' editor/program development system) and `postscript' or
     `pdf', which are specially useful for printing, using an
     application such as `ghostview' (freely available from
     `http://www.cs.wisc.edu/~ghost/index.html') or `acrobat reader'
     (`http://www.adobe.com') respectively.

   * It is possible to run any Ciao executable (ending in `.cpx') by
     double-clicking on it. For example, you can try starting this
     way `ciaosh.cpx', from inside the shell folder or from the
     shortcut created above.

   * Once the shell is started, you can load and execute Prolog
     modules inside the interactive toplevel shell in the standard
     way (e.g., type `use_module(*file*).',
     `use_module(library(*file*)).' for library modules,
     `ensure_loaded(*file*).' for files which are not modules, and
     `use_package(*file*).' for library packages).

     For example, you may want to type `use_package(iso)' to ensure
     Ciao has loaded all the iso builtins (whether this is done by
     default or not depends on your `.ciaorc' file). Do not worry
     about any 'module already in executable' messages -these are
     normal and simply mean that a certain module is already
     pre-loaded in the toplevel shell. At this point, typing
     `write(hello).' should work.

   * To change the working directory to, say, the `tests' directory,
     first do:

              ?- use_module(library(system)).

     (loading the `system' library makes a number of system-related
     predicates such as `cd/1' accessible) and then:

              ?- cd('$/tests').

     (in Ciao the sequence `$/' *at the beginning of a path name* is
     replaced by the path of the Ciao root directory).

   * Executables can be generated from the toplevel shell (using
     `make_exec/2') or using the standalone compiler (`ciaoc.cpx',
     located in the `ciaoc' folder). To be able to make an
     executable, the file should define the predicate `main/1' (or
     `main/0'), which will be called upon startup (see the
     corresponding manual section for details).

     For example, within the `tests' directory, you can type:

              ?- make_exec(hw,_).

     which should produce an executable. Double-clicking on this
     executable should execute it.

   * The Ciao toplevel can be made to execute upon startup a number
     of commands (such as, e.g., loading certain files or setting
     certain Prolog flags) contained in an initialization file. This
     file should be called `.ciaorc' and placed in your *home* folder
     (e.g., the same in which you put your `.emacs' file). You need
     to set the environment variable `HOME' to the path of this
     folder for the Ciao toplevel shell to be able to locate this
     file on startup.

   * To exit the top level shell, type `halt.' as usual, or <^Z>.

   * Another way of creating Ciao executables from source files is by
     right-clicking on `.pl' files and choosing "make executable".
     This also uses the standalone compiler.

   * Double-clicking on files ending in `.pls', "ciao prolog
     scripts", will also execute them. These are files containing
     Prolog source but which get executed without having to
     explicitly compile them (in the same way as, e.g., `.bat'
     files). As an example, you can double click on the file `hw.pls'
     in the `tests' folder and look at the source with an editor. You
     can try changing the `Hello world' message and double-clicking
     again.

     As you can see, the file should define the predicate `main/1',
     which will be called upon startup. The two header lines are only
     necessary in Un*x. You can leave them in in Windows (so that the
     script will work also in Un*x without any change) or you can
     take them out. These two lines can be added automatically in
     `emacs' from the Ciao/Prolog menu or by typing <^C> <I> <S>.

Starting executables from the Windows command line
--------------------------------------------------

   The installation script also creates a `.bat' skeleton file
(`bat_skel' in folder Win32) which allows running Ciao executables
from the command line. If you want to run a Ciao executable
`file.cpx' from the command line, you normally copy the skeleton file
to the folder were the executable is and rename it to file.bat, then
change its contents as explained in a comment inside. Note that this
`.bat' file is usually not necessary in NT, as its command shell
understands file extension associations, i.e., in windows NT it is
possible to run the `file.cpx' executable directly. Due to
limitations of `.bat' files in Windows 95/98, in those OSs no more
than 9 command line arguments can be passed to the executable (in NT
there is no such restriction).

   The installation script creates also `ciaosh.bat' and `ciaoc.bat'
files (in the `shell' and `ciaoc' folders respectively). These allow
calling the interactive top-level and the standalone compiler from
the command line in Windows95/98.

Using the emacs environment under Windows
-----------------------------------------

   While it is easy to use Ciao with any editor of your choice, using
it within the `emacs' editor/program development system is highly
recommended: Ciao includes an `emacs' *mode* which greatly simplifies
many program development tasks (see *Note Using Ciao inside GNU
emacs:: for details on the capabilities of `ciao'/`emacs' combination.

   The emacs editor (in all its versions: Un*x, Windows, etc.) can be
donloaded from, for example, `http://www.emacs.org/', and also from
the many GNU mirror sites worldwide (See `http://www.gnu.org/' for a
list), in the `gnu/emacs' and `gnu/windows/emacs' directories. For
example, at UPM it can be found at
`ftp://ftp.fi.upm.es/pub/mirrors/gnu/emacs' and
`ftp://ftp.fi.upm.es/pub/mirrors/gnu/windows/emacs'. You can find
answers to frequently asked question about `emacs' in general at
`http://www.gnu.org/software/emacs/emacs-faq.text' and about the
Windows version at
`http://www.gnu.org/software/emacs/windows/ntemacs.html'.

   In order to allow `emacs' to load the Ciao mode automatically when
editing and to access the documentation, open using `emacs'
(<^X><^F>)) the file `~/.emacs' (or, perhaps, `c:/.emacs') and add
the following line to it:

             (load-file "<CIAODIR>/DOTemacs.el")

where you should put in place of `<CIAODIR>' the directory where you
installed the Ciao distribution. After doing this (and exiting and
restarting `emacs') the following things should work:

   * When opening a Prolog file (with `.pl' or `.pls' ending) the
     code should appear highlighted according to syntax (e.g.,
     comments in red), and a `Ciao/Prolog' menu should appear in the
     menu bar on top of the `emacs' window.

   * Accessing the Ciao manuals from the `Ciao/Prolog' menu (or
     typing <^H> <i>) should open a list of manuals in info format in
     which the Ciao manual(s) should appear.

   * Loading the file using the `Ciao/Prolog' menu (or typing <^C>
     <l>) should start in another emacs buffer the Ciao toplevel
     shell and load the file. You should now be able to switch the
     the toplevel shell and make queries from within `emacs'.

   * You can also, e.g., create executables from the `Ciao/Prolog'
     menu. See *Note Using Ciao inside GNU emacs:: for the many other
     functionalities of this environment.

Compiling the miscellaneous utilities under Windows
---------------------------------------------------

   The `etc' folder contains a number of utilities, documented in the
manual in *PART V - Miscellaneous Standalone Utilities*. In the Win32
distribution these utilities are not compiled by the installation
process. You can create the executable for each of them when needed
by compiling the corresponding `.pl' file.

Server installation under Windows
---------------------------------

   If you would like to install Ciao on a server machine, used by
several clients, the following steps are recommended:

   * Follow the standard installation procedure on the server. All
     the functionality specified in the previous sections should then
     be available on the server.

   * Perform a *client installation* on each client, by running
     (e.g., double-click on it) the `client.bat' script. This should
     update the registry of each client.

Uninstallation under Windows
----------------------------

   To uninstall Ciao under Windows, simply delete the directory in
which you put the Ciao distribution. If you also want to delete the
registry entries created by the Ciao installation (not strictly
needed) this must currently be done by hand. The installation leaves
a list of these entries in the file `ciao.reg' to aid in this task.
Also, all the register entries contain the word *ciao*. Thus, to
delete all Ciao entries, run the application `regedit' (for example,
by selecting `Run' from the Windows `Start' menu), search (<^F>) for
*ciao* in all registry entries (i.e., select all of `Keys', `Values',
and `Data' in the `Edit->Find' dialog), and delete each matching key
(click on the left window to find the matching key for each entry
found).

