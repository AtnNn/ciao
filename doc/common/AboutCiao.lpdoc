
The Ciao system comprises Ciao Prolog and its programming environment,
which includes a number of programming tools such as the Ciao compiler
(@tt{ciaoc}), top-level interactive shell (@tt{ciaosh} or @tt{ciao}),
a Prolog-script interpreter (@tt{ciao-shell}),
a Prolog @tt{emacs} mode which helps program developing with support
for tasks as editing, debugging and version/change tracking, a program
preprocessor (@tt{ciaopp}), which supports static debugging and
optimization from program analysis via source to source program
transformation, an automatic documentation generator (@tt{lpdoc}) 
@cite{lpdoc-ws}, and a number of execution visualization tools.

This manual documents the first four of the abovementioned tools 
[PART I - The program development environment]), and the
Ciao Prolog language and library
[PART II - The Ciao basic language (engine)].
@tt{ciaopp} and @tt{lpdoc} are documented in separated manuals.

The Ciao language has been designed from the ground up to be
minimal but also highly extensible (in a modular way). The first objective
allows producing small executables (including only those builtins used
by the program), providing basic support for pure logic programming,
and support for writing scripts in Prolog. The second
one allows adding support for standard ISO-Prolog
[PART III - ISO-Prolog library (iso)], as well as extensions
such as constraint logic programming, functional logic
programming, and object-oriented logic programming
[PART VII - Ciao Prolog extensions].

Based on the same motivation for modularity, Ciao design has also been
focused on allowing modular program development, automatic manipulation
and optimization. Ciao includes a robust module system 
@cite{ciao-modules-ws}, module-based automatic incremental compilation
@cite{ciaoc-ws}, and modular global program analysis, debugging and
optimization @cite{ciao-modules-analspec-ws}, based on a rich
assertion language [PART V - Annotated Prolog library (assertions)]
for declaring (optional) program properties (including types and modes),
which can be checked either statically or dynamically.
All program analysis and static debugging and optimization tasks
are performed by the @tt{ciaopp} preprocessor.

Ciao also includes several other features and utilities, such as
support for several forms of executables, concurrency (threads),
distributed and parallel execution, high-order, WWW programming,
interfaces to other languages like C and Java, etc.

