
@section{Windows installation from the precompiled distribution} 

This describes the installation of Ciao after downloading the Windows
@em{precompiled} distribution. This is the simplest Windows
installation, since it requires no compilation and is highly
recommended.

@subsection{Installation of the precompiled distribution}

Please follow these steps (below we use the terms @em{folder} and
@em{directory} interchangeably):

@begin{enumerate} 

@item Download the precompiled distribution and unpack it into any
      suitable folder, such as, e.g., @tt{C:\Program Files} (this will
      create there a folder whose name reflects the Ciao version). Due
      to limitations of Windows related to file associations, do not
      put Ciao too deep in the folder hierarchy.  For unpacking you
      will need a recent version of a zip archive manager -- there are
      many freely available such as @apl{WinZip}, @apl{unzip},
      @apl{pkunzip}, etc.). If you have a previous version of Ciao
      installed, make sure you do not have any Ciao applications
      (including, e.g., a toplevel shell) running, or the extraction
      process may not be able to complete. You may want to delete the
      entire folder of the previous installation to save space.

@item Run (e.g. by double-clicking on it) the @tt{install}(@tt{.bat})
      script. This will update the windows registry (the file
      @tt{ciao.reg} lists the additions) and also create some
      @tt{.bat} files for running Ciao executables from the command
      line.  It also creates initialization scripts for the
      @apl{emacs} editor. After that, you may need to reboot for the
      changes in the registry to take effect.

@item You may want to add a @index{windows shortcut} @cindex{shortcut,
      windows} in a convenient place, such as the desktop, to
      @apl{ciaosh.cpx}, the standard interactive toplevel shell. It is
      located inside the @tt{shell} folder (e.g., click on the file
      @apl{ciaosh.cpx} with the right mouse button and select the
      appropriate option, @tt{Send to->Desktop as shortcut}).

@item You may also want to add another shortcut to the file
      @file{ciao.html} located inside
      @tt{doc\reference\ciao_html} so that you can open the
      Ciao manual by simply double-clicking on this shortcut. 

@end{enumerate}

@subsection{Getting started after Windows installation}

The actions and registry changes performed by the installation
procedure, in addition to setting icons for ciao-related file types,
make several other things possible:

@begin{itemize} 

@item Double-clicking on the shortcut made above to @tt{ciao.html}
      should show the Ciao manual in your default WWW browser.  Make
      sure you configure your browser to use @index{style sheets} for
      correct formatting of the manual (note, however, some older versions of
      @concept{Explorer} did not support style sheets well and will
      give better results turning them off).  The @tt{doc\reference}
      folder contains the manual also in the other formats present in
      the distribution, such as @tt{info} (very convenient for users
      of the @apl{emacs} editor/program development system) and
      @tt{postscript} or @tt{pdf}, which are specially useful for
      printing, using an application such as @apl{ghostview} (freely
      available from @uref{http://www.cs.wisc.edu/~ghost/index.html})
      or @apl{acrobat reader} (@uref{http://www.adobe.com})
      respectively. @cindex{printing, manual} @cindex{manual,
      printing}

@item It is possible to run any Ciao executable (ending in @tt{.cpx})
      by double-clicking on it.  For example, you can try starting
      this way @apl{ciaosh.cpx}, from inside the shell folder or from
      the shortcut created above.

@item Once the shell is started, you can load and execute Prolog
      modules inside the interactive toplevel shell in the standard
      way (e.g., type @tt{use_module(@em{file}).},
      @tt{use_module(library(@em{file})).} for library modules, 
      @tt{ensure_loaded(@em{file}).} for files which are not modules,
      and @tt{use_package(@em{file}).} for library packages).

      For example, you may want to type @tt{use_package(iso)} to
      ensure Ciao has loaded all the iso builtins (whether this is
      done by default or not depends on your @file{.ciaorc} file).  Do
      not worry about any 'module already in executable' messages
      --these are normal and simply mean that a certain module is
      already pre-loaded in the toplevel shell. At this point, typing
      @tt{write(hello).} should work.

@item To change the working directory to, say, the @tt{tests}
      directory, first do:

@begin{verbatim}
    ?- use_module(library(system)).
@end{verbatim}

      @noindent (loading the @lib{system} library makes a number of
      system-related predicates such as @pred{cd/1} accessible) and
      then:

@begin{verbatim}
    ?- cd('$/tests').  
@end{verbatim}

      @noindent (in Ciao the sequence @tt{$/} @em{at the beginning of
      a path name} is replaced by the path of the Ciao root
      directory).

@item @concept{Executables} can be generated from the toplevel shell
      (using @pred{make_exec/2}) or using the standalone compiler
      (@apl{ciaoc.cpx}, located in the @tt{ciaoc} folder). To be able
      to make an executable, the file should define the predicate
      @pred{main/1} (or @pred{main/0}), which will be called upon
      startup (see the corresponding manual section for details).

      @noindent For example, within the @file{tests} directory, you
      can type:

@begin{verbatim}
    ?- make_exec(hw,_).
@end{verbatim}

      @noindent which should produce an executable. Double-clicking on
      this executable should execute it.

@item The Ciao toplevel can be made to execute upon startup a number
      of commands (such as, e.g., loading certain files or setting
      certain Prolog flags) contained in an initialization file.  This
      file should be called @file{.ciaorc} and placed in your
      @em{home} folder (e.g., the same in which you put your
      @file{.emacs} file). You need to set the environment variable
      @tt{HOME} to the path of this folder for the Ciao toplevel shell
      to be able to locate this file on startup.

@item To exit the top level shell, type @tt{halt.} as usual, or @key{^Z}.

@item Another way of creating Ciao executables from source files is by
      right-clicking on @tt{.pl} files and choosing "make
      executable". This also uses the standalone compiler.

@item Double-clicking on files ending in @tt{.pls}, "ciao prolog
      scripts", will also execute them. These are files containing
      Prolog source but which get executed without having to
      explicitly compile them (in the same way as, e.g., @tt{.bat}
      files). As an example, you can double click on the file
      @file{hw.pls} in the @file{tests} folder and look at the source
      with an editor. You can try changing the @tt{Hello world}
      message and double-clicking again.

      As you can see, the file should define the predicate
      @pred{main/1}, which will be called upon startup.  The two
      header lines are only necessary in Un*x. You can leave them in
      in Windows (so that the script will work also in Un*x without
      any change) or you can take them out.  These two lines can be
      added automatically in @apl{emacs} from the Ciao/Prolog menu or by
      typing @key{^C} @key{I} @key{S}.

@end{itemize}

@subsection{Starting executables from the Windows command line}

The installation script also creates a @tt{.bat} skeleton file
(@tt{bat_skel} in folder Win32) which allows running Ciao executables
from the command line.  If you want to run a Ciao executable
@tt{file.cpx} from the command line, you normally copy the skeleton
file to the folder were the executable is and rename it to file.bat,
then change its contents as explained in a comment inside.  Note that
this @tt{.bat} file is usually not necessary in NT, as its command
shell understands file extension associations, i.e., in windows NT it
is possible to run the @tt{file.cpx} executable directly. Due to
limitations of @tt{.bat} files in Windows 95/98, in those OSs no more
than 9 command line arguments can be passed to the executable (in NT
there is no such restriction).  

The installation script creates also @tt{ciaosh.bat} and
@tt{ciaoc.bat} files (in the @file{shell} and @file{ciaoc} folders
respectively). These allow calling the interactive top-level and the
standalone compiler from the command line in Windows95/98.

@subsection{Using the emacs environment under Windows}

@cindex{emacs, under Win32} While it is easy to use Ciao with any
editor of your choice, using it within the @apl{emacs} editor/program
development system is highly recommended: Ciao includes an @apl{emacs}
@em{mode} which greatly simplifies many program development tasks (see
@ref{Using Ciao inside GNU emacs} for details on the capabilities of
@apl{ciao}/@apl{emacs} combination.

@include{EmacsDownload.lpdoc}

In order to allow @apl{emacs} to load the Ciao mode automatically when
editing and to access the documentation, open using @apl{emacs}
(@key{^X}@key{^F})) the file @file{~/.emacs} (or, perhaps,
@file{c:/.emacs}) and add the following line to it:

@begin{verbatim}
        (load-file "<CIAODIR>/DOTemacs.el")
@end{verbatim}

@noindent where you should put in place of @tt{<CIAODIR>} the
directory where you installed the Ciao distribution. After doing this
(and exiting and restarting @apl{emacs}) the following things should
work:

@begin{itemize}

@item When opening a Prolog file (with @tt{.pl} or @tt{.pls} ending)
      the code should appear highlighted according to syntax (e.g.,
      comments in red), and a @tt{Ciao/Prolog} menu should appear in
      the menu bar on top of the @apl{emacs} window.

@item Accessing the Ciao manuals from the @tt{Ciao/Prolog} menu (or
      typing @key{^H} @key{i}) should open a list of manuals in info
      format in which the Ciao manual(s) should appear.

@item Loading the file using the @tt{Ciao/Prolog} menu (or typing
      @key{^C} @key{l}) should start in another emacs buffer the Ciao
      toplevel shell and load the file. You should now be able to
      switch the the toplevel shell and make queries from within
      @apl{emacs}.

@item You can also, e.g., create executables from the @tt{Ciao/Prolog}
      menu. See @ref{Using Ciao inside GNU emacs} for the many other
      functionalities of this environment.

@end{itemize}

@subsection{Compiling the miscellaneous utilities under Windows}

The @file{etc} folder contains a number of utilities, documented in
the manual in @em{PART V - Miscellaneous Standalone Utilities}.  In
the Win32 distribution these utilities are not compiled by the
installation process.  You can create the executable for each of them
when needed by compiling the corresponding @tt{.pl} file.

@subsection{Server installation under Windows}

@cindex{installation, Windows clients}
@cindex{installation, Windows server}

If you would like to install Ciao on a server machine, used by several
clients, the following steps are recommended:

@begin{itemize}

@item Follow the standard installation procedure on the server.
      All the functionality specified in the previous sections should
      then be available on the server. 

@item Perform a @index{client installation} on each client, by running
      (e.g., double-click on it) the @file{client.bat} script. This
      should update the registry of each client.

@end{itemize}

@subsection{Uninstallation under Windows}

@comment{*** Should have an uninstall script also...}

To uninstall Ciao under Windows, simply delete the directory in which
you put the Ciao distribution.  If you also want to delete the
registry entries created by the Ciao installation (not strictly
needed) this must currently be done by hand.  The installation leaves
a list of these entries in the file @file{ciao.reg} to aid in this
task. Also, all the register entries contain the word @em{ciao}.
Thus, to delete all Ciao entries, run the application @apl{regedit}
(for example, by selecting @tt{Run} from the Windows @tt{Start} menu),
search (@key{^F}) for @em{ciao} in all registry entries (i.e., select
all of @tt{Keys}, @tt{Values}, and @tt{Data} in the @tt{Edit->Find}
dialog), and delete each matching key (click on the left window to
find the matching key for each entry found).

