\raggedbottom                     
\input texinfo @c -*- texinfo -*- 
@c ------------------------------------------------
@c WARNING: Do not edit this file (ciao.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.6/doc/common/ciao.pl
@c ------------------------------------------------
@c %**start of header     
@setfilename ciao           
@settitle The Ciao Prolog System              
@c @paragraphindent 0     
@setchapternewpage odd    
@c @footnotestyle separate
@defcodeindex li
@defcodeindex pd
@defcodeindex pr
@defcodeindex te
@defcodeindex de
@defindex co
@defcodeindex gl
@iftex                    
@c @smallbook             
@afourpaper                       
@tolerance 10000          
@hbadness 10000           
@end iftex                
@c %**end of header       
                          
                          
@ifinfo                   
 

 @strong{Ciao} is a 
@coindex public domain
@glindex public domain
@emph{public domain}, @emph{next generation} programming environment with a unique set of features: 




@itemize @bullet{} 


@item Ciao is a complete Prolog system, supporting @emph{ISO-Prolog}, but its novel modular design allows both @emph{restricting} and @emph{extending} the language. As a result, it allows working with @emph{fully declarative subsets} of Prolog and also to @emph{extend} these subsets (or ISO-Prolog) both syntactically and semantically. Most importantly, these restrictions and extensions can be activated separately on each program module so that several extensions can coexist in the same application for different modules. 


@item Ciao extensions currently include feature terms (records), higher-order (with predicate abstractions), functions, constraints, objects, persistence, several control rules (breadth-first search, iterative deepening, ...), concurrency (threads/engines), a good base for distributed execution (agents), and parallel execution. Libraries also support WWW programming, sockets, external interfaces (C, Java, TclTk, relational databases, etc.), etc. 


@item @strong{Ciao} offers support for @emph{programming in the large} with a robust module/object system, module-based separate/incremental compilation (automatically --no need for makefiles), an assertion language for declaring (@emph{optional}) program properties (including types and modes, but also determinacy, non-failure, cost, etc.), automatic static inference and static/dynamic checking of such assertions, etc. 


@item @strong{Ciao} also offers support for @emph{programming in the small} producing small executables (including only those builtins used by the program) and support for writing scripts in Prolog. 


@item The @strong{Ciao} programming environment includes a classical top-level and a rich emacs interface with an embeddable source-level debugger and a number of execution visualization tools. 


@item The @strong{Ciao} compiler (which can be run outside the top level shell) generates several forms of architecture-independent and stand-alone executables, which run with speed, efficiency and executable size which are very competive with other commercial and academic Prolog/CLP systems. Library modules can be compiled into compact bytecode or C source files, and linked statically, dynamically, or autoloaded. 


@item The novel modular design of Ciao enables, in addition to modular program development, effective global program analysis and static debugging and optimization via source to source program transformation. These tasks are performed by the @strong{Ciao preprocessor} (
@glindex ciaopp
@code{ciaopp}, distributed separately). 


@item The @strong{Ciao} programming environment also includes 
@glindex lpdoc
@code{lpdoc}, an automatic documentation generator for LP/CLP programs. It processes Prolog files adorned with (@strong{Ciao}) assertions and machine-readable comments and generates manuals in many formats including @code{postscript}, @code{pdf}, @code{texinfo}, @code{info}, @code{HTML}, @code{man}, etc. , as well as on-line help, ascii @code{README} files, entries for indices of manuals (@code{info}, WWW, ...), and maintains WWW distribution sites. 


@end itemize  

@strong{Ciao} is distributed under the 
@glindex GNU General Public License
GNU General Public License. 





                        

@sp 1
This documentation corresponds to version 1.6#3 (2000/8/23, 11:27:29 CEST).
                          
Copyright @copyright{} F. Bueno, D. Cabeza, M. Carro, M. Hermenegildo, P. L@'opez, and G. Puebla 

This document may be freely read, stored, reproduced, disseminated, translated or quoted by any means and on any medium provided the following conditions are met: 


@enumerate  


@item Every reader or user of this document acknowledges that is aware that no guarantee is given regarding its contents, on any account, and specifically concerning veracity, accuracy and fitness for any purpose. 


@item No modification is made other than cosmetic, change of representation format, translation, correction of obvious syntactic errors, or as permitted by the clauses below. 


@item Comments and other additions may be inserted, provided they clearly appear as such; translations or fragments must clearly refer to an original complete version, preferably one that is easily accessed whenever possible. 


@item Translations, comments and other additions or modifications must be dated and their author(s) must be identifiable (possibly via an alias). 


@item This licence is preserved and applies to the whole document with modifications and additions (except for brief quotes), independently of the representation format. 


@item Any reference to the "official version", "original version" or "how to obtain original versions" of the document is preserved verbatim. Any copyright notice in the document is preserved verbatim. Also, the title and author(s) of the original document should be clearly mentioned as such. 


@item In the case of translations, verbatim sentences mentioned in (6.) are preserved in the language of the original document accompanied by verbatim translations to the language of the traslated document. All translations state clearly that the author is not responsible for the translated work. This license is included, at least in the language in which it is referenced in the original version. 
 
@item Whatever the mode of storage, reproduction or dissemination, anyone able to access a digitized version of this document must be able to make a digitized copy in a format directly usable, and if possible editable, according to accepted, and publicly documented, public standards. 


@item Redistributing this document to a third party requires simultaneous redistribution of this licence, without modification, and in particular without any further condition or restriction, expressed or implied, related or not to this redistribution. In particular, in case of inclusion in a database or collection, the owner or the manager of the database or the collection renounces any right related to this inclusion and concerning the possible uses of the document after extraction from the database or the collection, whether alone or in relation with other documents. 


@end enumerate  

Any incompatibility of the above clauses with legal, contractual or judiciary decisions or constraints implies a corresponding limitation of reading, usage, or redistribution rights for this document, verbatim or modified. 

                        
@end ifinfo               
                          
@titlepage                
@title The Ciao Prolog System                 
@c @font@authorrm=cmbx10 scaled @magstep2 
@subtitle @emph{A Next Generation Logic Programming Environment}
@subtitle REFERENCE MANUAL
@subtitle @strong{The Ciao System Documentation Series}
@subtitle Technical Report CLIP 3/97.1
@subtitle @emph{Generated/Printed on:} @today 
@subtitle Version 1.6#3 (2000/8/23, 11:27:29 CEST)
@author F. Bueno
@author D. Cabeza
@author M. Carro
@author M. Hermenegildo
@author P. L@'opez
@author G. Puebla
@author @email{clip@@clip.dia.fi.upm.es}
@author @uref{http://www.clip.dia.fi.upm.es/}
@author The CLIP Group
@author School of Computer Science
@author Technical University of Madrid
@c Copyright page         
@page                     
@vskip 0pt plus 1filll    
Copyright @copyright{} F. Bueno, D. Cabeza, M. Carro, M. Hermenegildo, P. L@'opez, and G. Puebla 

This document may be freely read, stored, reproduced, disseminated, translated or quoted by any means and on any medium provided the following conditions are met: 


@enumerate  


@item Every reader or user of this document acknowledges that is aware that no guarantee is given regarding its contents, on any account, and specifically concerning veracity, accuracy and fitness for any purpose. 


@item No modification is made other than cosmetic, change of representation format, translation, correction of obvious syntactic errors, or as permitted by the clauses below. 


@item Comments and other additions may be inserted, provided they clearly appear as such; translations or fragments must clearly refer to an original complete version, preferably one that is easily accessed whenever possible. 


@item Translations, comments and other additions or modifications must be dated and their author(s) must be identifiable (possibly via an alias). 


@item This licence is preserved and applies to the whole document with modifications and additions (except for brief quotes), independently of the representation format. 


@item Any reference to the "official version", "original version" or "how to obtain original versions" of the document is preserved verbatim. Any copyright notice in the document is preserved verbatim. Also, the title and author(s) of the original document should be clearly mentioned as such. 


@item In the case of translations, verbatim sentences mentioned in (6.) are preserved in the language of the original document accompanied by verbatim translations to the language of the traslated document. All translations state clearly that the author is not responsible for the translated work. This license is included, at least in the language in which it is referenced in the original version. 
 
@item Whatever the mode of storage, reproduction or dissemination, anyone able to access a digitized version of this document must be able to make a digitized copy in a format directly usable, and if possible editable, according to accepted, and publicly documented, public standards. 


@item Redistributing this document to a third party requires simultaneous redistribution of this licence, without modification, and in particular without any further condition or restriction, expressed or implied, related or not to this redistribution. In particular, in case of inclusion in a database or collection, the owner or the manager of the database or the collection renounces any right related to this inclusion and concerning the possible uses of the document after extraction from the database or the collection, whether alone or in relation with other documents. 


@end enumerate  

Any incompatibility of the above clauses with legal, contractual or judiciary decisions or constraints implies a corresponding limitation of reading, usage, or redistribution rights for this document, verbatim or modified. 

                        
@end titlepage            
                          
@iftex                    
@pageno 1                
@end iftex                
                          
@ifinfo                   
@node Top, Summary, (dir), (dir)
@top The Ciao Prolog System                   

@end ifinfo               


@ifinfo

@sp 1
This documentation corresponds to version 1.6#3 (2000/8/23, 11:27:29 CEST).
@end ifinfo
@c Contents:
@c @summarycontents
@contents

@c (component)


@menu
* Summary::			
* Introduction::		
* Getting started on Un*x-like machines::  
* Getting started on Windows machines::	 
* *** PART I - The program development environment::  
* The stand-alone command-line compiler::  
* The interactive top-level shell::  
* The interactive debugger::	
* Predicates controlling the interactive debugger::  
* The script interpreter::	
* Customizing library paths and path aliases::	
* Using Ciao inside GNU emacs::	 
* *** PART II - The Ciao basic language (engine)::  
* The module system::		
* Directives for using code in other files::  
* Control constructs/predicates::  
* Basic builtin directives::	
* Basic data types and properties::  
* Extra-logical properties for typing::	 
* Basic term manipulation::	
* Comparing terms::		
* Basic predicates handling names of constants::  
* Arithmetic::			
* Basic file/stream handling::	
* Basic input/output::		
* Exception handling::		
* Changing system behaviour and various flags::	 
* Fast/concurrent update of facts::  
* Extending the syntax::	
* Message printing primitives::	 
* Attributed variables::	
* Gathering some basic internal info::	
* *** PART III - ISO-Prolog library (iso)::  
* ISO-Prolog package::		
* All solutions predicates::	
* Dynamic predicates::		
* Term input::			
* Term output::			
* Defining operators::		
* iso_byte_char (library)::	
* iso_misc (library)::		
* iso_incomplete (library)::	
* *** PART IV - Classic Prolog library (classic)::  
* Classic Prolog package::	
* Definite clause grammars::	
* Definite clause grammars (expansion)::  
* List processing::		
* Sorting lists::		
* Dictionaries::		
* String processing::		
* Formatted output::		
* DEC-10 Prolog file IO::	
* ttyout (library)::		
* dynmods (library)::		
* Quintus-like internal database::  
* runtime_ops (library)::	
* *** PART V - Annotated Prolog library (assertions)::	
* The Ciao assertion package::	
* Types and properties related to assertions::	
* Declaring regular types::	
* Properties which are native to analyzers::  
* Meta-properties::		
* ISO-Prolog modes::		
* Classical Prolog modes::	
* Run-time checking of assertions::  
* *** PART VI - Ciao Prolog library miscellanea::  
* Structured stream handling::	
* Operating system utilities::	
* Prolog system internal predicates::  
* Atom to Term Conversion::	
* ctrlcclean (library)::	
* errhandle (library)::		
* Fast Reading and Writing of Terms::  
* File name manipulation::	
* file_utils (library)::	
* terms (library)::		
* Printing status and error messages::	
* A simple pretty-printer for Ciao programs::  
* Pretty-printing assertions::	
* The Ciao library browser::	
* Code translation utilities::	
* Low-level concurrency/multithreading primitives::  
* conc_aggregates (library)::	
* The socket interface::	
* *** PART VII - Ciao Prolog extensions::  
* Pure Prolog package::		
* argnames (library)::		
* Independent and-parallel execution::	
* functions (library)::		
* Some Higher-Order Predicates::  
* global (library)::		
* Miscellaneous predicates::	
* Delaying predicates (freeze)::  
* Delaying predicates (when)::	
* Active modules (high-level distributed execution)::  
* Breadth-first execution::	
* Iterative-deepening execution::  
* Constraint programming over rationals::  
* Constraint programming over reals::  
* Object oriented programming::	 
* Declaring classes and interfaces::  
* Compile-time usage of objects::  
* Run time usage of objects::	
* *** PART VIII - Interfaces to other languages and systems::  
* foreign_interface (library)::	 
* Utilities for on-demand compilation of foreign files::  
* davinci (library)::		
* The Tcl/Tk interface::	
* The PiLLoW Web Programming Library::	
* HTML/XML/CGI programming::	
* HTTP conectivity::		
* PiLLoW types::		
* Persistent predicate database::  
* Using the persdb library::	
* SQL persistent database interface::  
* Prolog to SQL translator::	
* Low-level socket interface to SQL/ODBC databases::  
* Low-level Prolog to Java interface::	
* Low-level Java to Prolog interface::	
* Low-level Prolog to Java socket connection::	
* Calling emacs from Prolog::	
* linda (library)::		
* *** PART IX - Abstract data types::  
* counters (library)::		
* Identity lists::		
* Term manipulation::		
* Lists of numbers::		
* Pattern (regular expression) matching::  
* Graphs::			
* Unweighted graph-processing utilities::  
* wgraphs (library)::		
* Labeled graph-processing utilities::	
* queues (library)::		
* Random numbers::		
* sets (library)::		
* Variable name dictionaries::	
* *** PART X - Miscellaneous standalone utilities::  
* A Program to Help Cleaning your Directories ::  
* Printing the declarations and code in a file::  
* Printing the contents of a bytecode file::  
* Crossed-references of a program::  
* Gathering the dependent files for a file::  
* Finding differences between two Prolog files::  
* The Ciao lpmake scripting facility::	
* Find out which architecture we are running on::  
* *** PART XI - Contributed libraries::	 
* Programming MYCIN rules::	
* A Chart Library::		
* Low level Interface between Prolog and blt::	
* chartlib_errhandle (library)::  
* Color and Pattern Library::	
* genbar1 (library)::		
* genbar2 (library)::		
* genbar3 (library)::		
* genbar4 (library)::		
* gengraph1 (library)::		
* gengraph2 (library)::		
* genmultibar (library)::	
* table_widget1 (library)::	
* table_widget2 (library)::	
* table_widget3 (library)::	
* table_widget4 (library)::	
* test_format (library)::	
* *** PART XII - Appendices::	
* Installing Ciao from the source distribution::  
* Installing Ciao from a Win32 binary distribution::  
* Beyond installation::		
* References::			
* Library/Module Definition Index::  
* Predicate/Method Definition Index::  
* Property Definition Index::	
* Regular Type Definition Index::  
* Declaration Definition Index::  
* Concept Definition Index::	
* Global Index::		
@end menu

@node Summary, Introduction, Top, Top
@comment node-name, next,  previous,  up
@unnumbered Summary

 

 @strong{Ciao} is a 
@coindex public domain
@glindex public domain
@emph{public domain}, @emph{next generation} programming environment with a unique set of features: 




@itemize @bullet{} 


@item Ciao is a complete Prolog system, supporting @emph{ISO-Prolog}, but its novel modular design allows both @emph{restricting} and @emph{extending} the language. As a result, it allows working with @emph{fully declarative subsets} of Prolog and also to @emph{extend} these subsets (or ISO-Prolog) both syntactically and semantically. Most importantly, these restrictions and extensions can be activated separately on each program module so that several extensions can coexist in the same application for different modules. 


@item Ciao extensions currently include feature terms (records), higher-order (with predicate abstractions), functions, constraints, objects, persistence, several control rules (breadth-first search, iterative deepening, ...), concurrency (threads/engines), a good base for distributed execution (agents), and parallel execution. Libraries also support WWW programming, sockets, external interfaces (C, Java, TclTk, relational databases, etc.), etc. 


@item @strong{Ciao} offers support for @emph{programming in the large} with a robust module/object system, module-based separate/incremental compilation (automatically --no need for makefiles), an assertion language for declaring (@emph{optional}) program properties (including types and modes, but also determinacy, non-failure, cost, etc.), automatic static inference and static/dynamic checking of such assertions, etc. 


@item @strong{Ciao} also offers support for @emph{programming in the small} producing small executables (including only those builtins used by the program) and support for writing scripts in Prolog. 


@item The @strong{Ciao} programming environment includes a classical top-level and a rich emacs interface with an embeddable source-level debugger and a number of execution visualization tools. 


@item The @strong{Ciao} compiler (which can be run outside the top level shell) generates several forms of architecture-independent and stand-alone executables, which run with speed, efficiency and executable size which are very competive with other commercial and academic Prolog/CLP systems. Library modules can be compiled into compact bytecode or C source files, and linked statically, dynamically, or autoloaded. 


@item The novel modular design of Ciao enables, in addition to modular program development, effective global program analysis and static debugging and optimization via source to source program transformation. These tasks are performed by the @strong{Ciao preprocessor} (
@glindex ciaopp
@code{ciaopp}, distributed separately). 


@item The @strong{Ciao} programming environment also includes 
@glindex lpdoc
@code{lpdoc}, an automatic documentation generator for LP/CLP programs. It processes Prolog files adorned with (@strong{Ciao}) assertions and machine-readable comments and generates manuals in many formats including @code{postscript}, @code{pdf}, @code{texinfo}, @code{info}, @code{HTML}, @code{man}, etc. , as well as on-line help, ascii @code{README} files, entries for indices of manuals (@code{info}, WWW, ...), and maintains WWW distribution sites. 


@end itemize  

@strong{Ciao} is distributed under the 
@glindex GNU General Public License
GNU General Public License. 







@ifnotinfo

@sp 1
This documentation corresponds to version 1.6#3 (2000/8/23, 11:27:29 CEST).
@end ifnotinfo

@c (component)


@node Introduction, Getting started on Un*x-like machines, Summary, Top
@comment node-name, next,  previous,  up
@chapter Introduction

 



@menu
* About this manual::		
* About the Ciao Prolog development system::  
* ISO-Prolog compliance versus extensibility::	
* About the name of the System::  
* Referring to Ciao::		
* Syntax terminology and notational conventions::  
* A tour of the manual::	
* Acknowledgments::		
* Version/Change Log (ciao)::	
@end menu

@node About this manual, About the Ciao Prolog development system, Introduction, Introduction
@comment node-name, next,  previous,  up
@section About this manual 
@coindex status, this manual
@glindex status, this manual 

This is the @emph{Reference Manual} for the Ciao Prolog development system. It contains basic information on how to install Ciao Prolog and how to write, debug, and run Ciao Prolog programs from the command line, from inside GNU 
@glindex emacs
@code{emacs}, or form a windowing desktop. It also documents all the libraries available in the standard distribution. 

 This manual has been generated using the 
@coindex LPdoc
@glindex LPdoc
@emph{LPdoc} semi-automatic documentation generator for LP/CLP programs [HC97,Her00]. 
@glindex lpdoc
@code{lpdoc} processes Prolog files (and files in other CLP languages) adorned with assertions and machine-readable comments, which should be written in the Ciao 
@glindex assertion language
assertion language [PBH97,PBH00]. From these, it generates manuals in many formats including @code{postscript}, @code{pdf}, @code{texinfo}, @code{info}, @code{HTML}, @code{man}, etc., as well as on-line help, ascii @code{README} files, entries for indices of manuals (@code{info}, WWW, ...), and maintains WWW distribution sites. 

The big advantage of this approach is that it is easier to keep the on-line and printed documentation in sync with the source code [Knu84]. As a result, @emph{this manual changes continually as the source code is modified}. Because of this, the manual has a version number. You should make sure the manual you are reading, whether it be printed or on-line, coincides with the version of the software that you are using. 

The approach also implies that there is often a variability in the degree to which different libraries or system components are documented. Many libraries offer abundant documentation, but a few will offer little. The latter is due to the fact that we tend to include libraries in the manual if the code is found to be useful, even if they may still contain sparse documentation. This is because including a library in the manual will at the bare minimum provide formal information (such as the names of exported predicates and their arity, which other modules it loads, etc.), create index entries, pointers for on-line help in the electronic versions of the manuals, and command-line completion capabilities inside 
@glindex emacs
@code{emacs}. Again, the manual is being updated continuously as the different libraries (and machine-readable documentation in them) are improved. 



@node About the Ciao Prolog development system, ISO-Prolog compliance versus extensibility, About this manual, Introduction
@comment node-name, next,  previous,  up
@section About the Ciao Prolog development system 
@coindex ciao, global description
@glindex ciao, global description 

 The Ciao system is a full programming environment for developing programs in the Prolog language and in several other languages which are extensions and modifications of Prolog in several interesting and useful directions. The programming environment offers a number of tools such as the Ciao standalone compiler (@code{ciaoc}), a traditional-style top-level interactive shell (@code{ciaosh} or @code{ciao}), an interpreter of scripts written in Prolog (@code{ciao-shell}), a Prolog @code{emacs} mode (which greatly helps the task of developing programs with support for editing, debugging, version/change tracking, etc.), numerous libraries, a powerful program preprocessor (@code{ciaopp} [BdlBH99,BLGPH99,HBPLG99], which supports static debugging and optimization from program analysis via source to source program transformation), and an automatic documentation generator (@code{lpdoc}) [HC97,Her00]. A number of execution visualization tools [CGH93,CH00d,CH00c] are also available. 

This manual documents the first four of the tools mentioned above [see PART I - The program development environment], and the Ciao Prolog language and libraries. The @code{ciaopp} and @code{lpdoc} tools are documented in separate manuals. 
 
The Ciao language [see PART II - The Ciao basic language (engine)] has been designed from the ground up to be small, but to also allow extensions and restrictions in a modular way. The first objective allows producing small executables (including only those builtins used by the program), providing basic support for pure logic programming, and being able to write scripts in Prolog. The second one allows supporting standard ISO-Prolog [see PART III - ISO-Prolog library (iso)], as well as powerful extensions such as constraint logic programming, functional logic programming, and object-oriented logic programming [see PART VII - Ciao Prolog extensions], and restrictions such as working with pure horn clauses. 

The design of Ciao has also focused on allowing modular program development, as well as automatic program manipulation and optimization. Ciao includes a robust module system [CH00a], module-based automatic incremental compilation [CH99], and modular global program analysis, debugging and optimization [PH99], based on a rich assertion language [see PART V - Annotated Prolog library (assertions)] for declaring (optional) program properties (including types and modes), which can be checked either statically or dynamically. The program analysis, static debugging and optimization tasks related to these assertions are performed by the @code{ciaopp} preprocessor, as mentioned above. These assertions (together with special comment-style declarations) are also the ones used by the @code{lpdoc} autodocumenter to generate documentation for programs (the comment-style declarations are documented in the @code{lpdoc} manual). 

Ciao also includes several other features and utilities, such as support for several forms of executables, concurrency (threads), distributed and parallel execution, higher-order, WWW programming (PiLLoW [CHV96b]), interfaces to other languages like C and Java, database interfaces, graphical interfaces, etc., etc. [see PARTS VI to XI]. 





@node ISO-Prolog compliance versus extensibility, About the name of the System, About the Ciao Prolog development system, Introduction
@comment node-name, next,  previous,  up
@section ISO-Prolog compliance versus extensibility 
@coindex iso-prolog, compliance
@glindex iso-prolog, compliance 
@coindex extensibility
@glindex extensibility 

 One of the innovative features of Ciao is that it has been designed to subsume 
@coindex ISO-Prolog
@glindex ISO-Prolog
@emph{ISO-Prolog} (International Standard ISO/IEC 13211-1, PROLOG: Part 1--General Core [DEDC96]), while at the same time extending it in many important ways. The intention is to ensure that all ISO-compliant Prolog programs run correctly under Ciao. At the same time, the Ciao module system (see [PART II - The Ciao basic language (engine)] and [CH00a] for a discussion of the motivations behind the design) allows selectively avoiding the loading of most ISO-builtins (and changing some other ISO characteristics) when not needed, so that it is possible to work with purer subsets of Prolog and also to build small executables. Also, this module system makes it possible to develop extensions using these purer subsets (or even the full ISO-standard) as a starting point. Using these features, the Ciao distribution includes libraries which significantly extend the language both syntactically and semantically. 



Compliance with ISO is still not complete: currently there are some minor deviations in, e.g., the treatment of characters, the syntax, some of the arithmetic functions, and part of the error system. On the other hand, Ciao has been reported by independent sources (members of the standarization body) to be one of the most conforming Prologs at the moment of this writing, and the first one to be able to compile all the standard-conforming test cases. Also, Ciao does not offer a strictly conforming mode which rejects uses of non-ISO features. However, in order to aid programmers who wish to write standard compliant programs, library predicates that correspond to those in the ISO-Prolog standard are marked specially in the manuals, and differences between the Ciao and the prescribed ISO-Prolog behaviours, if any, are commented appropriately. 

The intention of the Ciao developers is to progressively complete the compliance of Ciao with the published parts of the ISO standard as well as with other reasonable extensions of the standard may be published in the future. However, since one of the design objectives of Ciao is to address some shortcomings of previous implementations of Prolog and logic programming in general, we also hope that some of the better ideas present in the system will make it eventually into the standards. 





@node About the name of the System, Referring to Ciao, ISO-Prolog compliance versus extensibility, Introduction
@comment node-name, next,  previous,  up
@section About the name of the System 
@coindex why the name Ciao
@glindex why the name Ciao 
@coindex Ciao, why this name
@glindex Ciao, why this name 

 One of the innovative features of Ciao is that it has been designed to subsume 
@coindex ISO-Prolog
@glindex ISO-Prolog
@emph{ISO-Prolog} (International Standard ISO/IEC 13211-1, PROLOG: Part 1--General Core [DEDC96]), while at the same time extending it in many important ways. The intention is to ensure that all ISO-compliant Prolog programs run correctly under Ciao. At the same time, the Ciao module system (see [PART II - The Ciao basic language (engine)] and [CH00a] for a discussion of the motivations behind the design) allows selectively avoiding the loading of most ISO-builtins (and changing some other ISO characteristics) when not needed, so that it is possible to work with purer subsets of Prolog and also to build small executables. Also, this module system makes it possible to develop extensions using these purer subsets (or even the full ISO-standard) as a starting point. Using these features, the Ciao distribution includes libraries which significantly extend the language both syntactically and semantically. 



Compliance with ISO is still not complete: currently there are some minor deviations in, e.g., the treatment of characters, the syntax, some of the arithmetic functions, and part of the error system. On the other hand, Ciao has been reported by independent sources (members of the standarization body) to be one of the most conforming Prologs at the moment of this writing, and the first one to be able to compile all the standard-conforming test cases. Also, Ciao does not offer a strictly conforming mode which rejects uses of non-ISO features. However, in order to aid programmers who wish to write standard compliant programs, library predicates that correspond to those in the ISO-Prolog standard are marked specially in the manuals, and differences between the Ciao and the prescribed ISO-Prolog behaviours, if any, are commented appropriately. 

The intention of the Ciao developers is to progressively complete the compliance of Ciao with the published parts of the ISO standard as well as with other reasonable extensions of the standard may be published in the future. However, since one of the design objectives of Ciao is to address some shortcomings of previous implementations of Prolog and logic programming in general, we also hope that some of the better ideas present in the system will make it eventually into the standards. 





@node Referring to Ciao, Syntax terminology and notational conventions, About the name of the System, Introduction
@comment node-name, next,  previous,  up
@section Referring to Ciao 
@coindex referring to Ciao
@glindex referring to Ciao 
@coindex references, to Ciao
@glindex references, to Ciao 

If you find Ciao or any of its components useful, we would appreciate very much if you added a reference to this manual (i.e., the Ciao reference manual [BCC97]) in your work. The following is an appropriate BiBTeX entry with the relevant data: 


@noindent

@smallexample 
@@techreport@{ciao-reference-manual-tr,
  author =       @{F. Bueno and D. Cabeza and M. Carro and M. Hermenegildo 
                  and P. L\'@{o@}pez-Garc\'@{\i@}a and G. Puebla@},
  title =        @{The Ciao Prolog system. Reference manual@},
  institution =  @{School of Computer Science, 
                  Technical University of Madrid (UPM)@},
  year =         1997,
  month =        @{August@},
  number =       @{@{CLIP@}3/97.1@},
  note =         @{Available from http://www.clip.dia.fi.upm.es/@}
@}

@end smallexample  
 

@node Syntax terminology and notational conventions, A tour of the manual, Referring to Ciao, Introduction
@comment node-name, next,  previous,  up
@section Syntax terminology and notational conventions 
@coindex notation
@glindex notation 

 This manual is not meant to be an introduction to the Prolog language. The reader is referred to standard textbooks on Prolog such as [SS86,CM81,Apt97,Hog84]. However, we would like to refresh herein some concepts for the sake of establishing terminology. Also, we will briefly introduce a few of the extensions that Ciao brings to the Prolog language. 



@menu
* Predicates and their components::  
* Characters and character strings::  
* Predicate specs::		
* Modes::			
* Properties and types::	
* Declarations::		
* Operators::			
@end menu

@node Predicates and their components, Characters and character strings, Syntax terminology and notational conventions, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Predicates and their components 

In Prolog, procedures are called @emph{predicates} and predicate calls @emph{literals}. They all have the classical syntax of procedures (and of logic predications and of mathematical functions). Predicates are identified in this manual by a keyword 'PREDICATE' at the right margin of the place where they are documented. 

Prolog instructions are expressions made up of control constructs (@ref{Control constructs/predicates}) and literals, and are called @emph{goals}. Literals are also (atomic) goals. 

A predicate definition is a sequence of clauses. A clause has the form ``@code{H :- B.}'' (ending in '@code{.}'), where @code{H} is syntactically the same as a literal and is called the clause @emph{head}, and @code{B} is a goal and is called the clause @emph{body}. A clause with no body is written ``@code{H.}'' and is called a @emph{fact}. Clauses with body are also called @emph{rules}. A Prolog program is a sequence of predicate definitions. 



@node Characters and character strings, Predicate specs, Predicates and their components, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Characters and character strings 

We adopt the following convention for delineating character strings in the text of this manual: when a string is being used as a Prolog atom it is written thus: @code{user} or @code{'user'}; but in all other circumstances double quotes are used (as in @code{"hello"}). 


@coindex keyboard
@glindex keyboard 
When referring to keyboard characters, printing characters are written thus: @key{a}, while control characters are written like this: @key{^A}. Thus @key{^C} is the character you get by holding down the @key{CTL} key while you type @key{c}. Finally, the special control characters carriage-return, line-feed and space are often abbreviated to @key{RET}, @key{LFD} and @key{SPC} respectively. 



@node Predicate specs, Modes, Characters and character strings, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Predicate specs 

Predicates in Prolog are distinguished by their name @emph{and} their arity. We will call @code{name/arity} a 
@glindex @emph{predicate spec}
@emph{predicate spec}. The notation @code{name/arity} is therefore used when it is necessary to refer to a predicate unambiguously. For example, @code{concatenate/3} specifies the predicate which is named ``concatenate'' and which takes 3 arguments. 

(Note that different predicates may have the same name and different arity. Conversely, of course, they may have the same arity and different name.) 



@node Modes, Properties and types, Predicate specs, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Modes 

When documenting a predicate, we will often describe its usage with a 
@glindex mode spec
mode spec which has the form @code{name(Arg1, ..., ArgN)} where each @code{Arg} may be preceded by a 
@glindex @emph{mode}
@emph{mode}. A mode is a functor which is wrapped around an argument (or prepended if defined as an operator). Such a mode allows documenting in a compact way the 
@glindex instantiation state
instantiation state on call and exit of the argument to which it is applied. The set of modes which can be used in Ciao is not fixed. Instead, arbitrary modes can be defined by in programs using the 
@glindex modedef/1
@code{modedef/1} declarations of the Ciao 
@glindex @emph{assertion language}
@emph{assertion language} (@ref{The Ciao assertion package} for details). Modes are identified in this manual by a keyword 'MODE'. 

Herein, we will use the set of modes defined in the Ciao 
@glindex isomodes
@code{isomodes} library, which is essentially the same as those used in the 
@glindex ISO-Prolog
ISO-Prolog standard (@ref{ISO-Prolog modes}). 



@node Properties and types, Declarations, Modes, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Properties and types 

Although Ciao Prolog is @emph{not} a typed language, it allows writing (and using) types, as well as (more general) properties. There may be properties of the states and of the computation. Properties of the states allow expressing characteristics of the program variables during computation, like in @code{sorted(X)} (@code{X} is a sorted list). Properties of the computation allow expressing characteristics of a whole computation, like in @code{is_det(p(X,Y))} (such calls yield only one solution). Properties are just a special form of predicates (@ref{Declaring regular types}) and are identified in this manual by a keyword 'PROPERTY'. 

Ciao types are @emph{regular types} (@ref{Declaring regular types}), which are a special form of properties themselves. They are identified in this manual by a keyword 'REGTYPE'. 



@node Declarations, Operators, Properties and types, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Declarations 

A @emph{declaration} provides information to one of the Ciao environment tools. Declarations are interspersed in the code of a program. Usually the target tool is either the compiler (telling it that a predicate is dynamic, or a meta-predicate, etc.), the preprocessor (which understands declarations of properties and types, assertions, etc.), or the autodocumenter (which understands the previous declarations and also certain ``comment'' declarations). 

A declaration has the form @code{:- D.} where @code{D} is syntactically the same as a literal. Declarations are identified in this manual by a keyword 'DECLARATION'. 

In Ciao users can define (and document) new declarations. New declarations are typically useful when defining extensions to the language (which in Ciao are called packages). Such extensions are often implemented as 
@glindex expansions
expansions (see @ref{Extending the syntax}). There are many such extensions in Ciao. The 
@glindex functions
@code{functions} library, which provides fuctional syntax, is an example. The fact that in Ciao expansions are local to modules (as operators, see below) makes it possible to use a certain language extension in one module without affecting other modules. 



@node Operators,  , Declarations, Syntax terminology and notational conventions
@comment node-name, next,  previous,  up
@subsection Operators 

An @emph{operator} is a functor (or predicate name) which has been declared as such, thus allowing its use in a prefix, infix, or suffix fashion, instead of the standard procedure-like fashion. E.g., declaring @code{+} as an infix operator allows writing @code{X+Y} instead of @code{'+'(X,Y)} (which may still, of course, be written). 

@emph{Operators in Ciao are local to the module/file where they are declared}. However, some operators are standard and allowed in every program (see @ref{Defining operators}). This manual documents the operator declarations in each (library) module where they are included. As with expansions, the fact that in Ciao operators are local to modules makes it possible to use a certain language extension in one module without affecting other modules. 



@node A tour of the manual, Acknowledgments, Syntax terminology and notational conventions, Introduction
@comment node-name, next,  previous,  up
@section A tour of the manual 
@coindex manual, tour
@glindex manual, tour 
@coindex tour, of the manual
@glindex tour, of the manual 

The rest of the introductory chapters after this one provide a first ``getting started'' introduction for newcomers to the Ciao system. The rest of the chapters in the manual are organized into a sequence of major parts as follows: 



@menu
* PART I - The program development environment::  
* PART II - The Ciao basic language (engine)::	
* PART III - ISO-Prolog library (iso)::	 
* PART IV - Classic Prolog library (classic)::	
* PART V - Annotated Prolog library (assertions)::  
* PART VI - Ciao Prolog library miscellanea::  
* PART VII - Ciao Prolog extensions::  
* PART VIII - Interfaces to other languages and systems::  
* PART IX - Abstract data types::  
* PART X - Miscellaneous standalone utilities::	 
* PART XI - Contributed libraries::  
* PART XII - Appendices::	
@end menu

@node PART I - The program development environment, PART II - The Ciao basic language (engine), A tour of the manual, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART I - The program development environment 

This part documents the components of the basic Ciao program development environment. They include: 


@table @asis 


@item ciaoc: 
the standalone compiler, which creates executables without having to enter the interactive top-level. 


@item ciaosh: 
(also invoked simply as @code{ciao}) is an interactive top-level shell, similar to the one found on most Prolog systems (with some enhancements). 


@item debugger.pl: 
a Byrd box-type debugger, similar to the one found on most Prolog systems (also with some enhancements, such as source-level debugging). This is not a standalone application, but is rather included in 
@glindex ciaosh
@code{ciaosh}, as is done in other Prolog systems. However, it is also @emph{embeddable}, in the sense that it can be included as a library in executables, and activated dynamically and conditionally while such executables are running. 


@item ciao-shell: 
an interpreter/compiler for @emph{Prolog scripts} (i.e., files containing Prolog code which run without needing explicit compilation). 


@item ciao.el: 
a @emph{complete program development enviroment}, based 
@coindex emacs interface
@glindex emacs interface 
@coindex programming environment
@glindex programming environment 
on 
@glindex GNU emacs
GNU emacs, with syntax coloring, direct access to all the tools described above (as well as the preprocessor and the documenter), atomatic location of errors, source-level debugging, context-sensitive access to on-line help/manuals, etc. The use of this environment is @emph{very highly recommended}! 


@end table  

The Ciao program development environment also includes 
@glindex ciaopp
@code{ciaopp}, the 
@glindex preprocessor
preprocessor, and 
@glindex lpdoc
@code{lpdoc}, the 
@glindex documentation generator
documentation generator, which are described in separate manuals. 





@node PART II - The Ciao basic language (engine), PART III - ISO-Prolog library (iso), PART I - The program development environment, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART II - The Ciao basic language (engine) 

 This part documents the 
@coindex Ciao basic builtins
@glindex Ciao basic builtins
@emph{Ciao basic builtins}. These predefined predicates and declarations are available in every program, unless the 
@glindex pure
@code{pure} package is used (by using a @code{:- module(_,_,[pure]).} declaration or @code{:- use_package(pure).}). These predicates are contained in the @code{engine} directory 
@coindex engine directory
@glindex engine directory 
within the @code{lib} library. 
@coindex lib library
@glindex lib library 
The rest of the library predicates, including the packages that provide most of the 
@glindex ISO-Prolog builtins
ISO-Prolog builtins, are documented in subsequent parts. 





@node PART III - ISO-Prolog library (iso), PART IV - Classic Prolog library (classic), PART II - The Ciao basic language (engine), A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART III - ISO-Prolog library (iso) 

 This part documents the 
@coindex iso
@glindex iso
@emph{iso} package which provides to Ciao programs (most of) the ISO-Prolog functionality , including the 
@coindex ISO-Prolog builtins
@glindex ISO-Prolog builtins
@emph{ISO-Prolog builtins} not covered by the basic library. All these predicates are loaded by default in user files and in modules which use standard module declarations such as: 

@code{:- module(@emph{modulename},@emph{exports}).} 

which are equivalent to: 

@code{:- module(@emph{modulename},@emph{exports},[iso]).} 

or 

@code{:- module(@emph{modulename},@emph{exports}).} 

@code{:- use_package([iso]).} 

If you do not want these ISO builtins loaded for a given file (in order to make the executable smaller) you can ask for this explicitly using: 

@code{:- module(@emph{modulename},@emph{exports},[]).} 

or 

@code{:- module(@emph{modulename},@emph{exports}).} 

@code{:- use_package([]).} 

See the description of the declarations for declaring modules and using other modules, and the documentation of the 
@glindex iso
@code{iso} library for details. 



@node PART IV - Classic Prolog library (classic), PART V - Annotated Prolog library (assertions), PART III - ISO-Prolog library (iso), A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART IV - Classic Prolog library (classic) 

This part documents some Ciao libraries which provide additional predicates and functionalities that, despite not being in the ISO standard, are present in many popular Prolog systems. This includes definite clause grammars (DCGs), ``Quintus-style'' internal database, list processing predicates, dictionaries, string processing, DEC-10 Prolog-style input/output, formatted output, dynamic loading of modules, activation of operators at run-time, etc. 



@node PART V - Annotated Prolog library (assertions), PART VI - Ciao Prolog library miscellanea, PART IV - Classic Prolog library (classic), A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART V - Annotated Prolog library (assertions) 

Ciao allows @emph{annotating} the program code with @emph{assertions}. Such assertions include 
@glindex type
type and 
@glindex instantiation mode
instantiation mode declarations, but also more general properties as well as comments in the style of the @emph{literate programming}. These assertions document predicates (and modules and whole applications) and can be used by the Ciao preprocessor/compiler while debugging and optimizing the program or library, and by the Ciao documenter to build the program or library reference manual. 



@node PART VI - Ciao Prolog library miscellanea, PART VII - Ciao Prolog extensions, PART V - Annotated Prolog library (assertions), A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART VI - Ciao Prolog library miscellanea 

This part documents several Ciao libraries which provide different useful additional functionalities. Such functionalities include performing operating system calls, gathering statistics from the Prolog engine, file and file name manipulation, error and exception handling, fast reading and writing of terms (
@glindex marshalling
marshalling and 
@glindex unmarshalling
unmarshalling), file locking, program reporting messages, pretty-printing programs and assertions, a browser of the system libraries, additional expansion utilities, concurrent aggregates, graph visualization, etc. 





@node PART VII - Ciao Prolog extensions, PART VIII - Interfaces to other languages and systems, PART VI - Ciao Prolog library miscellanea, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART VII - Ciao Prolog extensions 

The libraries documented in this part extend the Ciao language in several different ways. The extensions include: 
@itemize @bullet{} 
@item 
@glindex pure Prolog
pure Prolog programming (well, this can be viewed more as a restriction than an extension); 
@item 
@glindex feature terms
feature terms or 
@coindex records
@glindex records
@emph{records} (i.e., structures with names for each field); 
@item 
@glindex parallel programming
parallel programming (e.g., &-Prolog style); 
@item 
@glindex functional syntax
functional syntax; 
@item 
@glindex higher-order library
higher-order library; 
@item 
@glindex global variables
global variables; 
@item @code{setarg} and @code{undo}; 
@item 
@glindex delaying predicate execution
delaying predicate execution; 
@item 
@glindex active modules
active modules; 
@item 
@glindex breadth-first execution
breadth-first execution; 
@item 
@glindex iterative deepening-based execution
iterative deepening-based execution; 
@item 
@glindex constraint logic programming
constraint logic programming; 
@item 
@glindex object oriented programming
object oriented programming. 
@end itemize  




@node PART VIII - Interfaces to other languages and systems, PART IX - Abstract data types, PART VII - Ciao Prolog extensions, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART VIII - Interfaces to other languages and systems 

The following interfaces to/from Ciao Prolog are documented in this part: 
@itemize @bullet{} 
@item 
@glindex External interface
External interface (e.g., to C). 
@item 
@glindex Socket interface
Socket interface. 
@item 
@glindex Tcl/tk interface
Tcl/tk interface. 
@item 
@glindex Web interface
Web interface (http, html, xml, etc.); 
@item 
@glindex Persistent predicate
Persistent predicate databases (interface between the Prolog internal database and the external file system). 
@item 
@glindex SQL-like database interface
SQL-like database interface (interface between the Prolog internal database and external SQL/ODBC systems). 
@item 
@glindex Java interface
Java interface. 
@item 
@glindex Calling emacs
Calling emacs from Prolog. 
@end itemize  




@node PART IX - Abstract data types, PART X - Miscellaneous standalone utilities, PART VIII - Interfaces to other languages and systems, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART IX - Abstract data types 

This part includes libraries which implement some generic data structures (abstract data types) that are used frequently in programs or in the Ciao system itself. 



@node PART X - Miscellaneous standalone utilities, PART XI - Contributed libraries, PART IX - Abstract data types, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART X - Miscellaneous standalone utilities 

This is the documentation for a set of miscellaneous 
@glindex standalone utilities
standalone utilities contained in the @code{etc} directory of the Ciao distribution. 





@node PART XI - Contributed libraries, PART XII - Appendices, PART X - Miscellaneous standalone utilities, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART XI - Contributed libraries 


@coindex contributed libraries
@glindex contributed libraries 
This part includes a number of libraries which have contributed by users of the Ciao system. Over time, some of these libraries are moved to the main library directories of the system. 
 

@node PART XII - Appendices,  , PART XI - Contributed libraries, A tour of the manual
@comment node-name, next,  previous,  up
@subsection PART XII - Appendices 

These appendices describe the 
@glindex installation
installation of the Ciao environment on different systems and some other issues such as 
@glindex reporting bugs
reporting bugs, signing up on the Ciao user's 
@glindex mailing list
mailing list, 
@glindex downloading new versions
downloading new versions, 
@glindex limitations
limitations, etc. 


 

@node Acknowledgments, Version/Change Log (ciao), A tour of the manual, Introduction
@comment node-name, next,  previous,  up
@section Acknowledgments 
@coindex acknowledgments
@glindex acknowledgments 

 The Ciao system is a joint effort on one side of the present (
@coindex Francisco Bueno
@glindex Francisco Bueno
@emph{Francisco Bueno}, 
@coindex Daniel Cabeza
@glindex Daniel Cabeza
@emph{Daniel Cabeza}, 
@coindex Manuel Carro
@glindex Manuel Carro
@emph{Manuel Carro}, 
@coindex Manuel Hermenegildo
@glindex Manuel Hermenegildo
@emph{Manuel Hermenegildo}, 
@coindex Pedro Lopez
@glindex Pedro Lopez 
@emph{Pedro L@'opez}, and 
@coindex German Puebla
@glindex German Puebla 
@emph{Germ@'an Puebla}) and past (
@coindex Maria Jose Garcia de la Banda
@glindex Maria Jose Garcia de la Banda 
@emph{Mar@'{@dotless{i}}a Jos@'e Garc@'{@dotless{i}}a de la Banda}) members of the 
@coindex CLIP group
@glindex CLIP group
@emph{CLIP group} at the School of Computer Science, 
@coindex Technical University of Madrid
@glindex Technical University of Madrid
@emph{Technical University of Madrid} , and on the other side of several colleagues and students that have collaborated with us over the years of its development. The following is an (inevitably incomplete) list of those that have contributed to the development of Ciao: 


@itemize @bullet{} 


@item The 
@coindex Ciao engine
@glindex Ciao engine
@emph{Ciao engine}, compiler, libraries and documentation, although completely rewritten at this point, have their origins in the 
@coindex &-Prolog
@glindex &-Prolog
@emph{&-Prolog} 
@coindex parallel Prolog
@glindex parallel Prolog
@emph{parallel Prolog} engine and 
@coindex parallelizing compiler
@glindex parallelizing compiler
@emph{parallelizing compiler}, developed by 
@coindex Manuel Hermenegildo
@glindex Manuel Hermenegildo
@emph{Manuel Hermenegildo}, 
@coindex Kevin Greene
@glindex Kevin Greene
@emph{Kevin Greene}, 
@coindex Kalyan Muthukumar
@glindex Kalyan Muthukumar
@emph{Kalyan Muthukumar}, and 
@coindex Roger Nasr
@glindex Roger Nasr
@emph{Roger Nasr} at 
@coindex MCC
@glindex MCC
@emph{MCC} and later at 
@coindex UPM
@glindex UPM
@emph{UPM}. The &-Prolog engine and low-level (
@coindex WAM
@glindex WAM
@emph{WAM}) compilers in turn were derived from early versions (0.5 to 0.7) of 
@coindex SICStus Prolog
@glindex SICStus Prolog
@emph{SICStus Prolog} [Car88]. SICStus is an excellent, high performance Prolog system, developed by 
@coindex Mats Carlsson
@glindex Mats Carlsson
@emph{Mats Carlsson} and colleagues at the 
@coindex Swedish Institute of Computer Science
@glindex Swedish Institute of Computer Science
@emph{Swedish Institute of Computer Science} (
@coindex SICS
@glindex SICS
@emph{SICS}), that every user of Prolog should check out [Swe95,AAF91]. Very special thanks are due to 
@coindex Seif Haridi
@glindex Seif Haridi
@emph{Seif Haridi}, 
@coindex Mats Carlsson
@glindex Mats Carlsson
@emph{Mats Carlsson}, and colleagues at SICS for allowing the SICStus 0.5-0.7 components in 
@coindex &-Prolog
@glindex &-Prolog
@emph{&-Prolog} and its successor, Ciao, to be distributed freely. Parts of the parallel abstract machine have been developed in collaboration with 
@coindex Gopal Gupta
@glindex Gopal Gupta
@emph{Gopal Gupta} and 
@coindex Enrico Pontelli
@glindex Enrico Pontelli
@emph{Enrico Pontelli} (
@coindex New Mexico State University
@glindex New Mexico State University
@emph{New Mexico State University}). 


@item Many aspects of the analyzers in the 
@coindex Ciao preprocessor
@glindex Ciao preprocessor
@emph{Ciao preprocessor} (
@glindex ciaopp
@code{ciaopp}) have been developed in collaboration with 
@coindex Peter Stuckey
@glindex Peter Stuckey
@emph{Peter Stuckey} (
@coindex Melbourne U.
@glindex Melbourne U.
@emph{Melbourne U.}), 
@coindex Kim Marriott
@glindex Kim Marriott
@emph{Kim Marriott} (
@coindex Monash U.
@glindex Monash U.
@emph{Monash U.}), 
@coindex Maurice Bruynooghe
@glindex Maurice Bruynooghe
@emph{Maurice Bruynooghe}, 
@coindex Gerda Janssens
@glindex Gerda Janssens
@emph{Gerda Janssens}, 
@coindex Anne Mulkers
@glindex Anne Mulkers
@emph{Anne Mulkers}, and 
@coindex Veroniek Dumortier
@glindex Veroniek Dumortier
@emph{Veroniek Dumortier} (
@coindex K.U. Leuven
@glindex K.U. Leuven
@emph{K.U. Leuven}), and 
@coindex Saumya Debray
@glindex Saumya Debray
@emph{Saumya Debray} (
@coindex U. of Arizona
@glindex U. of Arizona
@emph{U. of Arizona}). The assertion system has been developed in collaboration with 
@coindex Jan Maluzynski
@glindex Jan Maluzynski
@emph{Jan Maluzynski} and 
@coindex Wlodek Drabent
@glindex Wlodek Drabent
@emph{Wlodek Drabent} (
@coindex Linkoping U.
@glindex Linkoping U.
@emph{Linkoping U.}) and 
@coindex Pierre Deransart
@glindex Pierre Deransart
@emph{Pierre Deransart} (
@coindex INRIA
@glindex INRIA
@emph{INRIA}). The core of type inference system derives from the system developed by 
@coindex John Gallagher
@glindex John Gallagher
@emph{John Gallagher} [GdW94] (
@coindex Bristol University
@glindex Bristol University
@emph{Bristol University}) and later adapted to CLP(FD) by 
@coindex Pawel Pietrzak
@glindex Pawel Pietrzak
@emph{Pawel Pietrzak} (
@coindex Linkoping U.
@glindex Linkoping U.
@emph{Linkoping U.}). 


@item The constraint solvers for @emph{R} and @emph{Q} are derived from the code developed by 
@coindex Christian Holzbauer
@glindex Christian Holzbauer
@emph{Christian Holzbauer} (
@coindex Austrian Research Institute for AI
@glindex Austrian Research Institute for AI
@emph{Austrian Research Institute for AI} in Vienna) [Hol94,Hol90,Hol92]. 


@item The Ciao manuals include material from the 
@coindex DECsystem-10 Prolog User's Manual
@glindex DECsystem-10 Prolog User's Manual
@emph{DECsystem-10 Prolog User's Manual} by 
@coindex D.L. Bowen
@glindex D.L. Bowen
@emph{D.L. Bowen} (editor), 
@coindex L. Byrd
@glindex L. Byrd
@emph{L. Byrd}, 
@coindex F.C.N. Pereira
@glindex F.C.N. Pereira
@emph{F.C.N. Pereira}, 
@coindex L.M. Pereira
@glindex L.M. Pereira
@emph{L.M. Pereira}, and 
@coindex D.H.D. Warren
@glindex D.H.D. Warren
@emph{D.H.D. Warren} [BBP81]. They also contain material from the SICStus Prolog user manuals for SICStus versions 0.5-0.7 by 
@coindex Mats Carlsson
@glindex Mats Carlsson
@emph{Mats Carlsson} and 
@coindex Johan Widen
@glindex Johan Widen
@emph{Johan Widen} [Car88], as well as from the Prolog ISO standard documentation [DEDC96]. 


@item Ciao is designed to be highly extendable in a modular way. Many of the libraries distributed with Ciao have been developed by other people all of which is impossible to mention here. Individual author names are included in the documentation of each library and appear in the indices. 


@item The development of the Ciao system has been supported in part by ESPRIT projects 
@glindex ACCLAIM
ACCLAIM, 
@glindex PARFORCE
PARFORCE, and 
@glindex DISCIPL
DISCIPL, and by 
@glindex CICYT/MEC
CICYT/MEC projects 
@glindex ELLA
ELLA and 
@glindex EDIPIA
EDIPIA. 


@end itemize  

If you feel you have contributed to the development of Ciao and we have forgotten adding your name to this list or the acknowledgements given in the different chapters, please let us know and we will be glad to give proper credits. 







@node Version/Change Log (ciao),  , Acknowledgments, Introduction
@comment node-name, next,  previous,  up
@section Version/Change Log (@code{ciao})

@table @strong

@item Version 1.6 (2000/7/12, 18:55:50 CEST)
 
@itemize @bullet{} 
@item Source-level debugger in emacs, breakpts. 
@item Emacs environment improved, added menus for Ciaopp and LPDoc. 
@item Debugger embeddable in executables. 
@item Stand-alone executables available for UNIX-like operating systems. 
@item Many improvements to emacs interface. 
@item Menu-based interface to autodocumenter. 
@item Threads now available in Win32. 
@item Many improvements to threads. 
@item Modular clp(R) / clp(Q). 
@item Libraries implementing And-fair breadth-first and iterative deepening included. 
@item Improved syntax for predicate abstractions. 
@item Library of higher-order list predicates. 
@item Better code expansion facilities (macros). 
@item New delay predicates (when/2). 
@item Compressed object code/executables on demand. 
@item The size of atoms is now unbound. 
@item Fast creation of new unique atoms. 
@item Number of clauses/predicates essentially unbound. 
@item Delayed goals with freeze restored. 
@item Faster compilation and startup. 
@item Much faster fast write/read. 
@item Improved documentation. 
@item Other new libraries. 
@item Improved installation/deinstallation on all platforms. 
@item Many improvements to autodocumenter. 
@item Many bug fixes in libraries and engine. 
@end itemize  


@item Version 1.5 (1999/11/29, 16:16:23 MEST)
Development version following even 1.4 distribution.

@item Version 1.4 (1999/11/27, 19:0:0 MEST)
 
@itemize @bullet{} 
@item Documentation greatly improved. 
@item Automatic (re)compilation of foreign files. 
@item Concurrency primitives revamped; restored &Prolog-like multiengine capability. 
@item Windows installation and overall operation greatly improved. 
@item New version of O'Ciao class/object library, with improved performance. 
@item Added support for "predicate abstractions" in call/N. 
@item Implemented reexportation through reexport declarations. 
@item Changed precedence of importations, last one is now higher. 
@item Modules can now implicitly export all predicates. 
@item Many minor bugs fixed. 
@end itemize 


@item Version 1.3 (1999/6/16, 17:5:58 MEST)
Development version following even 1.2 distribution.

@item Version 1.2 (1999/6/14, 16:54:55 MEST)
 Temporary version distributed locally for extensive testing of reexportation and other 1.3 features.

@item Version 1.1 (1999/6/4, 13:30:37 MEST)
Development version following even 1.0 distribution.

@item Version 1.0 (1999/6/4, 13:27:42 MEST)
 
@itemize @bullet{} 
@item Added Tcl/Tk interface library to distribution. 
@item Added push_prolog_flag/2 and pop_prolog_flag/1 declarations/builtins. 
@item Filename processing in Windows improved. 
@item Added redefining/1 declaration to avoid redefining warnings. 
@item Changed syntax/1 declaration to use_package/1. 
@item Added add_clause_trans/1 declaration. 
@item Changed format of .itf files such that a '+' stands for all the standard imports from engine, which are included in c_itf source internally (from engine(builtin_exports)). Further changes in itf data handling, so that once an .itf file is read in a session, the file is cached and next time it is needed no access to the file system is required. 
@item Many bugs fixed. 
@end itemize 


@item Version 0.9 (1999/3/10, 17:3:49 CET)
 
@itemize @bullet{} 
@item Test version before 1.0 release. Many bugs fixed. 
@end itemize 


@item Version 0.8 (1998/10/27, 13:12:36 MET)
 
@itemize @bullet{} 
@item Changed compiler so that only one pass is done, eliminated @code{.dep} files. 
@item New concurrency primitives. 
@item Changed assertion comment operator to #. 
@item Implemented high-order with call/N. 
@item Integrated SQL-interface to external databases with persistent predicate concept. 
@item First implementation of object oriented programming package. 
@item Some bugs fixed. 
@end itemize 


@item Version 0.7 (1998/9/15, 12:12:33 MEST)
 
@itemize @bullet{} 
@item Improved debugger capabilities and made easier to use. 
@item Simplified assertion format. 
@item New arithmetic functions added, which complete all ISO functions. 
@item Some bugs fixed. 
@end itemize  


@item Version 0.6 (1998/7/16, 21:12:7 MET DST)
 
@itemize @bullet{} 
@item Defining other path aliases (in addition to 'library') which can be loaded dynamically in executables is now possible. 
@item Added the posibility to define multifile predicates in the shell. 
@item Added the posibility to define dynamic predicates dynamically. 
@item Added addmodule meta-argument type. 
@item Implemented persistent data predicates. 
@item New version of PiLLoW WWW library (XML, templates, etc.). 
@item Ported active modules from ``distributed Ciao'' (independent development version of Ciao). 
@item Implemented lazy loading in executables. 
@item Modularized engine(builtin). 
@item Some bugs fixed. 
@end itemize 


@item Version 0.5 (1998/3/23)
 
@itemize @bullet{} 
@item First Windows version. 
@item Integrated debugger in toplevel. 
@item Implemented DCG's as (Ciao-style) expansions. 
@item Builtins renamed to match ISO-Prolog. 
@item Made ISO the default syntax/package. 
@end itemize 


@item Version 0.4 (1998/2/24)
 
@itemize @bullet{} 
@item First version with the new Ciao emacs mode. 
@item Full integration of concurrent engine and compiler/library. 
@item Added new_declaration/1 directive. 
@item Added modular syntax enhancements. 
@item Shell script interpreter separated from toplevel shell. 
@item Added new compilation warnings. 
@end itemize  


@item Version 0.3 (1997/8/20)
 
@itemize @bullet{} 
@item Ciao builtins modularized. 
@item New prolog flags can be defined by libraries. 
@item Standalone comand-line compiler available, with automatic "make". 
@item Added assertions and regular types. 
@item First version using the automatic documentation generator. 
@end itemize  


@item Version 0.2 (1997/4/16)
 
@itemize @bullet{} 
@item First module system implemented. 
@item Implemented exceptions using catch/3 and throw/1. 
@item Added functional & record syntax. 
@item Added modular sentence, term, and goal translations. 
@item Implemented attributed variables. 
@item First CLPQ/CLPR implementation. 
@item Added the posibility of linking external .so files. 
@item Changes in syntax to allow @code{P(X)} and @code{"string"||L}. 
@item Changed to be more similar to ISO-Prolog. 
@item Implemented Prolog shell scripts. 
@item Implemented data predicates. 
@end itemize 


@item Version 0.1 (1997/2/13)
First fully integrated, standalone Ciao distribution. Based on integrating into an evolution of the &-Prolog engine/libraries/preprocessor [Her86,HG91] many functionalities from several previous independent development versions of Ciao [HC93,HC94,HCC95,Bue95,CLI95,HBGP95,HBC96,CHV96b,HBC99]. 


@end table

@c (component)


@node Getting started on Un*x-like machines, Getting started on Windows machines, Introduction, Top
@comment node-name, next,  previous,  up
@chapter Getting started on Un*x-like machines
@c -------------------------------------------------
@c WARNING: Do not edit this file (GetStartUnix.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/GetStartUnix.pl
@c -------------------------------------------------

@strong{Author(s):} M.Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


 

This part guides you through some very basic first steps with Ciao on a Un*x system. It assumes that Ciao is already installed correctly on your Windows system. If this is not the case, then follow the instructions in @ref{Installing Ciao from the source distribution} first. 

We start with by describing the basics of using Ciao from a normal command shell such as @code{sh/bash}, @code{csh/tcsh}, etc. We strongly recommend reading also @ref{An introduction to the Ciao emacs environment (Un*x)} for the basics on using Ciao under 
@glindex emacs
@code{emacs}, which is a much simpler and much more powerful way of developing Ciao programs, and has the advantage of offering an almost identical environment under Windows and Un*x. 



@menu
* Testing your Ciao Un*x installation::	 
* Un*x user setup::		
* Using Ciao from a Un*x command shell::  
* An introduction to the Ciao emacs environment (Un*x)::  
* Keeping up to date (Un*x)::	
@end menu

@node Testing your Ciao Un*x installation, Un*x user setup, Getting started on Un*x-like machines, Getting started on Un*x-like machines
@comment node-name, next,  previous,  up
@section Testing your Ciao Un*x installation 


@noindent
It is a good idea to start by performing some tests to check that Ciao is installed correctly on your system (these are the same tests that you are instructed to do during installation, so you can obviously skip them if you have done them already at that time). If any of these tests do not succeed either your environment variables are not set properly (see @ref{Un*x user setup} for how to fix this): 

 
@itemize @bullet{} 


@item Typing 
@glindex ciao
@code{ciao} (or 
@glindex ciaosh
@code{ciaosh}) should start the typical Prolog top-level shell. 


@item In the top-level shell, Prolog library modules should load correctly. Type for example @code{use_module(library(dec10_io))} --you should get back a prompt with no errors reported. 




@item To exit the top level shell, type @code{halt.} as usual, or @key{^D}. 


@item Typing 
@glindex ciaoc
@code{ciaoc} should produce the help message from the Ciao 
@glindex standalone compiler
standalone compiler. 


@item Typing 
@glindex ciao-shell
@code{ciao-shell} should produce a message saying that no code was found. This is a Ciao application which can be used to write 
@glindex scripts
scripts written in Prolog, i.e., files which do not need any explicit compilation to be run. 


@end itemize  


@noindent
Also, the following documentation-related actions should work: 


@itemize @bullet{} 


@item If the 
@glindex info
@code{info} program is installed, typing @code{info} should produce a list of manuals which @emph{should include Ciao manual(s) in a separate area} (you may need to log out and back in so that your shell variables are reinitialized for this to work). 


@item Opening with a 
@glindex WWW browser
WWW browser (e.g., 
@glindex netscape
@code{netscape}) the directory or @code{URL} corresponding to the @code{DOCROOT} setting should show a series of Ciao-related manuals. Note that 
@coindex style sheets
@glindex style sheets
@emph{style sheets} should be activated for correct formatting of the manual. 


@item Typing @code{man ciao} should produce a man page with some very basic general information on Ciao (and pointing to the on-line manuals). 


@item The @code{DOCROOT} directory should contain the manual also in the other formats such as @code{postscript} or @code{pdf} which specially useful for printing. See @ref{Printing manuals (Un*x)} for instructions. 


@end itemize  





@node Un*x user setup, Using Ciao from a Un*x command shell, Testing your Ciao Un*x installation, Getting started on Un*x-like machines
@comment node-name, next,  previous,  up
@section Un*x user setup 


@coindex user setup
@glindex user setup 
@coindex environment variables, setup
@glindex environment variables, setup 

If the tests above have succeeded, the system is probably installed correctly and your environment variables have been set already. In that case you can skip to the next section. 

Otherwise, if you have not already done so, make the following modifications in your startup scripts, so that these files are used (@code{<LIBROOT>} must be replaced with the appropriate value, i.e., where the Ciao library is installed): 

 
@itemize @bullet{} 


@item For users a 
@coindex csh-compatible shell
@glindex csh-compatible shell
@emph{csh-compatible shell} (
@glindex csh
@code{csh}, 
@glindex tcsh
@code{tcsh}, ...), add to 
@glindex ~/.cshrc
@code{~/.cshrc}: 


@smallexample 
        if ( -e <LIBROOT>/ciao/DOTcshrc ) then
           source <LIBROOT>/ciao/DOTcshrc
        endif
@end smallexample  


@item For users of an 
@coindex sh-compatible shell
@glindex sh-compatible shell
@emph{sh-compatible shell} (
@glindex sh
@code{sh}, 
@glindex bash
@code{bash}, ...), add to 
@glindex ~/.profile
@code{~/.profile}: 


@smallexample 
        if [ -f <LIBROOT>/ciao/DOTprofile ]; then
           . <LIBROOT>/ciao/DOTprofile
        fi
@end smallexample  

This will set up things so that the Ciao executables are found and you can access the Ciao system manuals using the 
@glindex info
@code{info} command. Note that, depending on your shell, @emph{you may have to log out and back in} for the changes to take effect. 


@item Also, if you use 
@glindex emacs
@code{emacs} (highly recommended) add this line to your 
@glindex ~/.emacs
@code{~/.emacs} file: 


@smallexample 
        (load-file "<LIBROOT>/ciao/DOTemacs.el")
@end smallexample  


@end itemize  
 


If after following these steps things do not work properly, then the installation was probably not completed properly and you may want to try reinstalling the system. 



@node Using Ciao from a Un*x command shell, An introduction to the Ciao emacs environment (Un*x), Un*x user setup, Getting started on Un*x-like machines
@comment node-name, next,  previous,  up
@section Using Ciao from a Un*x command shell 



@menu
* Starting/exiting the top-level shell (Un*x)::	 
* Getting help (Un*x)::		
* Compiling and running programs (Un*x)::  
* Generating executables (Un*x)::  
* Running Ciao scripts (Un*x)::	 
* The Ciao initialization file (Un*x)::	 
* Printing manuals (Un*x)::	
@end menu

@node Starting/exiting the top-level shell (Un*x), Getting help (Un*x), Using Ciao from a Un*x command shell, Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection Starting/exiting the top-level shell (Un*x) 


@coindex top-level shell, starting, unix
@glindex top-level shell, starting, unix 

The basic methods for starting/exiting the top-level shell have been discussed above. If upon typing @code{ciao} you get a ``command not found'' error or you get a longer message from Ciao before starting, it means that either Ciao was not installed correctly or you environment variables are not set up properly. Follow the instructions on the message printed by Ciao or refer to the installation instructions regarding user-setup for details. 



@node Getting help (Un*x), Compiling and running programs (Un*x), Starting/exiting the top-level shell (Un*x), Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection Getting help (Un*x) 


@coindex help, unix
@glindex help, unix 

The basic methods for accessing the manual on-line have also been discussed above. Use the table of contents and the indices of @emph{predicates}, @emph{libraries}, @emph{concepts}, etc. to find what you are looking for. 
@glindex Context-sensitive
Context-sensitive help is available within the 
@glindex emacs
@code{emacs} environment (see below). 
 

@node Compiling and running programs (Un*x), Generating executables (Un*x), Getting help (Un*x), Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection Compiling and running programs (Un*x) 


@coindex compiling programs
@glindex compiling programs 
@coindex loading programs
@glindex loading programs 
@coindex running programs
@glindex running programs 

Once the shell is started, you can compile and execute Prolog modules inside the interactive top-level shell in the standard way. E.g., type @code{use_module(@emph{file}).}, @code{use_module(library(@emph{file})).} for library modules, @code{ensure_loaded(@emph{file}).} for files which are not modules, and @code{use_package(@emph{file}).} for library packages (these are syntactic/semantic packages that extend the Ciao Prolog language in many different ways). Note that the use of 
@glindex compile/1
@code{compile/1} and 
@glindex consult/1
@code{consult/1} is discouraged in Ciao. 

For example, you may want to type @code{use_package(iso)} to ensure Ciao has loaded all the ISO builtins (whether this is done by default or not depends on your 
@glindex .ciaorc
@code{.ciaorc} file). Do not worry about any ``module already in executable'' messages --these are normal and simply mean that a certain module is already pre-loaded in the top-level shell. At this point, typing @code{write(hello).} should work. 

Note that some predicates that may be built-ins in other Prologs are available through libraries in Ciao. This facilitates making small executables. 

To change the working directory to, say, the @code{examples} directory in the Ciao root directory, first do: 


@smallexample 
      ?- use_module(library(system)).
@end smallexample  


@noindent
(loading the 
@glindex system
@code{system} library makes a number of system-related predicates such as 
@glindex cd/1
@code{cd/1} accessible) and then: 


@smallexample 
      ?- cd('$/examples').  
@end smallexample  


@noindent
(in Ciao the sequence @code{$/} @emph{at the beginning of a path name} is replaced by the path of the Ciao root directory). 

For more information see @ref{The interactive top-level shell}. 



@node Generating executables (Un*x), Running Ciao scripts (Un*x), Compiling and running programs (Un*x), Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection Generating executables (Un*x) 


@coindex executables, generating
@glindex executables, generating 
@coindex compiling programs
@glindex compiling programs 

Executables can be generated from the top-level shell (using 
@glindex make_exec/2
@code{make_exec/2}) or using the standalone compiler (
@glindex ciaoc
@code{ciaoc}). To be able to make an executable, the file should define the predicate 
@glindex main/1
@code{main/1} (or 
@glindex main/0
@code{main/0}), which will be called upon startup (see the corresponding manual section for details). In its simplest use, given a top-level @emph{foo}@code{.pl} file for an application, the compilation process produces an executable @code{foo}, automatically detecting which other files used by @code{foo.pl} need recompilation. 


@noindent
For example, within the 
@glindex examples
@code{examples} directory, you can type: 


@smallexample 
    ?- make_exec(hw,_).
@end smallexample  


@noindent
which should produce an executable. Double-clicking on this executable should execute it. 

Another way of creating Ciao executables from source files is by right-clicking on @code{.pl} files and choosing ``make executable''. This uses the standalone compiler (this has the disadvantage, however, that it is sometimes difficult to see the error messages). 

For more information see @ref{The interactive top-level shell} and @ref{The stand-alone command-line compiler}. 



@node Running Ciao scripts (Un*x), The Ciao initialization file (Un*x), Generating executables (Un*x), Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection Running Ciao scripts (Un*x) 


@coindex scripts
@glindex scripts 
@coindex compiling programs
@glindex compiling programs 
@coindex running programs
@glindex running programs 

Ciao allows writing 
@glindex Prolog scripts
Prolog scripts. These are files containing Prolog source but which get executed without having to explicitly compile them (in the same way as, e.g., @code{.bat} files or programs in scripting languages). As an example, you can run the file 
@glindex hw
@code{hw} in the 
@glindex examples
@code{examples} directory of the Ciao distribution and look at the source with an editor. You can try changing the @code{Hello world} message and running the program again (no need to recompile!). 

As you can see, the file should define the predicate 
@glindex main/1
@code{main/1} (not 
@glindex main/0
@code{main/0}), which will be called upon startup. The two header lines are necessary in Un*x in. In Windows you can leave them in or you can take them out, but you need to rename the script to 
@glindex hw.pls
@code{hw.pls}. Leaving the lines in has the advantage that the script will also work in Un*x without any change. 

For more information see @ref{The script interpreter}. 



@node The Ciao initialization file (Un*x), Printing manuals (Un*x), Running Ciao scripts (Un*x), Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection The Ciao initialization file (Un*x) 


@coindex .ciaorc
@glindex .ciaorc 
@coindex initialization file
@glindex initialization file 

The Ciao toplevel can be made to execute upon startup a number of commands (such as, e.g., loading certain files or setting certain Prolog flags) contained in an initialization file. This file should be called 
@glindex .ciaorc
@code{.ciaorc} and placed in your @emph{home} directory (e.g., @code{~}, the same in which the 
@glindex .emacs
@code{.emacs} file is put). You may need to set the environment variable @code{HOME} to the path of this directory for the Ciao toplevel shell to be able to locate this file on startup. 



@node Printing manuals (Un*x),  , The Ciao initialization file (Un*x), Using Ciao from a Un*x command shell
@comment node-name, next,  previous,  up
@subsection Printing manuals (Un*x) 


@coindex manuals, printing
@glindex manuals, printing 
@coindex help
@glindex help 

As mentioned before, the manual is available in several formats in the @code{reference} directory within the @code{doc} directory in the Ciao distribution, including @code{postscript} or @code{pdf}, which are specially useful for printing. These files are also available in the @code{DOCROOT} directory specified during installation. Printing can be done using an application such as 
@glindex ghostview
@code{ghostview} (freely available from @uref{http://www.cs.wisc.edu/~ghost/index.html}) or 
@glindex acrobat reader
@code{acrobat reader} (@uref{http://www.adobe.com}, only @code{pdf}). 
@coindex printing, manual
@glindex printing, manual 
@coindex manual, printing
@glindex manual, printing 
 

@node An introduction to the Ciao emacs environment (Un*x), Keeping up to date (Un*x), Using Ciao from a Un*x command shell, Getting started on Un*x-like machines
@comment node-name, next,  previous,  up
@section An introduction to the Ciao emacs environment (Un*x) 

 
@coindex emacs, intro
@glindex emacs, intro 
While it is easy to use Ciao with any editor of your choice, using it within the 
@glindex emacs
@code{emacs} editor/program development system is highly recommended: Ciao includes an 
@glindex emacs
@code{emacs} @emph{mode} which provides a very complete 
@coindex development environment
@glindex development environment 
@emph{application development environment} which greatly simplifies many program development tasks. See @ref{Using Ciao inside GNU emacs} for details on the capabilities of 
@glindex ciao
@code{ciao}/
@glindex emacs
@code{emacs} combination. 

If the (freely available) 
@glindex emacs
@code{emacs} editor/environment is not installed in your system, we highly recommend that you also install it at this point (there are instructions for where to find 
@glindex emacs
@code{emacs} and how to install it in the Ciao installation instructions). After having done this you can try for example the following things: 


@itemize @bullet{} 


@item A few basic things: 

 
@itemize @bullet{} 


@item Typing @key{^H} @key{i} (or in the menus @code{Help->Manuals->Browse Manuals with Info}) should open a list of manuals in info format in which the Ciao manual(s) should appear. 


@item When opening a Prolog file, i.e., a file with @code{.pl} or @code{.pls} ending, using @key{^X}@key{^F}@code{filename} (or using the menus) the code should appear highlighted according to syntax (e.g., comments in red), and @code{Ciao/Prolog} menus should appear in the menu bar on top of the 
@glindex emacs
@code{emacs} window. 


@item Loading the file using the @code{Ciao/Prolog} menu (or typing @key{^C} @key{l}) should start in another emacs buffer the Ciao toplevel shell and load the file. You should now be able to switch the the toplevel shell and make queries from within 
@glindex emacs
@code{emacs}. 


@end itemize  


@noindent
@strong{Note:} when using 
@glindex emacs
@code{emacs} it is @emph{very convenient} to swap the locations of the (normally not very useful) @key{Caps Lock} key and the (very useful in 
@glindex emacs
@code{emacs}) @key{Ctrl} key on the keyboard. How to do this is explained in the 
@glindex emacs
@code{emacs} frequently asked questions FAQs (see the 
@glindex emacs
@code{emacs} download instructions for their location). 



(if these things do not work the system or emacs may not be installed properly). 


@item You can go to the location of most of the errors that may be reported during compilation by typing @key{^C} @key{`}. 


@item You can also, e.g., create executables from the @code{Ciao/Prolog} menu, as well as compile individual files, or generate active modules. 


@item Loading a file for source-level debugging using the @code{Ciao/Prolog} menu (or typing @key{^C} @key{d}) and then issuing a query should start the source-level debugger and move a marker on the code in a window while execution is stepped through in the window running the Ciao top level. 


@item You can add the lines needed in Un*x for turning any file defining 
@glindex main/1
@code{main/1} into a script from the Ciao/Prolog menu or by typing @key{^C} @key{I} @key{S}. 


@item You can also work with the preprocessor and auto-documenter directly from emacs: see their manuals or browse through the corresponding menus that appear when editing @code{.pl} files. 


@end itemize  

We encourage you once more to read @ref{Using Ciao inside GNU emacs} to discover the many other functionalities of this environment. 





@node Keeping up to date (Un*x),  , An introduction to the Ciao emacs environment (Un*x), Getting started on Un*x-like machines
@comment node-name, next,  previous,  up
@section Keeping up to date (Un*x) 

You may want to read @ref{Beyond installation} for instructions on how to sign up on the Ciao user's mailing list, receive announcements regarding new versions, download new versions, report bugs, etc. 






@c (component)


@node Getting started on Windows machines, *** PART I - The program development environment, Getting started on Un*x-like machines, Top
@comment node-name, next,  previous,  up
@chapter Getting started on Windows machines
@c -------------------------------------------------
@c WARNING: Do not edit this file (GetStartWin32.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/GetStartWin32.pl
@c -------------------------------------------------

@strong{Author(s):} M.Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


 

This part guides you through some very basic first steps with Ciao on an MSWindows (``Win32'') system. It assumes that Ciao is already installed correctly on your Windows system. If this is not the case, then follow the instructions in @ref{Installing Ciao from a Win32 binary distribution} (or @ref{Installing Ciao from the source distribution}) first. 

We start with by describing the basics of using Ciao from the Windows explorer and/or a DOS command shell. We strongly recommend reading also @ref{An introduction to the Ciao emacs environment (Win32)} for the basics on using Ciao under 
@glindex emacs
@code{emacs}, which is a much simpler and much more powerful way of developing Ciao programs, and has the advantage of offering an almost identical environment under Windows and Un*x. 



@menu
* Testing your Ciao Win32 installation::  
* Using Ciao from the Windows explorer and command shell::  
* An introduction to the Ciao emacs environment (Win32)::  
* Keeping up to date (Win32)::	
@end menu

@node Testing your Ciao Win32 installation, Using Ciao from the Windows explorer and command shell, Getting started on Windows machines, Getting started on Windows machines
@comment node-name, next,  previous,  up
@section Testing your Ciao Win32 installation 


@noindent
It is a good idea to start by performing some tests to check that Ciao is installed correctly on your system (these are the same tests that you are instructed to do during installation, so you can obviously skip them if you have done them already at that time): 

 
@itemize @bullet{} 


@item Ciao-related file types (@code{.pl} source files, @code{.cpx} executables, @code{.itf,.po,.asr} interface files, @code{.pls} scripts, etc.) should have specific icons associated with them (you can look at the files in the folders in the Ciao distribution to check). 


@item Double-clicking on the shortcut to 
@glindex ciaosh
@code{ciaosh}(@code{.cpx}) on the desktop should start the typical Prolog top-level shell in a window. If this shortcut has not been created on the desktop, then double-clicking on the 
@glindex ciaosh
@code{ciaosh}(@code{.cpx}) icon inside the @code{shell} folder within the Ciao source folder should have the same effect. 


@item In the top-level shell, Prolog library modules should load correctly. Type for example @code{use_module(library(dec10_io))} at the Ciao top-level prompt --you should get back a prompt with no errors reported. 


@item To exit the top level shell, type @code{halt.} as usual, or @key{^Z}. 


@end itemize  


@noindent
Also, the following documentation-related actions should work: 


@itemize @bullet{} 


@item Double-clicking on the shortcut to @code{ciao}(@code{.html}) which appears on the desktop should show the Ciao manual in your default WWW browser. If this shortcut has not been created you can double-click on the @code{ciao}(@code{.html}) file in the @code{doc\reference\ciao_html} folder inside the Ciao source folder. Make sure you configure your browser to use 
@coindex style sheets
@glindex style sheets
@emph{style sheets} for correct formatting of the manual (note, however, that some older versions of 
@glindex Explorer
Explorer did not support style sheets well and will give better results turning them off). 


@coindex printing, manual
@glindex printing, manual 
@coindex manual, printing
@glindex manual, printing 
@coindex help
@glindex help 


@item The @code{doc\reference} folder contains the manual also in the other formats present in the distribution, such as @code{info} (very convenient for users of the 
@glindex emacs
@code{emacs} editor/program development system) and @code{postscript} or @code{pdf}, which are specially useful for printing. See @ref{Printing manuals (Win32)} for instructions. 


@end itemize  




@node Using Ciao from the Windows explorer and command shell, An introduction to the Ciao emacs environment (Win32), Testing your Ciao Win32 installation, Getting started on Windows machines
@comment node-name, next,  previous,  up
@section Using Ciao from the Windows explorer and command shell 



@menu
* Starting/exiting the top-level shell (Win32)::  
* Getting help (Win32)::	
* Compiling and running programs (Win32)::  
* Generating executables (Win32)::  
* Running Ciao scripts (Win32)::  
* The Ciao initialization file (Win32)::  
* Printing manuals (Win32)::	
@end menu

@node Starting/exiting the top-level shell (Win32), Getting help (Win32), Using Ciao from the Windows explorer and command shell, Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection Starting/exiting the top-level shell (Win32) 


@coindex top-level shell, starting, windows
@glindex top-level shell, starting, windows 

The basic methods for starting/exiting the top-level shell have been discussed above. The installation script also leaves a @code{ciaosh}(@code{.bat}) file inside the 
@glindex shell
@code{shell} folder of the Ciao distribution which can be used to start the top-level shell from the command line in Windows95/98/NT. 



@node Getting help (Win32), Compiling and running programs (Win32), Starting/exiting the top-level shell (Win32), Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection Getting help (Win32) 


@coindex help, windows
@glindex help, windows 

The basic methods for accessing the manual on-line have also been discussed above. Use the table of contents and the indices of @emph{predicates}, @emph{libraries}, @emph{concepts}, etc. to find what you are looking for. 
@glindex Context-sensitive
Context-sensitive help is available within the 
@glindex emacs
@code{emacs} environment (see below). 
 

@node Compiling and running programs (Win32), Generating executables (Win32), Getting help (Win32), Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection Compiling and running programs (Win32) 


@coindex compiling programs
@glindex compiling programs 
@coindex loading programs
@glindex loading programs 
@coindex running programs
@glindex running programs 

Once the shell is started, you can compile and execute Prolog modules inside the interactive toplevel shell in the standard way. E.g., type @code{use_module(@emph{file}).}, @code{use_module(library(@emph{file})).} for library modules, @code{ensure_loaded(@emph{file}).} for files which are not modules, and @code{use_package(@emph{file}).} for library packages (these are syntactic/semantic packages that extend the Ciao Prolog language in many different ways). Note that the use of 
@glindex compile/1
@code{compile/1} and 
@glindex consult/1
@code{consult/1} is discouraged in Ciao. 

For example, you may want to type @code{use_package(iso)} to ensure Ciao has loaded all the ISO builtins (whether this is done by default or not depends on your 
@glindex .ciaorc
@code{.ciaorc} file). Do not worry about any ``module already in executable'' messages --these are normal and simply mean that a certain module is already pre-loaded in the toplevel shell. At this point, typing @code{write(hello).} should work. 

Note that some predicates that may be built-ins in other Prologs are available through libraries in Ciao. This facilitates making small executables. 

To change the working directory to, say, the @code{examples} directory in the Ciao source directory, first do: 


@smallexample 
      ?- use_module(library(system)).
@end smallexample  


@noindent
(loading the 
@glindex system
@code{system} library makes a number of system-related predicates such as 
@glindex cd/1
@code{cd/1} accessible) and then: 


@smallexample 
      ?- cd('$/examples').  
@end smallexample  


@noindent
(in Ciao the sequence @code{$/} @emph{at the beginning of a path name} is replaced by the path of the Ciao root directory). 

For more information see @ref{The interactive top-level shell}. 



@node Generating executables (Win32), Running Ciao scripts (Win32), Compiling and running programs (Win32), Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection Generating executables (Win32) 


@coindex executables, generating
@glindex executables, generating 
@coindex compiling programs
@glindex compiling programs 

Executables can be generated from the toplevel shell (using 
@glindex make_exec/2
@code{make_exec/2}) or using the standalone compiler (
@glindex ciaoc
@code{ciaoc}(@code{.cpx}), located in the @code{ciaoc} folder). To be able to make an executable, the file should define the predicate 
@glindex main/1
@code{main/1} (or 
@glindex main/0
@code{main/0}), which will be called upon startup (see the corresponding manual section for details). 


@noindent
For example, within the 
@glindex examples
@code{examples} directory, you can type: 


@smallexample 
    ?- make_exec(hw,_).
@end smallexample  


@noindent
which should produce an executable. Double-clicking on this executable should execute it. 

Another way of creating Ciao executables from source files is by right-clicking on @code{.pl} files and choosing ``make executable''. This uses the standalone compiler (this has the disadvantage, however, that it is sometimes difficult to see the error messages). 

For more information see @ref{The interactive top-level shell} and @ref{The stand-alone command-line compiler}. 



@node Running Ciao scripts (Win32), The Ciao initialization file (Win32), Generating executables (Win32), Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection Running Ciao scripts (Win32) 


@coindex scripts
@glindex scripts 
@coindex compiling programs
@glindex compiling programs 
@coindex running programs
@glindex running programs 

Double-clicking on files ending in @code{.pls}, @emph{Ciao Prolog scripts}, will also execute them. These are files containing Prolog source but which get executed without having to explicitly compile them (in the same way as, e.g., @code{.bat} files or programs in scripting languages). As an example, you can double-click on the file 
@glindex hw.pls
@code{hw.pls} in the 
@glindex examples
@code{examples} folder and look at the source with an editor. You can try changing the @code{Hello world} message and double-clicking again (no need to recompile!). 

As you can see, the file should define the predicate 
@glindex main/1
@code{main/1} (not 
@glindex main/0
@code{main/0}), which will be called upon startup. The two header lines are only necessary in Un*x. In Windows you can leave them in or you can take them out, but leaving them in has the advantage that the script will also work in Un*x without any change. 

For more information see @ref{The script interpreter}. 



@node The Ciao initialization file (Win32), Printing manuals (Win32), Running Ciao scripts (Win32), Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection The Ciao initialization file (Win32) 


@coindex .ciaorc
@glindex .ciaorc 
@coindex initialization file
@glindex initialization file 

The Ciao toplevel can be made to execute upon startup a number of commands (such as, e.g., loading certain files or setting certain Prolog flags) contained in an initialization file. This file should be called 
@glindex .ciaorc
@code{.ciaorc} and placed in your @emph{home} folder (e.g., the same in which the 
@glindex .emacs
@code{.emacs} file is put). You may need to set the environment variable @code{HOME} to the path of this folder for the Ciao toplevel shell to be able to locate this file on startup. 



@node Printing manuals (Win32),  , The Ciao initialization file (Win32), Using Ciao from the Windows explorer and command shell
@comment node-name, next,  previous,  up
@subsection Printing manuals (Win32) 


@coindex manuals, printing
@glindex manuals, printing 
@coindex help
@glindex help 

As mentioned before, the manual is available in several formats in the @code{reference} folder within Ciao's @code{doc} folder, including @code{postscript} or @code{pdf}, which are specially useful for printing. This can be done using an application such as 
@glindex ghostview
@code{ghostview} (freely available from @uref{http://www.cs.wisc.edu/~ghost/index.html}) or 
@glindex acrobat reader
@code{acrobat reader} (@uref{http://www.adobe.com}, only @code{pdf}). 
@coindex printing, manual
@glindex printing, manual 
@coindex manual, printing
@glindex manual, printing 



@node An introduction to the Ciao emacs environment (Win32), Keeping up to date (Win32), Using Ciao from the Windows explorer and command shell, Getting started on Windows machines
@comment node-name, next,  previous,  up
@section An introduction to the Ciao emacs environment (Win32) 

 
@coindex emacs, intro
@glindex emacs, intro 
While it is easy to use Ciao with any editor of your choice, using it within the 
@glindex emacs
@code{emacs} editor/program development system is highly recommended: Ciao includes an 
@glindex emacs
@code{emacs} @emph{mode} which provides a very complete 
@coindex development environment
@glindex development environment 
@emph{application development environment} which greatly simplifies many program development tasks. See @ref{Using Ciao inside GNU emacs} for details on the capabilities of 
@glindex ciao
@code{ciao}/
@glindex emacs
@code{emacs} combination. 

If the (freely available) 
@glindex emacs
@code{emacs} editor/environment is not installed in your system, we highly recommend that you also install it at this point (there are instructions for where to find 
@glindex emacs
@code{emacs} and how to install it in the Ciao installation instructions). After having done this you can try for example the following things: 


@itemize @bullet{} 


@item A few basic things: 

 
@itemize @bullet{} 


@item Typing @key{^H} @key{i} (or in the menus @code{Help->Manuals->Browse Manuals with Info}) should open a list of manuals in info format in which the Ciao manual(s) should appear. 


@item When opening a Prolog file, i.e., a file with @code{.pl} or @code{.pls} ending, using @key{^X}@key{^F}@code{filename} (or using the menus) the code should appear highlighted according to syntax (e.g., comments in red), and @code{Ciao/Prolog} menus should appear in the menu bar on top of the 
@glindex emacs
@code{emacs} window. 


@item Loading the file using the @code{Ciao/Prolog} menu (or typing @key{^C} @key{l}) should start in another emacs buffer the Ciao toplevel shell and load the file. You should now be able to switch the the toplevel shell and make queries from within 
@glindex emacs
@code{emacs}. 


@end itemize  


@noindent
@strong{Note:} when using 
@glindex emacs
@code{emacs} it is @emph{very convenient} to swap the locations of the (normally not very useful) @key{Caps Lock} key and the (very useful in 
@glindex emacs
@code{emacs}) @key{Ctrl} key on the keyboard. How to do this is explained in the 
@glindex emacs
@code{emacs} frequently asked questions FAQs (see the 
@glindex emacs
@code{emacs} download instructions for their location). 



(if these things do not work the system or emacs may not be installed properly). 


@item You can go to the location of most of the errors that may be reported during compilation by typing @key{^C} @key{`}. 


@item You can also, e.g., create executables from the @code{Ciao/Prolog} menu, as well as compile individual files, or generate active modules. 


@item Loading a file for source-level debugging using the @code{Ciao/Prolog} menu (or typing @key{^C} @key{d}) and then issuing a query should start the source-level debugger and move a marker on the code in a window while execution is stepped through in the window running the Ciao top level. 


@item You can add the lines needed in Un*x for turning any file defining 
@glindex main/1
@code{main/1} into a script from the Ciao/Prolog menu or by typing @key{^C} @key{I} @key{S}. 


@item You can also work with the preprocessor and auto-documenter directly from emacs: see their manuals or browse through the corresponding menus that appear when editing @code{.pl} files. 


@end itemize  

We encourage you once more to read @ref{Using Ciao inside GNU emacs} to discover the many other functionalities of this environment. 





@node Keeping up to date (Win32),  , An introduction to the Ciao emacs environment (Win32), Getting started on Windows machines
@comment node-name, next,  previous,  up
@section Keeping up to date (Win32) 

You may want to read @ref{Beyond installation} for instructions on how to sign up on the Ciao user's mailing list, receive announcements regarding new versions, download new versions, report bugs, etc. 




@c (component)


@node *** PART I - The program development environment, The stand-alone command-line compiler, Getting started on Windows machines, Top
@comment node-name, next,  previous,  up
@unnumbered PART I - The program development environment
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (DevEnv.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/DevEnv.pl
@c -------------------------------------------------


This part documents the components of the basic Ciao program development environment. They include: 


@table @asis 


@item ciaoc: 
the standalone compiler, which creates executables without having to enter the interactive top-level. 


@item ciaosh: 
(also invoked simply as @code{ciao}) is an interactive top-level shell, similar to the one found on most Prolog systems (with some enhancements). 


@item debugger.pl: 
a Byrd box-type debugger, similar to the one found on most Prolog systems (also with some enhancements, such as source-level debugging). This is not a standalone application, but is rather included in 
@glindex ciaosh
@code{ciaosh}, as is done in other Prolog systems. However, it is also @emph{embeddable}, in the sense that it can be included as a library in executables, and activated dynamically and conditionally while such executables are running. 


@item ciao-shell: 
an interpreter/compiler for @emph{Prolog scripts} (i.e., files containing Prolog code which run without needing explicit compilation). 


@item ciao.el: 
a @emph{complete program development enviroment}, based 
@coindex emacs interface
@glindex emacs interface 
@coindex programming environment
@glindex programming environment 
on 
@glindex GNU emacs
GNU emacs, with syntax coloring, direct access to all the tools described above (as well as the preprocessor and the documenter), atomatic location of errors, source-level debugging, context-sensitive access to on-line help/manuals, etc. The use of this environment is @emph{very highly recommended}! 


@end table  

The Ciao program development environment also includes 
@glindex ciaopp
@code{ciaopp}, the 
@glindex preprocessor
preprocessor, and 
@glindex lpdoc
@code{lpdoc}, the 
@glindex documentation generator
documentation generator, which are described in separate manuals. 



@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node The stand-alone command-line compiler, The interactive top-level shell, *** PART I - The program development environment, Top
@comment node-name, next,  previous,  up
@chapter The stand-alone command-line compiler
@c -------------------------------------------------
@c WARNING: Do not edit this file (ciaoc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/ciaoc/ciaoc.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza and the CLIP Group.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#142 (2000/5/11, 14:11:20 CEST)


@coindex compiling, from command line
@glindex compiling, from command line 
@coindex compiler, standalone
@glindex compiler, standalone 
@glindex ciaoc
@code{ciaoc} [CH00b] is the Ciao stand-alone command-line compiler. 
@glindex ciaoc
@code{ciaoc} can be used to create executables or to compile individual files to object code (to be later linked with other files). 
@glindex ciaoc
@code{ciaoc} is specially useful when working from the command line. Also, it can be called to compile Ciao programs from other tools such as, e.g., 
@glindex shell scripts
shell scripts, 
@glindex Makefile
@code{Makefile}s, or 
@glindex project files
project files. All the capabilities of 
@glindex ciaoc
@code{ciaoc} are also available from the interactive top-level shell, which uses the ciaoc modules as its components. 



@menu
* Introduction to building executables::  
* Paths used by the compiler during compilation::  
* Running executables from the command line::  
* Types of executables generated::  
* Environment variables used by Ciao executables::  
* Intermediate files in the compilation process::  
* Usage (ciaoc)::		
@end menu

@node Introduction to building executables, Paths used by the compiler during compilation, The stand-alone command-line compiler, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Introduction to building executables 

An 
@coindex executable
@glindex executable
@emph{executable} can be built from a single file or from a collection of inter-related files. In the case of only one file, this file must define the predicate 
@glindex main/0
@code{main/0} or 
@glindex main/1
@code{main/1}. This predicate is the one which will be called when the executable is started. As an example, consider the following file, called @code{hello.pl}: 


@smallexample 
main :-
     write('Hello world'), 
     nl.
@end smallexample  


@noindent
To compile it from the command line using the 
@glindex ciaoc
@code{ciaoc} standalone compiler it suffices to type ``@code{ciaoc hello}'' (in Win32 you may have to put the complete path to the 
@glindex ciaoc
@code{ciaoc} folder of the Ciao distribution, where the installation process leaves a 
@glindex ciaoc.bat
@code{ciaoc.bat} file): 


@smallexample 
/herme@@clip:/tmp
[60]> ciaoc hello

/herme@@clip:/tmp
[61]> 
@end smallexample  


@noindent
This produces an executable called @code{hello} in Un*x-like systems and @code{hello.cpx} under Win32 systems. This executable can then be run in Win32 by double-clicking on it and on Un*x systems by simply typing its name (see for @ref{Running executables from the command line} for how to run executables from the command line in Win32): 


@smallexample 
/herme@@clip:/tmp
[61]> hello
Hello world

@end smallexample  

If the application is composed of several files the process is identical. Assume @code{hello.pl} is now: 


@smallexample 
:- use_module(aux,[p/1]).

main :-
     p(X),
     write(X), 
     nl.
@end smallexample  


@noindent
where the file @code{aux.pl} contains: 


@smallexample 
:- module(aux,[p/1]).

p('Hello world').
@end smallexample  


@noindent
This can again be compiled using the 
@glindex ciaoc
@code{ciaoc} standalone compiler as before: 


@smallexample 
/herme@@clip:/tmp
[60]> ciaoc hello

/herme@@clip:/tmp
[61]> hello
Hello world

@end smallexample  


@noindent
The invocation of @code{ciaoc hello} compiles the file @code{hello.pl} and all connected files that may need recompilation -- in this case the file @code{aux.pl}. Also, if any library files used had not been compiled previously they would be compiled at this point (See @ref{Intermediate files in the compilation process}). Also, if, say, @code{hello.pl} is changed and recompiled, the object code resulting from the previous compilation of @code{aux.pl} will be reused. This is all done without any need for @code{Makefile}s, and considerably accelerates the development process for large applications. This process can be observed by selecting the @code{-v} option when invoking @code{ciaoc} (which is equivalent to setting the @code{verbose_compilation} Prolog flag to @code{on} in the top-level interpreter). 

If 
@glindex main/1
@code{main/1} is defined instead of 
@glindex main/0
@code{main/0} then when the executable is started the argument of 
@glindex main/1
@code{main/1} will be instantiated to a list of atoms, each one of them corresponding to a command line option. Consider the file @code{say.pl}: 


@smallexample 
main(Argv) :-
     write_list(Argv), nl.

write_list([]).
write_list([Arg|Args]) :- 
     write(Arg),
     write(' '),
     write_list(Args).
@end smallexample  


@noindent
Compiling this program and running it results in the following output: 


@smallexample 
/herme@@clip:/tmp
[91]> ciaoc say

/herme@@clip:/tmp
[91]> say hello dolly
hello dolly 
@end smallexample  

The name of the generated executable can be controlled with the @code{-o} option (See @ref{Usage (ciaoc)}). 



@node Paths used by the compiler during compilation, Running executables from the command line, Introduction to building executables, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Paths used by the compiler during compilation 

The compiler will look for files mentioned in commands such as 
@glindex use_module/1
@code{use_module/1} or 
@glindex ensure_loaded/1
@code{ensure_loaded/1} in the current directory. Other paths can be added by including them in a file whose name is given to @code{ciaoc} using the @code{-u} option. This file should contain facts of the predicates 
@glindex file_search_path/2
@code{file_search_path/2} and 
@glindex library_directory/1
@code{library_directory/1} (see the documentation for these predicates and also @ref{Customizing library paths and path aliases} for details). 



@node Running executables from the command line, Types of executables generated, Paths used by the compiler during compilation, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Running executables from the command line 
@coindex executables, how to run
@glindex executables, how to run 

As mentioned before, what the @code{ciaoc} compiler generates and how it is started varies somewhat from OS to OS. In general, the product of compiling an application with @code{ciaoc} is a file that contains the bytecode (the product of the compilation) and invokes the 
@glindex Ciao engine
Ciao engine on it. 


@itemize @bullet{} 


@item Un Un*x this is a @emph{script} (see the first lines of the file) which invokes the ciao engine on this file. To run the generated executable from a Un*x shell, or from the 
@glindex bash
@code{bash} shell that comes with the Cygwin libraries (see @ref{Installation and compilation under Windows}) it suffices to type its name at the shell command line, as in the examples above. 


@item In a Win32 system, the compiler produces a similar file with a @code{.cpx} ending. The Ciao installation process typically makes sure that the Windows registry contains the right entries so that this executable will run upon double-cliking on it. 

In you want to run the executable from the command line an additional @code{.bat} file is typically needed. To help in doing this, the Win32 installation process creates a @code{.bat} skeleton file called @code{bat_skel} in the 
@glindex Win32
@code{Win32} folder of the distribution) which allows running Ciao executables from the command line. If you want to run a Ciao executable @code{file.cpx} from the command line, you normally copy the skeleton file to the folder were the executable is and rename it to @code{file.bat}, then change its contents as explained in a comment inside the file itself. 

Note that this @code{.bat} file is usually not necessary in NT, as its command shell understands file extension associations. I.e., in windows NT it is possible to run the @code{file.cpx} executable directly. Due to limitations of @code{.bat} files in Windows 95/98, in those OSs no more than 9 command line arguments can be passed to the executable (in NT there is no such restriction). 

Finally, in a system in which Cygnus Win32 is installed executables can also be used directly from the 
@glindex bash
@code{bash} shell command line, without any associated @code{.bat} files, by simply typing their name at the 
@glindex bash
@code{bash} shell command line, in the same way as in Un*x. This only requires that the 
@glindex bash
@code{bash} shell which comes with Cygnus Win32 be installed and accessible: simply, make sure that 
@glindex /bin/sh.exe
@code{/bin/sh.exe} exists. 


@end itemize  

Except for a couple of header lines, the contents of executables are almost identical under different OSs (except for self-contained ones). The bytecode they contain is architecture-independent. In fact, it is possible to create an executable under Un*x and run it on Windows or viceversa, by making only minor modifications (e.g., creating the @code{.bat} file and/or setting environment variables or editing the start of the file to point to the correct engine location). 



@node Types of executables generated, Environment variables used by Ciao executables, Running executables from the command line, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Types of executables generated 


@coindex executables, types
@glindex executables, types 

While the default options used by 
@glindex ciaoc
@code{ciaoc} are sufficient for normal use, by selecting other options 
@glindex ciaoc
@code{ciaoc} can generate several different types of executables, which offer interesting tradeoffs among size of the generated executable, portability, and startup time [CH00b]: 


@table @asis 


@item Dynamic executables: 
@coindex executables, dynamic
@glindex executables, dynamic 


@glindex ciaoc
@code{ciaoc} produces by default @emph{dynamic} executables. In this case the executable produced is a 
@glindex platform-independent
platform-independent file which includes in compiled form all the user defined files. On the other hand, any system libraries used by the application are loaded dynamically at startup. More precisely, any files that appear as @code{library(...)} in 
@glindex use_module/1
@code{use_module/1} and 
@glindex ensure_loaded/1
@code{ensure_loaded/1} declarations will not be included explicitly in the executable and will instead be loaded dynamically. Is is also possible to mark other 
@glindex path aliases
path aliases (see the documentation for 
@glindex file_search_path/2
@code{file_search_path/2}) for dynamic loading by using the @code{-d} option. Files accessed through such aliases will also be loaded dynamically. 

Dynamic loading allows making smaller executables. Such executables may be used directly in the same machine in which they were compiled, since suitable paths to the location of the libraries will be included as default in the executable by 
@glindex ciaoc
@code{ciaoc} during compilation. 

The executable can also be used in another machine, even if the architecture and OS are different. The requirement is that the Ciao libraries (which will also include the appropriate 
@glindex Ciao engine
Ciao engine for that architecture and OS) be installed in the target machine, and that the @code{CIAOLIB} and @code{CIAOENGINE} environment variables are set appropriately for the executable to be able to find them (see @ref{Environment variables used by Ciao executables}). How to do this differs slightly from OS to OS. 


@item Static executables: 
@coindex executables, static
@glindex executables, static 

Selecting the @code{-s} option @code{ciaoc} produces a @emph{static} executable. In this case the executable produced (again a 
@glindex platform-independent
platform-independent file) will include in it all the auxiliary files and any system libraries needed by the application. Thus, such an executable is almost complete, needing in order to run only the 
@glindex Ciao engine
Ciao engine, which is platform-specific.@footnote{Currently there is an exception to this related to libraries which are written in languages other than Prolog, as, e.g., C. C files are currently always compiled to dynamically loadable object files (@code{.so} files), and they thus need to be included manually in a distribution of an application. This will be automated in upcoming versions of the Ciao system.} Again, if the executable is run in the same machine in which it was compiled then the engine is found automatically. If the executable is moved to another machine, the executable only needs access to a suitable engine (which can be done by setting the @code{CIAOENGINE} environment variable to point to this engine). 

This type of compilation produces larger executables, but has the advantage that these executables can be installed and run in a different machine, with different architecture and OS, even if Ciao is not installed on that machine. To install (or distribute) such an executable, one only needs to copy the executable file itself and the appropriate engine for the target platform (See @ref{Installing Ciao from the source distribution} or @ref{Installing Ciao from a Win32 binary distribution} and @ref{Multiarchitecture support}), and to set things so that the executable can find the engine. @footnote{It is also possible to produce real standalone executables, i.e., executables that do not need to have an engine around. However, this is not automated yet, although it is planned for an upcoming version of the compiler. In particular, the compiler can generate a @code{.c} file for each @code{.pl} file. Then all the @code{.c} files can be compiled together into a real executable (the engine is added one more element during link time) producing a complete executable for a given architecture. The downside of course is that such an executable will not be portable to other architectures without recompilation.} 


@item Dynamic executables, with lazy loading: 
@coindex executables, lazy load
@glindex executables, lazy load 

Selecting the @code{-l} option is very similar to the case of dynamic executables above, except that the code in the library modules is not loaded when the program is started but rather it is done during execution, the first time a predicate defined in that file is called. This is advantageous if a large application is composed of many parts but is such that typically only some of the parts are used in each invocation. The Ciao preprocessor, 
@glindex ciaopp
@code{ciaopp}, is a good example of this: it has many capabilitites but typically only some of them are used in a given session. An executable with lazy load has the advantage that it starts fast, loading a minimal functionality on startup, and then loads the different modules automatically as needed. 


@item Self-contained executables: 
@coindex executables, self-contained
@glindex executables, self-contained 

@emph{Self-contained} executables are static executables (i.e., this option also implies @emph{static} compilation) which include a Ciao engine along with the bytecode, so they do not depend on an external one for their execution. This is useful to create executables which run even if the machine where the program is to be executed does not have a Ciao engine installed and/or libraries. The disadvantage is that such execuatbles are 
@glindex platform-dependent
platform-dependent (as well as larger than those that simply use an external library). This type of compilation is selected with the @code{-S} option. Cross-compilation is also possible with the @code{-SS} option, so you can specify the target OS and architecture (e.g. LINUXi86). To be able to use the latter option, it is necessary to have installed a ciaoengine for the target machine in the Ciao library (this requires compiling the engine in that OS/architecture and installing it, so that it is available in the library). 


@item Compressed executables: 
@coindex executables, compressed
@glindex executables, compressed 

In @emph{compressed} executables the bytecode is compressed. This allows producing smaller executables, at the cost of a slightly slower startup time. This is selected with the @code{-z} option. You can also produce compressed libraries if you use @code{-zl} along with the @code{-c} option. If you select @code{-zl} while generating an executable, any library which is compiled to accomplish this will be also compressed. 


@item Active modules: 
@coindex modules, active
@glindex modules, active 

The compiler can also compile (via the @code{-a} option) a given file into an 
@coindex active module
@glindex active module
@emph{active module} (see @ref{Active modules (high-level distributed execution)} for a description of this). 




@end table  



@node Environment variables used by Ciao executables, Intermediate files in the compilation process, Types of executables generated, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Environment variables used by Ciao executables 

The executables generated by the Ciao compiler (including the ciao development tools themselves) locate automatically where the Ciao engine and libraries have been installed, since those paths are stored as defaults in the engine and compiler at installation time. Thus, there is no need for setting any environment variables in order to @emph{run} Ciao executables (on a single architecture -- see @ref{Multiarchitecture support} for running on multiple architectures). 

However, the default paths can be overridden by using the environment variables @code{CIAOENGINE} and @code{CIAOLIB}. The first one will tell the Ciao executables where to look for an engine, and the second will tell them where to look for the libraries. Thus, it is possible to actually use the Ciao system without installing it by setting these variables to the following values: 
@itemize @bullet{} 


@item @code{CIAOENGINE}: @code{$(SRC)/bin/$(CIAOARCH)/ciaoengine} 


@item @code{CIAOLIB}: @code{$(SRC)} 


@end itemize  
@noindent
where @code{$(CIAOARCH)} is the string echoed by the command @code{SRC/etc/ciao_get_arch} (or @code{BINROOT/ciao_get_arch}, after installation). 

This allows 
@glindex using alternate engines or libraries
using alternate engines or libraries, which can be very useful for system development and experimentation. 



@node Intermediate files in the compilation process, Usage (ciaoc), Environment variables used by Ciao executables, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Intermediate files in the compilation process 

Compiling an individual source (i.e., @code{.pl}) file produces a @code{.itf} file and a @code{.po} file. The @code{.itf} file contains information of the 
@coindex modular interface
@glindex modular interface
@emph{modular interface} of the file, such as information on exported and imported predicates and on the other modules used by this module. This information is used to know if a given file should be recompiled at a given point in time and also to be able to detect more errors statically including undefined predicates, mismatches on predicate charaterictics across modules, etc. The @code{.po} file contains the platform-independent object code for a file, ready for linking (statically or dynamically). 

It is also possible to use @code{ciaoc} to explicitly generate the @code{.po} file for one or more @code{.pl} files by using the @code{-c} option. 



@node Usage (ciaoc),  , Intermediate files in the compilation process, The stand-alone command-line compiler
@comment node-name, next,  previous,  up
@section Usage (ciaoc) 

The following provides details on the different command line options available when invoking 
@glindex ciaoc
@code{ciaoc}: 


@sp 2 


@smallexample 
ciaoc <MiscOpts> <ExecOpts> [-o <execname>] <file> ...

  Make an executable from the listed files.  If there is
  more than one file, they must be non-module, and the
  first one must include the main predicate.  The -o
  option allows generating an arbitrary executable name.

ciaoc <MiscOpts> <ExecOpts> -a <publishmod> <module>

  Make an active module executable from <module> with
  address publish module <publishmod>.

ciaoc <MiscOpts> -c  <file> ...

  Compile listed files (make .po objects).

<MiscOpts> can be: [-v] [-ri] [-u <file>]

-v  verbose mode

-ri generate readable .itf files

-u  use <file> for compilation

<ExecOpts> can be: [-s|-S|-SS <target>|-z|-zl|-e|-l|(-ll <module>)*]
                   (-d <alias>)* [-x]

-s  make a static executable (otherwise dynamic files are not included)

-S  make standalone executable for the current OS and architecture

-SS make standalone executable for <target> OS and architecture
    valid <target> values may be: LINUXi86, SolarisSparc...

    (both -S and -SS imply -s)

-z  generate executables with compressed bytecode

-zl generate libraries with compressed bytecode - any library (re)compiled
    as consequence of normal executable compilation will also be affected

-e  make executable with eager load of dynamic files at startup (default)

-l  idem with lazy load of dynamic files (except insecure cases)

-ll force <module> to be loaded lazily,  implies -l

-d  files using this path alias are dynamic (default: library)

-x  Extended recompilation: only useful for Ciao standard library developers

default extension for files is '.pl'

@end smallexample  



@c (component)


@node The interactive top-level shell, The interactive debugger, The stand-alone command-line compiler, Top
@comment node-name, next,  previous,  up
@chapter The interactive top-level shell
@liindex ciaosh
@c -------------------------------------------------
@c WARNING: Do not edit this file (ciaosh_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/shell/ciaosh_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza and the CLIP Group.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#11 (1999/12/14, 13:14:36 MET)


@glindex ciaosh
@code{ciaosh} is the Ciao interactive top-level shell. It provides the user with an interactive programming environment with tools for incrementally building programs, debugging programs by following their executions, and modifying parts of programs without having to start again from scratch. If available, it is strongly recommended to use it with the 
@glindex emacs interface
emacs interface provided, as it greatly simplifies the operation. This chapter documents general operation in the shell itself. Other chapters document the 





@menu
* Shell invocation and startup::  
* Shell interaction::		
* Entering recursive (conjunctive) shell levels::  
* Usage and interface (ciaosh)::  
* Documentation on exports (ciaosh)::  
* Documentation on internals (ciaosh)::	 
@end menu

@node Shell invocation and startup, Shell interaction, The interactive top-level shell, The interactive top-level shell
@comment node-name, next,  previous,  up
@section Shell invocation and startup 

When invoked, the shell responds with a message of identification and the prompt @code{?- } as soon as it is ready to accept input, thus: 


@smallexample 
Ciao-Prolog X.Y #PP: Thu Mar 25 17:20:55 MET 1999
?- 
@end smallexample  

When the shell is initialized it looks for a file 
@glindex .ciaorc
@code{.ciaorc} in the HOME directory and makes an @code{include} of it, if it exists. This file is useful for including 
@glindex use_module/1
@code{use_module/1} declarations for the modules one wants to be loaded by default, changing 
@glindex prolog flag
prolog flags, etc. If the initialization file does not exist, the 
@glindex ISO-Prolog
ISO-Prolog compatibility package 
@glindex iso
@code{iso} is included, to provide (almost) all the ISO builtins by default. Two command-line options control the loading of the initialization file: 


@table @asis 


@item @code{-f} 
Fast start, do not load any initialization file. 


@item @code{-l} @code{File} 
Look for initialization file @code{File} instead of @code{~/.ciaorc}. If it does not exist, include the compatibility package @code{iso}. 


@end table  



@node Shell interaction, Entering recursive (conjunctive) shell levels, Shell invocation and startup, The interactive top-level shell
@comment node-name, next,  previous,  up
@section Shell interaction 

After the shell outputs the prompt, it is expecting either an internal command (see the following sections) or a 
@coindex query
@glindex query
@emph{query} (a goal or sequence of goals). When typing in the input, which must be a valid prolog term, if the term does not end in the first line, subsequent lines are indented. For example: 


@smallexample 
?- X =
   f(a,
   b).

X = f(a,b) ? 

yes
?- 
@end smallexample  

The queries are executed by the shell as if they appeared in the 
@glindex user module
user module. Thus, in addition to builtin predicates, predicates available to be executed directly are all predicates defined by loaded user files (files with no module declaration), and imported predicates from modules by the use of @code{use_module}. 

The possible answers of the shell, after executing an internal command or query, are: 


@itemize @bullet{} 


@item If the execution failed (or produced an error), the answer is @code{no}. 


@item If the execution was successful, and no 
@glindex answer variable
answer variable (see below) was bound (or constraints where imposed on such variables), the answer is simply @code{yes}. 


@item If the execution was successful and bindings where made (or constraints where imposed) on 
@glindex answer variable
answer variables, then the shell outputs the values of answer variables, as a sequence of bindings (or constraints), and then prints a @code{?} as a prompt. At this point it is expecting an input line from the user. By entering a carriage-return (@key{RET}) or any line starting with @code{y}, the query terminates and the shell answer @code{yes}. Entering a `@code{,}' the shell enters a 
@glindex recursive level
recursive level (see below). Finally, any other answer forces the system to backtrack and look for the next solution (answering as with the first solution). 


@end itemize  

To allow using connection variables in queries without having to report their results, variables whose name starts with @code{_} are not considered in answers, the rest being the 
@coindex answer variable
@glindex answer variable
@emph{answer variable}s. This example illustrates the previous points: 


@smallexample 
?- member(a, [b, c]).

no
?- member(a, [a, b]).

yes
?- member(X, [a|L]).

X = a ? ;

L = [X|_] ? 

yes
?- atom_codes(ciao, _C), member(L, _C).

L = 99 ? ;

L = 105 ? ;

L = 97 ? ;

L = 111 ? ;

no
?- 
@end smallexample  



@node Entering recursive (conjunctive) shell levels, Usage and interface (ciaosh), Shell interaction, The interactive top-level shell
@comment node-name, next,  previous,  up
@section Entering recursive (conjunctive) shell levels 

As stated before, when the user answers with `@code{,}' after a solution is presented, the shell enters a 
@coindex recursive level
@glindex recursive level
@emph{recursive level}, changing its prompt to @emph{N} @code{?- } (where @emph{N} is the recursion level) and keeping the bindings or constraints of the solution (this is inspired by the 
@coindex LogIn
@glindex LogIn
@emph{LogIn} language developed by 
@coindex H. Ait-Kaci
@glindex H. Ait-Kaci
@emph{H. Ait-Kaci}, 
@coindex P. Lincoln
@glindex P. Lincoln
@emph{P. Lincoln} and 
@coindex Roger Nasr
@glindex Roger Nasr
@emph{Roger Nasr} [AKNL86]). Thus, the following queries will be executed within that context, and all variables in the lower level solutions will be reported in subsequent solutions at this level. To exit a recursive level, input an @key{EOF} character or the command @code{up}. The last solution after entering the level is repeated, to allow asking for more solutions. Use command @code{top} to exit all recursive levels and return to the top level. Example interaction: 


@smallexample 
?- directory_files('.',_Fs), member(F,_Fs).

F = 'file_utils.po' ? ,

1 ?- file_property(F, mod_time(T)).

F = 'file_utils.po',
T = 923497679 ? 

yes
1 ?- up.

F = 'file_utils.po' ? ;

F = 'file_utils.pl' ? ;

F = 'file_utils.itf' ? ,

1 ?- file_property(F, mod_time(T)).

F = 'file_utils.itf',
T = 923497679 ? 

yes
1 ?- ^D
F = 'file_utils.itf' ? 

yes
?- 
@end smallexample  




@node Usage and interface (ciaosh), Documentation on exports (ciaosh), Entering recursive (conjunctive) shell levels, The interactive top-level shell
@comment node-name, next,  previous,  up
@section Usage and interface (@code{ciaosh})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

The following predicates can be used at the top-level shell natively (but see also the commands available in @ref{The interactive debugger} which are also available within the top-level shell).

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex use_module/1
@code{use_module/1}, 
@glindex use_module/2
@code{use_module/2}, 
@glindex ensure_loaded/1
@code{ensure_loaded/1}, 
@glindex make_exec/2
@code{make_exec/2}, 
@glindex include/1
@code{include/1}, 
@glindex use_package/1
@code{use_package/1}, 
@glindex consult/1
@code{consult/1}, 
@glindex compile/1
@code{compile/1}, 
@glindex ./2
@code{./2}, 
@glindex make_po/1
@code{make_po/1}, 
@glindex unload/1
@code{unload/1}, 
@glindex set_debug_mode/1
@code{set_debug_mode/1}, 
@glindex set_nodebug_mode/1
@code{set_nodebug_mode/1}, 
@glindex make_actmod/2
@code{make_actmod/2}, 
@glindex force_lazy/1
@code{force_lazy/1}, 
@glindex undo_force_lazy/1
@code{undo_force_lazy/1}, 
@glindex dynamic_search_path/1
@code{dynamic_search_path/1}, 
@glindex multifile/1
@code{multifile/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{Application modules:}

@glindex toplev
@code{toplev}.


@item @emph{System library modules:}

@glindex libpaths
@code{libpaths}, 
@glindex compiler/compiler
@code{compiler/compiler}, 
@glindex compiler/exemaker
@code{compiler/exemaker}, 
@glindex compiler/c_itf
@code{compiler/c_itf}, 
@glindex debugger/debugger
@code{debugger/debugger}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (ciaosh), Documentation on internals (ciaosh), Usage and interface (ciaosh), The interactive top-level shell
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{ciaosh})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_module/1 (pred)}}}
@temp
@end iftex
@pdindex use_module/1 
@glindex use_module/1 
@deffn PREDICATE use_module/1:






@strong{Usage:} @code{use_module(Module)}
@itemize @minus
@item @emph{Description:} Load into the top-level the module defined in @code{Module}, importing all the predicates it exports. 
@item @emph{The following properties should hold at call time:}


@code{Module} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_module/2 (pred)}}}
@temp
@end iftex
@pdindex use_module/2 
@glindex use_module/2 
@deffn PREDICATE use_module/2:






@strong{Usage:} @code{use_module(Module,Imports)}
@itemize @minus
@item @emph{Description:} Load into the top-level the module defined in @code{Module}, importing the predicates in @code{Imports}. 
@item @emph{The following properties should hold at call time:}


@code{Module} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Imports} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ensure_loaded/1 (pred)}}}
@temp
@end iftex
@pdindex ensure_loaded/1 
@glindex ensure_loaded/1 
@deffn PREDICATE ensure_loaded/1:






@strong{Usage:} @code{ensure_loaded(File)}
@itemize @minus
@item @emph{Description:} Load into the top-level the code residing in file (or files) @code{File}, which is user (i.e. non-module) code. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name or a list of source names.
@iftex
@hfill
@end iftex
 (@code{ciaosh_doc:sourcenames/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{make_exec/2 (pred)}}}
@temp
@end iftex
@pdindex make_exec/2 
@glindex make_exec/2 
@deffn PREDICATE make_exec/2:






@strong{Usage:} @code{make_exec(File,ExecName)}
@itemize @minus
@item @emph{Description:} Make a Ciao executable from file (or files) @code{File}, giving it name @code{ExecName}. If @code{ExecName} is a variable, the compiler will choose a default name for the executable and will bind the variable @code{ExecName} to that name. The name is chosen as follows: if the main prolog file has no @code{.pl} extension or we are in Windows, the executable will have extension @code{.cpx}; else the executable will be named as the main prolog file without extension. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name or a list of source names.
@iftex
@hfill
@end iftex
 (@code{ciaosh_doc:sourcenames/1})
@item @emph{The following properties hold upon exit:}


@code{ExecName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{include/1 (pred)}}}
@temp
@end iftex
@pdindex include/1 
@glindex include/1 
@deffn PREDICATE include/1:






@strong{Usage:} @code{include(File)}
@itemize @minus
@item @emph{Description:} The contents of the file @code{File} are included in the top-level shell. For the moment, it only works with some directives, which are interpreted by the shell, or with normal clauses (which are asserted), if library(dynamic) is loaded beforehand. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_package/1 (pred)}}}
@temp
@end iftex
@pdindex use_package/1 
@glindex use_package/1 
@deffn PREDICATE use_package/1:






@strong{Usage:} @code{use_package(Package)}
@itemize @minus
@item @emph{Description:} Equivalent to issuing an include(library(@code{Package})) for each listed file. By now some package contents cannot be handled. 
@item @emph{The following properties should hold at call time:}


@code{Package} is a source name or a list of source names.
@iftex
@hfill
@end iftex
 (@code{ciaosh_doc:sourcenames/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{consult/1 (pred)}}}
@temp
@end iftex
@pdindex consult/1 
@glindex consult/1 
@deffn PREDICATE consult/1:






@strong{Usage:} @code{consult(File)}
@itemize @minus
@item @emph{Description:} Provided for backward compatibility. Similar to 
@glindex ensure_loaded/1
@code{ensure_loaded/1}, but ensuring each listed file is loaded in consult mode (see @ref{The interactive debugger}). 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name or a list of source names.
@iftex
@hfill
@end iftex
 (@code{ciaosh_doc:sourcenames/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{compile/1 (pred)}}}
@temp
@end iftex
@pdindex compile/1 
@glindex compile/1 
@deffn PREDICATE compile/1:






@strong{Usage:} @code{compile(File)}
@itemize @minus
@item @emph{Description:} Provided for backward compatibility. Similar to 
@glindex ensure_loaded/1
@code{ensure_loaded/1}, but ensuring each listed file is loaded in compile mode (see @ref{The interactive debugger}). 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name or a list of source names.
@iftex
@hfill
@end iftex
 (@code{ciaosh_doc:sourcenames/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{./2 (pred)}}}
@temp
@end iftex
@pdindex ./2 
@glindex ./2 
@deffn PREDICATE ./2:






@strong{Usage:} @code{[File|Files]}
@itemize @minus
@item @emph{Description:} Provided for backward compatibility, obsoleted by 
@glindex ensure_loaded/1
@code{ensure_loaded/1}. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Files} is a list of @code{sourcename}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{make_po/1 (pred)}}}
@temp
@end iftex
@pdindex make_po/1 
@glindex make_po/1 
@deffn PREDICATE make_po/1:






@strong{Usage:} @code{make_po(Files)}
@itemize @minus
@item @emph{Description:} Make object (@code{.po}) files from @code{Files}. Equivalent to executing "@code{ciaoc -c}" on the files. 
@item @emph{The following properties should hold at call time:}


@code{Files} is a source name or a list of source names.
@iftex
@hfill
@end iftex
 (@code{ciaosh_doc:sourcenames/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{unload/1 (pred)}}}
@temp
@end iftex
@pdindex unload/1 
@glindex unload/1 
@deffn PREDICATE unload/1:






@strong{Usage:} @code{unload(File)}
@itemize @minus
@item @emph{Description:} Unloads dynamically loaded file @code{File}. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_debug_mode/1 (pred)}}}
@temp
@end iftex
@pdindex set_debug_mode/1 
@glindex set_debug_mode/1 
@deffn PREDICATE set_debug_mode/1:






@strong{Usage:} @code{set_debug_mode(File)}
@itemize @minus
@item @emph{Description:} Set the loading mode of @code{File} to @emph{consult}. See @ref{The interactive debugger}. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_nodebug_mode/1 (pred)}}}
@temp
@end iftex
@pdindex set_nodebug_mode/1 
@glindex set_nodebug_mode/1 
@deffn PREDICATE set_nodebug_mode/1:






@strong{Usage:} @code{set_nodebug_mode(File)}
@itemize @minus
@item @emph{Description:} Set the loading mode of @code{File} to @emph{compile}. See @ref{The interactive debugger}. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{make_actmod/2 (pred)}}}
@temp
@end iftex
@pdindex make_actmod/2 
@glindex make_actmod/2 
@deffn PREDICATE make_actmod/2:






@strong{Usage:} @code{make_actmod(ModuleFile,PublishMod)}
@itemize @minus
@item @emph{Description:} Make an 
@glindex active module
active module executable from the module residing in @code{ModuleFile}, using address publish module of name @code{PublishMod} (which needs to be in the library paths). 
@item @emph{The following properties should hold at call time:}


@code{ModuleFile} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{PublishMod} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{force_lazy/1 (pred)}}}
@temp
@end iftex
@pdindex force_lazy/1 
@glindex force_lazy/1 
@deffn PREDICATE force_lazy/1:






@strong{Usage:} @code{force_lazy(Module)}
@itemize @minus
@item @emph{Description:} Force module of name @code{Module} to be loaded lazily in the subsequent created executables. 
@item @emph{The following properties should hold at call time:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{undo_force_lazy/1 (pred)}}}
@temp
@end iftex
@pdindex undo_force_lazy/1 
@glindex undo_force_lazy/1 
@deffn PREDICATE undo_force_lazy/1:






@strong{Usage:} @code{undo_force_lazy(Module)}
@itemize @minus
@item @emph{Description:} Disable a previous 
@glindex force_lazy/1
@code{force_lazy/1} on module @code{Module} (or, if it is uninstantiated, all previous 
@glindex force_lazy/1
@code{force_lazy/1}). 
@item @emph{Calls should, and exit will be compatible with:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dynamic_search_path/1 (pred)}}}
@temp
@end iftex
@pdindex dynamic_search_path/1 
@glindex dynamic_search_path/1 
@deffn PREDICATE dynamic_search_path/1:






@strong{Usage:} @code{dynamic_search_path(Name)}
@itemize @minus
@item @emph{Description:} Asserting a fact to this data predicate, files using 
@glindex path alias
path alias @code{Name} will be treated as dynamic in the subsequent created executables. 
@item @emph{The following properties should hold at call time:}


@code{Name} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(multifile)/1 (pred)}}}
@temp
@end iftex
@pdindex multifile/1 
@glindex multifile/1 
@deffn PREDICATE multifile/1:






@strong{Usage:} @code{multifile Pred}
@itemize @minus
@item @emph{Description:} Dynamically declare predicate @code{Pred} as multifile. This is useful at the top-level shell to be able to call multifile predicates of loaded files. 
@item @emph{The following properties should hold at call time:}


@code{Pred} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 

@iftex
@hfill
@end iftex
 (@code{basic_props:predname/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (ciaosh),  , Documentation on exports (ciaosh), The interactive top-level shell
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{ciaosh})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sourcenames/1 (prop)}}}
@temp
@end iftex
@prindex sourcenames/1 
@glindex sourcenames/1 
@deffn PROPERTY sourcenames/1:



Is defined as follows:
@smallexample 
sourcenames(File) :-
        sourcename(File).
sourcenames(Files) :-
        list(Files,sourcename).
@end smallexample  
See 
@glindex sourcename/1
@code{sourcename/1} in @ref{Basic file/stream handling}


@strong{Usage:} @code{sourcenames(Files)}
@itemize @minus
@item @emph{Description:} @code{Files} is a source name or a list of source names. 
@end itemize
@end deffn
@sp 1


@c (component)


@node The interactive debugger, Predicates controlling the interactive debugger, The interactive top-level shell, Top
@comment node-name, next,  previous,  up
@chapter The interactive debugger
@c -------------------------------------------------
@c WARNING: Do not edit this file (debugger_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/debugger/debugger_doc.pl
@c -------------------------------------------------

@strong{Author(s):} D. Cabeza, Manuel C. Rodriguez, (A. Ciepielewski, M. Carlsson, T. Chikayama, K. Shen).


 

The Ciao program development environment includes a number of advanced 
@glindex debugging tools
debugging tools, such as a 
@glindex source-level debugger
source-level debugger, the 
@glindex ciaopp
@code{ciaopp} preprocessor, and some 
@glindex execution visualizers
execution visualizers. Herein we discuss the interactive debugger available in the standard 
@glindex top-level
top-level, which allows tracing the control flow of programs, in a similar way to other popular Prolog systems. This is a classical Byrd @emph{box-type} 
@coindex debugger
@glindex debugger
@emph{debugger} 
@coindex box-type debugger
@glindex box-type debugger 
[Byr80,BBP81], with some enhancements, most notably being able to track the execution on the source program. We also discuss the 
@glindex embedded debugger
embedded debugger, which is a version of the debugger which can be embedded into executables so that an interactive debugging session can be triggered at any time while running that executable without needing the top-level shell. 

Byrd's 
@glindex Procedure Box
Procedure Box model of debugging execution provides a simple way of visualising control flow, including backtracking. Control flow is in principle viewed at the predicate level, rather than at the level of individual clauses. The Ciao debugger has the ability to mark selected modules and/or files for debugging (traditional and source debugging), rather than having to exhaustively trace your program. It also allows to selectively set 
@glindex spy-points
spy-points and 
@glindex breakpoints
breakpoints. Spy-points allow the programmer to nominate interesting predicates at which program execution is to pause so that the programmer can interact with the debugger. Breakpoints are similar to spy-points, but allow pausing at a specific line in the code, corresponding to a particular literal. There is a wide choice of control and information options available during debugging interaction. 

@strong{Note:} While the debugger described herein can be used in a standalone way (i.e., from a operating system shell or terminal window) in the same way as other Prolog debuggers, the most convenient way of debugging Ciao programs is by using the emacs mode (see @ref{Using Ciao inside GNU emacs}), i.e., debugging from within the 
@glindex emacs
@code{emacs} editor / programming environment. 



@menu
* Marking modules and files for debugging in the top-level debugger::  
* The debugging process::	
* Marking modules and files for debugging with the embedded debugger::	
* The procedure box control flow model::  
* Format of debugging messages::  
* Options available during debugging::	
* Calling predicates that are not exported by a module::  
* Acknowledgements::		
@end menu

@node Marking modules and files for debugging in the top-level debugger, The debugging process, The interactive debugger, The interactive debugger
@comment node-name, next,  previous,  up
@section Marking modules and files for debugging in the top-level debugger 

Usually, when a program is not working properly, the programmer has a feeling of which are the modules where the fault may be. Since full-fledged debugging is only available on @emph{interpreted} (called 
@coindex interpreted mode
@glindex interpreted mode
@emph{interpreted mode} in traditional Prolog systems) modules, which are executed much slower than compiled modules, there is the posibility of telling the top level which particular modules are to be loaded in 
@coindex interpreted mode
@glindex interpreted mode
@emph{interpreted mode}, with the aim of debugging them. The simplest way of achieving this is by executing in the Ciao shell prompt, for each suspicious module @code{Module} in the program, a command like this: 


@smallexample 
?- debug_module(Module).
@end smallexample  

An alternative way of loading a module in interpreted mode exists which will instruct the debugger to keep track of the line numbers in the source file and to report them during debugging. This feature can be selected for a suspicious module @code{Module} in the program by executing a command such as: 


@smallexample 
?- debug_module_source(Module).
@end smallexample  


@noindent
This is most useful when running the top-level inside the 
@glindex emacs
@code{emacs} editor since in that case the Ciao 
@glindex emacs mode
emacs mode allows performing full 
@glindex source-level debugging
source-level debugging in each module marked as above, i.e., the source lines being executed will be highlighted dynamically during debugging in a window showing the source code of the module. 


@coindex user modules, debugging
@glindex user modules, debugging 
Note that all files with no module declaration belong to the pseudo-module @code{user}, so the command to be issued for debugging a user file, say @code{foo.pl}, would be @code{debug_module(user)} or @code{debug_module_source(user)}, and not @code{debug_module(foo)}. 

The two ways of performing 
@glindex source-level debugging
source-level debugging are fully compatible between them, i.e., Ciao allows having some modules loaded with 
@glindex debug_module/1
@code{debug_module/1} and others with 
@glindex debug_module_source/1
@code{debug_module_source/1}. To change from one interpreted mode to the other mode it suffices to select the module with the new interpreted mode (debugger mode), using the appropiate command, and reload the module. 

The commands above perform in fact two related actions: first, they let the compiler know that if a file containing a module with this name is loaded, it should be loaded in interpreted mode (source or traditional). In addition, they instruct the debugger to actually prepare for debugging the code belonging to that module. After that, the modules which are to be debugged have to be (re)loaded so that they are compiled or loaded for interpretation in the appropriate way. The nice thing is that, due to the modular behaviour of the compiler/top-level, if the modules are part of a bigger application, it suffices to load the main module of the application, since this will automatically force the dependent modules which have changed to be loaded in the appropriate way, including those whose 
@coindex loading mode
@glindex loading mode
@emph{loading mode} has changed (i.e., changing the loading mode has the effect of forcing the required re-loading of the module at the appropriate time). 

Later in the debugging process, as the bug location is isolated, typically one will want to restrict more and more the modules where debugging takes place. To this end, and without the need for reloading, one can tell the debugger to not consider a module for debugging issuing a 
@glindex nodebug_module/1
@code{nodebug_module/1} command, which counteracts a 
@glindex debug_module/1
@code{debug_module/1} or 
@glindex debug_module_source/1
@code{debug_module_source/1} command with the same module name, and reloading it (or the main file). 

There are also two top-level commands 
@glindex set_debug_mode/1
@code{set_debug_mode/1} and 
@glindex set_nodebug_mode/1
@code{set_nodebug_mode/1}, which accept as argument a file spec (i.e., @code{library(foo)} or @code{foo}, even if it is a user file) to be able to load a file in interpreted mode without changing the set of modules that the debugger will try to spy. 



@node The debugging process, Marking modules and files for debugging with the embedded debugger, Marking modules and files for debugging in the top-level debugger, The interactive debugger
@comment node-name, next,  previous,  up
@section The debugging process 

Once modules or user files are marked for debugging and reloaded, the traditional debugging shell commands can be used (the documentation of the 
@glindex debugger
@code{debugger} library following this chapter contains all the commands and their description), with the same meaning as in other classical Prolog systems. The differences in their behavior are: 


@itemize @bullet{} 


@item Debugging takes place only in the modules in which it was activated, 


@item 
@glindex nospy/1
@code{nospy/1} and 
@glindex spy/1
@code{spy/1} accept sequences of predicate specs, and they will search for those predicates only in the modules marked for debugging (traditional or source-level debugging). 


@item 
@glindex breakpt/6
@code{breakpt/6} and 
@glindex nobreakpt/6
@code{nobreakpt/6} allow setting breakpoints at selected clause literals and will search for those literals only in the modules marked for 
@glindex source-level debugging
source-level debugging (modules marked with 
@glindex debug_module_source/1
@code{debug_module_source/1}). 


@end itemize  

In particular, the system is initially in 
@glindex nodebug
nodebug mode, in which no tracing is performed. The system can be put in 
@glindex debug
debug mode by a call to 
@glindex debug/0
@code{debug/0} in which execution of queries will proceed until the first @emph{spy-point} or @emph{breakpoint}. Alternatively, the system can be put in 
@glindex trace
trace mode by a call to 
@glindex trace/0
@code{trace/0} in which all predicates will be trace. 



@node Marking modules and files for debugging with the embedded debugger, The procedure box control flow model, The debugging process, The interactive debugger
@comment node-name, next,  previous,  up
@section Marking modules and files for debugging with the embedded debugger 

The embedded debugger, as the interpreted debugger, has three different modes of operation: debug, trace or nodebug. These debuggers modes can be set by adding a package declaration in the module, as follows: 


@smallexample 
:- use_package(debug).
:- use_package(trace).
:- use_package(nodebug).
@end smallexample  


@noindent
and recompiling the application. 

In order to debug, or trace, correctly the complete code these declarations @emph{must} be the last ones. Also it is possible to add the package in the module declaration using the predicate 
@glindex module/3
@code{module/3}. 

The embedded debugger has limitations over the interpreted debugger. The most important is that the ``retry'' option is not available. But it is possible to add, and remove, 
@glindex spy-points
spy-points and 
@glindex breakpoins
breakpoins using the predicates 
@glindex spy/1
@code{spy/1}, 
@glindex nospy/1
@code{nospy/1}, 
@glindex breakpt/6
@code{breakpt/6} and 
@glindex nobreakpt/6
@code{nobreakpt/6}, etc. These can be used in a clause declaration or as declarations. Also it is possible to add in the code predicates for issuing the debugger (i.e., use debug mode, and in a clause add the predicate 
@glindex trace/1
@code{trace/1}). 

The nodebug mode allows keeping the spy-points and breakpoints in the code instead of removing them from the code. 

Note that in order to use the 
@glindex embedded debugger
embedded debugger the buffer where the program will run must be in the Ciao inferior mode ( @code{M-x ciao-inferior-mode}). 

See the following example: 
@smallexample 
:- module( foo,[main/1],[assertions, debug]).

:- entry main/1.

main(X) :- 
         display(X),
         spy(foo), 
         foo(X), 
         notrace,
         nl.

foo([]).  
foo([X|T]) :-  
        trace,
        bar(X), 
        foo(T).

bar(X) :- 
        display(X).
@end smallexample  



@node The procedure box control flow model, Format of debugging messages, Marking modules and files for debugging with the embedded debugger, The interactive debugger
@comment node-name, next,  previous,  up
@section The procedure box control flow model 

During debugging the interpreter prints out a sequence of goals in various states of instantiation in order to show the state that the program has reached in its execution. However, in order to understand what is occurring it is necessary to understand when and why the interpreter prints out goals. As in other programming languages, key points of interest are procedure entry and return, but in Prolog there is the additional complexity of backtracking. One of the major confusions that novice Prolog programmers have to face is the question of what actually happens when a goal fails and the system suddenly starts backtracking. The Procedure Box model of Prolog execution views program control flow in terms of movement about the program text. This model provides a basis for the debugging mechanism in the interpreter, and enables the user to view the behaviour of the program in a consistent way. It also provides the basis for the visualization performed on the source level program when source level program when 
@glindex source-level debugging
source-level debugging is activated within 
@glindex emacs
@code{emacs}. 
 
Let us look at an example Prolog procedure: 

@image{autofigbyrdbox} 

The first clause states that @code{Y} is a descendant of @code{X} if @code{Y} is an offspring of @code{X}, and the second clause states that @code{Y} is a descendant of @code{X} if @code{Z} is an offspring of @code{X} and @code{Y} is a descendant of @code{Z}. In the diagram a box has been drawn around the whole procedure and labelled arrows indicate the control flow in and out of this box. There are four such arrows which we shall look at in turn. 


@itemize @bullet{} 


@item @strong{Call} 

This arrow represents initial invocation of the procedure. When a goal of the form @code{descendant(X,Y)} is required to be satisfied, control passes through the Call port of the descendant box with the intention of matching a component clause and then satisfying any subgoals in the body of that clause. Note that this is independent of whether such a match is possible; i.e. first the box is called, and then the attempt to match takes place. Textually we can imagine moving to the code for descendant when meeting a call to descendant in some other part of the code. 


@item @strong{Exit} 

This arrow represents a successful return from the procedure. This occurs when the initial goal has been unified with one of the component clauses and any subgoals have been satisfied. Control now passes out of the Exit port of the descendant box. Textually we stop following the code for descendant and go back to the place we came from. 


@item @strong{Redo} 

This arrow indicates that a subsequent goal has failed and that the system is backtracking in an attempt to find alternatives to previous solutions. Control passes through the Redo port of the descendant box. An attempt will now be made to resatisfy one of the component subgoals in the body of the clause that last succeeded; or, if that fails, to completely rematch the original goal with an alternative clause and then try to satisfy any subgoals in the body of this new clause. Textually we follow the code backwards up the way we came looking for new ways of succeeding, possibly dropping down on to another clause and following that if necessary. 


@item @strong{Fail} 

This arrow represents a failure of the initial goal, which might occur if no clause is matched, or if subgoals are never satisfied, or if any solution produced is always rejected by later processing. Control now passes out of the Fail port of the descendant box and the system continues to backtrack. Textually we move back to the code which called this procedure and keep moving backwards up the code looking for choice points. 
@end itemize  

In terms of this model, the information we get about the procedure box is only the control flow through these four ports. This means that at this level we are not concerned with which clause matches, and how any subgoals are satisfied, but rather we only wish to know the initial goal and the final outcome. However, it can be seen that whenever we are trying to satisfy subgoals, what we are actually doing is passing through the ports of @emph{their} respective boxes. If we were following this (e.g., activating 
@glindex source-level debugging
source-level debugging), then we would have complete information about the control flow inside the procedure box. 

Note that the box we have drawn around the procedure should really be seen as an invocation box. That is, there will be a different box for each different invocation of the procedure. Obviously, with something like a recursive procedure, there will be many different Calls and Exits in the control flow, but these will be for different invocations. Since this might get confusing each invocation box is given a unique integer identifier in the messages, as described below. 

Note that not all procedure calls are traced; there are a few basic predicates which have been made invisible since it is more convenient not to trace them. These include debugging directives, basic control structures, and some builtins. This means that messages will never be printed for these predicates during debugging. 



@node Format of debugging messages, Options available during debugging, The procedure box control flow model, The interactive debugger
@comment node-name, next,  previous,  up
@section Format of debugging messages 

This section explains the two formats of the message output by the debugger at a port. All trace messages are output to the terminal regardless of where the current output stream is directed (which allows tracing programs while they are performing file I/O). The basic format, which will be shown in traditional debug and in source-level debugging within Ciao 
@glindex emacs
@code{emacs} mode, is as follows: 


@smallexample 
S  13  7  Call: T user:descendant(dani,_123) ?
@end smallexample  

@code{S} is a spy-point or breakpoint indicator. It is printed as '@code{+}', indicating that there is a spy-point on @code{descendant/2} in module @code{user}, as @code{'B'} denoting a breakpoint, or as ' ', denoting no spy-point or breakpoint. If there is a spy-point and a breakpoint in the same predicate the spy-point indicator takes preference over breakpoint indicator. 

@code{T} is a subterm trace. This is used in conjunction with the @code{^} command (set subterm), described below. If a subterm has been selected, @code{T} is printed as the sequence of commands used to select the subterm. Normally, however, @code{T} is printed as ' ', indicating that no subterm has been selected. 

The first number is the unique invocation identifier. It is always nondecreasing (provided that the debugger is switched on) regardless of whether or not the invocations are being actually seen. This number can be used to cross correlate the trace messages for the various ports, since it is unique for every invocation. It will also give an indication of the number of procedure calls made since the start of the execution. The invocation counter starts again for every fresh execution of a command, and it is also reset when retries (see later) are performed. 

The number following this is the @emph{current depth}; i.e., the number of direct @emph{ancestors} this goal has. The next word specifies the particular port (@code{Call}, @code{Exit}, @code{Redo} or @code{Fail}). The goal is then printed so that its current instantiation state can be inspected. The final @code{?} is the prompt indicating that the debugger is waiting for user interaction. One of the option codes allowed (see below) can be input at this point. 

The second format, quite similar to the format explained above, is shown when using source-level debugging outside the Ciao 
@glindex emacs
@code{emacs} mode, and it is as follows: 


@smallexample 
	   In /home/mcarlos/ciao/foo.pl (5-9) descendant-1
S  13  7  Call: T user:descendant(dani,_123) ?
@end smallexample  

This format is identical to the format above except for the first line, which contains the information for location of the point in the source program text where execution is currently at. The first line contains the name of the source file, the start and end lines where the literal can be found, the substring to search for between those lines and the number of substrings to locate. This information for locating the point on the source file is not shown when executing the source-level debugger from the Ciao 
@glindex emacs
@code{emacs} mode. 

Ports can be ``unleashed'' by calling the 
@glindex leash/1
@code{leash/1} predicate omiting that port in the argument. This means that the debugger will stop but user interaction is not possible for an unleashed port. Obviously, the @code{?} prompt will not be shown in such messages, since the user has specified that no interaction is desired at this point. 



@node Options available during debugging, Calling predicates that are not exported by a module, Format of debugging messages, The interactive debugger
@comment node-name, next,  previous,  up
@section Options available during debugging 
@coindex debug options
@glindex debug options 

This section describes the particular options that are available when the debugger prompts after printing out a debugging message. All the options are one letter mnemonics, some of which can be optionally followed by a decimal integer. They are read from the terminal with any blanks being completely ignored up to the next terminator (carriage-return, line-feed, or escape). Some options only actually require the terminator; e.g., the creep option, only requires @key{RET}. 

The only option which really needs to be remembered is '@code{h}' (followed by @key{RET}). This provides help in the form of the following list of available options. 


@smallexample 
<cr>   creep            c      creep
 l     leap             s      skip
 r     retry            r <i>  retry i
 f     fail             f <i>  fail i
 d     display          p      print
 w     write
 g     ancestors        g <n>  ancestors n
 n     nodebug          =      debugging
 +     spy this         -      nospy this
 a     abort            
 @@     command          u      unify
 <     reset printdepth < <n>  set printdepth
 ^     reset subterm    ^ <n>  set subterm
 ?     help             h      help
@end smallexample  


@itemize @bullet{} 


@item @code{c} (
@coindex creep
@glindex creep
@emph{creep}) 

causes the debugger to single-step to the very next port and print a message. Then if the port is leashed the user is prompted for further interaction. Otherwise it continues creeping. If leashing is off, creep is the same as leap (see below) except that a complete trace is printed on the terminal. 


@item @code{l} (
@coindex leap
@glindex leap
@emph{leap}) 

causes the interpreter to resume running the program, only stopping when a spy-point or breakpoint is reached (or when the program terminates). Leaping can thus be used to follow the execution at a higher level than exhaustive tracing. All that is needed to do is to set spy-points and breakpoints on an evenly spread set of pertinent predicates or lines, and then follow the control flow through these by leaping from one to the other. 


@item @code{s} (
@coindex skip
@glindex skip
@emph{skip}) 

is only valid for Call and Redo ports, if it is issued in Exit or Fail ports it is equivalent to creep. It skips over the entire execution of the predicate. That is, no message will be seen until control comes back to this predicate (at either the Exit port or the Fail port). Skip is particularly useful while creeping since it guarantees that control will be returned after the (possibly complex) execution within the box. With skip then no message at all will appear until control returns to the Exit port or Fail port corresponding to this Call port or Redo port. This includes calls to predicates with spy-points and breakpoints set: they will be masked out during the skip. There is a way of overriding this: the @code{t} option after a @key{^C} interrupt will disable the masking. Normally, however, this masking is just what is required! 


@item @code{r} (
@coindex retry
@glindex retry
@emph{retry}) 

can be used at any of the four ports (although at the Call port it has no effect). It transfers control back to the Call port of the box. This allows restarting an invocation when, for example, it has left the programmer with some weird result. The state of execution is exactly the same as in the original call (unless the invocation has performed side effects, which will not be undone). When a retry is performed the invocation counter is reset so that counting will continue from the current invocation number regardless of what happened before the retry. This is in accord with the fact that execution has, in operational terms, returned to the state before anything else was called. 

If an integer is supplied after the retry command, then this is taken as specifying an invocation number and the system tries to get to the Call port, not of the current box, but of the invocation box specified. It does this by continuously failing until it reaches the right place. Unfortunately this process cannot be guaranteed: it may be the case that the invocation the programmer is looking for has been cut out of the search space by cuts in the program. In this case the system fails to the latest surviving Call port before the correct one. 


@item @code{f} (
@coindex fail
@glindex fail
@emph{fail}) 

can be used at any of the four ports (although at the Fail port it has no effect). It transfers control to the Fail port of the box, forcing the invocation to fail prematurely. If an integer is supplied after the command, then this is taken as specifying an invocation number and the system tries to get to the Fail port of the invocation box specified. It does this by continuously failing until it reaches the right place. Unfortunately, as before, this process cannot be guaranteed. 


@item @code{d} (
@coindex display
@glindex display
@emph{display}) 

displays the current goal using @code{display/1}. See @code{w} below. 


@item @code{p} (
@coindex print
@glindex print
@emph{print}) 

re-prints the current goal using @code{print/1}. Nested structures will be printed to the specified @emph{printdepth} (see below). 


@item @code{w} (
@coindex write
@glindex write
@emph{write}) 

writes the current goal on the terminal using @code{write/1}. 


@item @code{g} (
@coindex ancestors
@glindex ancestors
@emph{ancestors}) 

provides a list of ancestors to the current goal, i.e., all goals that are hierarchically above the current goal in the calling sequence. It is always possible to jump to any goal in the ancestor list (by using retry, etc.). If an integer @code{n} is supplied, then only @code{n} ancestors will be printed. That is to say, the last @code{n} ancestors will be printed counting back from the current goal. Each entry in the list is preceded by the invocation number followed by the depth number (as would be given in a trace message). 


@item @code{n} (
@coindex nodebug
@glindex nodebug
@emph{nodebug}) 

switches the debugger off. Note that this is the correct way to switch debugging off at a trace point. The @code{@@} option cannot be used because it always returns to the debugger. 


@item @code{=} (
@coindex debugging
@glindex debugging
@emph{debugging}) 

outputs information concerning the status of the current debugging session. 


@item @code{+} 
@coindex spy
@glindex spy
@emph{spy} 

sets a spy-point on the current goal. 


@item @code{-} (
@coindex nospy
@glindex nospy
@emph{nospy}) 

removes the spy-point from the current goal. 


@item @code{a} (
@coindex abort
@glindex abort
@emph{abort}) 

causes an abort of the current execution. All the execution states built so far are destroyed and the system is put right back at the top-level of the interpreter. (This is the same as the built-in predicate @code{abort/0}.) 


@item @code{@@} (
@coindex command
@glindex command
@emph{command}) 

allows calling arbitrary goals. The initial message @code{| ?- } will be output on the terminal, and a command is then read from the terminal and executed as if it was at top-level. 


@item @code{u} (
@coindex unify
@glindex unify
@emph{unify}() 

is available at the Call port and gives the option of providing a solution to the goal from the terminal rather than executing the goal. This is convenient, e.g., for providing a ``stub'' for a predicate that has not yet been written. A prompt @code{|: } will be output on the terminal, and the solution is then read from the terminal and unified with the goal. 


@item @code{<} (
@coindex printdepth
@glindex printdepth
@emph{printdepth}) 

sets a limit for the subterm nesting level that is printed in messages. While in the debugger, a printdepth is in effect for limiting the subterm nesting level when printing the current goal. When displaying or writing the current goal, all nesting levels are shown. The limit is initially 10. This command, without arguments, resets the limit to 10. With an argument of @code{n} the limit is set to @code{n}. 


@item @code{^} (
@coindex subterm
@glindex subterm
@emph{subterm}) 

sets the subterm to be printed in messages. While at a particular port, a current subterm of the current goal is maintained. It is the current subterm which is displayed, printed, or written when prompting for a debugger command. Used in combination with the printdepth, this provides a means for navigating in the current goal for focusing on the part which is of interest. The current subterm is set to the current goal when arriving at a new port. This command, without arguments, resets the current subterm to the current goal. With an argument of @code{n} (greater than 0 and less or equal to the number of subterms of the current subterm), the current subterm is replaced by its @code{n}'th subterm. With an argument of @code{0}, the current subterm is replaced by its parent term. 


@item @code{?} or @code{h} (
@coindex help
@glindex help
@emph{help}) 

displays the table of options given above. 


@end itemize  



@node Calling predicates that are not exported by a module, Acknowledgements, Options available during debugging, The interactive debugger
@comment node-name, next,  previous,  up
@section Calling predicates that are not exported by a module 

The Ciao module system does not allow calling predicates which are not exported during debugging. However, as an aid during debuggig, this is allowed (only from the top-level and for modules which are in debug mode or source-level debug mode) using the 
@glindex call_in_module/2
@code{call_in_module/2} predicate. 

Note that this does not affect analysis or optimization issues, since it only works on modules which are loaded in debug mode or source-level debug mode, i.e. unoptimized. 



@node Acknowledgements,  , Calling predicates that are not exported by a module, The interactive debugger
@comment node-name, next,  previous,  up
@section Acknowledgements 

Originally written by Andrzej Ciepielewski. Minor modifications by Mats Carlsson. Later modifications (17 Dec 87) by Takashi Chikayama (making tracer to use 
@glindex print/1
@code{print/1} rather than 
@glindex write/1
@code{write/1}, temporarily switching debugging flag off while writing trace message and within ``break'' level). Additional modifications by Kish Shen (May 88): subterm navigation, handle unbound args in 
@glindex spy/1
@code{spy/1} and 
@glindex nospy/1
@code{nospy/1}, trapping arithmetics errors in debug mode. Adapted then to &-Prolog and Ciao by D. Cabeza and included in the Ciao version control system. Extended for source-level debugging by Manuel C. Rodr@'{@dotless{i}}guez. (See changelog if included in the document for more detailed documentation of the later changes.) 




@c (component)


@node Predicates controlling the interactive debugger, The script interpreter, The interactive debugger, Top
@comment node-name, next,  previous,  up
@chapter Predicates controlling the interactive debugger
@liindex debugger
@c -------------------------------------------------
@c WARNING: Do not edit this file (debugger.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/debugger/debugger.pl
@c -------------------------------------------------

@strong{Author(s):} A. Ciepielewski, M. Carlsson, T. Chikayama, K. Shen, D. Cabeza, M. Rodriguez.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#148 (2000/5/24, 11:26:32 CEST)

This library implements predicates which are normally used in the interactive top-level shell to debug programs. A subset of them are available in the embeddable debugger.



@menu
* Usage and interface (debugger)::  
* Documentation on exports (debugger)::	 
* Documentation on internals (debugger)::  
* Known bugs and planned improvements (debugger)::  
@end menu

@node Usage and interface (debugger), Documentation on exports (debugger), Predicates controlling the interactive debugger, Predicates controlling the interactive debugger
@comment node-name, next,  previous,  up
@section Usage and interface (@code{debugger})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(debugger)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex debug_module/1
@code{debug_module/1}, 
@glindex nodebug_module/1
@code{nodebug_module/1}, 
@glindex debug_module_source/1
@code{debug_module_source/1}, 
@glindex debug/0
@code{debug/0}, 
@glindex nodebug/0
@code{nodebug/0}, 
@glindex trace/0
@code{trace/0}, 
@glindex notrace/0
@code{notrace/0}, 
@glindex spy/1
@code{spy/1}, 
@glindex nospy/1
@code{nospy/1}, 
@glindex nospyall/0
@code{nospyall/0}, 
@glindex breakpt/6
@code{breakpt/6}, 
@glindex nobreakpt/6
@code{nobreakpt/6}, 
@glindex nobreakall/0
@code{nobreakall/0}, 
@glindex list_breakpt/0
@code{list_breakpt/0}, 
@glindex debugging/0
@code{debugging/0}, 
@glindex leash/1
@code{leash/1}, 
@glindex maxdepth/1
@code{maxdepth/1}, 
@glindex call_in_module/2
@code{call_in_module/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex debugger/debugger_lib
@code{debugger/debugger_lib}, 
@glindex format
@code{format}, 
@glindex ttyout
@code{ttyout}, 
@glindex read
@code{read}, 
@glindex write
@code{write}, 
@glindex aggregates
@code{aggregates}, 
@glindex sort
@code{sort}, 
@glindex prolog_sys
@code{prolog_sys}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (debugger), Documentation on internals (debugger), Usage and interface (debugger), Predicates controlling the interactive debugger
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{debugger})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug_module/1 (pred)}}}
@temp
@end iftex
@pdindex debug_module/1 
@glindex debug_module/1 
@deffn PREDICATE debug_module/1:






@strong{Usage:} @code{debug_module(Module)}
@itemize @minus
@item @emph{Description:} The debugger will take into acount module @code{Module} (assuming it is loaded in interpreted mode). When issuing this command at the toplevel shell, the compiler is instructed also to set to @emph{interpret} the loading mode of files defining that module and also to mark it as 'modified' so that (re)loading this file or a main file that uses this module will force it to be reloaded for source-level debugging. 
@item @emph{The following properties should hold at call time:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nodebug_module/1 (pred)}}}
@temp
@end iftex
@pdindex nodebug_module/1 
@glindex nodebug_module/1 
@deffn PREDICATE nodebug_module/1:






@strong{Usage:} @code{nodebug_module(Module)}
@itemize @minus
@item @emph{Description:} The debugger will not take into acount module @code{Module}. When issuing this command at the toplevel shell, the compiler is instructed also to set to @emph{compile} the loading mode of files defining that module. 
@item @emph{The following properties should hold at call time:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug_module_source/1 (pred)}}}
@temp
@end iftex
@pdindex debug_module_source/1 
@glindex debug_module_source/1 
@deffn PREDICATE debug_module_source/1:






@strong{Usage:} @code{debug_module_source(Module)}
@itemize @minus
@item @emph{Description:} The debugger will take into acount module @code{Module} (assuming it is is loaded in source-level debug mode). When issuing this command at the toplevel shell, the compiler is instructed also to set to @emph{interpret} the loading mode of files defining that module and also to mark it as 'modified' so that (re)loading this file or a main file that uses this module will force it to be reloaded for source-level debugging. 
@item @emph{The following properties should hold at call time:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug/0 (pred)}}}
@temp
@end iftex
@pdindex debug/0 
@glindex debug/0 
@deffn PREDICATE debug/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Switches the debugger on. The interpreter will stop at all ports of procedure boxes of spied predicates. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nodebug/0 (pred)}}}
@temp
@end iftex
@pdindex nodebug/0 
@glindex nodebug/0 
@deffn PREDICATE nodebug/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Switches the debugger off. If there are any spy-points set then they will be kept but disabled. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{trace/0 (pred)}}}
@temp
@end iftex
@pdindex trace/0 
@glindex trace/0 
@deffn PREDICATE trace/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Start tracing, switching the debugger on if needed. The interpreter will stop at all leashed ports of procedure boxes of predicates either belonging to debugged modules or called from clauses of debugged modules. A message is printed at each stop point, expecting input from the user (write @code{h} to see the available options). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{notrace/0 (pred)}}}
@temp
@end iftex
@pdindex notrace/0 
@glindex notrace/0 
@deffn PREDICATE notrace/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Equivalent to 
@glindex nodebug/0
@code{nodebug/0}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{spy/1 (pred)}}}
@temp
@end iftex
@pdindex spy/1 
@glindex spy/1 
@deffn PREDICATE spy/1:






@strong{Usage:} @code{spy(PredSpec)}
@itemize @minus
@item @emph{Description:} Set spy-points on predicates belonging to debugged modules and which match @code{PredSpec}, switching the debugger on if needed. This predicate is defined as a prefix operator by the toplevel. 
@item @emph{The following properties should hold at call time:}


@code{PredSpec} is a sequence of @code{multpredspec}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:sequence/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nospy/1 (pred)}}}
@temp
@end iftex
@pdindex nospy/1 
@glindex nospy/1 
@deffn PREDICATE nospy/1:






@strong{Usage:} @code{nospy(PredSpec)}
@itemize @minus
@item @emph{Description:} Remove spy-points on predicates belonging to debugged modules which match @code{PredSpec}. This predicate is defined as a prefix operator by the toplevel. 
@item @emph{The following properties should hold at call time:}


@code{PredSpec} is a sequence of @code{multpredspec}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:sequence/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nospyall/0 (pred)}}}
@temp
@end iftex
@pdindex nospyall/0 
@glindex nospyall/0 
@deffn PREDICATE nospyall/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Remove all spy-points. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{breakpt/6 (pred)}}}
@temp
@end iftex
@pdindex breakpt/6 
@glindex breakpt/6 
@deffn PREDICATE breakpt/6:






@strong{Usage:} @code{breakpt(Pred,Src,Ln0,Ln1,Number,RealLine)}
@itemize @minus
@item @emph{Description:} Set a 
@coindex breakpoint
@glindex breakpoint
@emph{breakpoint} in file @code{Src} between lines @code{Ln0} and @code{Ln1} at the literal corresponding to the @code{Number}'th occurence of (predicate) name @code{Pred}. The pair @code{Ln0}-@code{Ln1} uniquely identifies a program clause and must correspond to the start and end line numbers for the clause. The rest of the arguments provide enough information to be able to locate the exact literal that the @code{RealLine} line refers to. This is normally not issued by users but rather by the 
@glindex emacs
@code{emacs} mode, which automatically computes the different argument after selecting a point in the source file. 
@item @emph{The following properties should hold at call time:}


@code{Pred} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Src} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Ln0} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Ln1} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Number} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{RealLine} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nobreakpt/6 (pred)}}}
@temp
@end iftex
@pdindex nobreakpt/6 
@glindex nobreakpt/6 
@deffn PREDICATE nobreakpt/6:






@strong{Usage:} @code{nobreakpt(Pred,Src,Ln0,Ln1,Number,RealLine)}
@itemize @minus
@item @emph{Description:} Remove a breakpoint in file @code{Src} between lines @code{Ln0} and @code{Ln1} at the @code{Number}'th occurence of (predicate) name @code{Pred} (see 
@glindex breakpt/6
@code{breakpt/6}). Also normally used from de 
@glindex emacs
@code{emacs} mode. 
@item @emph{The following properties should hold at call time:}


@code{Pred} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Src} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Ln0} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Ln1} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Number} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{RealLine} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nobreakall/0 (pred)}}}
@temp
@end iftex
@pdindex nobreakall/0 
@glindex nobreakall/0 
@deffn PREDICATE nobreakall/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Remove all breakpoints. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_breakpt/0 (pred)}}}
@temp
@end iftex
@pdindex list_breakpt/0 
@glindex list_breakpt/0 
@deffn PREDICATE list_breakpt/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Prints out the location of all breakpoints. The location of the breakpoints is showed usual by referring to the source file, the lines between which the predicate can be found, the predicate name and the number of ocurrence of the predicate name of the literal. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debugging/0 (pred)}}}
@temp
@end iftex
@pdindex debugging/0 
@glindex debugging/0 
@deffn PREDICATE debugging/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Display debugger state. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{leash/1 (pred)}}}
@temp
@end iftex
@pdindex leash/1 
@glindex leash/1 
@deffn PREDICATE leash/1:






@strong{Usage:} @code{leash(Ports)}
@itemize @minus
@item @emph{Description:} Leash on ports @code{Ports}, some of @code{call}, @code{exit}, @code{redo}, @code{fail}. By default, all ports are on leash. 
@item @emph{The following properties should hold at call time:}


@code{Ports} is a list of @code{port}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{maxdepth/1 (pred)}}}
@temp
@end iftex
@pdindex maxdepth/1 
@glindex maxdepth/1 
@deffn PREDICATE maxdepth/1:






@strong{Usage:} @code{maxdepth(MaxDepth)}
@itemize @minus
@item @emph{Description:} Set maximum invocation depth in debugging to @code{MaxDepth}. Calls to compiled predicates are not included in the computation of the depth. 
@item @emph{The following properties should hold at call time:}


@code{MaxDepth} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{call_in_module/2 (pred)}}}
@temp
@end iftex
@pdindex call_in_module/2 
@glindex call_in_module/2 
@deffn PREDICATE call_in_module/2:






@strong{Usage:} @code{call_in_module(Module,Predicate)}
@itemize @minus
@item @emph{Description:} Calls predicate @code{Predicate} belonging to module @code{Module}, even if that module does not export the predicate. This only works for modules which are in debug (interpreted) mode (i.e., they are not optimized). 
@item @emph{The following properties should hold at call time:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Predicate} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (debugger), Known bugs and planned improvements (debugger), Documentation on exports (debugger), Predicates controlling the interactive debugger
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{debugger})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{multpredspec/1 (prop)}}}
@temp
@end iftex
@prindex multpredspec/1 
@glindex multpredspec/1 
@deffn PROPERTY multpredspec/1:



A property, defined as follows:
@smallexample 
@smallexample 
multpredspec(Mod:Spec) :-
        atm(Mod),
        multpredspec(Spec).
multpredspec(Name/Low-High) :-
        atm(Name),
        int(Low),
        int(High).
multpredspec(Name/(Low-High)) :-
        atm(Name),
        int(Low),
        int(High).
multpredspec(Name/Arity) :-
        atm(Name),
        int(Arity).
multpredspec(Name) :-
        atm(Name).
@end smallexample 
@end smallexample 


@end deffn
@sp 1



@node Known bugs and planned improvements (debugger),  , Documentation on internals (debugger), Predicates controlling the interactive debugger
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{debugger})

@itemize @bullet{}

@item
Add an option to the emacs menu to automatically select all modules in a project.

@item
Consider the possibility to show debugging messages directly in the source code emacs buffer.
@end itemize

@c (component)


@node The script interpreter, Customizing library paths and path aliases, Predicates controlling the interactive debugger, Top
@comment node-name, next,  previous,  up
@chapter The script interpreter
@c -------------------------------------------------
@c WARNING: Do not edit this file (ciao-shell.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/shell/ciao-shell.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#130 (2000/5/3, 20:19:4 CEST)


@glindex ciao-shell
@code{ciao-shell} is the Ciao script interpreter. It can be used to write 
@coindex Prolog shell scripts
@glindex Prolog shell scripts
@emph{Prolog shell scripts} (see [Her96,CHV96b]), that is, executable files containing source code, which are compiled on demand. 

Writing Prolog scripts can sometimes be advantageous with respect to creating binary executables for small- to medium-sized programs that are modified often and perform relatively simple tasks. The advantage is that no explicit compilation is necessary, and thus changes and updates to the program imply only editing the source file. The disadvantage is that startup of the script (the first time after it is modified) is slower than for an application that has been compiled previously. 

An area of application is, for example, writing 
@coindex CGI executables
@glindex CGI executables
@emph{CGI executables}: the slow speed of the network connection in comparison with that of executing a program makes program execution speed less important and has made scripting languages very popular for writing these applications. Logic languages are, a priori, excellent candidates to be used as scripting languages. For example, the built-in grammars and databases can sometimes greatly simplify many typical script-based applications. 



@menu
* How it works::		
* Command line arguments in scripts::  
@end menu

@node How it works, Command line arguments in scripts, The script interpreter, The script interpreter
@comment node-name, next,  previous,  up
@section How it works 

Essentially, @code{ciao-shell} is a smaller version of the Ciao top-level, which starts by loading the file given to it as the first argument and then starts execution at 
@glindex main/1
@code{main/1} (the argument is instantiated to a list containing the command line options, in the usual way). However, while doing this, @code{ciao-shell} changes the 
@glindex prolog flag
prolog flag @code{quiet} so that no informational or warning messages are printed (error messages will be reported to @code{user_error}, however). The operation of @code{ciao-shell} in Unix-like systems is based in a special compiler feature: when the first character of a file is '@code{#}', the compiler skips the first lines until an empty line is found. In Windows, its use is as easy as naming the file with a @code{.pls} extension, which will launch @code{ciao-shell} appropriately (the name of the module has to include that extension, as in @code{:- module('test.pls',[main/1])}). 

For example, in a Linux/Unix system, assume a file called 
@glindex hello
@code{hello} contains the following program: 


@smallexample 
#!/bin/sh 
exec ciao-shell $0 "$@@" # -*- mode: ciao; -*-

main(_) :-
     write('Hello world'), nl.
@end smallexample  

Then, the file 
@glindex hello
@code{hello} can be @emph{run} by simply making it executable and invoking it from the command line: 


@smallexample 
/herme@@clip:/tmp
[86]> chmod +x hello

/herme@@clip:/tmp
[87]> hello
Hello world
@end smallexample  

The line: 
@smallexample 
#!/bin/sh 
@end smallexample  
@noindent
invokes the @code{/bin/sh} shell which will interpret the following line: 
@smallexample 
exec ciao-shell $0 "$@@" # -*- mode: ciao; -*-
@end smallexample  


@noindent
and invoke 
@glindex ciao-shell
@code{ciao-shell}, instructing it to read this same file (@code{$0}), passing it the rest of the arguments to @code{hello} as arguments to the prolog program. The second part of the line @code{# -*- mode: ciao; -*-} is simply a comment which is seen by 
@glindex emacs
@code{emacs} and instructs it to edit this file in Ciao mode (this is needed because these script files typically do not have a @code{.pl} ending). When 
@glindex ciao-shell
@code{ciao-shell} starts, if it is the first time, it compiles the program (skipping the first lines, as explained above), or else at successive runs loads the @code{.po} object file, and then calls 
@glindex main/1
@code{main/1}. 

Note that the process of creating Prolog scripts is made very simple by the Ciao 
@glindex emacs mode
emacs mode, which automatically inserts the header and makes the file executable (See @ref{Using Ciao inside GNU emacs}). 



@node Command line arguments in scripts,  , How it works, The script interpreter
@comment node-name, next,  previous,  up
@section Command line arguments in scripts 


@noindent
The following example illustrates the use of command-line arguments in scripts. Assume that a file called @code{say} contains the following lines: 


@smallexample 
#!/bin/sh 
exec ciao-shell $0 "$@@" # -*- mode: ciao; -*-

main(Argv) :-
     write_list(Argv), nl.

write_list([]).
write_list([Arg|Args]) :- 
     write(Arg),
     write(' '),
     write_list(Args).
@end smallexample  


@noindent
An example of use is: 


@smallexample 
/herme@@clip:/tmp
[91]> say hello dolly
hello dolly 
@end smallexample  
 




@c (component)


@node Customizing library paths and path aliases, Using Ciao inside GNU emacs, The script interpreter, Top
@comment node-name, next,  previous,  up
@chapter Customizing library paths and path aliases
@liindex libpaths
@c -------------------------------------------------
@c WARNING: Do not edit this file (libpaths.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/libpaths.pl
@c -------------------------------------------------

@strong{Author(s):} D.Cabeza.


This library provides means for customizing, from environment variables, the libraries and 
@glindex path alias
path aliases known by an executable. Many applications of Ciao, including 
@glindex ciaoc
@code{ciaoc}, 
@glindex ciaosh
@code{ciaosh}, and 
@glindex ciao-shell
@code{ciao-shell} make use of this library. Note that if an executable is created dynamic, it will try to load its components at startup, before the procedures of this module can be invoked, so in this case all the components should be in standard locations.



@menu
* Usage and interface (libpaths)::  
* Documentation on exports (libpaths)::	 
* Documentation on multifiles (libpaths)::  
@end menu

@node Usage and interface (libpaths), Documentation on exports (libpaths), Customizing library paths and path aliases, Customizing library paths and path aliases
@comment node-name, next,  previous,  up
@section Usage and interface (@code{libpaths})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(libpaths)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex get_alias_path/0
@code{get_alias_path/0}.


@item @emph{Multifiles:}

@glindex file_search_path/2
@code{file_search_path/2}, 
@glindex library_directory/1
@code{library_directory/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex system
@code{system}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (libpaths), Documentation on multifiles (libpaths), Usage and interface (libpaths), Customizing library paths and path aliases
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{libpaths})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_alias_path/0 (pred)}}}
@temp
@end iftex
@pdindex get_alias_path/0 
@glindex get_alias_path/0 
@deffn PREDICATE get_alias_path/0:


@code{get_alias_path}


Consult the environment variable 'CIAOALIASPATH' and add facts to predicates 
@glindex library_directory/1
@code{library_directory/1} and 
@glindex file_search_path/2
@code{file_search_path/2} to define new library paths and 
@glindex path alias
path aliases. The format of 'CIAOALIASPATH' is a sequence of paths or alias assignments separated by colons, an alias assignment is the name of the alias, an '=' and the path represented by that alias (no blanks allowed). For example, given 
@smallexample 
   CIAOALIASPATH=/home/bardo/ciao:contrib=/usr/local/lib/ciao
@end smallexample  
the predicate will define /home/bardo/ciao as a library path and /usr/local/lib/ciao as the path represented by 'contrib'.

@end deffn
@sp 1



@node Documentation on multifiles (libpaths),  , Documentation on exports (libpaths), Customizing library paths and path aliases
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{libpaths})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_search_path/2 (pred)}}}
@temp
@end iftex
@pdindex file_search_path/2 
@glindex file_search_path/2 
@deffn PREDICATE file_search_path/2:



See @ref{Basic file/stream handling}.


The predicate is @emph{multifile}.


The predicate is of type @emph{dynamic}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{library_directory/1 (pred)}}}
@temp
@end iftex
@pdindex library_directory/1 
@glindex library_directory/1 
@deffn PREDICATE library_directory/1:



See @ref{Basic file/stream handling}.


The predicate is @emph{multifile}.


The predicate is of type @emph{dynamic}.

@end deffn
@sp 1


@c (component)


@node Using Ciao inside GNU emacs, *** PART II - The Ciao basic language (engine), Customizing library paths and path aliases, Top
@comment node-name, next,  previous,  up
@chapter Using Ciao inside GNU emacs
@c -------------------------------------------------
@c WARNING: Do not edit this file (CiaoMode.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.6/emacs-mode/CiaoMode.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo, Manuel C. Rodriguez, Daniel Cabeza, @email{clip@@clip.dia.fi.upm.es}, @uref{http://www.clip.dia.fi.upm.es/}, The CLIP Group, School of Computer Science, Technical University of Madrid.

@strong{Version:} 1.6#3 (2000/8/23, 11:27:29 CEST)

@strong{Version of last change:} 1.5#159 (2000/5/31, 10:52:49 CEST)



The Ciao/Prolog 
@glindex emacs interface
emacs interface (or @emph{mode} 
@coindex emacs mode
@glindex emacs mode 
in 
@glindex emacs
@code{emacs} terms) provides a rich, integrated user interface to the Ciao 
@coindex program development environment
@glindex program development environment
@emph{program development environment} components, including the 
@glindex ciaosh
@code{ciaosh} interactive top level and the 
@glindex ciaopp
@code{ciaopp} preprocessor. While most features of the Ciao development environment are available from the command line of the preprocessor and the top-level shell, using Ciao inside 
@glindex emacs
@code{emacs} is highly recommended. The facilities that this mode provides include: 


@itemize @bullet{} 


@item 
@coindex Syntax highlighting
@glindex Syntax highlighting
@emph{Syntax highlighting} and syntax coloring, 
@coindex coloring, syntax
@glindex coloring, syntax 
@coindex auto-indentation
@glindex auto-indentation
@emph{auto-indentation}, 
@coindex auto-fill
@glindex auto-fill
@emph{auto-fill}, etc. of code. This includes the assertions used by the preprocessor and the documentation strings used by the Ciao auto-documenter, 
@glindex lpdoc
@code{lpdoc}. 


@item Providing automatic access to 
@glindex on-line help
on-line help for all predicates by accessing the Ciao system manuals in 
@glindex info
@code{info} format. 


@item Starting and communicating with 
@glindex ciaopp
@code{ciaopp}, the 
@coindex Ciao preprocessor
@glindex Ciao preprocessor
@emph{Ciao preprocessor}, running in its own 
@glindex sub-shell
sub-shell. This allows easily performing certain kinds of 
@coindex static checks
@glindex static checks
@emph{static checks} (useful for finding errors in programs before running them), program analysis tasks, and 
@coindex program transformations
@glindex program transformations
@emph{program transformations} on source programs. 


@item Starting and communicating with the 
@coindex Ciao top-level
@glindex Ciao top-level
@emph{Ciao top-level}, running in its own 
@glindex sub-shell
sub-shell. This facilitates loading programs, checking the @emph{syntax} of programs (and of 
@coindex assertions
@glindex assertions
@emph{assertions} within programs), marking and unmarking modules for interactive debugging, 
@coindex tracing the source code
@glindex tracing the source code
@emph{tracing the source code} 
@coindex source-level debugging
@glindex source-level debugging 
@coindex debugging, source-level
@glindex debugging, source-level 
during debugging, making stand-alone executables, compiling modules to dynamically linkable Prolog objects, compiling modules to active objects, etc. 


@item Syntax highlighting and coloring of the error and warning messages produced by the top level, preprocessor, or any other tool using the same message format (such as the 
@glindex lpdoc
@code{lpdoc} auto-documenter), and @emph{locating automatically the points in the source files where such errors occur}. 


@item Performing automatic 
@coindex version control
@glindex version control
@emph{version control} and keeping a 
@coindex changelog
@glindex changelog
@emph{changelog} of individual files or whole applications. This is done by automatically including changelog entries in source files, which can then be processed by the 
@glindex lpdoc
@code{lpdoc} auto-documenter. 


@end itemize  

This chapter explains how to use the Ciao/Prolog 
@glindex emacs
@code{emacs} interface and how to set up your 
@glindex emacs
@code{emacs} environment for correct operation. The Ciao 
@glindex emacs
@code{emacs} interface can also be used to work with other Prolog or CLP systems. 



@menu
* Conventions for writing Ciao programs under Emacs::  
* Checking the installation::	
* Functionality and associated key sequences (bindings)::  
* Commands available in toplevel and preprocessor buffers::  
* Using Ciao/Prolog mode capabilities in standard shells::  
* Coexistence with other Prolog interfaces::  
* Customization::		
* Installation of the Ciao/Prolog emacs interface::  
* Emacs version compatibility::	 
* Acknowledgments (ciao.el)::	
@end menu

@node Conventions for writing Ciao programs under Emacs, Checking the installation, Using Ciao inside GNU emacs, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Conventions for writing Ciao programs under Emacs 
@coindex formatting conventions, for emacs
@glindex formatting conventions, for emacs 

This is particularly important for the 
@glindex source-level debugger
source-level debugger and the 
@glindex syntax coloring
syntax coloring capabilities. This is due to the fact that it would be unrealistic to write a complete Prolog parser in Emacs lisp. These conventions are the following, in order of importance: 


@itemize @bullet{} 


@item Clauses should begin on the first column (this is used to recognize the beginning of a clause). 


@item C style comments should not be used in a clause, but can be used outside any clause. 


@end itemize  

The following are suggestions which are not strictly necessary but which can improve operation: 


@itemize @bullet{} 


@item Body literals should be indented, and there should be not more than one literal per line. This allows more precision in the location of program points during source-level debugging, i.e., when marking breakpoints and during line tracing. 


@end itemize  



@node Checking the installation, Functionality and associated key sequences (bindings), Conventions for writing Ciao programs under Emacs, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Checking the installation 

It may be possible that a complete pre-installation of the Ciao/Prolog 
@glindex emacs
@code{emacs} interface was already completed during Ciao installation. To check this, open a file with a @code{.pl} ending. You should see that 
@glindex emacs
@code{emacs} enters Ciao/Prolog mode: the mode is identified in the 
@glindex status bar
status bar below the 
@glindex buffer
buffer and, if the 
@glindex emacs menu bar
emacs menu bar is enabled, you should see the Ciao/Prolog menus. You should be able from the menu-bar, for example, to go to the Ciao manuals in the info or load the @code{.pl} file that you just opened into a ciao top level. 

If things don't work properly, see the section @ref{Installation of the Ciao/Prolog emacs interface} latter in this chapter. 



@node Functionality and associated key sequences (bindings), Commands available in toplevel and preprocessor buffers, Checking the installation, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Functionality and associated key sequences (bindings) 

The following is a summary of the capabilities of the Ciao/Prolog emacs interface and the (default) 
@coindex key sequences
@glindex key sequences
@emph{key sequences} used to access those capabilities. Most of these functions are accessible also from the menu bar. 



@menu
* Syntax coloring and syntax based editors::  
* Getting on-line help::	
* Loading and compiling programs::  
* Locating errors and checking the syntax of assertions::  
* Commands which help in typing in programs::  
* Debugging programs::		
* Preprocessing programs::	
* Version control::		
* Generating program documentation::  
* Setting the top-level::	
* Traditional Prolog Mode Commands::  
* Other commands::		
* Getting the Ciao/Prolog mode version::  
@end menu

@node Syntax coloring and syntax based editors, Getting on-line help, Functionality and associated key sequences (bindings), Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Syntax coloring and syntax based editors 

Syntax-based coloring is provided automatically when opening Ciao/Prolog files. The mode should be set to Ciao/Prolog and the Ciao mode menus should appear on the menu bar. Limited syntax-based indentation is also provided: 
@table @asis 


@item @key{TAB}  
Indent current line as Ciao/Prolog code. With argument, indent any additional lines of the same clause rigidly along with this one. 
@end table  



@node Getting on-line help, Loading and compiling programs, Syntax coloring and syntax based editors, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Getting on-line help 

The following commands are useful for getting on-line help. This is done by accessing the 
@glindex info
@code{info} version of the Ciao manuals or the 
@glindex emacs
@code{emacs} built-in help strings. Note also that the 
@glindex info
@code{info} standard @code{search} command (generally bound to @key{s}) can be used inside 
@glindex info
@code{info} buffers to search for a given string. 
@table @asis 


@item @key{^C} @key{TAB}  
Find help for the symbol (e.g., predicate, directive, declaration, type, etc.) that is currently under the cursor. Opens a (hopefully) relevant part of the Ciao manuals in 
@glindex info
@code{info} mode. Requires that the Ciao manuals in 
@glindex info
@code{info} format be installed and accessible to 
@glindex emacs
@code{emacs} (i.e., they should appear somewhere in the info directory when typing @code{M-x info}). It also requires 
@glindex word-help.el
@code{word-help.el}, which is provided with Ciao. Refer to the installation instructions if this is not the case. 
@end table  


@table @asis 


@item @key{^C} @key{/}  
Find a completion for the symbol (e.g., predicate, directive, declaration, type, etc.) that is currently under the cursor. Uses for completion the contents of the indices of the Ciao manuals. Same requirements as for finding help for the symbol. 
@end table  


@table @asis 


@item @key{^C} @key{^M}  
Go to the part of the info directory containing the Ciao manuals. 
@end table  


@table @asis 


@item @key{^H} @key{m}  
Show a short description of the Ciao/Prolog emacs mode, including all key bindings. 
@end table  



@node Loading and compiling programs, Locating errors and checking the syntax of assertions, Getting on-line help, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Loading and compiling programs 

These commands allow 
@coindex loading programs
@glindex loading programs
@emph{loading programs}, 
@coindex creating executables
@glindex creating executables
@emph{creating executables}, etc. by issuing the appropriate commands to a Ciao/Prolog top level shell, running in its own buffer as a subprocess. See @ref{The interactive top-level shell} for details. The following commands implement the communication with the Ciao/Prolog top level: 
@table @asis 


@item @key{^C} @key{t}  
Ensure that an inferior Ciao/Prolog top-level process is running. Normally, it is not necessary to use this function since execution of any of the other functions related to the top level ensures that a top level is started (starting one if required). This function is useful when one would like to start a top level in order to type a command directly by hand into it. 
@end table  


@table @asis 


@item @key{^C} @key{l}  
Load the current buffer (and any auxiliary files it may use) into the top level. The type of compilation performed (
@coindex compiling
@glindex compiling
@emph{compiling} or 
@coindex interpreting
@glindex interpreting
@emph{interpreting}) is selected automatically depending on whether the buffer has been marked for debugging or not -- see below. In case you try to load a file while in the middle of the debugging process the debugger is first aborted and then the buffer is loaded. Also, if there is a defined query, the user is asked whether it should be called. 
@end table  


@table @asis 


@item @key{^C} @key{L}  
Load the module designed as 
@coindex main module
@glindex main module
@emph{main module} (and any auxiliary files it may use) into the top level. If no main module is defined it will load the current buffer. The type of compilation performed (
@coindex compiling
@glindex compiling
@emph{compiling} or 
@coindex interpreting
@glindex interpreting
@emph{interpreting}) is selected automatically depending on whether the buffer has been marked for debugging or not -- see below. In case you try to load a file while in the middle of the debugging process the debugger is first aborted and then the buffer is loaded. Also, if there is a defined query, the user is asked whether is should be called. 
@end table  


@table @asis 


@item @key{^C} @key{q}  
Set a default query. It is possible to set things up so that this query will be issued any time a program is (re)loaded. The functionality is available in the major mode (i.e., from a buffer containing a source file) and in the inferior mode (i.e., from the buffer running the top-level shell. When called from the major mode it will ask in the minibuffer for the query and when calling from the inferior mode it will get the query on the current line. 
@end table  


@table @asis 


@item @key{^C} @key{Q}  
Ask user if the predefined query should be issued. 
@end table  


@table @asis 


@item @key{^C} @key{s}  
Set the current buffer as the principal module in a multiple module programming environment. 
@end table  


@table @asis 


@item @key{^C} @key{x}  
Make an executable from the code in the current buffer. The buffer must contain a 
@glindex main/0
@code{main/0} or 
@glindex main/1
@code{main/1} predicate. Note that compiler options can be set to determine whether the libraries and auxiliary files used by the executable will be statically linked, dynamically linked, auto-loaded, etc. 
@end table  


@table @asis 


@item @key{^C} @key{o}  
Make a Prolog object (.po) file from the code in the current buffer. This is very useful during debugging or program development, when only one or a few files of a large application are modified. If the application executable is dynamically linked, i.e., the component .po files are loaded dynamically during startup of the application, then this command can be used to recompile only the file or files which have changed, and the correct version will be loaded dynamically the next time the application is started. However, note that this only works if the inter-module interfaces have not changed. A safer, but possibly slower way is to generate the executable again, letting the Ciao compiler, which is inherently incremental, determine what needs to be recompiled. 
@end table  


@table @asis 


@item @key{^C} @key{a}  
Make an active module executable from the code in the current buffer. An active module is a remote procedure call server (see the 
@glindex activemod
@code{activemod} library documentation for details). 
@end table  



@node Locating errors and checking the syntax of assertions, Commands which help in typing in programs, Loading and compiling programs, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Locating errors and checking the syntax of assertions 

These commands allow several syntactic checks of assertions, and locating quickly the point in the source code corresponding to errors flagged by the compiler or preprocessor: 
@coindex locating errors
@glindex locating errors 
@table @asis 


@item @key{^C} @key{`}  
Go to the location in the source file containing the next error reported by the last Ciao/Prolog subprocess (preprocessor or toplevel) which was run. 
@end table  


@table @asis 


@item @key{^C} @key{e}  
Remove the error mark in a buffer. 
@end table  


@table @asis 


@item @key{^C} @key{E}  
Check the @emph{syntax} of the code and assertions in the current buffer, as well as imports and exports. Note that full (semantic) assertion checking must be done with the preprocessor. 
@end table  



@node Commands which help in typing in programs, Debugging programs, Locating errors and checking the syntax of assertions, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Commands which help in typing in programs 

The following commands are intended to help in the process of writing programs: 
@coindex writing programs
@glindex writing programs 
@table @asis 


@item @key{^C} @key{I} @key{S}  
Insert a (Unix) header at the top of the current buffer so that the ciao script interpreter will be called on this file if @emph{run} from the command line. It also makes the file ``executable'' (e.g., '@code{chmod +x <file>}' in Unix). See @ref{The script interpreter} for details. 
@end table  



@node Debugging programs, Preprocessing programs, Commands which help in typing in programs, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Debugging programs 

These commands allow marking modules for 
@coindex debugging
@glindex debugging
@emph{debugging} by issuing the appropiate commands to a Ciao/Prolog top level shell, running in its own buffer as a subprocess. There are two differents types of debugging: traditional Prolog debugging (using the 
@glindex byrd-box model
byrd-box model and 
@glindex spy-points
spy-points) and 
@coindex source-level debugging
@glindex source-level debugging
@emph{source-level debugging} (same as traditional debugging plus source tracing and 
@glindex breakpoints
breakpoints). 
@coindex debugging, source-level
@glindex debugging, source-level 
In order to use 
@coindex breakpoints
@glindex breakpoints
@emph{breakpoints}, source debugging must be on. The following commands implement comunication with the Ciao/Prolog top level: 
@table @asis 


@item @key{^C} @key{d}  
This is a shortcut which is particularly useful when debugging a single module or file. It corresponds to several lower-level actions. Those lower-level actions depend on how the module was selected for debugging. In case the module was not marked for source-level debugging, it marks the module corresponding to the current buffer for source-level debugging, reloads it to make sure that it is loaded in the correct way for debugging (same as C-c l), and sets the debugger in trace mode (i.e., issues the @code{trace.} command to the top-level shell). Conversely, if the module was already marked for source-level debugging then it will take the opposite actions, i.e., it unmarks the module for source-level debugging, reloads it, and sets the debugger to non-debug mode. 
@end table  


@table @asis 


@item @key{^C} @key{m}  
Mark, or unmkark, the current buffer for debugging (traditional debugging or source debugging). Note that if the buffer has already been loaded while it was unmarked for debugging (and has therefore been loaded in ``compile'' mode) it has to be loaded again. The minibuffer shows how the module is loaded now and allows selecting another mode for it. There are three posibilities: N for no debug, S for source debug and D for traditional debug. 
@end table  


@table @asis 


@item @key{^C} @key{M-m}  
Visits all Ciao/Prolog files which are currently open in a buffer allowing selecting for each of them whether to debug them or not and the type of debugging performed. When working on a multiple module program, it is possible to have many modules open at a time. In this case, you will navigate through all open Ciao/Prolog files and select the debug mode for each of them (same as doing C-c m for each). 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{b}  
Set a breakpoint on the current literal (goal). This can be done at any time (while debugging or not). The cursor must be @emph{on the predicate symbol of the literal}. Breakpoints are only useful when using source-level debugging. 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{v}  
Remove a breakpoint from the current literal (goal). This can be done at any time (while debugging or not). The cursor must be @emph{on the predicate symbol of the literal}. 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{n}  
Remove all breakpoints. This can be done at any time (while debugging or not). 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{l}  
Redisplay breakpoints in all Ciao buffers. This ensures that the marks in the source files and the Ciao/Prolog toplevel are synchronized. 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{r}  
Remove breakpoints color in all Ciao/Prolog files. 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{t}  
Set the debugger to the trace state. In this state, the program is executed step by step. 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{d}  
Set the debugger to the debug state. In this state, the program will only stop in breakpoints and spypoints. Breakpoints are specially supported in 
@glindex emacs
@code{emacs} and using source debug. 
@end table  


@table @asis 


@item @key{^C} @key{r}  
Load the current region (between the cursor and a previous mark) into the top level for debugging. Since loading a region of a file is typically done for debugging and/or testing purposes, this command always loads the region in debugging mode (interpreted). 
@end table  


@table @asis 


@item @key{^C} @key{p}  
Load the predicate around the cursor into the top level. Since loading a single predicate is typically done for debugging and/or testing purposes, this command always loads the predicate in debugging mode (interpreted). 
@end table  



@node Preprocessing programs, Version control, Debugging programs, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Preprocessing programs 

These commands allow 
@coindex preprocessing programs
@glindex preprocessing programs
@emph{preprocessing programs} with 
@glindex ciaopp
@code{ciaopp}, the 
@coindex Ciao preprocessor
@glindex Ciao preprocessor
@emph{Ciao preprocessor}. 

 
@glindex ciaopp
@code{ciaopp} is the precompiler of the Ciao Prolog development environment. 
@glindex ciaopp
@code{ciaopp} can perform a number of program debugging, analysis and source-to-source transformation tasks on (Ciao) Prolog programs. These tasks include: 


@itemize @bullet{} 


@item 
@coindex Inference of properties
@glindex Inference of properties
@emph{Inference of properties} of the predicates and literals of the progam, including 
@coindex types
@glindex types
@emph{types}, 
@coindex modes
@glindex modes
@emph{modes} and other 
@coindex variable instantiation
@glindex variable instantiation
@emph{variable instantiation} properties, 
@coindex non-failure
@glindex non-failure
@emph{non-failure}, 
@coindex determinacy
@glindex determinacy
@emph{determinacy}, bounds on 
@coindex computational cost
@glindex computational cost
@emph{computational cost}, bounds on 
@coindex sizes of terms
@glindex sizes of terms
@emph{sizes of terms} in the program, etc. 


@item Certain kinds of 
@coindex static debugging
@glindex static debugging
@emph{static debugging}, finding errors before running the program. This includes checking the ways in which programs call the system library predicates and also 
@coindex checking the assertions
@glindex checking the assertions
@emph{checking the assertions} present in the program or in other modules used by the program. Such assertions essentially represent partial 
@coindex specifications
@glindex specifications
@emph{specifications} of the program. 


@item Several kinds of source to source 
@coindex program transformations
@glindex program transformations
@emph{program transformations} such as 
@coindex program specialization
@glindex program specialization
@emph{program specialization}, 
@coindex program parallelization
@glindex program parallelization
@emph{program parallelization} (including 
@coindex granularity control
@glindex granularity control
@emph{granularity control}), inclusion of 
@coindex run-time tests
@glindex run-time tests
@emph{run-time tests} for assertions which cannot be checked completely at compile-time, etc. 


@end itemize  

The information generated by analysis, the assertions in the system libraries, and the assertions optionally included in user programs as specifications are all written in the same 
@coindex assertion language
@glindex assertion language
@emph{assertion language}, which is in turn also used by the Ciao system documentation generator, 
@glindex lpdoc
@code{lpdoc}. 


@glindex ciaopp
@code{ciaopp} is distributed under the 
@glindex GNU general public license
GNU general public license. 
 



See the preprocessor manual for details. The following commands implement the communication with the Ciao preprocessor: 
 
@table @asis 


@item @key{^C} @key{M}  
Preprocess the buffer, selecting options. Instructs the preprocessor to load the current buffer and start an interactive dialog in which the different options available in the preprocessor can be set. 
@end table  


@table @asis 


@item @key{^C} @key{P}  
Preprocess the buffer, using the previously selected options. If no options were set previously, then the preprocessor defaults are used. 
@end table  


@table @asis 


@item @key{^C} @key{^V}  
Show last output file produced by Ciao preprocessor. The preprocessor works by producing a file which is a transformed and/or adorned (with assertions) version of the input file. This command is often used after running the preprocessor in order to visit the output file and see the results from running the preprocessor. 
@end table  


@table @asis 


@item @key{^C} @key{V}  
Preprocess the buffer, using the previously selected (or default) options, waits for preprocessing to finish and displays the preprocessor output (leaving the cursor at the same point if already on a preprocessor output file). This allows running the preprocessor over and over and watching the output while modifying the source code. 
@end table  


@table @asis 


@item @key{^C} @key{^R}  
Ensure that an inferior Ciao preprocessor process is running 
@end table  



@node Version control, Generating program documentation, Preprocessing programs, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Version control 

The following commands can be used to carry out a simple form of 
@glindex version control
version control by keeping a 
@glindex log of changes
log of changes on a file or a group of related files. This log is kept in a format that is understood by 
@glindex lpdoc
@code{lpdoc}, the Ciao documenter [Her99]. As a result, if these version comments are present, then 
@glindex lpdoc
@code{lpdoc} will be able to automatically assign up to date version numbers to the manuals that it generates. This way it is always possible to identify to which version of the software a manual corresponds. Also, 
@glindex lpdoc
@code{lpdoc} can create automatically sections describing the changes made since previous versions, which are extracted from the comments in the changelog entries. 

The main effect of these commands is automatically associate the following information to a set of changes performed in the file and/or in a set of related files: 


@itemize @bullet{} 


@item a 
@coindex version number
@glindex version number
@emph{version number} (such as, e.g., @code{1.2}, where @code{1} is the 
@glindex major version number
major version number and @code{2} is the 
@glindex minor version number
minor version number), 


@item a 
@glindex patch number
patch number (such as, e.g., the @code{4} in @code{1.2#4}), 


@item a 
@glindex time stamp
time stamp (such as, e.g., @code{1998/12/14,17:20*28+MET}), 


@item the author of the change, 
@coindex change, author
@glindex change, author 
and 


@item a comment explaining the change. 
@coindex change, comment
@glindex change, comment 
@end itemize  

The 
@glindex version numbering
version numbering used can be local to a single file or common to a number of related files. A simple version numbering policy is implemented: when a relevant change is made, the user typically inserts a 
@glindex changelog entry
changelog entry for it, using the appropriate command (or selecting the corresponding option when prompted while saving a file). This will cause the @emph{patch number} for the file (or for the whole system that the file is part of) to be incremented automatically and the corresponding machine-readable comment to be inserted in the file. Major and minor version numbers can also be changed, but this is always invoked by hand (see below). 

The changelog entry is written in the form of a 
@glindex comment/2
@code{comment/2} declaration. As mentioned before, the advantage of using this kind of changelog entries is that these declarations can be processed by the 
@glindex lpdoc
@code{lpdoc} automatic documenter (see the 
@glindex lpdoc
@code{lpdoc} reference manual [Her99] or the 
@glindex assertions
@code{assertions} library documentation for more details on these declarations). 

Whether the user is asked or not to introduce such changelog entries, and how the patch and version numbers should be increased is controlled by the presence in the file of a 
@glindex comment/2
@code{comment/2} declaration of the type: 

@code{:- comment(version_maintenance,<type>).} 


@noindent
(note that this requires including the 
@glindex assertions
@code{assertions} library in the source file). These declarations themselves are also typically introduced automatically when using this mode (see below). 

The version maintenance mode can also be set alternatively by inserting a comment such as: 


@smallexample 
%% Local Variables: 
%% mode: ciao
%% update-version-comments: "off"
%% End:
@end smallexample  

The lines above instruct emacs to put the buffer visiting the file in 
@glindex emacs Ciao/Prolog mode
emacs Ciao/Prolog mode and to turn version maintenance off. Setting the version maintenance mode in this way has the disadvantage that 
@glindex lpdoc
@code{lpdoc}, the auto-documenter, and other related tools will not be aware of the type of version maintenance being performed (the lines above are comments for Prolog). However, this can be useful in fact for setting the 
@coindex version maintenance mode for packages
@glindex version maintenance mode for packages
@emph{version maintenance mode for packages} and other files meant for inclusion in other files, since that way the settings will not affect the file in which the package is included. 

The following commands implement the version control support: 


@table @asis 


@item @key{^X} @key{^S}  
This is the standard 
@glindex emacs
@code{emacs} command that saves a buffer by writing the contents into the associated @code{.pl} file. However, in Ciao/Prolog mode this command can be set to ask the user before saving whether to introduce a changelog entry documenting the changes performed. 

If the buffer does not already contain a comment specifying the 
@glindex type of version control
type of version control to be performed, and before saving the buffer, the Ciao/Prolog mode prompts the user to choose among the following options: 


@table @asis 


@item @key{q} 
Turn off prompting for the introduction of changelog entries for now. 
@glindex emacs
@code{emacs} will not ask again while the buffer is loaded, but it will ask again next time you load the buffer. 


@item @key{n} 
Turn off version control for this file. A version control comment such as: 

@code{:- comment(version_maintenance,off).} 


@noindent
is added to the buffer and the file is saved. 
@glindex emacs
@code{emacs} will not perform any version control on this file until the line above is removed or modified (i.e., from now on C-x C-s simply saves the buffer). 


@item @key{y} 
Turn version control on for this file. 


@end table  

If @key{y} is selected, then the system prompts again regarding how and where the version and patch number information is to be maintained. The following options are available: 


@table @asis 


@item @code{on} 
All version control information will be contained within this file. When saving a buffer (C-x C-s) emacs will ask if a changelog entry should be added to the file before saving. If a comment is entered by the user, a new patch number is assigned to it and the comment is added to the file. This patch number will be the one that follows the most recent changelog entry already in the file. This is obviously useful when maintaining version numbers individually for each file. 


@item @code{<directory_name>} 
Global version control will be performed coherently on several files. When saving a buffer (C-x C-s) emacs will ask if a changelog entry should be added to the file before saving. If a comment is given, the global patch number (which will be kept in the file: @code{<directory_name>/GlobalPatch}) is atomically incremented and the changelog entry is added to the current file, associated to that patch number. Also, a small entry is added to a file @code{<directory_name>/GlobalChangeLog} which points to the current file. This allows inspecting all changes sequentially by visiting all the files where the changes were made (see C-c C-n). This is obviously useful when maintaining a single thread of version and patch numbers for a set of files. 


@item @code{off} 
Turns off version control: C-x C-s then simply saves the file as usual. 


@end table  

@strong{Some useful tips:} 


@itemize @bullet{} 


@item If a changelog entry is in fact introduced, the cursor is left at the point in the file where the comment was inserted and the mark is left at the original file point. This allows inspecting (and possibly modifying) the changelog entry, and then returning to the original point in the file by simply typing C-x C-x. 


@item 
@coindex moving changelog entries
@glindex moving changelog entries 
The first changelog entry is entered by default at the end of the buffer. Later, the changelog entries can be moved anywhere else in the file. New changelog entries are always inserted just above the first changelog entry which appears in the file. 


@item The comments in changelog entries can be edited at any time. 


@item If a changelog entry is moved to another file, and version numbers are shared by several files through a directory, the corresponding file pointer in the @code{<directory_name>/GlobalChangeLog} file needs to be changed also, for the entry to be locatable later using C-c C-n. 


@end itemize  
 
@end table  


@table @asis 


@item @key{^C} @key{^S}  
Same as C-x C-s except that it forces prompting for inclusion of a changelog entry even if the buffer is unmodified. 
@end table  


@table @asis 


@item @key{^C} @key{n}  
Force a move to a new major/minor version number (the user will be prompted for the new numbers). Only applicable if using directory-based version maintenance. Note that otherwise it suffices with introducing a changelog entry in the file and changing its version number by hand. 
@end table  


@table @asis 


@item @key{^C} @key{^N}  
When a unique version numbering is being maintained across several files, this command allows inspecting all changes sequentially by visiting all the files in which the changes were made: 


@itemize @bullet{} 


@item If in a source file, find the next changelog entry in the source file, open in another window the corresponding 
@glindex GlobalChangeLog
@code{GlobalChangeLog} file, and position the cursor at the corresponding entry. This allows browsing the previous and following changes made, which may perhaps reside in other files in the system. 


@item If in a 
@glindex GlobalChangeLog
@code{GlobalChangeLog} file, look for the next entry in the file, and open in another window the source file in which the corresponding comment resides, positioning the corresponding comment at the top of the screen. This allows going through a section of the 
@glindex GlobalChangeLog
@code{GlobalChangeLog} file checking all the corresponding comments in the different files in which they occur. 


@end itemize  
 
@end table  



@node Generating program documentation, Setting the top-level, Version control, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Generating program documentation 

These commands provide some bindings and facilities for generating the documentation corresponding to the current buffer. This is specially useful while modifying the documentation for a file, in order to check the output that will be produced. 
@table @asis 


@item @key{^C} @key{D} @key{B}  
Generate the documentation for the current buffer in the default format. This allows generating a simple document for the current buffer. Basically, it creates a @code{SETTINGS} file, sets @code{MAIN} in @code{SETTINGS} to the current buffer and then generates the documentation in a temporary directory. Note that for generating complex manuals the best approach is to set up a permanent documentation directory with the appropriate @code{SETTINGS} and @code{Makefile} files (see the LPdoc manual). 
@end table  


@table @asis 


@item @key{^C} @key{D} @key{F}  
Change the default output format used by the LPdoc auto-documenter. It is set by default to @code{dvi} or to the environment variable @code{LPDOCFORMAT} if it is defined. 
@coindex lpdoc default format, setting
@glindex lpdoc default format, setting 
@coindex auto-documenter default format, setting
@glindex auto-documenter default format, setting 
@end table  


@table @asis 


@item @key{^C} @key{D} @key{S}  
Visit, or create, the @code{SETTINGS} file (which controls all auto-documenter options). 
@end table  


@table @asis 


@item @key{^C} @key{D} @key{G}  
Generate the documentation according to @code{SETTINGS} in the default format. This allows generating complex documents but it assumes that @code{SETTINGS} exists and that its options (main file, component files, paths, etc.) have been set properly. Documentation is generated in a temporary directory. Note however that for generating complex manuals the best approach is to set up a permanent documentation directory with the appropriate @code{SETTINGS} and @code{Makefile} files (see the LPdoc manual). 
@end table  


@table @asis 


@item @key{^C} @key{D} @key{V}  
Start a viewer on the documentation for the current buffer in the default format. 
@end table  


@table @asis 


@item @key{^C} @key{D} @key{W}  
Change the root working dir used by the LPdoc auto-documenter. It is set by default to a new dir under @code{/tmp} or to the environment variable @code{LPDOCWDIR} if it is defined. 
@coindex lpdoc working dir, setting
@glindex lpdoc working dir, setting 
@coindex auto-documenter working dir, setting
@glindex auto-documenter working dir, setting 
@end table  



@node Setting the top-level, Traditional Prolog Mode Commands, Generating program documentation, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Setting the top-level, preprocessor, and documenter executables 

These commands allow 
@coindex changing the executables used
@glindex changing the executables used
@emph{changing the executables used} when starting a Prolog top-level, the preprocessor, or the auto-documenter. They also allow changing the arguments that these executables take, and changing the path where the libraries reside. In the case of the top-level and preprocessor, this should be done only by users which understand the implications, but it is very useful if several versions of Ciao/Prolog or the preprocessor are available in the system. All these arguments can be changed through the 
@coindex customize
@glindex customize
@emph{customize} options in the help menu (see @ref{Customization}). 
@table @asis 


@item @key{^C} @key{S} @key{C}  
Change the Ciao/Prolog executable used to run the Prolog-like top level. It is set by default to @code{ciao} or, to the environment variable @code{CIAO} if it is defined. 
@coindex toplevel command, setting
@glindex toplevel command, setting 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{^C}  
Change the arguments passed to the Ciao/Prolog executable. They are set by default to none or, to the environment variable @code{CIAOARGS} if it is defined. 
@coindex toplevel command args, setting
@glindex toplevel command args, setting 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{P}  
Change the executable used to run the Ciao Preprocessor toplevel. It is set by default to @code{ciaopp} or, to the environment variable @code{CIAOPP} if it is defined. 
@coindex preprocessor command, setting
@glindex preprocessor command, setting 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{^P}  
Change the arguments passed to the Ciao preprocessor executable. They are set by default to none or to the environment variable @code{CIAOPPARGS} if it is defined. 
@coindex preprocessor command args, setting
@glindex preprocessor command args, setting 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{L}  
Change the location of the Ciao/Prolog library paths (changes the environment variable @code{CIAOLIB}). 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{D}  
Change the executable used to run the LPdoc auto-documenter. It is set by default to @code{lpdoc} or to the environment variable @code{LPDOC} if it is defined. 
@coindex lpdoc command, setting
@glindex lpdoc command, setting 
@coindex auto-documenter command, setting
@glindex auto-documenter command, setting 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{^D}  
Change the arguments passed to the LPdoc auto-documenter. They are set by default to none or to the environment variable @code{LPDOCARGS} if it is defined. 
@coindex lpdoc command args, setting
@glindex lpdoc command args, setting 
@coindex auto-documenter command args, setting
@glindex auto-documenter command args, setting 
@end table  


@table @asis 


@item @key{^C} @key{S} @key{^L}  
Change the path in which the LPdoc library is installed. It is set by default to @code{/home/clip/lib} or to the environment variable @code{LPDOCLIB} if it is defined. 
@coindex lpdoc lib path, setting
@glindex lpdoc lib path, setting 
@coindex auto-documenter lib path, setting
@glindex auto-documenter lib path, setting 
@end table  



@node Traditional Prolog Mode Commands, Other commands, Setting the top-level, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Traditional Prolog Mode Commands 

These commands provide some bindings and facilities for loading programs, which are present in emacs Prolog modes of other Prolog systems (e.g., SICStus). This is useful mainly if the Ciao/Prolog emacs mode is used with such Prolog systems. Note that the behavior of these commands in Ciao is slightly different from that of SICStus and their use (
@glindex compile/1
@code{compile/1} and 
@glindex consult/1
@code{consult/1}) in the Ciao top-level are not recommended. 
@table @asis 


@item @key{^C} @key{K}  
Compile the entire buffer. 
@end table  


@table @asis 


@item @key{^C} @key{k}  
Compile a given region. 
@end table  


@table @asis 


@item @key{^C} @key{^K}  
Compile the predicate around point. 
@end table  


@table @asis 


@item @key{^C} @key{C}  
Consult the entire buffer. 
@end table  


@table @asis 


@item @key{^C} @key{c}  
Consult a given region. 
@end table  


@table @asis 


@item @key{^C} @key{^C}  
Consult the predicate around point. 
@end table  



@node Other commands, Getting the Ciao/Prolog mode version, Traditional Prolog Mode Commands, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Other commands 

Some other commands which are active in the Ciao/Prolog mode: 
@table @asis 


@item @key{^C} @key{^L}  
Recenter the most recently used Ciao/Prolog inferior process buffer (top-level or preprocessor). 
@end table  



@node Getting the Ciao/Prolog mode version,  , Other commands, Functionality and associated key sequences (bindings)
@comment node-name, next,  previous,  up
@subsection Getting the Ciao/Prolog mode version 


@coindex Ciao/Prolog mode version
@glindex Ciao/Prolog mode version 
@table @asis 


@item @key{^C} @key{v}  
Report the version of the emacs Ciao/Prolog mode. 
@end table  


 

@node Commands available in toplevel and preprocessor buffers, Using Ciao/Prolog mode capabilities in standard shells, Functionality and associated key sequences (bindings), Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Commands available in toplevel and preprocessor buffers 

The interactive top level and the preprocessor both are typically run in an iteractive buffer, in which it is possible to communicate with them in the same way as is they had been started from a standard shell. In addition, the commands and key bindings available in buffers containing source code are also available in these interactive buffers, when applicable. 



@node Using Ciao/Prolog mode capabilities in standard shells, Coexistence with other Prolog interfaces, Commands available in toplevel and preprocessor buffers, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Using Ciao/Prolog mode capabilities in standard shells 

The capabilities (commands, coloring, ...) which are active in the Ciao/Prolog ``inferior'' mode (the mode of the buffers in which the top level and the preprocessor run) can also be made available in any standard command line shell which is being run within emacs. This can be enabled by going to the buffer in which the shell is running and typing ``@key{M-x} @code{ciao-inferior-mode}''. This is very useful for example when running the stand-alone compiler, the 
@glindex lpdoc
@code{lpdoc} auto-documenter, or even certain user applications (those that use the standard error message library) in an emacs sub-shell. Turning the Ciao/Prolog inferior mode on on that sub-shell will highlight and color the error messages, and automatically find and visit the locations in the files in which the errors are reported. 



@node Coexistence with other Prolog interfaces, Customization, Using Ciao/Prolog mode capabilities in standard shells, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Coexistence with other Prolog interfaces 

As mentioned previously, the Ciao/Prolog 
@glindex emacs
@code{emacs} interface can also be used to work with other Prolog or CLP systems. Also, the Ciao/Prolog 
@glindex emacs
@code{emacs} interface (@emph{mode}) can coexist with other Prolog-related 
@glindex emacs
@code{emacs} interfaces (@emph{modes}) 
@coindex emacs mode, loading several
@glindex emacs mode, loading several 
(such as, e.g., the 
@glindex SICStus
@code{SICStus} Prolog interface). Only one of the interfaces can be active at a time for a given buffer (i.e., for each given file opened inside 
@glindex emacs
@code{emacs}). In order the change a buffer to a given interface, move the cursor to that buffer and type @code{M-x ...-mode} (e.g., for the Ciao/Prolog mode, @code{M-x ciao-mode}). 

If several Prolog-related 
@glindex emacs
@code{emacs} interfaces are loaded, then typically the @emph{last} one to be loaded takes precedence, in the sense that this will be the interface in which 
@glindex emacs
@code{emacs} will be set when opening files which have a @code{.pl} ending (this depends a bit on how things are set up in your @code{.emacs} file). 



@node Customization, Installation of the Ciao/Prolog emacs interface, Coexistence with other Prolog interfaces, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Customization 

This section explains all variables used in the Ciao/Prolog emacs mode which can be customized by users. Such customization can be performed (in later versions of 
@glindex emacs
@code{emacs}) from the 
@glindex emacs
@code{emacs} menus (@code{Help -> Customize -> Top-level Customization Group}), or also by adding a @code{setq} expression in the @code{.emacs} file. Such @code{setq} expression should be similar to: 

@code{(setq <variable> <new_value>)} 


@noindent
The following sections list the different variables which can be customized for 
@glindex ciao
@code{ciao}, 
@glindex ciaopp
@code{ciaopp} and 
@glindex lpdoc
@code{lpdoc}. 



@menu
* Ciao variables::		
* CiaoPP variables::		
* LPdoc variables::		
@end menu

@node Ciao variables, CiaoPP variables, Customization, Customization
@comment node-name, next,  previous,  up
@subsection Ciao variables 
@table @asis 
@item @code{ciao-debug-breakpoint-color} (@emph{face}) 
Color to use with breakpoints in source debugger. 
@item @code{ciao-debug-call-color} (@emph{face}) 
Color to use with the call port in source debugger. 
@item @code{ciao-debug-exit-color} (@emph{face}) 
Color to use with the exit port in source debugger. 
@item @code{ciao-debug-expansion} (@emph{face}) 
Color to use in source debugger when the predicate was not found. 
@item @code{ciao-debug-fail-color} (@emph{face}) 
Color to use with the fail port in source debugger. 
@item @code{ciao-debug-redo-color} (@emph{face}) 
Color to use with the redo port in source debugger. 
@item @code{ciao-indent-width} (@emph{integer}) 
Indentation for a new goal. 
@item @code{ciao-main-buffer} (@emph{string}) 
Name of main module in a multiple module program. It is very useful when reloading from an inferior module because reload is performed from the main module, thus also reloading all dependent modules. 
@item @code{ciao-query} (@emph{string}) 
Query to use in Ciao. Setting this is useful when using a long or complicated query because it saves from having to type it over and over again. It is possible to set that this query will be issued any time a program is (re)loaded. 
@item @code{ciao-system} (@emph{string}) 
Name of Ciao or Prolog executable which runs the classical Prolog-like top level. 
@item @code{ciao-system-args} (@emph{string}) 
*Arguments passed to Ciao/Prolog toplevel executable. 
@item @code{ciao-toplevel-buffer-name} (@emph{string}) 
Basic name of the buffer running the Ciao/Prolog toplevel inferior process. 
@end table  



@node CiaoPP variables, LPdoc variables, Ciao variables, Customization
@comment node-name, next,  previous,  up
@subsection CiaoPP variables 
@table @asis 
@item @code{ciao-ciaopp-buffer-name} (@emph{string}) 
Basic name of the buffer running the Ciao preprocessor inferior process. 
@item @code{ciao-ciaopp-system} (@emph{string}) 
Name of Ciao preprocessor executable. 
@item @code{ciao-ciaopp-system-args} (@emph{string}) 
Arguments passed to Ciao preprocessor executable. 
@end table  



@node LPdoc variables,  , CiaoPP variables, Customization
@comment node-name, next,  previous,  up
@subsection LPdoc variables 
@table @asis 
@item @code{ciao-lpdoc-buffer-name} (@emph{string}) 
Basic name of the buffer running the auto-documenter inferior process. 
@item @code{ciao-lpdoc-docformat} (@emph{symbol}) 
Name of default output format used by LPdoc. 
@item @code{ciao-lpdoc-libpath} (@emph{directory}) 
Path in which the LPdoc library is installed. 
@item @code{ciao-lpdoc-system} (@emph{string}) 
Name of LPdoc auto-documenter executable. 
@item @code{ciao-lpdoc-system-args} (@emph{string}) 
Arguments passed to LPdoc executable. 
@item @code{ciao-lpdoc-wdir-root} (@emph{directory}) 
Name of root working dir used by LPdoc. 
@end table  
 

@node Installation of the Ciao/Prolog emacs interface, Emacs version compatibility, Customization, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Installation of the Ciao/Prolog emacs interface 

If opening a file ending with @code{.pl} puts emacs in another mode (such as 
@glindex perl
@code{perl} mode, which is the --arguably incorrect-- default setting in some 
@glindex emacs
@code{emacs} distributions), then you can set things so that the Ciao/Prolog mode is loaded by default in your system. This can be done by including in your 
@glindex .emacs
@code{.emacs} file a line such as: 

@code{(load <CIAOLIBDIR>/DOTemacs)} 


@noindent
This loads the above mentioned file from the Ciao library, which contains the following lines (except that the paths are changed during installation to appropriate values for your system): 


@smallexample 
;; Ciao / @&-Prolog / Prolog mode
;; (can be used for SICStus, and coexist with SICStus Prolog prolog.el)
;; 
(setq load-path (cons "<CIAOLIBDIR>" load-path))
(autoload 'run-ciao-toplevel "ciao"
          "Start a Ciao / @&-Prolog / Prolog top-level sub-process." t)
(autoload 'run-ciao-preprocessor "ciao"
          "Start a Ciao / @&-Prolog / Prolog preprocessor sub-process." t)
(autoload 'ciao-mode "ciao"
          "Major mode for edit/run Ciao, Prolog, @&-Prolog" t)
(autoload 'ciao-inferior-mode "ciao"
          "Major mode for running Ciao, Prolog, lpdoc, etc." t)
(setq auto-mode-alist (cons '("\\.pl$" . ciao-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.pls$" . ciao-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.lpdoc$" . ciao-mode) auto-mode-alist))
(setq completion-ignored-extensions
      (append '(".dep" ".itf" ".po" ".asr" ".cpx")
              completion-ignored-extensions))
;; ------------------------------------------------------------------------
;; In Un*x, the following (or similar) lines should be included in your
;; .cshrc or .profile to find the manuals (the Ciao installation leaves
;; in the Ciao library directory 'DOTcshrc' and 'DOTprofile' files with
;; the right paths which can be included directly in your startup scripts):
;; 
;; setenv INFOPATH /usr/local/info:/usr/info:<LPDOCDIR>
;; ------------------------------------------------------------------------

@end smallexample  

If you would like to configure things in a different way, you can also copy the contents of this file to your 
@glindex .emacs
@code{.emacs} file and make the appropriate changes. For example, if you do not want @code{.pl} files to be put automatically in Ciao/Prolog mode, then comment out (or remove) the line: 

@code{(setq auto-mode-alist} ... @code{)} 


@noindent
You will then need to switch manually to Ciao/Prolog mode by typing @code{M-x ciao-mode} after opening a Prolog file. 

If you are able to open the Ciao/Prolog menu but the Ciao manuals are not found or the 
@glindex ciao
@code{ciao} command (the top-level) is not found when loading @code{.pl} files, the probable cause is that you do not have the Ciao paths in the @code{INFOPATH} and @code{MANPATH} 
@coindex environment variables
@glindex environment variables
@emph{environment variables} (whether these variables are set automatically or not for users depends on how the Ciao system was installed). Under Un*x, you can add these paths easily by including the line: 

@code{source <CIAOLIBDIR>/DOTcshrc} 


@noindent
in your @code{.login} or @code{.cshrc} files if you are using 
@glindex csh
@code{csh} (or 
@glindex tcsh
@code{tcsh}, etc.), or, alternatively, the line: 

@code{. <CIAOLIBDIR>/DOTprofile} 


@noindent
in your @code{.login} or @code{.profile} files if you are using 
@glindex sh
@code{sh} (or 
@glindex bash
@code{bash}, etc.). See the Ciao installation instructions (@ref{Installing Ciao from the source distribution} or @ref{Installing Ciao from a Win32 binary distribution}) for details. 



@node Emacs version compatibility, Acknowledgments (ciao.el), Installation of the Ciao/Prolog emacs interface, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Emacs version compatibility 
This mode is currently being developed within 
@glindex GNU emacs
@code{GNU emacs} version 20.4. It should also work with all other 20.XX and later 19.XX versions. 



@node Acknowledgments (ciao.el),  , Emacs version compatibility, Using Ciao inside GNU emacs
@comment node-name, next,  previous,  up
@section Acknowledgments (ciao.el) 

This code is derived from the 1993 version of the emacs interface for 
@glindex &-Prolog
&-Prolog by M. Hermenegildo, itself derived from the original 
@glindex prolog.el
@code{prolog.el} by 
@coindex Masanobu Umeda
@glindex Masanobu Umeda
@emph{Masanobu Umeda} with changes by 
@coindex Johan Andersson
@glindex Johan Andersson
@emph{Johan Andersson}, 
@coindex Peter Olin
@glindex Peter Olin
@emph{Peter Olin}, 
@coindex Mats Carlsson
@glindex Mats Carlsson
@emph{Mats Carlsson}, and 
@coindex Johan Bevemyr
@glindex Johan Bevemyr
@emph{Johan Bevemyr} of 
@coindex SICS
@glindex SICS
@emph{SICS}, Sweden. Other changes also by Daniel Cabeza and Manuel C. Rodriguez. See the changelog for details.


@c (component)


@node *** PART II - The Ciao basic language (engine), The module system, Using Ciao inside GNU emacs, Top
@comment node-name, next,  previous,  up
@unnumbered PART II - The Ciao basic language (engine)
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (Builtins.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/Builtins.pl
@c -------------------------------------------------


 This part documents the 
@coindex Ciao basic builtins
@glindex Ciao basic builtins
@emph{Ciao basic builtins}. These predefined predicates and declarations are available in every program, unless the 
@glindex pure
@code{pure} package is used (by using a @code{:- module(_,_,[pure]).} declaration or @code{:- use_package(pure).}). These predicates are contained in the @code{engine} directory 
@coindex engine directory
@glindex engine directory 
within the @code{lib} library. 
@coindex lib library
@glindex lib library 
The rest of the library predicates, including the packages that provide most of the 
@glindex ISO-Prolog builtins
ISO-Prolog builtins, are documented in subsequent parts. 



@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node The module system, Directives for using code in other files, *** PART II - The Ciao basic language (engine), Top
@comment node-name, next,  previous,  up
@chapter The module system
@liindex modules
@c -------------------------------------------------
@c WARNING: Do not edit this file (modules.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/modules.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza and the CLIP Group.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


Modularity is a basic notion in a modern computer language. Modules allow dividing programs in several parts, which have its own independent name spaces. The module system in Ciao [CH00a], as in many other Prolog implementations, is procedure based. This means that predicate names are local to a module, but functor/atom names in data are shared. 

The predicates visible in a module are the predicates defined in that module, plus the predicates imported from other modules. Only predicates exported by a module can be imported from other modules. The default module of a given predicate name is the local one if the predicate is defined locally, else the last module from which the predicate is imported, having explicit imports priority (that is, a predicate imported by an @code{use_module/2} declaration is always preferred above a predicate imported by an @code{use_module/1} declaration). To refer to a predicate from a module which is not the default for that predicate the name has to be module 
@coindex module qualification
@glindex module qualification
qualified. A module qualified predicate name has the form @code{Module}:@code{Predicate} as in the call @code{debugger:debug_module(M)}. Note that this does not allow having access to predicates not imported, nor defining clauses of other modules. 

All predicates defined in files with no module declaration belong to a special module called 
@coindex user module
@glindex user module 
@code{user}, and all are implicitly exported. This allows dividing programs in several files without being aware of the module system at all. Note that this feature is only supported for compatibility reasons, being its use discouraged. Many attractive compilation features of Ciao cannot be performed in @code{user} modules. 

The case of multifile predicates (defined with the declaration 
@glindex multifile/1
@code{multifile/1}) is also special. Multifile predicates can be defined by clauses distributed in several modules, and all modules which define a predicate as multifile can use that predicate. The name space of multifile predicates is independent, as if they belonged to special module @code{multifile}. 

Every @code{user} or module file imports implicitly a number of modules called 
@glindex builtin modules
builtin modules. They are imported before all other importations of the module, allowing thus redefining any of their predicates (with the exception of 
@glindex true/0
@code{true/0}) by defining local versions or importing them from other modules. Importing explicitly from a builtin module, however, disables the implicit importation of the rest (this feature is used by package 
@glindex library(pure)
@code{library(pure)} to define pure prolog code).



@menu
* Usage and interface (modules)::  
* Documentation on internals (modules)::  
@end menu

@node Usage and interface (modules), Documentation on internals (modules), The module system, The module system
@comment node-name, next,  previous,  up
@section Usage and interface (@code{modules})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

Modules are an intrinsic feature of Ciao, so nothing special has to be done to use them.
@end itemize
@end cartouche


@node Documentation on internals (modules),  , Usage and interface (modules), The module system
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{modules})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{module/3 (decl)}}}
@temp
@end iftex
@deindex module/3 
@glindex module/3 
@deffn DECLARATION module/3:






@strong{Usage:} :- @code{module(Name,Exports,Packages)}.
@itemize @minus
@item @emph{Description:} Declares a module of name @code{Name} which exports the predicates in @code{Exports}, and uses the packages in @code{Packages}. @code{Name} must match with the name of the file where the module resides, without extension. For each source in @code{Packages}, a 
@glindex package file
package file is included, as if by an 
@glindex include/1
@code{include/1} declaration. If the source is specified with a 
@glindex path alias
path alias, this is the file included, if it is an atom, the library paths are searched. Package files provide functionalities by declaring imports from other modules, defining operators, new declarations, translations of code, etc. 

This directive must appear the first in the file. 

Also, if the compiler finds an unknown declaration as the first term in a file, the name of the declaration is regarded as a package library to be included, and the arguments of the declaration (if present) are interpreted like the arguments of 
@glindex module/3
@code{module/3}. 
@item @emph{The following properties hold at call time:}


@code{Name} is a module name (an atom).
@iftex
@hfill
@end iftex
 (@code{modules:modulename/1})

@code{Exports} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{Packages} is a list of @code{sourcename}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{module/2 (decl)}}}
@temp
@end iftex
@deindex module/2 
@glindex module/2 
@deffn DECLARATION module/2:






@strong{Usage:} :- @code{module(Name,Exports)}.
@itemize @minus
@item @emph{Description:} Same as directive 
@glindex module/3
@code{module/3}, with an implicit package @code{iso}, which enables to include 
@glindex ISO-Prolog
ISO-Prolog compatible code (compatibility not 100% yet). 
@item @emph{The following properties hold at call time:}


@code{Name} is a module name (an atom).
@iftex
@hfill
@end iftex
 (@code{modules:modulename/1})

@code{Exports} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{export/1 (decl)}}}
@temp
@end iftex
@deindex export/1 
@glindex export/1 
@deffn DECLARATION export/1:






@strong{Usage 1:} :- @code{export(Pred)}.
@itemize @minus
@item @emph{Description:} Adds @code{Pred} to the set of exported predicates. 
@item @emph{The following properties hold at call time:}


@code{Pred} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 

@iftex
@hfill
@end iftex
 (@code{basic_props:predname/1})
@end itemize

@strong{Usage 2:} :- @code{export(Exports)}.
@itemize @minus
@item @emph{Description:} Adds @code{Exports} to the set of exported predicates. 
@item @emph{The following properties hold at call time:}


@code{Exports} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_module/2 (decl)}}}
@temp
@end iftex
@deindex use_module/2 
@glindex use_module/2 
@deffn DECLARATION use_module/2:






@strong{Usage:} :- @code{use_module(Module,Imports)}.
@itemize @minus
@item @emph{Description:} Specifies that this code imports from the module defined in @code{Module} the predicates in @code{Imports}. The imported predicates must be exported by the other module. 
@item @emph{The following properties hold at call time:}


@code{Module} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Imports} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_module/1 (decl)}}}
@temp
@end iftex
@deindex use_module/1 
@glindex use_module/1 
@deffn DECLARATION use_module/1:






@strong{Usage:} :- @code{use_module(Module)}.
@itemize @minus
@item @emph{Description:} Specifies that this code imports from the module defined in @code{Module} all the predicates exported by it. The previous version with the explicit import list is preferred to this as it minimizes the chances to have to recompile this code if the other module changes. 
@item @emph{The following properties hold at call time:}


@code{Module} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{import/2 (decl)}}}
@temp
@end iftex
@deindex import/2 
@glindex import/2 
@deffn DECLARATION import/2:






@strong{Usage:} :- @code{import(Module,Imports)}.
@itemize @minus
@item @emph{Description:} Declares that this code imports from the module with name @code{Module} the predicates in @code{Imports}. 

@strong{Important note:} this declaration is intended to be used when the current module or the imported module is going to be dynamically loaded, and so the compiler does not include the code of the imported module in the current executable (if only because the compiler cannot know the location of the module file at the time of compilation). For the same reason the predicates imported are not checked to be exported by @code{Module}. Its use in other cases is strongly discouraged, as it disallows many compiler optimizations. 
@item @emph{The following properties hold at call time:}


@code{Module} is a module name (an atom).
@iftex
@hfill
@end iftex
 (@code{modules:modulename/1})

@code{Imports} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{reexport/2 (decl)}}}
@temp
@end iftex
@deindex reexport/2 
@glindex reexport/2 
@deffn DECLARATION reexport/2:






@strong{Usage:} :- @code{reexport(Module,Preds)}.
@itemize @minus
@item @emph{Description:} Specifies that this code reexports from the module defined in @code{Module} the predicates in @code{Preds}. This implies that this module imports from the module defined in @code{Module} the predicates in @code{Preds}, an also that this module exports the predicates in @code{Preds} . 
@item @emph{The following properties hold at call time:}


@code{Module} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Preds} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{reexport/1 (decl)}}}
@temp
@end iftex
@deindex reexport/1 
@glindex reexport/1 
@deffn DECLARATION reexport/1:






@strong{Usage:} :- @code{reexport(Module)}.
@itemize @minus
@item @emph{Description:} Specifies that this code reexports from the module defined in @code{Module} all the predicates exported by it. This implies that this module imports from the module defined in @code{Module} all the predicates exported by it, an also that this module exports all such predicates . 
@item @emph{The following properties hold at call time:}


@code{Module} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(meta_predicate)/1 (decl)}}}
@temp
@end iftex
@deindex meta_predicate/1 
@glindex meta_predicate/1 
@deffn DECLARATION meta_predicate/1:






@strong{Usage:} :- @code{meta_predicate MetaSpecs}.
@itemize @minus
@item @emph{Description:} Specifies that the predicates in @code{MetaSpecs} have arguments which represent predicates and thus have to be module expanded. The directive is only mandatory for exported predicates (in modules). This directive is defined as a prefix operator in the compiler. 
@item @emph{The following properties hold at call time:}


@code{MetaSpecs} is a sequence of @code{metaspec}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:sequence/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{modulename/1 (regtype)}}}
@temp
@end iftex
@teindex modulename/1 
@glindex modulename/1 
@deffn REGTYPE modulename/1:



A module name is an atom, not containing characters `:' or `$'. Also, @code{user} and @code{multifile} are reserved, as well as the module names of all builtin modules (because in an executable all modules must have distinct names).


@strong{Usage:} @code{modulename(M)}
@itemize @minus
@item @emph{Description:} @code{M} is a module name (an atom). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{metaspec/1 (regtype)}}}
@temp
@end iftex
@teindex metaspec/1 
@glindex metaspec/1 
@deffn REGTYPE metaspec/1:



A meta-predicate specification for a predicate is the functor of that predicate applied to atoms which represent the kind of module expansion that should be done with the arguments. Possible contents are represented as: 


@table @asis 


@item @code{goal} 
This argument will be a term denoting a goal (either a simple or complex one) which will be called. For commpatibility reasons it can be named as @code{:} as well. 


@item @code{clause} 
This argument will be a term denoting a clause. 


@item @code{fact} 
This argument should be instantiated to a term denoting a fact (head-only clause). 


@item @code{spec} 
This argument should be instantiated to a predicate name, as Functor/Arity. 


@item @code{pred(@emph{N})} 
This argument should be instantiated to a predicate construct to be called by means of a @code{call/@emph{N}} predicate call (see 
@glindex call/2
@code{call/2}). 


@item @code{addmodule} 
This is in fact is not a real meta-data specification. It specifies that in an argument added after this one will be passed the calling module, to allow handling more involved meta-data (e.g., lists of goals) by using conversion builtins. 


@item @code{?,+,-,_} 
These other values denote that this argument is not module expanded. 


@end table 



@strong{Usage:} @code{metaspec(M)}
@itemize @minus
@item @emph{Description:} @code{M} is a meta-predicate specification. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Directives for using code in other files, Control constructs/predicates, The module system, Top
@comment node-name, next,  previous,  up
@chapter Directives for using code in other files
@liindex loading_code
@c -------------------------------------------------
@c WARNING: Do not edit this file (loading_code.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/loading_code.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#107 (1999/11/18, 13:6:14 MET)





@menu
* Usage and interface (loading_code)::	
* Documentation on internals (loading_code)::  
@end menu

@node Usage and interface (loading_code), Documentation on internals (loading_code), Directives for using code in other files, Directives for using code in other files
@comment node-name, next,  previous,  up
@section Usage and interface (@code{loading_code})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These directives are builtin in Ciao, so nothing special has to be done to use them.
@end itemize
@end cartouche


@node Documentation on internals (loading_code),  , Usage and interface (loading_code), Directives for using code in other files
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{loading_code})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ensure_loaded/1 (decl)}}}
@temp
@end iftex
@deindex ensure_loaded/1 
@glindex ensure_loaded/1 
@deffn DECLARATION ensure_loaded/1:






@strong{Usage:} :- @code{ensure_loaded(File)}.
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Specifies that the code present in @code{File} will be included in the executable being prepared, in the @code{user} module. The file @code{File} cannot have a module declaration. This directive is intended to be used by programs not divided in modules. Dividing programs into modules is however strongly encouraged, since most of the attractive features of Ciao (such as static debugging and global optimization) are only partially available for @code{user} modules. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{include/1 (decl)}}}
@temp
@end iftex
@deindex include/1 
@glindex include/1 
@deffn DECLARATION include/1:






@strong{Usage:} :- @code{include(File)}.
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The contents of the file @code{File} are included in the current program text exactly as if they had been written in place of this directive. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_package/1 (decl)}}}
@temp
@end iftex
@deindex use_package/1 
@glindex use_package/1 
@deffn DECLARATION use_package/1:


:- @code{use_package(Package)}.


Specifies the use in this file of the packages defined in @code{Package}. See the description of the third argument of 
@glindex module/3
@code{module/3} for an explanation of 
@glindex package file
package files. 

This directive must appear the first in the file, or just after a 
@glindex module/3
@code{module/3} declaration. A file with no module declaration, in the absence of this directive, uses an implicit package @code{iso}, which enables to include 
@glindex ISO-Prolog
ISO-Prolog compatible code (compatibility not 100% yet).


@strong{Usage 1:} :- @code{use_package(Package)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Package} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize

@strong{Usage 2:} :- @code{use_package(Package)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Package} is a list of @code{sourcename}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node Control constructs/predicates, Basic builtin directives, Directives for using code in other files, Top
@comment node-name, next,  previous,  up
@chapter Control constructs/predicates
@liindex basiccontrol
@c -------------------------------------------------
@c WARNING: Do not edit this file (basiccontrol.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/basiccontrol.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#66 (2000/3/16, 17:3:30 CET)

This module contains the set of basic control predicates, except the predicates dealing with exceptions, which are in @ref{Exception handling}.



@menu
* Usage and interface (basiccontrol)::	
* Documentation on exports (basiccontrol)::  
* Documentation on internals (basiccontrol)::  
@end menu

@node Usage and interface (basiccontrol), Documentation on exports (basiccontrol), Control constructs/predicates, Control constructs/predicates
@comment node-name, next,  previous,  up
@section Usage and interface (@code{basiccontrol})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates/constructs are builtin in Ciao, so nothing special has to be done to use them. In fact, as they are hardwired in some parts of the system, most of them cannot be redefined.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex ,/2
@code{,/2}, 
@glindex ;/2
@code{;/2}, 
@glindex ->/2
@code{->/2}, 
@glindex !/0
@code{!/0}, 
@glindex \+/1
@code{\+/1}, 
@glindex if/3
@code{if/3}, 
@glindex true/0
@code{true/0}, 
@glindex fail/0
@code{fail/0}, 
@glindex repeat/0
@code{repeat/0}, 
@glindex call/1
@code{call/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (basiccontrol), Documentation on internals (basiccontrol), Usage and interface (basiccontrol), Control constructs/predicates
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{basiccontrol})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{,/2 (pred)}}}
@temp
@end iftex
@pdindex ,/2 
@glindex ,/2 
@deffn PREDICATE ,/2:


@code{P , Q}


Conjunction (@code{P} @emph{and} @code{Q}).


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{P} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Q} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{;/2 (pred)}}}
@temp
@end iftex
@pdindex ;/2 
@glindex ;/2 
@deffn PREDICATE ;/2:


@code{P ; Q}


Disjunction (@code{P} @emph{or} @code{Q}).


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{P} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Q} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{-> /2 (pred)}}}
@temp
@end iftex
@pdindex ->/2 
@glindex ->/2 
@deffn PREDICATE ->/2:


@code{P -> Q}


If @code{P} then @code{Q} else fail, using first solution of @code{P} only. Also, @code{(}@code{P} @code{->} @code{Q} @code{;} @code{R}@code{)}, if @code{P} then @code{Q} else @code{R}, using first solution of @code{P} only. No cuts are allowed in @code{P}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{P} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Q} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{!/0 (pred)}}}
@temp
@end iftex
@pdindex !/0 
@glindex !/0 
@deffn PREDICATE !/0:






@strong{Usage 1:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Commit to any choices taken in the current predicate. 
@end itemize

@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Commit to any choices taken in the current predicate. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(\+)/1 (pred)}}}
@temp
@end iftex
@pdindex \+/1 
@glindex \+/1 
@deffn PREDICATE \+/1:


@code{\+ P}


Goal @code{P} is not provable (negation by failure). Fails if @code{P} has a solution, and succeeds otherwise. No cuts are allowed in @code{P}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{P} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{if/3 (pred)}}}
@temp
@end iftex
@pdindex if/3 
@glindex if/3 
@deffn PREDICATE if/3:


@code{if(P,Q,R)}


If @code{P} then @code{Q} else @code{R}, exploring all solutions of @code{P}. No cuts are allowed in @code{P}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{P} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Q} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{R} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{true/0 (pred)}}}
@temp
@end iftex
@pdindex true/0 
@glindex true/0 
@deffn PREDICATE true/0:






@strong{Usage 1:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Succeed (noop). 
@end itemize

@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Succeed (noop). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fail/0 (pred)}}}
@temp
@end iftex
@pdindex fail/0 
@glindex fail/0 
@deffn PREDICATE fail/0:






@strong{Usage 1:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Fail, backtrack immediately. 
@end itemize

@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Fail, backtrack immediately. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{repeat/0 (pred)}}}
@temp
@end iftex
@pdindex repeat/0 
@glindex repeat/0 
@deffn PREDICATE repeat/0:






@strong{Usage 1:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Generates an infinite sequence of backtracking choices. 
@end itemize

@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Generates an infinite sequence of backtracking choices. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{call/1 (pred)}}}
@temp
@end iftex
@pdindex call/1 
@glindex call/1 
@deffn PREDICATE call/1:


@code{call(G)}


Executes goal @code{G}, restricting the scope of the cuts to the execution of @code{G}. Equivalent to writing a variable @code{G} in a goal position.


@emph{Meta-predicate} with arguments: @code{call(goal)}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{G} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (basiccontrol),  , Documentation on exports (basiccontrol), Control constructs/predicates
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{basiccontrol})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{|/2 (pred)}}}
@temp
@end iftex
@pdindex |/2 
@glindex |/2 
@deffn PREDICATE |/2:



An alias for disjunction (when appearing outside a list). The alias is performed when terms are read in.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{call/2 (pred)}}}
@temp
@end iftex
@pdindex call/2 
@glindex call/2 
@deffn PREDICATE call/2:


@code{call(Pred,Arg1)}


There exists a set of builtin predicates of the form 
@glindex call/N
@code{call/N} with @code{N > 1} which execute predicate @code{Pred} given arguments @code{Arg1} ... @code{ArgX}. If @code{Pred} has already arguments @code{Arg1} is added to the start, the rest to the end. This predicate, when @code{Pred} is a variable, can be written using the special Ciao syntax @code{Pred(Arg1,...,ArgX)}.

@end deffn
@sp 1


@c (component)


@node Basic builtin directives, Basic data types and properties, Control constructs/predicates, Top
@comment node-name, next,  previous,  up
@chapter Basic builtin directives
@liindex builtin_directives
@c -------------------------------------------------
@c WARNING: Do not edit this file (builtin_directives.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/builtin_directives.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#11 (1999/3/18, 21:28:24 MET)

This chapter documents the basic 
@glindex builtin directives
builtin directives in Ciao, additional to the documented in other chapters. These 
@glindex directives
directives are natively interpreted by the Ciao compiler (
@glindex ciaoc
@code{ciaoc}). 

Unlike in other Prolog systems, directives in Ciao are not goals to be @emph{executed} by the compiler or top level. Instead, they are @emph{read} and acted upon by these programs. The advantage of this is that the effect of the directives is consistent for executables, code loaded in the top level, code analyzed by the preprocessor, etc. 

As a result, by default only the builtin directives or declarations defined in this manual can be used in user programs. However, it is possible to define new declarations 
@coindex declarations, user defined
@glindex declarations, user defined 
using the 
@glindex new_declaration/1
@code{new_declaration/1} and 
@glindex new_declaration/2
@code{new_declaration/2} directives (or using packages including them). Also, packages may define new directives via code translations.



@menu
* Usage and interface (builtin_directives)::  
* Documentation on internals (builtin_directives)::  
@end menu

@node Usage and interface (builtin_directives), Documentation on internals (builtin_directives), Basic builtin directives, Basic builtin directives
@comment node-name, next,  previous,  up
@section Usage and interface (@code{builtin_directives})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These directives are builtin in Ciao, so nothing special has to be done to use them.
@end itemize
@end cartouche


@node Documentation on internals (builtin_directives),  , Usage and interface (builtin_directives), Basic builtin directives
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{builtin_directives})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(multifile)/1 (decl)}}}
@temp
@end iftex
@deindex multifile/1 
@glindex multifile/1 
@deffn DECLARATION multifile/1:






@strong{Usage:} :- @code{multifile Predicates}.
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Specifies that each predicate in @code{Predicates} may have clauses in more than one file. Each file that contains clauses for a 
@glindex multifile predicate
multifile predicate must contain a directive multifile for the predicate. The directive should precede all clauses of the affected predicates. This directive is defined as a prefix operator in the compiler. 
@item @emph{The following properties should hold at call time:}


@code{Predicates} is a sequence or list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:sequence_or_list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(discontiguous)/1 (decl)}}}
@temp
@end iftex
@deindex discontiguous/1 
@glindex discontiguous/1 
@deffn DECLARATION discontiguous/1:






@strong{Usage:} :- @code{discontiguous Predicates}.
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Specifies that each predicate in @code{Predicates} may be defined in this file by clauses which are not in consecutive order. Otherwise, a warning is signaled by the compiler when clauses of a predicate are not consecutive (this behavior is controllable by the 
@glindex prolog flag
prolog flag @emph{discontiguous_warnings}). The directive should precede all clauses of the affected predicates. This directive is defined as a prefix operator in the compiler. 
@item @emph{The following properties should hold at call time:}


@code{Predicates} is a sequence or list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:sequence_or_list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{impl_defined/1 (decl)}}}
@temp
@end iftex
@deindex impl_defined/1 
@glindex impl_defined/1 
@deffn DECLARATION impl_defined/1:






@strong{Usage:} :- @code{impl_defined(Predicates)}.
@itemize @minus
@item @emph{Description:} Specifies that each predicate in @code{Predicates} is @emph{impl}icitly @emph{defined} in the current prolog source, either because it is a builtin predicate or because it is defined in a C file. Otherwise, a warning is signaled by the compiler when an exported predicate is not defined in the module or imported from other module. 
@item @emph{The following properties should hold at call time:}


@code{Predicates} is a sequence or list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:sequence_or_list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{redefining/1 (decl)}}}
@temp
@end iftex
@deindex redefining/1 
@glindex redefining/1 
@deffn DECLARATION redefining/1:






@strong{Usage:} :- @code{redefining(Predicate)}.
@itemize @minus
@item @emph{Description:} Specifies that this module redefines predicate @code{Predicate}, also imported from other module, or imports it from more than one module. This prevents the compiler giving warnings about redefinitions of that predicate. @code{Predicate} can be partially (or totally) uninstantiated, to allow disabling those warnings for several (or all) predicates at once. 
@item @emph{The following properties should hold at call time:}


@code{Predicate} is @emph{compatible} with @code{predname}
@iftex
@hfill
@end iftex
 (@code{basic_props:compat/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{initialization/1 (decl)}}}
@temp
@end iftex
@deindex initialization/1 
@glindex initialization/1 
@deffn DECLARATION initialization/1:






@strong{Usage:} :- @code{initialization(Goal)}.
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} @code{Goal} will be executed at the start of the execution of any program containing the current code. 
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{on_abort/1 (decl)}}}
@temp
@end iftex
@deindex on_abort/1 
@glindex on_abort/1 
@deffn DECLARATION on_abort/1:






@strong{Usage:} :- @code{on_abort(Goal)}.
@itemize @minus
@item @emph{Description:} @code{Goal} will be executed after an abort of the execution of any program containing the current code. 
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Basic data types and properties, Extra-logical properties for typing, Basic builtin directives, Top
@comment node-name, next,  previous,  up
@chapter Basic data types and properties
@liindex basic_props
@c -------------------------------------------------
@c WARNING: Do not edit this file (basic_props.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/basic_props.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#100 (1999/11/12, 17:14:25 MET)


@coindex properties, basic
@glindex properties, basic 
This library contains the set of basic properties used by the builtin predicates, and which constitute the basic data types and properties of the language. They can be used both as type testing builtins within programs (by calling them explicitly) and as properties in assertions.



@menu
* Usage and interface (basic_props)::  
* Documentation on exports (basic_props)::  
@end menu

@node Usage and interface (basic_props), Documentation on exports (basic_props), Basic data types and properties, Basic data types and properties
@comment node-name, next,  previous,  up
@section Usage and interface (@code{basic_props})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Properties:}

@glindex member/2
@code{member/2}, 
@glindex compat/2
@code{compat/2}, 
@glindex iso/1
@code{iso/1}, 
@glindex not_further_inst/2
@code{not_further_inst/2}, 
@glindex regtype/1
@code{regtype/1}.


@item @emph{Regular Types:}

@glindex term/1
@code{term/1}, 
@glindex int/1
@code{int/1}, 
@glindex nnegint/1
@code{nnegint/1}, 
@glindex flt/1
@code{flt/1}, 
@glindex num/1
@code{num/1}, 
@glindex atm/1
@code{atm/1}, 
@glindex struct/1
@code{struct/1}, 
@glindex gnd/1
@code{gnd/1}, 
@glindex constant/1
@code{constant/1}, 
@glindex callable/1
@code{callable/1}, 
@glindex operator_specifier/1
@code{operator_specifier/1}, 
@glindex list/1
@code{list/1}, 
@glindex list/2
@code{list/2}, 
@glindex sequence/2
@code{sequence/2}, 
@glindex sequence_or_list/2
@code{sequence_or_list/2}, 
@glindex character_code/1
@code{character_code/1}, 
@glindex string/1
@code{string/1}, 
@glindex predname/1
@code{predname/1}, 
@glindex atm_or_atm_list/1
@code{atm_or_atm_list/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (basic_props),  , Usage and interface (basic_props), Basic data types and properties
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{basic_props})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{term/1 (regtype)}}}
@temp
@end iftex
@teindex term/1 
@glindex term/1 
@deffn REGTYPE term/1:



The most general type (includes all possible terms).


@strong{Usage 1:} @code{term(X)}
@itemize @minus
@item @emph{Description:} @code{X} is any term. 
@end itemize

@strong{Usage 2:} @code{term(X)}
@itemize @minus
@item @emph{Description:} @code{X} is any term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{int/1 (regtype)}}}
@temp
@end iftex
@teindex int/1 
@glindex int/1 
@deffn REGTYPE int/1:



The type of integers. The range of integers is @code{[-2^2147483616, 2^2147483616)}. Thus for all practical purposes, the range of integers can be considered infinite.


@strong{Usage 1:} @code{int(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an integer. 
@end itemize

@strong{Usage 2:} @code{int(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an integer. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nnegint/1 (regtype)}}}
@temp
@end iftex
@teindex nnegint/1 
@glindex nnegint/1 
@deffn REGTYPE nnegint/1:



The type of non-negative integers, i.e., natural numbers.


@strong{Usage 1:} @code{nnegint(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a non-negative integer. 
@end itemize

@strong{Usage 2:} @code{nnegint(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a non-negative integer. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{flt/1 (regtype)}}}
@temp
@end iftex
@teindex flt/1 
@glindex flt/1 
@deffn REGTYPE flt/1:



The type of floating-point numbers. The range of floats is the one provided by the C @code{double} type, typically @code{[4.9e-324, 1.8e+308]} (plus or minus).


@strong{Usage 1:} @code{flt(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a float. 
@end itemize

@strong{Usage 2:} @code{flt(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a float. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{num/1 (regtype)}}}
@temp
@end iftex
@teindex num/1 
@glindex num/1 
@deffn REGTYPE num/1:



The type of numbers, that is, integer or floating-point.


@strong{Usage 1:} @code{num(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a number. 
@end itemize

@strong{Usage 2:} @code{num(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a number. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atm/1 (regtype)}}}
@temp
@end iftex
@teindex atm/1 
@glindex atm/1 
@deffn REGTYPE atm/1:



The type of atoms, or non-numeric constants. The size of atoms is unbound.


@strong{Usage 1:} @code{atm(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an atom. 
@end itemize

@strong{Usage 2:} @code{atm(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an atom. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{struct/1 (regtype)}}}
@temp
@end iftex
@teindex struct/1 
@glindex struct/1 
@deffn REGTYPE struct/1:



The type of compound terms, or terms with non-zeroary functors. By now there is a limit of 255 arguments.


@strong{Usage 1:} @code{struct(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a compound term. 
@end itemize

@strong{Usage 2:} @code{struct(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a compound term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{gnd/1 (regtype)}}}
@temp
@end iftex
@teindex gnd/1 
@glindex gnd/1 
@deffn REGTYPE gnd/1:



The type of all terms without variables.


@strong{Usage 1:} @code{gnd(T)}
@itemize @minus
@item @emph{Description:} @code{T} is ground. 
@end itemize

@strong{Usage 2:} @code{gnd(T)}
@itemize @minus
@item @emph{Description:} @code{T} is ground. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{constant/1 (regtype)}}}
@temp
@end iftex
@teindex constant/1 
@glindex constant/1 
@deffn REGTYPE constant/1:






@strong{Usage 1:} @code{constant(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an atomic term (an atom or a number). 
@end itemize

@strong{Usage 2:} @code{constant(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an atomic term (an atom or a number). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{callable/1 (regtype)}}}
@temp
@end iftex
@teindex callable/1 
@glindex callable/1 
@deffn REGTYPE callable/1:






@strong{Usage 1:} @code{callable(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a term which represents a goal, i.e., an atom or a structure. 
@end itemize

@strong{Usage 2:} @code{callable(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a term which represents a goal, i.e., an atom or a structure. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{operator_specifier/1 (regtype)}}}
@temp
@end iftex
@teindex operator_specifier/1 
@glindex operator_specifier/1 
@deffn REGTYPE operator_specifier/1:



The type and associativity of an operator is described by the following mnemonic atoms: 


@table @asis 


@item @code{xfx} 
Infix, non-associative: it is a requirement that both of the two subexpressions which are the arguments of the operator must be of @emph{lower} precedence than the operator itself. 


@item @code{xfy} 
Infix, right-associative: only the first (left-hand) subexpression must be of lower precedence; the right-hand subexpression can be of the @emph{same} precedence as the main operator. 


@item @code{yfx} 
Infix, left-associative: same as above, but the other way around. 


@item @code{fx} 
Prefix, non-associative: the subexpression must be of @emph{lower} precedence than the operator. 


@item @code{fy} 
Prefix, associative: the subexpression can be of the @emph{same} precedence as the operator. 


@item @code{xf} 
Postfix, non-associative: the subexpression must be of @emph{lower} precedence than the operator. 


@item @code{yf} 
Postfix, associative: the subexpression can be of the @emph{same} precedence as the operator. 


@end table  



@strong{Usage 1:} @code{operator_specifier(X)}
@itemize @minus
@item @emph{Description:} @code{X} specifies the type and associativity of an operator. 
@end itemize

@strong{Usage 2:} @code{operator_specifier(X)}
@itemize @minus
@item @emph{Description:} @code{X} specifies the type and associativity of an operator. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list/1 (regtype)}}}
@temp
@end iftex
@teindex list/1 
@glindex list/1 
@deffn REGTYPE list/1:



A list is formed with successive applications of the functor @code{'.'/2}, and its end is the atom @code{[]}. Defined as 
@smallexample 
list([]).
list([_1|L]) :-
        list(L).
list([]).
list([_1|L]) :-
        list(L).
@end smallexample 



@strong{Usage 1:} @code{list(L)}
@itemize @minus
@item @emph{Description:} @code{L} is a list. 
@end itemize

@strong{Usage 2:} @code{list(L)}
@itemize @minus
@item @emph{Description:} @code{L} is a list. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list/2 (regtype)}}}
@temp
@end iftex
@teindex list/2 
@glindex list/2 
@deffn REGTYPE list/2:


@code{list(L,T)}


@code{L} is a list, and for all its elements, @code{T} holds.


@emph{Meta-predicate} with arguments: @code{list(?,pred(1))}.


@strong{Usage 1:} @code{list(L,T)}
@itemize @minus
@item @emph{Description:} @code{L} is a list of @code{T}s. 
@end itemize

@strong{Usage 2:} @code{list(L,T)}
@itemize @minus
@item @emph{Description:} @code{L} is a list of @code{T}s. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{member/2 (prop)}}}
@temp
@end iftex
@prindex member/2 
@glindex member/2 
@deffn PROPERTY member/2:






@strong{Usage 1:} @code{member(X,L)}
@itemize @minus
@item @emph{Description:} @code{X} is an element of @code{L}. 
@end itemize

@strong{Usage 2:} @code{member(X,L)}
@itemize @minus
@item @emph{Description:} @code{X} is an element of @code{L}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sequence/2 (regtype)}}}
@temp
@end iftex
@teindex sequence/2 
@glindex sequence/2 
@deffn REGTYPE sequence/2:



A sequence is formed with zero, one or more occurrences of the operator 
@glindex ','/2
@code{','/2}. For example, @code{a, b, c} is a sequence of three atoms, @code{a} is a sequence of one atom.


@emph{Meta-predicate} with arguments: @code{sequence(?,pred(1))}.


@strong{Usage 1:} @code{sequence(S,T)}
@itemize @minus
@item @emph{Description:} @code{S} is a sequence of @code{T}s. 
@end itemize

@strong{Usage 2:} @code{sequence(S,T)}
@itemize @minus
@item @emph{Description:} @code{S} is a sequence of @code{T}s. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sequence_or_list/2 (regtype)}}}
@temp
@end iftex
@teindex sequence_or_list/2 
@glindex sequence_or_list/2 
@deffn REGTYPE sequence_or_list/2:






@emph{Meta-predicate} with arguments: @code{sequence_or_list(?,pred(1))}.


@strong{Usage 1:} @code{sequence_or_list(S,T)}
@itemize @minus
@item @emph{Description:} @code{S} is a sequence or list of @code{T}s. 
@end itemize

@strong{Usage 2:} @code{sequence_or_list(S,T)}
@itemize @minus
@item @emph{Description:} @code{S} is a sequence or list of @code{T}s. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{character_code/1 (regtype)}}}
@temp
@end iftex
@teindex character_code/1 
@glindex character_code/1 
@deffn REGTYPE character_code/1:






@strong{Usage 1:} @code{character_code(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an integer which is a character code. 
@item @emph{The following properties hold upon exit:}


@code{T} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize

@strong{Usage 2:} @code{character_code(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an integer which is a character code. 
@item @emph{The following properties hold upon exit:}


@code{T} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{string/1 (regtype)}}}
@temp
@end iftex
@teindex string/1 
@glindex string/1 
@deffn REGTYPE string/1:



A string is a list of character codes. The usual syntax for strings @code{"string"} is allowed, which is equivalent to @code{[0's,0't,0'r,0'i,0'n,0'g]} or @code{[115,116,114,105,110,103]}. There is also a special Ciao syntax when the list is not complete: @code{"st"||R} is equivalent to @code{[0's,0't|R]}.


@strong{Usage 1:} @code{string(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a string (a list of character codes). 
@item @emph{The following properties hold upon exit:}


@code{T} is a list of @code{character_code}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize

@strong{Usage 2:} @code{string(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a string (a list of character codes). 
@item @emph{The following properties hold upon exit:}


@code{T} is a list of @code{character_code}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{predname/1 (regtype)}}}
@temp
@end iftex
@teindex predname/1 
@glindex predname/1 
@deffn REGTYPE predname/1:






@strong{Usage 1:} @code{predname(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 
 
@end itemize

@strong{Usage 2:} @code{predname(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atm_or_atm_list/1 (regtype)}}}
@temp
@end iftex
@teindex atm_or_atm_list/1 
@glindex atm_or_atm_list/1 
@deffn REGTYPE atm_or_atm_list/1:






@strong{Usage 1:} @code{atm_or_atm_list(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an atom or a list of atoms. 
@end itemize

@strong{Usage 2:} @code{atm_or_atm_list(T)}
@itemize @minus
@item @emph{Description:} @code{T} is an atom or a list of atoms. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{compat/2 (prop)}}}
@temp
@end iftex
@prindex compat/2 
@glindex compat/2 
@deffn PROPERTY compat/2:



This property captures the notion of type or 
@glindex property compatibility
property compatibility. The instantiation or constraint state of the term is compatible with the given property, in the sense that assuming that imposing that property on the term does not render the store inconsistent. For example, terms @code{X} (i.e., a free variable), @code{[Y|Z]}, and @code{[Y,Z]} are all compatible with the regular type 
@glindex list/1
@code{list/1}, whereas the terms @code{f(a)} and @code{[1|2]} are not.


@emph{Meta-predicate} with arguments: @code{compat(?,pred(1))}.


@strong{Usage 1:} @code{compat(Term,Prop)}
@itemize @minus
@item @emph{Description:} @code{Term} is @emph{compatible} with @code{Prop} 
@end itemize

@strong{Usage 2:} @code{compat(Term,Prop)}
@itemize @minus
@item @emph{Description:} @code{Term} is @emph{compatible} with @code{Prop} 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{iso/1 (prop)}}}
@temp
@end iftex
@prindex iso/1 
@glindex iso/1 
@deffn PROPERTY iso/1:






@strong{Usage 1:} @code{iso(G)}
@itemize @minus
@item @emph{Description:} @emph{Complies with the ISO-Prolog standard.} 
@end itemize

@strong{Usage 2:} @code{iso(G)}
@itemize @minus
@item @emph{Description:} @emph{Complies with the ISO-Prolog standard.} 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{not_further_inst/2 (prop)}}}
@temp
@end iftex
@prindex not_further_inst/2 
@glindex not_further_inst/2 
@deffn PROPERTY not_further_inst/2:






@strong{Usage 1:} @code{not_further_inst(G,V)}
@itemize @minus
@item @emph{Description:} @code{V} is not further instantiated. 
@end itemize

@strong{Usage 2:} @code{not_further_inst(G,V)}
@itemize @minus
@item @emph{Description:} @code{V} is not further instantiated. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{regtype/1 (prop)}}}
@temp
@end iftex
@prindex regtype/1 
@glindex regtype/1 
@deffn PROPERTY regtype/1:






@strong{Usage 1:} @code{regtype(G)}
@itemize @minus
@item @emph{Description:} Defines a regular type. 
@end itemize

@strong{Usage 2:} @code{regtype(G)}
@itemize @minus
@item @emph{Description:} Defines a regular type. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Extra-logical properties for typing, Basic term manipulation, Basic data types and properties, Top
@comment node-name, next,  previous,  up
@chapter Extra-logical properties for typing
@liindex term_typing
@c -------------------------------------------------
@c WARNING: Do not edit this file (term_typing.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/term_typing.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.7#8 (1998/9/23, 19:21:44 MEST)

This library contains traditional Prolog predicates for testing types. They depend on the state of instantiation of their arguments, thus being of extra-logical nature.



@menu
* Usage and interface (term_typing)::  
* Documentation on exports (term_typing)::  
@end menu

@node Usage and interface (term_typing), Documentation on exports (term_typing), Extra-logical properties for typing, Extra-logical properties for typing
@comment node-name, next,  previous,  up
@section Usage and interface (@code{term_typing})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Properties:}

@glindex var/1
@code{var/1}, 
@glindex nonvar/1
@code{nonvar/1}, 
@glindex atom/1
@code{atom/1}, 
@glindex integer/1
@code{integer/1}, 
@glindex float/1
@code{float/1}, 
@glindex number/1
@code{number/1}, 
@glindex atomic/1
@code{atomic/1}, 
@glindex ground/1
@code{ground/1}, 
@glindex type/2
@code{type/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (term_typing),  , Usage and interface (term_typing), Extra-logical properties for typing
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{term_typing})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{var/1 (prop)}}}
@temp
@end iftex
@prindex var/1 
@glindex var/1 
@deffn PROPERTY var/1:






@strong{Usage 1:} @code{var(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a free variable. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{var(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a free variable. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nonvar/1 (prop)}}}
@temp
@end iftex
@prindex nonvar/1 
@glindex nonvar/1 
@deffn PROPERTY nonvar/1:






@strong{Usage 1:} @code{nonvar(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently a term which is not a free variable. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{nonvar(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently a term which is not a free variable. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom/1 (prop)}}}
@temp
@end iftex
@prindex atom/1 
@glindex atom/1 
@deffn PROPERTY atom/1:






@strong{Usage 1:} @code{atom(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to an atom. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{atom(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to an atom. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{integer/1 (prop)}}}
@temp
@end iftex
@prindex integer/1 
@glindex integer/1 
@deffn PROPERTY integer/1:






@strong{Usage 1:} @code{integer(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to an integer. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{integer(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to an integer. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{float/1 (prop)}}}
@temp
@end iftex
@prindex float/1 
@glindex float/1 
@deffn PROPERTY float/1:






@strong{Usage 1:} @code{float(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to a float. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{float(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to a float. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{number/1 (prop)}}}
@temp
@end iftex
@prindex number/1 
@glindex number/1 
@deffn PROPERTY number/1:






@strong{Usage 1:} @code{number(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to a number. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{number(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to a number. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atomic/1 (prop)}}}
@temp
@end iftex
@prindex atomic/1 
@glindex atomic/1 
@deffn PROPERTY atomic/1:






@strong{Usage 1:} @code{atomic(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to an atom or a number. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{atomic(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently instantiated to an atom or a number. 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ground/1 (prop)}}}
@temp
@end iftex
@prindex ground/1 
@glindex ground/1 
@deffn PROPERTY ground/1:






@strong{Usage 1:} @code{ground(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently ground (it contains no variables). 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{ground(X)}
@itemize @minus
@item @emph{Description:} @code{X} is currently ground (it contains no variables). 
@item @emph{The following properties hold globally:}


@code{X} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{type/2 (prop)}}}
@temp
@end iftex
@prindex type/2 
@glindex type/2 
@deffn PROPERTY type/2:






@strong{Usage 1:} @code{type(X,Y)}
@itemize @minus
@item @emph{Description:} @code{X} is internally of type @code{Y} (@code{var}, @code{attv}, @code{float}, @code{integer}, @code{structure}, @code{atom} or @code{list}). 
@item @emph{The following properties hold upon exit:}


@code{Y} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 2:} @code{type(X,Y)}
@itemize @minus
@item @emph{Description:} @code{X} is internally of type @code{Y} (@code{var}, @code{attv}, @code{float}, @code{integer}, @code{structure}, @code{atom} or @code{list}). 
@item @emph{The following properties hold upon exit:}


@code{Y} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Basic term manipulation, Comparing terms, Extra-logical properties for typing, Top
@comment node-name, next,  previous,  up
@chapter Basic term manipulation
@liindex term_basic
@c -------------------------------------------------
@c WARNING: Do not edit this file (term_basic.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/term_basic.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)






@menu
* Usage and interface (term_basic)::  
* Documentation on exports (term_basic)::  
@end menu

@node Usage and interface (term_basic), Documentation on exports (term_basic), Basic term manipulation, Basic term manipulation
@comment node-name, next,  previous,  up
@section Usage and interface (@code{term_basic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex arg/3
@code{arg/3}, 
@glindex functor/3
@code{functor/3}, 
@glindex =../2
@code{=../2}, 
@glindex copy_term/2
@code{copy_term/2}, 
@glindex C/3
@code{C/3}.


@item @emph{Properties:}

@glindex =/2
@code{=/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (term_basic),  , Usage and interface (term_basic), Basic term manipulation
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{term_basic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{= /2 (prop)}}}
@temp
@end iftex
@prindex =/2 
@glindex =/2 
@deffn PROPERTY =/2:






@strong{Usage 1:} @code{X = Y}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} @code{X} and @code{Y} unify. 
@end itemize

@strong{Usage 2:} @code{X = Y}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} @code{X} and @code{Y} unify. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{arg/3 (pred)}}}
@temp
@end iftex
@pdindex arg/3 
@glindex arg/3 
@deffn PREDICATE arg/3:






@strong{Usage 1:} @code{arg(+ArgNo,+Term,?Arg)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Argument @code{ArgNo} of the term @code{Term} is @code{Arg}. 
@item @emph{The following properties should hold at call time:}


@code{ArgNo} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@end itemize

@strong{Usage 2:} @code{arg(ArgNo,Term,Arg)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Argument @code{ArgNo} of the term @code{Term} is @code{Arg}. 
@item @emph{The following properties should hold at call time:}


@code{ArgNo} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{Term} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{ArgNo} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{functor/3 (pred)}}}
@temp
@end iftex
@pdindex functor/3 
@glindex functor/3 
@deffn PREDICATE functor/3:






@strong{Usage 1:} @code{functor(?Term,?Name,?Arity)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The principal functor of the term @code{Term} has name @code{Name} and arity @code{Arity}. 
@end itemize

@strong{Usage 2:} @code{functor(Term,Name,Arity)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The principal functor of the term @code{Term} has name @code{Name} and arity @code{Arity}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{=.. /2 (pred)}}}
@temp
@end iftex
@pdindex =../2 
@glindex =../2 
@deffn PREDICATE =../2:






@strong{Usage 1:} @code{?Term =.. ?List}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The functor and arguments of the term @code{Term} comprise the list @code{List}. 
@end itemize

@strong{Usage 2:} @code{Term =.. List}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The functor and arguments of the term @code{Term} comprise the list @code{List}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{copy_term/2 (pred)}}}
@temp
@end iftex
@pdindex copy_term/2 
@glindex copy_term/2 
@deffn PREDICATE copy_term/2:






@strong{Usage 1:} @code{copy_term(Term,Copy)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} @code{Copy} is a renaming of @code{Term}, such that brand new variables have been substituted for all variables in @code{Term}. If any of the variables of @code{Term} have 
@glindex attributes
attributes, the copied variables will have copies of the attributes as well. It behaves as if defined by: 


@smallexample 
:- data 'copy of'/1.

copy_term(X, Y) :-
        asserta_fact('copy of'(X)),
        retract_fact('copy of'(Y)).
@end smallexample 
 
@end itemize

@strong{Usage 2:} @code{copy_term(Term,Copy)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} @code{Copy} is a renaming of @code{Term}, such that brand new variables have been substituted for all variables in @code{Term}. If any of the variables of @code{Term} have 
@glindex attributes
attributes, the copied variables will have copies of the attributes as well. It behaves as if defined by: 


@smallexample 
:- data 'copy of'/1.

copy_term(X, Y) :-
        asserta_fact('copy of'(X)),
        retract_fact('copy of'(Y)).
@end smallexample 
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{C/3 (pred)}}}
@temp
@end iftex
@pdindex C/3 
@glindex C/3 
@deffn PREDICATE C/3:






@strong{Usage 1:} @code{C(?S1,?Terminal,?S2)}
@itemize @minus
@item @emph{Description:} @code{S1} is connected by the terminal @code{Terminal} to @code{S2}. Internally used in @emph{DCG grammar rules}. Defined as if by the single clause: @code{'C'([X|S], X, S).}  
@end itemize

@strong{Usage 2:} @code{C(S1,Terminal,S2)}
@itemize @minus
@item @emph{Description:} @code{S1} is connected by the terminal @code{Terminal} to @code{S2}. Internally used in @emph{DCG grammar rules}. Defined as if by the single clause: @code{'C'([X|S], X, S).}  
@end itemize
@end deffn
@sp 1


@c (component)


@node Comparing terms, Basic predicates handling names of constants, Basic term manipulation, Top
@comment node-name, next,  previous,  up
@chapter Comparing terms
@liindex term_compare
@c -------------------------------------------------
@c WARNING: Do not edit this file (term_compare.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/term_compare.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


These built-in predicates are extra-logical. They treat uninstantiated variables as objects with values which may be compared, and they never instantiate those variables. They should @emph{not} be used when what you really want is arithmetic comparison or unification. 

The predicates make reference to a 
@coindex standard total ordering
@glindex standard total ordering
@emph{standard total ordering} of terms, which is as follows: 


@itemize @bullet{} 


@item Variables, by age (roughly, oldest first -- the order is @emph{not} related to the names of variables). 


@item Floats, in numeric order (e.g. -1.0 is put before 1.0). 


@item Integers, in numeric order (e.g. -1 is put before 1). 


@item Atoms, in alphabetical (i.e. character code) order. 


@item Compound terms, ordered first by arity, then by the name of the principal functor, then by the arguments in left-to-right order. Recall that lists are equivalent to compound terms with principal functor @code{'.'/2}. 


@end itemize  

For example, here is a list of terms in standard order: 


@smallexample 
[ X, -1.0, -9, 1, bar, foo, [1], X = Y, foo(0,2), bar(1,1,1) ]
@end smallexample  




@menu
* Usage and interface (term_compare)::	
* Documentation on exports (term_compare)::  
@end menu

@node Usage and interface (term_compare), Documentation on exports (term_compare), Comparing terms, Comparing terms
@comment node-name, next,  previous,  up
@section Usage and interface (@code{term_compare})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex compare/3
@code{compare/3}.


@item @emph{Properties:}

@glindex ==/2
@code{==/2}, 
@glindex \==/2
@code{\==/2}, 
@glindex @@</2
@code{@@</2}, 
@glindex @@=</2
@code{@@=</2}, 
@glindex @@>/2
@code{@@>/2}, 
@glindex @@>=/2
@code{@@>=/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (term_compare),  , Usage and interface (term_compare), Comparing terms
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{term_compare})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{== /2 (prop)}}}
@temp
@end iftex
@prindex ==/2 
@glindex ==/2 
@deffn PROPERTY ==/2:






@strong{Usage 1:} @code{Term1 == Term2}
@itemize @minus
@item @emph{Description:} The terms @code{Term1} and @code{Term2} are strictly identical. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{Term1 == Term2}
@itemize @minus
@item @emph{Description:} The terms @code{Term1} and @code{Term2} are strictly identical. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{\== /2 (prop)}}}
@temp
@end iftex
@prindex \==/2 
@glindex \==/2 
@deffn PROPERTY \==/2:






@strong{Usage 1:} @code{Term1 \== Term2}
@itemize @minus
@item @emph{Description:} The terms @code{Term1} and @code{Term2} are not strictly identical. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{Term1 \== Term2}
@itemize @minus
@item @emph{Description:} The terms @code{Term1} and @code{Term2} are not strictly identical. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{@@< /2 (prop)}}}
@temp
@end iftex
@prindex @@</2 
@glindex @@</2 
@deffn PROPERTY @@</2:






@strong{Usage 1:} @code{@@<(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} precedes the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{@@<(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} precedes the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{@@=< /2 (prop)}}}
@temp
@end iftex
@prindex @@=</2 
@glindex @@=</2 
@deffn PROPERTY @@=</2:






@strong{Usage 1:} @code{@@=<(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} precedes or is identical to the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{@@=<(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} precedes or is identical to the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{@@> /2 (prop)}}}
@temp
@end iftex
@prindex @@>/2 
@glindex @@>/2 
@deffn PROPERTY @@>/2:






@strong{Usage 1:} @code{@@>(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} follows the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{@@>(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} follows the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{@@>= /2 (prop)}}}
@temp
@end iftex
@prindex @@>=/2 
@glindex @@>=/2 
@deffn PROPERTY @@>=/2:






@strong{Usage 1:} @code{@@>=(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} follows or is identical to the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize

@strong{Usage 2:} @code{@@>=(Term1,Term2)}
@itemize @minus
@item @emph{Description:} The term @code{Term1} follows or is identical to the term @code{Term2} in the standard order. 
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{compare/3 (pred)}}}
@temp
@end iftex
@pdindex compare/3 
@glindex compare/3 
@deffn PREDICATE compare/3:


@code{compare(Op,Term1,Term2)}


@code{Op} is the result of comparing the terms @code{Term1} and @code{Term2}.


@strong{Usage 1:} @code{compare(?atm,@@term,@@term)}
@itemize @minus
@item @emph{The following properties should hold upon exit:}


@code{?atm} is an element of @code{[=,>,<]}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})

@code{@@term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{@@term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize

@strong{Usage 2:} 
@itemize @minus
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Op} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties should hold at call time:}


@code{Term1} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{Term2} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold upon exit:}


@code{Op} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Term1} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{Term2} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{Op} is an element of @code{[=,>,<]}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})

@code{Term1} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{Term2} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold globally:}


@code{Term1} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})

@code{Term2} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node Basic predicates handling names of constants, Arithmetic, Comparing terms, Top
@comment node-name, next,  previous,  up
@chapter Basic predicates handling names of constants
@liindex atomic_basic
@c -------------------------------------------------
@c WARNING: Do not edit this file (atomic_basic.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/atomic_basic.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


The Ciao system provides builtin predicates which allow dealing with names of constants (atoms or numbers). As an atom name must be of less than 512 characters, to handle sequences of more characters, strings (character code lists) must be used.



@menu
* Usage and interface (atomic_basic)::	
* Documentation on exports (atomic_basic)::  
@end menu

@node Usage and interface (atomic_basic), Documentation on exports (atomic_basic), Basic predicates handling names of constants, Basic predicates handling names of constants
@comment node-name, next,  previous,  up
@section Usage and interface (@code{atomic_basic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex name/2
@code{name/2}, 
@glindex atom_codes/2
@code{atom_codes/2}, 
@glindex number_codes/2
@code{number_codes/2}, 
@glindex number_codes/3
@code{number_codes/3}, 
@glindex atom_length/2
@code{atom_length/2}, 
@glindex atom_concat/3
@code{atom_concat/3}, 
@glindex sub_atom/4
@code{sub_atom/4}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (atomic_basic),  , Usage and interface (atomic_basic), Basic predicates handling names of constants
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{atomic_basic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{name/2 (pred)}}}
@temp
@end iftex
@pdindex name/2 
@glindex name/2 
@deffn PREDICATE name/2:


@code{name(Const,String)}


@code{String} is the list of the ASCII codes of the characters comprising the name of @code{Const}. Note that if @code{Const} is an atom whose name can be interpreted as a number (e.g. '96'), the predicate is not reversible, as that atom will not be constructed when @code{Const} is uninstantiated. Thus it is recommended that new programs use the ISO-compliant predicates 
@glindex atom_codes/2
@code{atom_codes/2} or 
@glindex number_codes/2
@code{number_codes/2}, as these predicates do not have this inconsistency.


@strong{Usage 2:} @code{name(-constant,+string)}
@itemize @minus
@item @emph{Description:} If @code{String} can be interpreted as a number, @code{Const} is unified with that number, otherwise with the atom whose name is @code{String}. 
@end itemize

@strong{Usage 3:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties should hold at call time:}


@code{Const} is an atomic term (an atom or a number).
@iftex
@hfill
@end iftex
 (@code{basic_props:constant/1})
@item @emph{The following properties hold upon exit:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize

@strong{Usage 4:} 
@itemize @minus
@item @emph{Description:} If @code{String} can be interpreted as a number, @code{Const} is unified with that number, otherwise with the atom whose name is @code{String}. 
@item @emph{The following properties should hold at call time:}


@code{Const} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties hold upon exit:}


@code{Const} is an atomic term (an atom or a number).
@iftex
@hfill
@end iftex
 (@code{basic_props:constant/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom_codes/2 (pred)}}}
@temp
@end iftex
@pdindex atom_codes/2 
@glindex atom_codes/2 
@deffn PREDICATE atom_codes/2:


@code{atom_codes(Atom,String)}


@code{String} is the list of the ASCII codes of the characters comprising the name of @code{Atom}.


@strong{Usage 3:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties should hold at call time:}


@code{Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties hold upon exit:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize

@strong{Usage 4:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Atom} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties hold upon exit:}


@code{Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{number_codes/2 (pred)}}}
@temp
@end iftex
@pdindex number_codes/2 
@glindex number_codes/2 
@deffn PREDICATE number_codes/2:


@code{number_codes(Number,String)}


@code{String} is the list of the ASCII codes of the characters comprising a representation of @code{Number}.


@strong{Usage 3:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties should hold at call time:}


@code{Number} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@item @emph{The following properties hold upon exit:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize

@strong{Usage 4:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Number} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties hold upon exit:}


@code{Number} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{number_codes/3 (pred)}}}
@temp
@end iftex
@pdindex number_codes/3 
@glindex number_codes/3 
@deffn PREDICATE number_codes/3:


@code{number_codes(Number,String,Base)}


@code{String} is the list of the ASCII codes of the characters comprising a representation of @code{Number} in base @code{Base}.


@strong{Usage 3:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties should hold at call time:}


@code{Number} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})

@code{Base} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize

@strong{Usage 4:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Number} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})

@code{Base} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Number} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom_length/2 (pred)}}}
@temp
@end iftex
@pdindex atom_length/2 
@glindex atom_length/2 
@deffn PREDICATE atom_length/2:


@code{atom_length(Atom,Length)}


@code{Length} is the number of characters forming the name of @code{Atom}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Length} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties hold upon exit:}


@code{Length} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom_concat/3 (pred)}}}
@temp
@end iftex
@pdindex atom_concat/3 
@glindex atom_concat/3 
@deffn PREDICATE atom_concat/3:


@code{atom_concat(Atom_1,Atom_2,Atom_12)}


@code{Atom_12} is the result of concatenating @code{Atom_1} followed by @code{Atom_2}.


@strong{Usage 1:} @code{atom_concat(+atom,+atom,?atom)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Concatenate two atoms. 
@end itemize

@strong{Usage 2:} @code{atom_concat(-atom,-atom,+atom)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Non-deterministically split an atom. 
@end itemize

@strong{Usage 3:} @code{atom_concat(-atom,+atom,+atom)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Take out of an atom a certain suffix (or fail if it cannot be done). 
@end itemize

@strong{Usage 4:} @code{atom_concat(+atom,-atom,+atom)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Take out of an atom a certain prefix (or fail if it cannot be done). 
@end itemize

@strong{Usage 5:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Concatenate two atoms. 
@item @emph{Calls should, and exit will be compatible with:}


@code{Atom_12} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@item @emph{The following properties should hold at call time:}


@code{Atom_1} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{Atom_2} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@item @emph{The following properties hold upon exit:}


@code{Atom_12} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@end itemize

@strong{Usage 6:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Non-deterministically split an atom. 
@item @emph{The following properties should hold at call time:}


@code{Atom_1} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Atom_2} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Atom_12} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@item @emph{The following properties hold upon exit:}


@code{Atom_1} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{Atom_2} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@end itemize

@strong{Usage 7:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Take out of an atom a certain suffix (or fail if it cannot be done). 
@item @emph{The following properties should hold at call time:}


@code{Atom_1} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Atom_2} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{Atom_12} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@item @emph{The following properties hold upon exit:}


@code{Atom_1} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@end itemize

@strong{Usage 8:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Take out of an atom a certain prefix (or fail if it cannot be done). 
@item @emph{The following properties should hold at call time:}


@code{Atom_1} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{Atom_2} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Atom_12} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@item @emph{The following properties hold upon exit:}


@code{Atom_2} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sub_atom/4 (pred)}}}
@temp
@end iftex
@pdindex sub_atom/4 
@glindex sub_atom/4 
@deffn PREDICATE sub_atom/4:


@code{sub_atom(Atom,Before,Length,Sub_atom)}


@code{Sub_atom} is formed with @code{Length} consecutive characters of @code{Atom} after the @code{Before} character. For example, the goal @code{sub_atom(summer,1,4,umme)} succeeds.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Sub_atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties should hold at call time:}


@code{Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Before} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})

@code{Length} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@item @emph{The following properties hold upon exit:}


@code{Sub_atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Arithmetic, Basic file/stream handling, Basic predicates handling names of constants, Top
@comment node-name, next,  previous,  up
@chapter Arithmetic
@liindex arithmetic
@c -------------------------------------------------
@c WARNING: Do not edit this file (arithmetic.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/arithmetic.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#18 (1999/3/23, 21:6:13 MET)

Arithmetic is performed by built-in predicates which take as arguments arithmetic expressions (see 
@glindex arithexpression/1
@code{arithexpression/1}) and evaluate them. Terms representing arithmetic expressions can be created dynamically, but at the time of evaluation, each variable in an arithmetic expression must be bound to a non-variable expression (the term must be ground). For example, given the code in the first line a possible shell interaction follows: 
@smallexample 
evaluate(Expression, Answer) :- Answer is Expression.

?- _X=24*9, evaluate(_X+6, Ans).

Ans = 222 ?

yes
@end smallexample  




@menu
* Usage and interface (arithmetic)::  
* Documentation on exports (arithmetic)::  
@end menu

@node Usage and interface (arithmetic), Documentation on exports (arithmetic), Arithmetic, Arithmetic
@comment node-name, next,  previous,  up
@section Usage and interface (@code{arithmetic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex is/2
@code{is/2}, 
@glindex </2
@code{</2}, 
@glindex =</2
@code{=</2}, 
@glindex >/2
@code{>/2}, 
@glindex >=/2
@code{>=/2}, 
@glindex =:=/2
@code{=:=/2}, 
@glindex =\=/2
@code{=\=/2}.


@item @emph{Regular Types:}

@glindex arithexpression/1
@code{arithexpression/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (arithmetic),  , Usage and interface (arithmetic), Arithmetic
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{arithmetic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{is/2 (pred)}}}
@temp
@end iftex
@pdindex is/2 
@glindex is/2 
@deffn PREDICATE is/2:


@code{Val is Exp}


The arithmetic expression @code{Exp} is evaluated and the result is unified with @code{Val}


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Val} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold at call time:}


@code{Exp} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@item @emph{The following properties hold upon exit:}


@code{Val} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{< /2 (pred)}}}
@temp
@end iftex
@pdindex </2 
@glindex </2 
@deffn PREDICATE </2:


@code{Exp1 < Exp2}


The numeric value of @code{Exp1} is less than the numeric value of @code{Exp2} when both are evaluated as arithmetic expressions.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Exp1} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})

@code{Exp2} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{=< /2 (pred)}}}
@temp
@end iftex
@pdindex =</2 
@glindex =</2 
@deffn PREDICATE =</2:


@code{Exp1 =< Exp2}


The numeric value of @code{Exp1} is less than or equal to the numeric value of @code{Exp2} when both are evaluated as arithmetic expressions.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Exp1} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})

@code{Exp2} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{> /2 (pred)}}}
@temp
@end iftex
@pdindex >/2 
@glindex >/2 
@deffn PREDICATE >/2:


@code{Exp1 > Exp2}


The numeric value of @code{Exp1} is greater than the numeric value of @code{Exp2} when both are evaluated as arithmetic expressions.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Exp1} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})

@code{Exp2} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{>= /2 (pred)}}}
@temp
@end iftex
@pdindex >=/2 
@glindex >=/2 
@deffn PREDICATE >=/2:


@code{Exp1 >= Exp2}


The numeric value of @code{Exp1} is greater than or equal to the numeric value of @code{Exp2} when both are evaluated as arithmetic expressions.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Exp1} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})

@code{Exp2} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{=:= /2 (pred)}}}
@temp
@end iftex
@pdindex =:=/2 
@glindex =:=/2 
@deffn PREDICATE =:=/2:


@code{Exp1 =:= Exp2}


The numeric values of @code{Exp1} and @code{Exp2} are equal when both are evaluated as arithmetic expressions.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Exp1} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})

@code{Exp2} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{=\= /2 (pred)}}}
@temp
@end iftex
@pdindex =\=/2 
@glindex =\=/2 
@deffn PREDICATE =\=/2:


@code{Exp1 =\= Exp2}


The numeric values of @code{Exp1} and @code{Exp2} are not equal when both are evaluated as arithmetic expressions.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Exp1} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})

@code{Exp2} is an arithmetic expression.
@iftex
@hfill
@end iftex
 (@code{arithmetic:arithexpression/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{arithexpression/1 (regtype)}}}
@temp
@end iftex
@teindex arithexpression/1 
@glindex arithexpression/1 
@deffn REGTYPE arithexpression/1:



An arithmetic expression is a term built from numbers and 
@glindex evaluable functors
evaluable functors that represent arithmetic functions. An arithmetic expression evaluates to a number, which may be an integer (
@glindex int/1
@code{int/1}) or a float (
@glindex flt/1
@code{flt/1}). The evaluable functors allowed in an arithmetic expression are listed below, together with an indication of the functions they represent. All evaluable functors defined in 
@glindex ISO-Prolog
ISO-Prolog are implemented, as well as some other useful or traditional. Unless stated otherwise, an expression evaluates to a float if any of its arguments is a float, otherwise to an integer. 


@itemize @bullet{} 


@item 
@glindex - /1
@code{- /1}: sign reversal. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex + /1
@code{+ /1}: identity. 


@item 
@glindex -- /1
@code{-- /1}: decrement by one. 


@item 
@glindex ++ /1
@code{++ /1}: increment by one. 


@item 
@glindex + /2
@code{+ /2}: addition. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex - /2
@code{- /2}: subtraction. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex * /2
@code{* /2}: multiplication. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex // /2
@code{// /2}: integer division. Float arguments are truncated to integers, result always integer. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex / /2
@code{/ /2}: division. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex rem/2
@code{rem/2}: integer remainder. The result is always an integer, its sign is the sign of the first argument. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex mod/2
@code{mod/2}: modulo. The result is always a positive integer. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex abs/1
@code{abs/1}: absolute value. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex sign/1
@code{sign/1}: sign of. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex float_integer_part/1
@code{float_integer_part/1}: float integer part. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex float_fractional_part/1
@code{float_fractional_part/1}: float fractional part. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex truncate/1
@code{truncate/1}: The result is the integer equal to the integer part of the argument. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex integer/1
@code{integer/1}: same as 
@glindex truncate/1
@code{truncate/1}. 


@item 
@glindex float/1
@code{float/1}: conversion to float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex floor/1
@code{floor/1}: largest integer not greater than. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex round/1
@code{round/1}: integer nearest to. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex ceiling/1
@code{ceiling/1}: smallest integer not smaller than. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex ** /2
@code{** /2}: exponentiation. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex >> /2
@code{>> /2}: integer bitwise right shift. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex << /2
@code{<< /2}: integer bitwise left shift. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex /\ /2
@code{/\ /2}: integer bitwise and. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex \/ /2
@code{\/ /2}: integer bitwise or. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex \ /1
@code{\ /1}: integer bitwise complement. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex # /2
@code{# /2}: integer bitwise exclusive or (xor). 


@item 
@glindex exp/1
@code{exp/1}: exponential (@emph{e} to the power of). Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex log/1
@code{log/1}: natural logarithm (base @emph{e}). Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex sqrt/1
@code{sqrt/1}: square root. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex sin/1
@code{sin/1}: sine. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex cos/1
@code{cos/1}: cosine. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex atan/1
@code{atan/1}: arc tangent. Result always float. @hfill @key{ @bullet{} ISO @bullet{} }


@item 
@glindex gcd/2
@code{gcd/2}: Greatest common divisor. Arguments must evaluate to integers, result always integer. 


@end itemize  

In addition to these functors, a list of just a number evaluates to this number. Since a 
@glindex quoted string
quoted string is just a list of integers, this allows a quoted character to be used in place of its 
@glindex ASCII code
ASCII code; e.g. @code{"A"} behaves within arithmetic expressions as the integer 65. Note that this is not 
@coindex ISO-Prolog
@glindex ISO-Prolog
ISO-compliant, and that can be achieved by using the ISO notation @code{0'A}. 

Arithmetic expressions, as described above, are just data structures. If you want one evaluated you must pass it as an argument to one of the arithmetic predicates defined in this library. 


@strong{Usage 1:} @code{arithexpression(E)}
@itemize @minus
@item @emph{Description:} @code{E} is an arithmetic expression. 
@end itemize

@strong{Usage 2:} @code{arithexpression(E)}
@itemize @minus
@item @emph{Description:} @code{E} is an arithmetic expression. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Basic file/stream handling, Basic input/output, Arithmetic, Top
@comment node-name, next,  previous,  up
@chapter Basic file/stream handling
@liindex streams_basic
@c -------------------------------------------------
@c WARNING: Do not edit this file (streams_basic.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/streams_basic.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Mats Carlsson.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


This module provides basic predicates for handling files and streams, in order to make input/output on them.



@menu
* Usage and interface (streams_basic)::	 
* Documentation on exports (streams_basic)::  
* Documentation on multifiles (streams_basic)::	 
@end menu

@node Usage and interface (streams_basic), Documentation on exports (streams_basic), Basic file/stream handling, Basic file/stream handling
@comment node-name, next,  previous,  up
@section Usage and interface (@code{streams_basic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex open/3
@code{open/3}, 
@glindex close/1
@code{close/1}, 
@glindex set_input/1
@code{set_input/1}, 
@glindex current_input/1
@code{current_input/1}, 
@glindex set_output/1
@code{set_output/1}, 
@glindex current_output/1
@code{current_output/1}, 
@glindex character_count/2
@code{character_count/2}, 
@glindex line_count/2
@code{line_count/2}, 
@glindex line_position/2
@code{line_position/2}, 
@glindex flush_output/1
@code{flush_output/1}, 
@glindex flush_output/0
@code{flush_output/0}, 
@glindex clearerr/1
@code{clearerr/1}, 
@glindex current_stream/3
@code{current_stream/3}, 
@glindex stream_code/2
@code{stream_code/2}, 
@glindex absolute_file_name/2
@code{absolute_file_name/2}, 
@glindex absolute_file_name/7
@code{absolute_file_name/7}.


@item @emph{Regular Types:}

@glindex sourcename/1
@code{sourcename/1}, 
@glindex stream/1
@code{stream/1}, 
@glindex io_mode/1
@code{io_mode/1}.


@item @emph{Multifiles:}

@glindex file_search_path/2
@code{file_search_path/2}, 
@glindex library_directory/1
@code{library_directory/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (streams_basic), Documentation on multifiles (streams_basic), Usage and interface (streams_basic), Basic file/stream handling
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{streams_basic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open/3 (pred)}}}
@temp
@end iftex
@pdindex open/3 
@glindex open/3 
@deffn PREDICATE open/3:


@code{open(File,Mode,Stream)}


Open @code{File} with mode @code{Mode} and return in @code{Stream} the stream associated with the file. No extension is implicit in @code{File}.


@strong{Usage 1:} @code{open(+sourcename,+io_mode,?stream)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Normal use. 
@end itemize

@strong{Usage 2:} @code{open(+int,+io_mode,?stream)}
@itemize @minus
@item @emph{Description:} In the special case that @code{File} is an integer, it is assumed to be a file descriptor passed to Prolog from a foreign function call. The file descriptor is connected to a Prolog stream (invoking the UNIX function @code{fdopen}) which is unified with @code{Stream}. 
@end itemize

@strong{Usage 3:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Normal use. 
@item @emph{Calls should, and exit will be compatible with:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Mode} is an opening mode ('read', 'write' or 'append').
@iftex
@hfill
@end iftex
 (@code{streams_basic:io_mode/1})
@item @emph{The following properties hold upon exit:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize

@strong{Usage 4:} 
@itemize @minus
@item @emph{Description:} In the special case that @code{File} is an integer, it is assumed to be a file descriptor passed to Prolog from a foreign function call. The file descriptor is connected to a Prolog stream (invoking the UNIX function @code{fdopen}) which is unified with @code{Stream}. 
@item @emph{Calls should, and exit will be compatible with:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties should hold at call time:}


@code{File} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Mode} is an opening mode ('read', 'write' or 'append').
@iftex
@hfill
@end iftex
 (@code{streams_basic:io_mode/1})
@item @emph{The following properties hold upon exit:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close/1 (pred)}}}
@temp
@end iftex
@pdindex close/1 
@glindex close/1 
@deffn PREDICATE close/1:


@code{close(Stream)}


Close the stream @code{Stream}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_input/1 (pred)}}}
@temp
@end iftex
@pdindex set_input/1 
@glindex set_input/1 
@deffn PREDICATE set_input/1:


@code{set_input(Stream)}


Set the current input stream to @code{Stream}. A notion of 
@coindex current input stream
@glindex current input stream
@emph{current input stream} is maintained by the system, so that input predicates with no explicit stream operate on the current input stream. Initially it is set to @code{user_input}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_input/1 (pred)}}}
@temp
@end iftex
@pdindex current_input/1 
@glindex current_input/1 
@deffn PREDICATE current_input/1:


@code{current_input(Stream)}


Unify @code{Stream} with the 
@glindex current input stream
current input stream.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_output/1 (pred)}}}
@temp
@end iftex
@pdindex set_output/1 
@glindex set_output/1 
@deffn PREDICATE set_output/1:


@code{set_output(Stream)}


Set the current output stream to @code{Stream}. A notion of 
@coindex current output stream
@glindex current output stream
@emph{current output stream} is maintained by the system, so that output predicates with no explicit stream operate on the current output stream. Initially it is set to @code{user_output}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_output/1 (pred)}}}
@temp
@end iftex
@pdindex current_output/1 
@glindex current_output/1 
@deffn PREDICATE current_output/1:


@code{current_output(Stream)}


Unify @code{Stream} with the 
@glindex current output stream
current output stream.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{character_count/2 (pred)}}}
@temp
@end iftex
@pdindex character_count/2 
@glindex character_count/2 
@deffn PREDICATE character_count/2:


@code{character_count(Stream,Count)}


@code{Count} characters have been read from or written to @code{Stream}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Count} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Count} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{line_count/2 (pred)}}}
@temp
@end iftex
@pdindex line_count/2 
@glindex line_count/2 
@deffn PREDICATE line_count/2:


@code{line_count(Stream,Count)}


@code{Count} lines have been read from or written to @code{Stream}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Count} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Count} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{line_position/2 (pred)}}}
@temp
@end iftex
@pdindex line_position/2 
@glindex line_position/2 
@deffn PREDICATE line_position/2:


@code{line_position(Stream,Count)}


@code{Count} characters have been read from or written to the current line of @code{Stream}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Count} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Count} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{flush_output/1 (pred)}}}
@temp
@end iftex
@pdindex flush_output/1 
@glindex flush_output/1 
@deffn PREDICATE flush_output/1:


@code{flush_output(Stream)}


Flush any buffered data to output stream @code{Stream}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{flush_output/0 (pred)}}}
@temp
@end iftex
@pdindex flush_output/0 
@glindex flush_output/0 
@deffn PREDICATE flush_output/0:


@code{flush_output}


Behaves like @code{current_output(S), flush_output(S)}

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{clearerr/1 (pred)}}}
@temp
@end iftex
@pdindex clearerr/1 
@glindex clearerr/1 
@deffn PREDICATE clearerr/1:


@code{clearerr(Stream)}


Clear the end-of-file and error indicators for input stream @code{Stream}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_stream/3 (pred)}}}
@temp
@end iftex
@pdindex current_stream/3 
@glindex current_stream/3 
@deffn PREDICATE current_stream/3:


@code{current_stream(Filename,Mode,Stream)}


@code{Stream} is a stream which was opened in mode @code{Mode} and which is connected to the absolute file name @code{Filename} (an atom) or to the file descriptor @code{Filename} (an integer). This predicate can be used for enumerating all currently open streams through backtracking.


@strong{Usage 3:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Filename} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Mode} is an opening mode ('read', 'write' or 'append').
@iftex
@hfill
@end iftex
 (@code{streams_basic:io_mode/1})

@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Filename} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Mode} is an opening mode ('read', 'write' or 'append').
@iftex
@hfill
@end iftex
 (@code{streams_basic:io_mode/1})

@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize

@strong{Usage 4:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Filename} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Mode} is an opening mode ('read', 'write' or 'append').
@iftex
@hfill
@end iftex
 (@code{streams_basic:io_mode/1})

@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Filename} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Mode} is an opening mode ('read', 'write' or 'append').
@iftex
@hfill
@end iftex
 (@code{streams_basic:io_mode/1})

@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stream_code/2 (pred)}}}
@temp
@end iftex
@pdindex stream_code/2 
@glindex stream_code/2 
@deffn PREDICATE stream_code/2:


@code{stream_code(Stream,StreamCode)}


@code{StreamCode} is the file descriptor (an integer) corresponding to the Prolog stream @code{Stream}.


@strong{Usage 3:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{StreamCode} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{StreamCode} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize

@strong{Usage 4:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{StreamCode} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{absolute_file_name/2 (pred)}}}
@temp
@end iftex
@pdindex absolute_file_name/2 
@glindex absolute_file_name/2 
@deffn PREDICATE absolute_file_name/2:


@code{absolute_file_name(RelFileSpec,AbsFileSpec)}


If @code{RelFileSpec} is an absolute pathname then do an absolute lookup. If @code{RelFileSpec} is a relative pathname then prefix the name with the name of the current directory and do an absolute lookup. If @code{RelFileSpec} is a path alias, perform the lookup following the path alias rules (see 
@glindex sourcename/1
@code{sourcename/1}). In all cases: if a matching file with suffix @code{.pl} exists, then @code{AbsFileSpec} will be unified with this file. Failure to open a file normally causes an exception. The behaviour can be controlled by the @code{fileerrors} 
@glindex prolog flag
prolog flag.


@strong{Usage 1:} @code{absolute_file_name(+RelFileSpec,-AbsFileSpec)}
@itemize @minus
@item @emph{Description:} @code{AbsFileSpec} is the absolute name (with full path) of @code{RelFileSpec}. 
@item @emph{Calls should, and exit will be compatible with:}


@code{+RelFileSpec} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{-AbsFileSpec} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 2:} @code{absolute_file_name(RelFileSpec,AbsFileSpec)}
@itemize @minus
@item @emph{Description:} @code{AbsFileSpec} is the absolute name (with full path) of @code{RelFileSpec}. 
@item @emph{Calls should, and exit will be compatible with:}


@code{RelFileSpec} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{AbsFileSpec} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties should hold at call time:}


@code{RelFileSpec} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{AbsFileSpec} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{absolute_file_name/7 (pred)}}}
@temp
@end iftex
@pdindex absolute_file_name/7 
@glindex absolute_file_name/7 
@deffn PREDICATE absolute_file_name/7:


@code{absolute_file_name(Spec,Opt,Suffix,CurrDir,AbsFile,AbsBase,AbsDir)}


@code{AbsFile} is the absolute name (with full path) of @code{Spec}, which has an optional first suffix @code{Opt} and an optional second suffix @code{Suffix}, when the current directory is @code{CurrDir}. @code{AbsBase} is the same as @code{AbsFile}, but without the second suffix, and @code{AbsDir} is the absolute path of the directory where @code{AbsFile} is. The Ciao compiler invokes this predicate with @code{Opt}=@code{'_opt'} and @code{Suffix}=@code{'.pl'} when searching source files.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Spec} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Opt} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Suffix} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{CurrDir} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{AbsFile} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{AbsBase} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{AbsDir} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties hold upon exit:}


@code{AbsFile} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{AbsBase} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{AbsDir} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sourcename/1 (regtype)}}}
@temp
@end iftex
@teindex sourcename/1 
@glindex sourcename/1 
@deffn REGTYPE sourcename/1:



A source name is a flexible way of referring to a concrete file. A source name is either a relative or absolute filename given as: 


@itemize @bullet{} 


@item an atom, or 


@item a unary functor (which represents a 
@coindex path alias
@glindex path alias
@emph{path alias}, see below) applied to a @emph{relative} path, the latter being given as an atom. 


@end itemize  

In all cases certain filename extensions (e.g., @code{.pl}) can be implicit. In the first form above, file names can be relative to the current directory. Also, file names beginning with @code{~} or @code{$} are treated specially. For example, 


@table @asis 


@item @code{'~/ciao/sample.pl'} 
is equivalent to @code{'/home/staff/herme/ciao/sample.pl'}, if @code{/home/staff/herme} is the user's home directory. (This is also equivalent to @code{'$HOME/ciao/sample.pl'} as explained below.) 


@item @code{'~bardo/prolog/sample.pl'} 
is equivalent to @code{'/home/bardo/prolog/sample.pl'}, if @code{/home/bardo} is bardo's home directory. 


@item @code{'$UTIL/sample.pl'} 
is equivalent to @code{'/usr/local/src/utilities/sample.pl'}, if @code{/usr/local/src/utilities} is the value of the environment variable @code{UTIL}. 


@end table  

The second form allows using path aliases. Such aliases allow refering to files not with absolute file system paths but with paths which are relative to predefined (or user-defined) abstract names. For example, given the path alias @code{myutils} which has been defined to refer to path @code{'/home/bardo/utilities'}, if that directory contains the file @code{stuff.pl} then the term @code{myutils(stuff)} in a 
@glindex use_module/1
@code{use_module/1} declaration would refer to the file @code{'/home/bardo/utilities/stuff.pl'} (the @code{.pl} extension is implicit in the 
@glindex use_module/1
@code{use_module/1} declaration). As a special case, if that directory contains a subdirectory named @code{stuff} which in turn contains the file @code{stuff.pl}, the same term would refer to the file @code{'/home/bardo/utilities/stuff/stuff.pl'}. If a path alias is related to several paths, all paths are scanned in sequence until a match is found. For information on predefined path aliases or how to define new path aliases, see 
@glindex file_search_path/2
@code{file_search_path/2}. 


@strong{Usage 1:} @code{sourcename(F)}
@itemize @minus
@item @emph{Description:} @code{F} is a source name. 
@end itemize

@strong{Usage 2:} @code{sourcename(F)}
@itemize @minus
@item @emph{Description:} @code{F} is a source name. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stream/1 (regtype)}}}
@temp
@end iftex
@teindex stream/1 
@glindex stream/1 
@deffn REGTYPE stream/1:



Streams correspond to the file pointers used at the operating system level, and usually represent opened files. There are four special streams which correspond with the operating system standard streams: 
@table @asis 


@item @code{user_input} 
The standard input stream, i.e. the terminal, usually. 


@item @code{user_output} 
The standard output stream, i.e. the terminal, usually. 


@item @code{user_error} 
The standard error stream. 


@item @code{user} 
The standard input or output stream, depending on context. 


@end table  




@strong{Usage 1:} @code{stream(S)}
@itemize @minus
@item @emph{Description:} @code{S} is an open stream. 
@end itemize

@strong{Usage 2:} @code{stream(S)}
@itemize @minus
@item @emph{Description:} @code{S} is an open stream. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{io_mode/1 (regtype)}}}
@temp
@end iftex
@teindex io_mode/1 
@glindex io_mode/1 
@deffn REGTYPE io_mode/1:



Can have the following values: 
@table @asis 


@item @code{read} 
Open the file for input. 


@item @code{write} 
Open the file for output. The file is created if it does not already exist, the file will otherwise be truncated. 


@item @code{append} 
Open the file for output. The file is created if it does not already exist, the file will otherwise be appended to. 


@end table 



@strong{Usage 1:} @code{io_mode(M)}
@itemize @minus
@item @emph{Description:} @code{M} is an opening mode ('read', 'write' or 'append'). 
@end itemize

@strong{Usage 2:} @code{io_mode(M)}
@itemize @minus
@item @emph{Description:} @code{M} is an opening mode ('read', 'write' or 'append'). 
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (streams_basic),  , Documentation on exports (streams_basic), Basic file/stream handling
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{streams_basic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_search_path/2 (pred)}}}
@temp
@end iftex
@pdindex file_search_path/2 
@glindex file_search_path/2 
@deffn PREDICATE file_search_path/2:


@code{file_search_path(Alias,Path)}


The 
@glindex path alias
path alias @code{Alias} is linked to path @code{Path}. Both arguments must be atoms. New facts (or clauses) of this predicate can be asserted to define new path aliases. Predefined path aliases in Ciao are: 


@table @asis 


@item @code{library} 
Initially points to all Ciao library paths. See 
@glindex library_directory/1
@code{library_directory/1}. 


@item @code{engine} 
The path of the 
@glindex Ciao engine builtins
Ciao engine builtins. 


@item @code{.} 
The current path (@code{'.'}). 


@end table  



The predicate is @emph{multifile}.


The predicate is of type @emph{dynamic}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{library_directory/1 (pred)}}}
@temp
@end iftex
@pdindex library_directory/1 
@glindex library_directory/1 
@deffn PREDICATE library_directory/1:


@code{library_directory(Path)}


@code{Path} is a library path (a path represented by the 
@glindex path alias
path alias @code{library}). Predefined library paths in Ciao are @code{'$CIAOLIB/lib'}, @code{'$CIAOLIB/library'}, and @code{'$CIAOLIB/contrib'}, given that @code{$CIAOLIB} is the path of the root ciao library directory. More library paths can be defined by asserting new facts (or clauses) of this predicate.


The predicate is @emph{multifile}.


The predicate is of type @emph{dynamic}.

@end deffn
@sp 1


@c (component)


@node Basic input/output, Exception handling, Basic file/stream handling, Top
@comment node-name, next,  previous,  up
@chapter Basic input/output
@liindex io_basic
@c -------------------------------------------------
@c WARNING: Do not edit this file (io_basic.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/io_basic.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Mats Carlsson.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


This module provides predicates for character input/output and for canonical term output. From the 
@glindex ISO-Prolog
ISO-Prolog predicates for character input/output, only the @code{_code} versions are provided, the rest are given by 
@glindex library(iso_byte_char)
@code{library(iso_byte_char)}, using these. Most predicates are provided in two versions: one that specifies the input or output stream as the first argument and a second which omits this argument and uses the current input or output stream.



@menu
* Usage and interface (io_basic)::  
* Documentation on exports (io_basic)::	 
@end menu

@node Usage and interface (io_basic), Documentation on exports (io_basic), Basic input/output, Basic input/output
@comment node-name, next,  previous,  up
@section Usage and interface (@code{io_basic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex get_code/2
@code{get_code/2}, 
@glindex get_code/1
@code{get_code/1}, 
@glindex get1_code/2
@code{get1_code/2}, 
@glindex get1_code/1
@code{get1_code/1}, 
@glindex peek_code/2
@code{peek_code/2}, 
@glindex peek_code/1
@code{peek_code/1}, 
@glindex skip_code/2
@code{skip_code/2}, 
@glindex skip_code/1
@code{skip_code/1}, 
@glindex put_code/2
@code{put_code/2}, 
@glindex put_code/1
@code{put_code/1}, 
@glindex nl/1
@code{nl/1}, 
@glindex nl/0
@code{nl/0}, 
@glindex tab/2
@code{tab/2}, 
@glindex tab/1
@code{tab/1}, 
@glindex code_class/2
@code{code_class/2}, 
@glindex getct/2
@code{getct/2}, 
@glindex getct1/2
@code{getct1/2}, 
@glindex display/2
@code{display/2}, 
@glindex display/1
@code{display/1}, 
@glindex displayq/2
@code{displayq/2}, 
@glindex displayq/1
@code{displayq/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (io_basic),  , Usage and interface (io_basic), Basic input/output
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{io_basic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_code/2 (pred)}}}
@temp
@end iftex
@pdindex get_code/2 
@glindex get_code/2 
@deffn PREDICATE get_code/2:


@code{get_code(Stream,Code)}


Reads from @code{Stream} the next character and unifies @code{Code} with its character code. At end of stream, unifies @code{Code} with the integer -1.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_code/1 (pred)}}}
@temp
@end iftex
@pdindex get_code/1 
@glindex get_code/1 
@deffn PREDICATE get_code/1:


@code{get_code(Code)}


Behaves like @code{current_input(S), get_code(S,Code)}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get1_code/2 (pred)}}}
@temp
@end iftex
@pdindex get1_code/2 
@glindex get1_code/2 
@deffn PREDICATE get1_code/2:


@code{get1_code(Stream,Code)}


Reads from @code{Stream} the next non-layout character (see 
@glindex code_class/2
@code{code_class/2}) and unifies @code{Code} with its character code. At end of stream, unifies @code{Code} with the integer -1.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get1_code/1 (pred)}}}
@temp
@end iftex
@pdindex get1_code/1 
@glindex get1_code/1 
@deffn PREDICATE get1_code/1:


@code{get1_code(Code)}


Behaves like @code{current_input(S), get1_code(S,Code)}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{peek_code/2 (pred)}}}
@temp
@end iftex
@pdindex peek_code/2 
@glindex peek_code/2 
@deffn PREDICATE peek_code/2:


@code{peek_code(Stream,Code)}


Unifies @code{Code} with the character code of the next character of @code{Stream}, leaving the stream position unaltered. At end of stream, unifies @code{Code} with the integer -1.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{peek_code/1 (pred)}}}
@temp
@end iftex
@pdindex peek_code/1 
@glindex peek_code/1 
@deffn PREDICATE peek_code/1:


@code{peek_code(Code)}


Behaves like @code{current_input(S), peek_code(S,Code)}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{skip_code/2 (pred)}}}
@temp
@end iftex
@pdindex skip_code/2 
@glindex skip_code/2 
@deffn PREDICATE skip_code/2:


@code{skip_code(Stream,Code)}


Skips just past the next character code @code{Code} from @code{Stream}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{skip_code/1 (pred)}}}
@temp
@end iftex
@pdindex skip_code/1 
@glindex skip_code/1 
@deffn PREDICATE skip_code/1:


@code{skip_code(Code)}


Behaves like @code{current_input(S), skip_code(S,Code)}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{put_code/2 (pred)}}}
@temp
@end iftex
@pdindex put_code/2 
@glindex put_code/2 
@deffn PREDICATE put_code/2:


@code{put_code(Stream,Code)}


Outputs to @code{Stream} the character corresponding to character code @code{Code}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{put_code/1 (pred)}}}
@temp
@end iftex
@pdindex put_code/1 
@glindex put_code/1 
@deffn PREDICATE put_code/1:


@code{put_code(Code)}


Behaves like @code{current_output(S), put_code(S,Code)}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nl/1 (pred)}}}
@temp
@end iftex
@pdindex nl/1 
@glindex nl/1 
@deffn PREDICATE nl/1:


@code{nl(Stream)}


Outputs a newline character to @code{Stream}. Equivalent to @code{put_code(Stream, 0'\n)}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nl/0 (pred)}}}
@temp
@end iftex
@pdindex nl/0 
@glindex nl/0 
@deffn PREDICATE nl/0:


@code{nl}


Behaves like @code{current_output(S), nl(S)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tab/2 (pred)}}}
@temp
@end iftex
@pdindex tab/2 
@glindex tab/2 
@deffn PREDICATE tab/2:


@code{tab(Stream,Num)}


Outputs @code{Num} spaces to @code{Stream}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{Num} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tab/1 (pred)}}}
@temp
@end iftex
@pdindex tab/1 
@glindex tab/1 
@deffn PREDICATE tab/1:


@code{tab(Num)}


Behaves like @code{current_output(S), tab(S,Num)}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Num} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{code_class/2 (pred)}}}
@temp
@end iftex
@pdindex code_class/2 
@glindex code_class/2 
@deffn PREDICATE code_class/2:


@code{code_class(Code,Class)}


Unifies @code{Class} with an integer corresponding to the lexical class of the character whose code is @code{Code}, with the following correspondence: 
@smallexample 
    0 - layout (includes space, newline, tab)
    1 - small letter
    2 - capital letter (including '_')
    3 - digit
    4 - graphic (includes #$&*+-./:<=>?@@^\`~ )
    5 - punctuation (includes !;"'%(),[]@{|@} )
   @end smallexample  
Note that in 
@glindex ISO-Prolog
ISO-Prolog the back quote @code{`} is a punctuation character, whereas in Ciao it is a graphic character. Thus, if compatibility with 
@glindex ISO-Prolog
ISO-Prolog is desired, the programmer should not use this character in unquoted names.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Class} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold at call time:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Class} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{getct/2 (pred)}}}
@temp
@end iftex
@pdindex getct/2 
@glindex getct/2 
@deffn PREDICATE getct/2:


@code{getct(Code,Type)}


Reads from the current input stream the next character, unifying @code{Code} with its character code, and @code{Type} with its lexical class. At end of stream, unifies both @code{Code} and @code{Type} with the integer -1. Equivalent to 
@smallexample 
   get(Code), (Code = -1 -> Type = -1 ; code_class(Code,Type))
   @end smallexample 



@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Type} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Type} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{getct1/2 (pred)}}}
@temp
@end iftex
@pdindex getct1/2 
@glindex getct1/2 
@deffn PREDICATE getct1/2:


@code{getct1(Code,Type)}


Reads from the current input stream the next non-layout character, unifying @code{Code} with its character code, and @code{Type} with its lexical class (which will be nonzero). At end of stream, unifies both @code{Code} and @code{Type} with the integer -1. Equivalent to 
@smallexample 
   get1(Code), (Code = -1 -> Type = -1 ; code_class(Code,Type))
   @end smallexample 



@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Type} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties hold upon exit:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Type} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{display/2 (pred)}}}
@temp
@end iftex
@pdindex display/2 
@glindex display/2 
@deffn PREDICATE display/2:


@code{display(Stream,Term)}


Displays @code{Term} onto @code{Stream}. Lists are output using list notation, the other compound terms are output in functional notation. Similar to @code{write_term(Stream, Term, [ignore_ops(ops)])}, except that curly bracketed notation is not used with @code{@{@}/1}, and the @code{write_strings} flag is not honored.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold globally:}


@code{Term} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{display/1 (pred)}}}
@temp
@end iftex
@pdindex display/1 
@glindex display/1 
@deffn PREDICATE display/1:


@code{display(Term)}


Behaves like @code{current_output(S), display(S,Term)}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold globally:}


@code{Term} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{displayq/2 (pred)}}}
@temp
@end iftex
@pdindex displayq/2 
@glindex displayq/2 
@deffn PREDICATE displayq/2:


@code{displayq(Stream,Term)}


Similar to @code{display(Stream, Term)}, but atoms and functors that can't be read back by 
@glindex read_term/3
@code{read_term/3} are quoted. Thus, similar to @code{write_term(Stream, Term, [quoted(true), ignore_ops(ops)])}, with the same exceptions as 
@glindex display/2
@code{display/2}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold globally:}


@code{Term} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{displayq/1 (pred)}}}
@temp
@end iftex
@pdindex displayq/1 
@glindex displayq/1 
@deffn PREDICATE displayq/1:


@code{displayq(Term)}


Behaves like @code{current_output(S), displayq(S,Term)}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold globally:}


@code{Term} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node Exception handling, Changing system behaviour and various flags, Basic input/output, Top
@comment node-name, next,  previous,  up
@chapter Exception handling
@liindex exceptions
@c -------------------------------------------------
@c WARNING: Do not edit this file (exceptions.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/exceptions.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


This module includes predicates related to exceptions, which alter the normal flow of Prolog.



@menu
* Usage and interface (exceptions)::  
* Documentation on exports (exceptions)::  
@end menu

@node Usage and interface (exceptions), Documentation on exports (exceptions), Exception handling, Exception handling
@comment node-name, next,  previous,  up
@section Usage and interface (@code{exceptions})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex catch/3
@code{catch/3}, 
@glindex intercept/3
@code{intercept/3}, 
@glindex throw/1
@code{throw/1}, 
@glindex halt/0
@code{halt/0}, 
@glindex halt/1
@code{halt/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (exceptions),  , Usage and interface (exceptions), Exception handling
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{exceptions})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{catch/3 (pred)}}}
@temp
@end iftex
@pdindex catch/3 
@glindex catch/3 
@deffn PREDICATE catch/3:


@code{catch(Goal,Error,Handler)}


Executes @code{Goal}. If an exception is raised during its execution, @code{Error} is unified with the exception, and if the unification succeeds, the entire execution derived from @code{Goal} is aborted, and @code{Handler} is executed. The execution resumes with the continuation of the catch/3 call. For example, given the code 
@smallexample 
p(X) :- throw(error), display('---').
p(X) :- display(X).
@end smallexample  
the execution of "@code{catch(p(0), E, display(E)), display(.), fail.}" results in the output "@code{error.}".


@emph{Meta-predicate} with arguments: @code{catch(goal,?,goal)}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Error} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Handler} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@item @emph{The following properties hold upon exit:}


@code{Error} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intercept/3 (pred)}}}
@temp
@end iftex
@pdindex intercept/3 
@glindex intercept/3 
@deffn PREDICATE intercept/3:


@code{intercept(Goal,Error,Handler)}


Executes @code{Goal}. If an exception is raised during its execution, @code{Error} is unified with the exception, and if the unification succeeds, @code{Handler} is executed and then the execution resumes after the predicate which produced the exception. Note the difference with builtin 
@glindex catch/3
@code{catch/3}, given the same code defined there, the execution of "@code{intercept(p(0), E, display(E)), display(.), fail.}" results in the output "@code{error---.0.}".


@emph{Meta-predicate} with arguments: @code{intercept(goal,?,goal)}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Error} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Handler} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@item @emph{The following properties hold upon exit:}


@code{Error} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{throw/1 (pred)}}}
@temp
@end iftex
@pdindex throw/1 
@glindex throw/1 
@deffn PREDICATE throw/1:


@code{throw(Ball)}


Raises an error, throwing the exception @code{Ball}, to be caught by an ancestor 
@glindex catch/3
@code{catch/3} or 
@glindex intercept/3
@code{intercept/3}. The closest matching ancestor is chosen. Exceptions are also thrown by other builtins in case of error.


@strong{Usage 1:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Ball} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize

@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Ball} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{halt/0 (pred)}}}
@temp
@end iftex
@pdindex halt/0 
@glindex halt/0 
@deffn PREDICATE halt/0:


@code{halt}


Halt the system, exiting to the invoking shell.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{halt/1 (pred)}}}
@temp
@end iftex
@pdindex halt/1 
@glindex halt/1 
@deffn PREDICATE halt/1:


@code{halt(Code)}


Halt the system, exiting to the invoking shell, returning exit code @code{Code}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Code} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{abort/0 (pred)}}}
@temp
@end iftex
@pdindex abort/0 
@glindex abort/0 
@deffn PREDICATE abort/0:


@code{abort}


Abort the current execution.

@end deffn
@sp 1


@c (component)


@node Changing system behaviour and various flags, Fast/concurrent update of facts, Exception handling, Top
@comment node-name, next,  previous,  up
@chapter Changing system behaviour and various flags
@liindex prolog_flags
@c -------------------------------------------------
@c WARNING: Do not edit this file (prolog_flags.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/prolog_flags.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Mats Carlsson.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)



@coindex prolog flag
@glindex prolog flag 
Flags define some parameters of the system and control the behavior of system or library predicates. Each flag has a name and an associated predefined value, and except some system flags which are fixed in general their associated value is changeable. Predefined flags in the system are: 


@table @asis 


@item @code{argv} 
Its value is a list of atoms representing the program arguments supplied when the current executable was invoked. This is the value to which is instantiated the argument of the 
@glindex main/1
@code{main/1} predicate at executable startup. Unchangeable. 


@item @code{bounded} 
It is @code{false}, to denote that the range of integers can be considered infinite (but see 
@glindex int/1
@code{int/1}). Unchangeable. @key{ @bullet{} ISO @bullet{} }


@item @code{fileerrors} 
If @code{on}, predicates handling files give errors (throw exceptions) when a file is inexistent or an operation is not allowed. If @code{off}, fail in that conditions. Initially @code{on}. 


@item @code{gc} 
Controls whether garbage collection is done. May be @code{on} (default) or @code{off}. 


@item @code{gc_margin} 
An integer @code{Margin}. If less than @code{Margin} kilobytes are reclaimed in a garbage collection then the size of the garbage collected area should be increased. Also, no garbage collection is attempted unless the garbage collected area has at least @code{Margin} kilobytes. Initially 500. 


@item @code{gc_trace} 
Governs garbage collection trace messages. An element off @code{[on,off,terse,verbose]}. Initially @code{off}. 


@item @code{integer_rounding_function} 
It is @code{toward_zero}, so that @code{-1 =:= -3//2} succeeds. Unchangeable. @key{ @bullet{} ISO @bullet{} }


@item @code{max_arity} 
It is 255, so that no compound term (or predicate) can have more than this number of arguments. Unchangeable. @key{ @bullet{} ISO @bullet{} }


@item @code{quiet} 
Controls which messages issued using 
@glindex io_aux
@code{io_aux} are actually written. As the system uses that library to report its messages, this flag controls the @emph{verbosity} of the system. Possible states of the flag are: 


@table @asis 


@item @code{on} 
No messages are reported. 


@item @code{error} 
Only error messages are reported. 


@item @code{warning} 
Only error and warning messages are reported. 


@item @code{off} 
All messages are reported, except debug messages. This is the default state. 


@item @code{debug} 
All messages, including debug messages, are reported. This is only intended for the system implementators. 


@end table  


@item @code{unknown} 
Controls action on calls to undefined predicates. The possible states of the flag are: 


@table @asis 


@item @code{error} 
An error is thrown with the 
@glindex error term
error term @code{existence_error(procedure, F/A)}. 


@item @code{fail} 
The call simply fails. 


@item @code{warning} 
A warning is written and the call fails. 


@end table  

The state is initially @code{error}. @key{ @bullet{} ISO @bullet{} }


@end table  




@menu
* Usage and interface (prolog_flags)::	
* Documentation on exports (prolog_flags)::  
* Documentation on multifiles (prolog_flags)::	
@end menu

@node Usage and interface (prolog_flags), Documentation on exports (prolog_flags), Changing system behaviour and various flags, Changing system behaviour and various flags
@comment node-name, next,  previous,  up
@section Usage and interface (@code{prolog_flags})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex set_prolog_flag/2
@code{set_prolog_flag/2}, 
@glindex current_prolog_flag/2
@code{current_prolog_flag/2}, 
@glindex prolog_flag/3
@code{prolog_flag/3}, 
@glindex push_prolog_flag/2
@code{push_prolog_flag/2}, 
@glindex pop_prolog_flag/1
@code{pop_prolog_flag/1}, 
@glindex prompt/2
@code{prompt/2}, 
@glindex gc/0
@code{gc/0}, 
@glindex nogc/0
@code{nogc/0}, 
@glindex fileerrors/0
@code{fileerrors/0}, 
@glindex nofileerrors/0
@code{nofileerrors/0}.


@item @emph{Multifiles:}

@glindex define_flag/3
@code{define_flag/3}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (prolog_flags), Documentation on multifiles (prolog_flags), Usage and interface (prolog_flags), Changing system behaviour and various flags
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{prolog_flags})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_prolog_flag/2 (pred)}}}
@temp
@end iftex
@pdindex set_prolog_flag/2 
@glindex set_prolog_flag/2 
@deffn PREDICATE set_prolog_flag/2:


@code{set_prolog_flag(FlagName,Value)}


Set existing flag @code{FlagName} to @code{Value}.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Value} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_prolog_flag/2 (pred)}}}
@temp
@end iftex
@pdindex current_prolog_flag/2 
@glindex current_prolog_flag/2 
@deffn PREDICATE current_prolog_flag/2:


@code{current_prolog_flag(FlagName,Value)}


@code{FlagName} is an existing flag and @code{Value} is the value currently associated with it.


@strong{Usage 2:} 
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Value} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Value} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_flag/3 (pred)}}}
@temp
@end iftex
@pdindex prolog_flag/3 
@glindex prolog_flag/3 
@deffn PREDICATE prolog_flag/3:


@code{prolog_flag(FlagName,OldValue,NewValue)}


@code{FlagName} is an existing flag, unify @code{OldValue} with the value associated with it, and set it to new value @code{NewValue}.


@strong{Usage 2:} @code{prolog_flag(?FlagName,-OldValue,-NewValue)}
@itemize @minus
@item @emph{Description:} Same as @code{current_prolog_flag(@code{FlagName}, @code{OldValue})} 
@item @emph{The following properties should hold at call time:}


@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

The terms @code{OldValue} and @code{NewValue} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@end itemize

@strong{Usage 3:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{OldValue} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold at call time:}


@code{NewValue} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{OldValue} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize

@strong{Usage 4:} @code{prolog_flag(FlagName,OldValue,NewValue)}
@itemize @minus
@item @emph{Description:} Same as @code{current_prolog_flag(@code{FlagName}, @code{OldValue})} 
@item @emph{The following properties should hold at call time:}


@code{OldValue} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{NewValue} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{FlagName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

The terms @code{OldValue} and @code{NewValue} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{push_prolog_flag/2 (pred)}}}
@temp
@end iftex
@pdindex push_prolog_flag/2 
@glindex push_prolog_flag/2 
@deffn PREDICATE push_prolog_flag/2:


@code{push_prolog_flag(Flag,NewValue)}


Same as 
@glindex set_prolog_flag/2
@code{set_prolog_flag/2}, but storing current value of @code{Flag} to restore it with 
@glindex pop_prolog_flag/1
@code{pop_prolog_flag/1}.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Flag} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{NewValue} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pop_prolog_flag/1 (pred)}}}
@temp
@end iftex
@pdindex pop_prolog_flag/1 
@glindex pop_prolog_flag/1 
@deffn PREDICATE pop_prolog_flag/1:


@code{pop_prolog_flag(Flag)}


Restore the value of @code{Flag} previous to the last non-canceled 
@glindex push_prolog_flag/2
@code{push_prolog_flag/2} on it.


@strong{Usage 2:} 
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Flag} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prompt/2 (pred)}}}
@temp
@end iftex
@pdindex prompt/2 
@glindex prompt/2 
@deffn PREDICATE prompt/2:


@code{prompt(Old,New)}


Unify @code{Old} with the current prompt for reading, change it to @code{New}.


@strong{Usage 2:} @code{prompt(Old,New)}
@itemize @minus
@item @emph{Description:} Unify @code{Old} with the current prompt for reading without changing it. 
@item @emph{The following properties should hold at call time:}


@code{Old} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{New} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

The terms @code{Old} and @code{New} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@item @emph{The following properties hold upon exit:}


@code{Old} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{New} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 3:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Old} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties should hold at call time:}


@code{New} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@item @emph{The following properties hold upon exit:}


@code{Old} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 4:} @code{prompt(Old,New)}
@itemize @minus
@item @emph{Description:} Unify @code{Old} with the current prompt for reading without changing it. 
@item @emph{The following properties should hold at call time:}


@code{Old} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{New} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

The terms @code{Old} and @code{New} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@item @emph{The following properties hold upon exit:}


@code{Old} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{New} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{gc/0 (pred)}}}
@temp
@end iftex
@pdindex gc/0 
@glindex gc/0 
@deffn PREDICATE gc/0:






@strong{Usage 1:} 
@itemize @minus
@item @emph{Description:} Enable garbage collection. Equivalent to @code{set_prolog_flag(gc, on)} 
@end itemize

@strong{Usage 2:} 
@itemize @minus
@item @emph{Description:} Enable garbage collection. Equivalent to @code{set_prolog_flag(gc, on)} 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nogc/0 (pred)}}}
@temp
@end iftex
@pdindex nogc/0 
@glindex nogc/0 
@deffn PREDICATE nogc/0:






@strong{Usage 1:} 
@itemize @minus
@item @emph{Description:} Disable garbage collection. Equivalent to @code{set_prolog_flag(gc, off)} 
@end itemize

@strong{Usage 2:} 
@itemize @minus
@item @emph{Description:} Disable garbage collection. Equivalent to @code{set_prolog_flag(gc, off)} 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fileerrors/0 (pred)}}}
@temp
@end iftex
@pdindex fileerrors/0 
@glindex fileerrors/0 
@deffn PREDICATE fileerrors/0:






@strong{Usage 1:} 
@itemize @minus
@item @emph{Description:} Enable reporting of file errors. Equivalent to @code{set_prolog_flag(fileerrors, on)} 
@end itemize

@strong{Usage 2:} 
@itemize @minus
@item @emph{Description:} Enable reporting of file errors. Equivalent to @code{set_prolog_flag(fileerrors, on)} 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nofileerrors/0 (pred)}}}
@temp
@end iftex
@pdindex nofileerrors/0 
@glindex nofileerrors/0 
@deffn PREDICATE nofileerrors/0:






@strong{Usage 1:} 
@itemize @minus
@item @emph{Description:} Disable reporting of file errors. Equivalent to @code{set_prolog_flag(fileerrors, off)} 
@end itemize

@strong{Usage 2:} 
@itemize @minus
@item @emph{Description:} Disable reporting of file errors. Equivalent to @code{set_prolog_flag(fileerrors, off)} 
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (prolog_flags),  , Documentation on exports (prolog_flags), Changing system behaviour and various flags
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{prolog_flags})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{define_flag/3 (pred)}}}
@temp
@end iftex
@pdindex define_flag/3 
@glindex define_flag/3 
@deffn PREDICATE define_flag/3:


@code{define_flag(Flag,Values,Default)}


New flags can be defined by writing facts of this predicate. @code{Flag} is the name of the new flag, @code{Values} defines the posible values for the flag (see below) and @code{Default} defines the predefined value associated with the flag (which should be compatible with @code{Values}).


The predicate is @emph{multifile}.


@strong{Usage 1:} @code{define_flag(-atm,Values,-atm)}
@itemize @minus
@item @emph{Description:} Posible values for the flag are atoms.

Example: 
@smallexample 
:- multifile define_flag/3.
define_flag(tmpdir, atom, '/tmp').
@end smallexample  
 
@item @emph{Call and exit should be @emph{compatible} with:}


The terms @code{Values} and @code{atom} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@end itemize

@strong{Usage 2:} @code{define_flag(-atm,Values,-int)}
@itemize @minus
@item @emph{Description:} Posible values for the flag are integers.

Example: 
@smallexample 
:- multifile define_flag/3.
define_flag(max_connections, integer, 10).
@end smallexample  
 
@item @emph{Call and exit should be @emph{compatible} with:}


The terms @code{Values} and @code{integer} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@end itemize

@strong{Usage 3:} @code{define_flag(Flag,Values,Default)}
@itemize @minus
@item @emph{Description:} Posible values for the flag are the elements of @code{Values}.

Example: 
@smallexample 
:- multifile define_flag/3.
define_flag(debug, [on,debug,trace,off], off).
@end smallexample  
 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Flag} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Values} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@item @emph{The following properties should hold upon exit:}


@code{Default} is an element of @code{Values}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node Fast/concurrent update of facts, Extending the syntax, Changing system behaviour and various flags, Top
@comment node-name, next,  previous,  up
@chapter Fast/concurrent update of facts
@liindex data_facts
@c -------------------------------------------------
@c WARNING: Do not edit this file (data_facts.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/data_facts.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)



@coindex data predicate
@glindex data predicate
Prolog implementations traditionally implement the concept of 
@glindex dynamic predicate
dynamic predicates: predicates which can be inspected or modified at run-time, adding or deleting individual clauses. The powerfulness of this feature brings also a great disadvantage: as new clause bodies can be arbitrarily added to the program, new unknown predicate calls can arise, thus preventing any global analysis or optimization of the code. But it is the case that most of the time what the programmer wants is simply to store data, with the purpose of sharing it between search branches, predicates, or even execution threads. In Ciao the concept of data predicate serves this purpose: a data predicate is a predicate composed exclusively by facts, which can be inspected, and dynamically added or deleted, at run-time. Using data predicates instead of normal dynamic predicates brings benefits in terms of speed, but above all turns the code automatically analyzable.
@coindex concurrent predicate
@glindex concurrent predicate 
There is also a special kind of data predicates, called concurrent predicates, which can be used to communicate/synchronize among different execution threads (see @ref{Low-level concurrency/multithreading primitives}).



@menu
* Usage and interface (data_facts)::  
* Documentation on exports (data_facts)::  
* Documentation on internals (data_facts)::  
@end menu

@node Usage and interface (data_facts), Documentation on exports (data_facts), Fast/concurrent update of facts, Fast/concurrent update of facts
@comment node-name, next,  previous,  up
@section Usage and interface (@code{data_facts})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex asserta_fact/1
@code{asserta_fact/1}, 
@glindex asserta_fact/2
@code{asserta_fact/2}, 
@glindex assertz_fact/1
@code{assertz_fact/1}, 
@glindex assertz_fact/2
@code{assertz_fact/2}, 
@glindex current_fact/1
@code{current_fact/1}, 
@glindex current_fact/2
@code{current_fact/2}, 
@glindex retract_fact/1
@code{retract_fact/1}, 
@glindex retractall_fact/1
@code{retractall_fact/1}, 
@glindex current_fact_nb/1
@code{current_fact_nb/1}, 
@glindex retract_fact_nb/1
@code{retract_fact_nb/1}, 
@glindex close_predicate/1
@code{close_predicate/1}, 
@glindex open_predicate/1
@code{open_predicate/1}, 
@glindex set_fact/1
@code{set_fact/1}, 
@glindex erase/1
@code{erase/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (data_facts), Documentation on internals (data_facts), Usage and interface (data_facts), Fast/concurrent update of facts
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{data_facts})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{asserta_fact/1 (pred)}}}
@temp
@end iftex
@pdindex asserta_fact/1 
@glindex asserta_fact/1 
@deffn PREDICATE asserta_fact/1:


@code{asserta_fact(Fact)}


@code{Fact} is added to the corresponding 
@glindex data predicate
data predicate. The fact becomes the first clause of the predicate concerned.


@emph{Meta-predicate} with arguments: @code{asserta_fact(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{asserta_fact/2 (pred)}}}
@temp
@end iftex
@pdindex asserta_fact/2 
@glindex asserta_fact/2 
@deffn PREDICATE asserta_fact/2:


@code{asserta_fact(Fact,Ref)}


Same as 
@glindex asserta_fact/1
@code{asserta_fact/1}, instantiating @code{Ref} to a unique identifier of the asserted fact.


@emph{Meta-predicate} with arguments: @code{asserta_fact(fact,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assertz_fact/1 (pred)}}}
@temp
@end iftex
@pdindex assertz_fact/1 
@glindex assertz_fact/1 
@deffn PREDICATE assertz_fact/1:


@code{assertz_fact(Fact)}


@code{Fact} is added to the corresponding 
@glindex data predicate
data predicate. The fact becomes the last clause of the predicate concerned.


@emph{Meta-predicate} with arguments: @code{assertz_fact(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assertz_fact/2 (pred)}}}
@temp
@end iftex
@pdindex assertz_fact/2 
@glindex assertz_fact/2 
@deffn PREDICATE assertz_fact/2:


@code{assertz_fact(Fact,Ref)}


Same as 
@glindex assertz_fact/1
@code{assertz_fact/1}, instantiating @code{Ref} to a unique identifier of the asserted fact.


@emph{Meta-predicate} with arguments: @code{assertz_fact(fact,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_fact/1 (pred)}}}
@temp
@end iftex
@pdindex current_fact/1 
@glindex current_fact/1 
@deffn PREDICATE current_fact/1:


@code{current_fact(Fact)}


Gives on backtracking all the facts defined as data or concurrent which unify with @code{Fact}. It is faster than calling the predicate explicitly, which do invoke the meta-interpreter. If the @code{Fact} has been defined as concurrent and has not been 
@glindex closed
closed, 
@glindex current_fact/1
@code{current_fact/1} will wait (instead of failing) for more clauses to appear after the last clause of @code{Fact} is returned.


@emph{Meta-predicate} with arguments: @code{current_fact(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_fact/2 (pred)}}}
@temp
@end iftex
@pdindex current_fact/2 
@glindex current_fact/2 
@deffn PREDICATE current_fact/2:


@code{current_fact(Fact,Ref)}


@code{Fact} is a fact of a 
@glindex data predicate
data predicate and @code{Ref} is its reference identifying it uniquely.


@emph{Meta-predicate} with arguments: @code{current_fact(fact,?)}.


@strong{Usage 1:} @code{current_fact(+callable,-reference)}
@itemize @minus
@item @emph{Description:} Gives on backtracking all the facts defined as data which unify with @code{Fact}, instantiating @code{Ref} to a unique identifier for each fact. 
@end itemize

@strong{Usage 2:} @code{current_fact(?callable,+reference)}
@itemize @minus
@item @emph{Description:} Given @code{Ref}, unifies @code{Fact} with the fact identified by it. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{retract_fact/1 (pred)}}}
@temp
@end iftex
@pdindex retract_fact/1 
@glindex retract_fact/1 
@deffn PREDICATE retract_fact/1:


@code{retract_fact(Fact)}


Unifies @code{Fact} with the first matching fact of a 
@glindex data predicate
data predicate, and then erases it. On backtracking successively unifies with and erases new matching facts. If @code{Fact} is declared as 
@glindex concurrent
concurrent and is non-
@glindex closed
closed, 
@glindex retract_fact/1
@code{retract_fact/1} will wait for more clauses or for the closing of the predicate after the last matching clause has been removed.


@emph{Meta-predicate} with arguments: @code{retract_fact(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{retractall_fact/1 (pred)}}}
@temp
@end iftex
@pdindex retractall_fact/1 
@glindex retractall_fact/1 
@deffn PREDICATE retractall_fact/1:


@code{retractall_fact(Fact)}


Erase all the facts of a 
@glindex data predicate
data predicate unifying with @code{Fact}. Even if all facts are removed, the predicate continues to exist.


@emph{Meta-predicate} with arguments: @code{retractall_fact(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_fact_nb/1 (pred)}}}
@temp
@end iftex
@pdindex current_fact_nb/1 
@glindex current_fact_nb/1 
@deffn PREDICATE current_fact_nb/1:


@code{current_fact_nb(Fact)}


Behaves as 
@glindex current_fact/1
@code{current_fact/1} but a fact is never waited on even if it is 
@glindex concurrent
concurrent and non-closed.


@emph{Meta-predicate} with arguments: @code{current_fact_nb(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{retract_fact_nb/1 (pred)}}}
@temp
@end iftex
@pdindex retract_fact_nb/1 
@glindex retract_fact_nb/1 
@deffn PREDICATE retract_fact_nb/1:


@code{retract_fact_nb(Fact)}


Behaves as 
@glindex retract_fact/1
@code{retract_fact/1}, but never waits on a fact, even if it has been declared as 
@glindex concurrent
concurrent and is non-
@glindex closed
closed.


@emph{Meta-predicate} with arguments: @code{retract_fact_nb(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close_predicate/1 (pred)}}}
@temp
@end iftex
@pdindex close_predicate/1 
@glindex close_predicate/1 
@deffn PREDICATE close_predicate/1:


@code{close_predicate(Pred)}



@coindex closed
@glindex closed 
Changes the behavior of the predicate @code{Pred} if it has been declared as a 
@glindex concurrent predicate
concurrent predicate: calls to this predicate will fail (instead of wait) if no more clauses of @code{Pred} are available.


@emph{Meta-predicate} with arguments: @code{close_predicate(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open_predicate/1 (pred)}}}
@temp
@end iftex
@pdindex open_predicate/1 
@glindex open_predicate/1 
@deffn PREDICATE open_predicate/1:


@code{open_predicate(Pred)}


Reverts the behavior of 
@glindex concurrent predicate
concurrent predicate @code{Pred} to waiting instead of failing if no more clauses of @code{Pred} are available.


@emph{Meta-predicate} with arguments: @code{open_predicate(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_fact/1 (pred)}}}
@temp
@end iftex
@pdindex set_fact/1 
@glindex set_fact/1 
@deffn PREDICATE set_fact/1:


@code{set_fact(Fact)}


Sets @code{Fact} as the unique fact of the corresponding 
@glindex data predicate
data predicate.


@emph{Meta-predicate} with arguments: @code{set_fact(fact)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{erase/1 (pred)}}}
@temp
@end iftex
@pdindex erase/1 
@glindex erase/1 
@deffn PREDICATE erase/1:


@code{erase(Ref)}


Deletes the clause referenced by @code{Ref}.

@end deffn
@sp 1



@node Documentation on internals (data_facts),  , Documentation on exports (data_facts), Fast/concurrent update of facts
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{data_facts})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{reference/1 (regtype)}}}
@temp
@end iftex
@teindex reference/1 
@glindex reference/1 
@deffn REGTYPE reference/1:






@strong{Usage:} @code{reference(R)}
@itemize @minus
@item @emph{Description:} @code{R} is a reference of a dynamic or data clause. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Extending the syntax, Message printing primitives, Fast/concurrent update of facts, Top
@comment node-name, next,  previous,  up
@chapter Extending the syntax
@liindex syntax_extensions
@c -------------------------------------------------
@c WARNING: Do not edit this file (syntax_extensions.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/syntax_extensions.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.


This chapter documents the 
@glindex builtin directives
builtin directives in Ciao for extending the syntax of source files. Note that the 
@glindex ISO-Prolog
ISO-Prolog directive 
@glindex char_conversion/2
@code{char_conversion/2} is not implemented, since Ciao does not (yet) have a character conversion table.



@menu
* Usage and interface (syntax_extensions)::  
* Documentation on internals (syntax_extensions)::  
@end menu

@node Usage and interface (syntax_extensions), Documentation on internals (syntax_extensions), Extending the syntax, Extending the syntax
@comment node-name, next,  previous,  up
@section Usage and interface (@code{syntax_extensions})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These directives are builtin in Ciao, so nothing special has to be done to use them.
@end itemize
@end cartouche


@node Documentation on internals (syntax_extensions),  , Usage and interface (syntax_extensions), Extending the syntax
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{syntax_extensions})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{op/3 (decl)}}}
@temp
@end iftex
@deindex op/3 
@glindex op/3 
@deffn DECLARATION op/3:






@strong{Usage:} :- @code{op(Priority,Op_spec,Operator)}.
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Updates the 
@glindex operator table
operator table for reading the terms in the rest of the current text, in the same way as the builtin 
@glindex op/3
@code{op/3} does. Its scope is local to the current text. Usually included in 
@glindex package file
package files. 
@item @emph{The following properties hold at call time:}


@code{Priority} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Op_spec} specifies the type and associativity of an operator.
@iftex
@hfill
@end iftex
 (@code{basic_props:operator_specifier/1})

@code{Operator} is an atom or a list of atoms.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm_or_atm_list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{new_declaration/1 (decl)}}}
@temp
@end iftex
@deindex new_declaration/1 
@glindex new_declaration/1 
@deffn DECLARATION new_declaration/1:






@strong{Usage:} :- @code{new_declaration(Predicate)}.
@itemize @minus
@item @emph{Description:} Declares @code{Predicate} to be a valid declaration in the rest of the current text. Such declarations are simply ignored by the compiler or top level, but can be used by other code processing programs such as an automatic documentator. Also, they can easily translated into standard code (a set of facts and/or rules) by defining a suitable 
@glindex expansion
expansion (e.g., by 
@glindex add_sentence_trans/1
@code{add_sentence_trans/1}, etc.). This is tipically done in 
@glindex package file
package files. 

Equivalent to @code{new_declaration(Predicate, off)}. 
@item @emph{The following properties hold at call time:}


@code{Predicate} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 

@iftex
@hfill
@end iftex
 (@code{basic_props:predname/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{new_declaration/2 (decl)}}}
@temp
@end iftex
@deindex new_declaration/2 
@glindex new_declaration/2 
@deffn DECLARATION new_declaration/2:






@strong{Usage:} :- @code{new_declaration(Predicate,In_Itf)}.
@itemize @minus
@item @emph{Description:} Declares @code{Predicate} to be a valid declaration in the rest of the current text. Such declarations will be included in the 
@glindex interface file
interface file for this file if @code{In_Itf} is 'on', not if it is 'off'. Including such declarations in interface files makes them visible while processing other modules which make use of this one. 
@item @emph{The following properties hold at call time:}


@code{Predicate} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 

@iftex
@hfill
@end iftex
 (@code{basic_props:predname/1})

@code{In_Itf} is 'on' or 'off'
@iftex
@hfill
@end iftex
 (@code{syntax_extensions:switch/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{load_compilation_module/1 (decl)}}}
@temp
@end iftex
@deindex load_compilation_module/1 
@glindex load_compilation_module/1 
@deffn DECLARATION load_compilation_module/1:






@strong{Usage:} :- @code{load_compilation_module(File)}.
@itemize @minus
@item @emph{Description:} Loads code defined in @code{File} into the compiler, usually including predicates which define translations of terms, for use with the declarations 
@glindex add_sentence_trans/1
@code{add_sentence_trans/1} and similar ones. Normally included in 
@glindex package file
package files. 
@item @emph{The following properties hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_sentence_trans/1 (decl)}}}
@temp
@end iftex
@deindex add_sentence_trans/1 
@glindex add_sentence_trans/1 
@deffn DECLARATION add_sentence_trans/1:






@strong{Usage:} :- @code{add_sentence_trans(Predicate)}.
@itemize @minus
@item @emph{Description:} Starts a translation, defined by @code{Predicate}, of the terms read by the compiler in the rest of the current text. For each subsequent term read by the compiler, the translation predicate is called to obtain a new term which will be used by the compiler as if it where the term present in the file. A list may be returned also, to translate a single term into several terms. @code{Predicate} must be exported by a module previously loaded with a 
@glindex load_compilation_module/1
@code{load_compilation_module/1} declaration. Normally included in 
@glindex package file
package files. 
@item @emph{The following properties hold at call time:}


@code{Predicate} is a translation predicate spec (has arity 2 or 3).
@iftex
@hfill
@end iftex
 (@code{syntax_extensions:translation_predname/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_term_trans/1 (decl)}}}
@temp
@end iftex
@deindex add_term_trans/1 
@glindex add_term_trans/1 
@deffn DECLARATION add_term_trans/1:






@strong{Usage:} :- @code{add_term_trans(P)}.
@itemize @minus
@item @emph{Description:} Starts a translation, defined by @code{Predicate}, of the terms and sub-terms read by the compiler in the rest of the current text. This translation is performed after all translations defined by 
@glindex add_sentence_trans/1
@code{add_sentence_trans/1} are done. For each subsequent term read by the compiler, and recursively any subterm included, the translation predicate is called to possibly obtain a new term to replace the old one. Care must be taken of not introducing an endless loop of translations. @code{Predicate} must be exported by a module previously loaded with a 
@glindex load_compilation_module/1
@code{load_compilation_module/1} declaration. Normally included in 
@glindex package file
package files. 
@item @emph{The following properties hold at call time:}


@code{P} is a translation predicate spec (has arity 2 or 3).
@iftex
@hfill
@end iftex
 (@code{syntax_extensions:translation_predname/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_goal_trans/1 (decl)}}}
@temp
@end iftex
@deindex add_goal_trans/1 
@glindex add_goal_trans/1 
@deffn DECLARATION add_goal_trans/1:






@strong{Usage:} :- @code{add_goal_trans(Predicate)}.
@itemize @minus
@item @emph{Description:} Declares a translation, defined by @code{Predicate}, of the goals present in the clauses of the current text. This translation is performed after all translations defined by 
@glindex add_sentence_trans/1
@code{add_sentence_trans/1} and 
@glindex add_term_trans/1
@code{add_term_trans/1} are done. For each clause read by the compiler, the translation predicate is called with each goal present in the clause to possibly obtain other goal to substitute the original one, and the translation is subsequently applied to the resulting goal. Care must be taken of not introducing an endless loop of translations. @code{Predicate} must be exported by a module previously loaded with a 
@glindex load_compilation_module/1
@code{load_compilation_module/1} declaration. Bear in mind that this type of translation noticeably slows down compilation. Normally included in 
@glindex package file
package files. 
@item @emph{The following properties hold at call time:}


@code{Predicate} is a translation predicate spec (has arity 2 or 3).
@iftex
@hfill
@end iftex
 (@code{syntax_extensions:translation_predname/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_clause_trans/1 (decl)}}}
@temp
@end iftex
@deindex add_clause_trans/1 
@glindex add_clause_trans/1 
@deffn DECLARATION add_clause_trans/1:






@strong{Usage:} :- @code{add_clause_trans(Predicate)}.
@itemize @minus
@item @emph{Description:} Declares a translation, defined by @code{Predicate}, of the clauses of the current text. The translation is performed before 
@glindex add_goal_trans/1
@code{add_goal_trans/1} translations but after 
@glindex add_sentence_trans/1
@code{add_sentence_trans/1} and 
@glindex add_term_trans/1
@code{add_term_trans/1} translations. The usefulness of this translation is that information of the interface of related modules is available when it is performed. For each clause read by the compiler, the translation predicate is called with the first argument instantiated to a structure @code{clause(Head,Body)}, and the predicate must return in the second argument a similar structure, without changing the functor in @code{Head}. Before executing the translation predicate with actual clauses it is called with an input of @code{clause(0,0)} (output is discarded). 
@item @emph{The following properties hold at call time:}


@code{Predicate} is a translation predicate spec (has arity 2 or 3).
@iftex
@hfill
@end iftex
 (@code{syntax_extensions:translation_predname/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{translation_predname/1 (regtype)}}}
@temp
@end iftex
@teindex translation_predname/1 
@glindex translation_predname/1 
@deffn REGTYPE translation_predname/1:



A translation predicate is a predicate of arity 2 or 3 used to make compile-time translations. The compiler invokes a translation predicate instantiating its first argument with the item to be translated, and if the predicate is of arity 3 its third argument with the name of the module where the translation is done. If the call is successful, the second argument is used as if that item were in the place of the original, else the original item is used.


@strong{Usage:} @code{translation_predname(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a translation predicate spec (has arity 2 or 3). 
@end itemize
@end deffn
@sp 1


@c (component)


@node Message printing primitives, Attributed variables, Extending the syntax, Top
@comment node-name, next,  previous,  up
@chapter Message printing primitives
@liindex io_aux
@c -------------------------------------------------
@c WARNING: Do not edit this file (io_aux.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/io_aux.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


This module provides predicates for printing in a unified way informational messages, and also for printing some terms in a specific way.



@menu
* Usage and interface (io_aux)::  
* Documentation on exports (io_aux)::  
* Known bugs and planned improvements (io_aux)::  
@end menu

@node Usage and interface (io_aux), Documentation on exports (io_aux), Message printing primitives, Message printing primitives
@comment node-name, next,  previous,  up
@section Usage and interface (@code{io_aux})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex message/2
@code{message/2}, 
@glindex message_lns/4
@code{message_lns/4}, 
@glindex display_string/1
@code{display_string/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (io_aux), Known bugs and planned improvements (io_aux), Usage and interface (io_aux), Message printing primitives
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{io_aux})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{message/2 (pred)}}}
@temp
@end iftex
@pdindex message/2 
@glindex message/2 
@deffn PREDICATE message/2:


@code{message(Type,Message)}


Output to standard error @code{Message}, which is of type @code{Type}. The @code{quiet} 
@coindex prolog flag
@glindex prolog flag
@emph{prolog flag} (see @ref{Changing system behaviour and various flags}) controls which messages are actually output, depending on its type. Also, for @code{error}, @code{warning} and @code{note} messages, a prefix is output which denotes the severity of the message. @code{Message} is an item or a list of items from this list: 
@table @asis 


@item @code{$$(String)} 
@code{String} is a string, which is output with 
@glindex display_string/1
@code{display_string/1}. 


@item @code{''(Term)} 
@code{Term} is output quoted. If the module 
@glindex write
@code{write} is loaded, the term is output with 
@glindex writeq/1
@code{writeq/1}, else with 
@glindex displayq/1
@code{displayq/1}. 


@item @code{~~(Term)} 
@code{Term} is output unquoted. If the module 
@glindex write
@code{write} is loaded, the term is output with 
@glindex write/1
@code{write/1}, else with 
@glindex display/1
@code{display/1}. 


@item @code{[](Term)} 
@code{Term} is recursively output as a message, can be an item or a list of items from this list. 


@item @code{Term} 
Any other term is output with 
@glindex display/1
@code{display/1}. 
@end table  



@strong{Usage 1:} @code{message(Type,Message)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Type} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Type} is an element of @code{[error,warning,note,message,debug]}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})
@end itemize

@strong{Usage 2:} @code{message(Type,Message)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Type} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Type} is an element of @code{[error,warning,note,message,debug]}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{message_lns/4 (pred)}}}
@temp
@end iftex
@pdindex message_lns/4 
@glindex message_lns/4 
@deffn PREDICATE message_lns/4:


@code{message_lns(Type,L0,L1,Message)}


Output to standard error @code{Message}, which is of type @code{Type}, and occurs between lines @code{L0} and @code{L1}. This is the same as 
@glindex message/2
@code{message/2}, but printing the lines where the message occurs in a unified way (this is useful because automatic tools such as the emacs mode know how to parse them).


@strong{Usage 1:} @code{message_lns(Type,L0,L1,Message)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Type} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Type} is an element of @code{[error,warning,note,message,debug]}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})
@end itemize

@strong{Usage 2:} @code{message_lns(Type,L0,L1,Message)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{Type} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Type} is an element of @code{[error,warning,note,message,debug]}.
@iftex
@hfill
@end iftex
 (@code{basic_props:member/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error/1 (pred)}}}
@temp
@end iftex
@pdindex error/1 
@glindex error/1 
@deffn PREDICATE error/1:



Defined as 
@smallexample 
error(Message) :-
        message(error,Message).
@end smallexample 
.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{warning/1 (pred)}}}
@temp
@end iftex
@pdindex warning/1 
@glindex warning/1 
@deffn PREDICATE warning/1:



Defined as 
@smallexample 
warning(Message) :-
        message(warning,Message).
@end smallexample 
.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{note/1 (pred)}}}
@temp
@end iftex
@pdindex note/1 
@glindex note/1 
@deffn PREDICATE note/1:



Defined as 
@smallexample 
note(Message) :-
        message(note,Message).
@end smallexample 
.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{message/1 (pred)}}}
@temp
@end iftex
@pdindex message/1 
@glindex message/1 
@deffn PREDICATE message/1:



Defined as 
@smallexample 
message(Message) :-
        message(message,Message).
@end smallexample 
.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug/1 (pred)}}}
@temp
@end iftex
@pdindex debug/1 
@glindex debug/1 
@deffn PREDICATE debug/1:



Defined as 
@smallexample 
debug(Message) :-
        message(debug,Message).
@end smallexample 
.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{inform_user/1 (pred)}}}
@temp
@end iftex
@pdindex inform_user/1 
@glindex inform_user/1 
@deffn PREDICATE inform_user/1:


@code{inform_user(Message)}


Similar to 
@glindex message/1
@code{message/1}, but @code{Message} is output with 
@glindex display_list/1
@code{display_list/1}. This predicate is obsolete, and may disappear in future versions.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{display_string/1 (pred)}}}
@temp
@end iftex
@pdindex display_string/1 
@glindex display_string/1 
@deffn PREDICATE display_string/1:


@code{display_string(String)}


Output @code{String} as the sequence of characters it represents.


@strong{Usage 1:} @code{display_string(String)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize

@strong{Usage 2:} @code{display_string(String)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{display_list/1 (pred)}}}
@temp
@end iftex
@pdindex display_list/1 
@glindex display_list/1 
@deffn PREDICATE display_list/1:


@code{display_list(List)}


Outputs @code{List}. If @code{List} is a list, do 
@glindex display/1
@code{display/1} on each of its elements, else do 
@glindex display/1
@code{display/1} on @code{List}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{display_term/1 (pred)}}}
@temp
@end iftex
@pdindex display_term/1 
@glindex display_term/1 
@deffn PREDICATE display_term/1:


@code{display_term(Term)}


Output @code{Term} in a way that a 
@glindex read/1
@code{read/1} will be able to read it back, even if operators change.

@end deffn
@sp 1



@node Known bugs and planned improvements (io_aux),  , Documentation on exports (io_aux), Message printing primitives
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{io_aux})

@itemize @bullet{}

@item

@glindex message/2
@code{message/2} assumes that a module with name 'write' is library(write).
@end itemize

@c (component)


@node Attributed variables, Gathering some basic internal info, Message printing primitives, Top
@comment node-name, next,  previous,  up
@chapter Attributed variables
@liindex attributes
@c -------------------------------------------------
@c WARNING: Do not edit this file (attributes.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/attributes.pl
@c -------------------------------------------------

@strong{Author(s):} Christian Holzbaur, Daniel Cabeza, Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#157 (2000/5/30, 13:4:47 CEST)

These predicates are builtin in Ciao, so nothing special has to be done to use them.



@menu
* Usage and interface (attributes)::  
* Documentation on exports (attributes)::  
* Documentation on multifiles (attributes)::  
@end menu

@node Usage and interface (attributes), Documentation on exports (attributes), Attributed variables, Attributed variables
@comment node-name, next,  previous,  up
@section Usage and interface (@code{attributes})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

Note that 
@glindex combine_attributes/2
@code{combine_attributes/2} and 
@glindex verify_attribute/2
@code{verify_attribute/2} are not called with the attributed variables involved, but with the corresponding attributes instead. The reasons are: 


@itemize @bullet{} 


@item There are simple applications which only refer to the attributes. 


@item If the application wants to refer to the attributed variables themselves, they can be made part the attribute term. The implementation of 
@glindex freeze/2
@code{freeze/2} utilizes this technique. Note that this does not lead to cyclic structures, as the connection between an attributed variable and its attribute is invisible to the pure parts of the Prolog implementation. 


@item If attributed variables were passed as arguments, the user code would have to refer to the attributes through an extra call to 
@glindex get_attribute/2
@code{get_attribute/2}. 


@item As the/one attribute is the first argument to each of the two predicates, indexing applies. Note that attributed variables themselves look like variables to the indexing mechanism. 


@end itemize  

However, future improvements may change or extend the interface to attributed variables in order to provide a richer and more expressive interface. 

For customized output of attributed variables, please refer to the documentation of the predicate 
@glindex portray_attribute/2
@code{portray_attribute/2}. 

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex attach_attribute/2
@code{attach_attribute/2}, 
@glindex get_attribute/2
@code{get_attribute/2}, 
@glindex update_attribute/2
@code{update_attribute/2}, 
@glindex detach_attribute/1
@code{detach_attribute/1}.


@item @emph{Multifiles:}

@glindex verify_attribute/2
@code{verify_attribute/2}, 
@glindex combine_attributes/2
@code{combine_attributes/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (attributes), Documentation on multifiles (attributes), Usage and interface (attributes), Attributed variables
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{attributes})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{attach_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex attach_attribute/2 
@glindex attach_attribute/2 
@deffn PREDICATE attach_attribute/2:






@strong{Usage 1:} @code{attach_attribute(Var,Attr)}
@itemize @minus
@item @emph{Description:} Attach attribute @code{Attr} to @code{Var}. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize

@strong{Usage 2:} @code{attach_attribute(Var,Attr)}
@itemize @minus
@item @emph{Description:} Attach attribute @code{Attr} to @code{Var}. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex get_attribute/2 
@glindex get_attribute/2 
@deffn PREDICATE get_attribute/2:






@strong{Usage 1:} @code{get_attribute(Var,Attr)}
@itemize @minus
@item @emph{Description:} Unify @code{Attr} with the attribute of @code{Var}, or fail if @code{Var} has no attribute. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize

@strong{Usage 2:} @code{get_attribute(Var,Attr)}
@itemize @minus
@item @emph{Description:} Unify @code{Attr} with the attribute of @code{Var}, or fail if @code{Var} has no attribute. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{update_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex update_attribute/2 
@glindex update_attribute/2 
@deffn PREDICATE update_attribute/2:






@strong{Usage 1:} @code{update_attribute(Var,Attr)}
@itemize @minus
@item @emph{Description:} Change the attribute of attributed variable @code{Var} to @code{Attr}. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize

@strong{Usage 2:} @code{update_attribute(Var,Attr)}
@itemize @minus
@item @emph{Description:} Change the attribute of attributed variable @code{Var} to @code{Attr}. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{detach_attribute/1 (pred)}}}
@temp
@end iftex
@pdindex detach_attribute/1 
@glindex detach_attribute/1 
@deffn PREDICATE detach_attribute/1:






@strong{Usage 1:} @code{detach_attribute(Var)}
@itemize @minus
@item @emph{Description:} Take out the attribute from the attributed variable @code{Var}. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize

@strong{Usage 2:} @code{detach_attribute(Var)}
@itemize @minus
@item @emph{Description:} Take out the attribute from the attributed variable @code{Var}. 
@item @emph{The following properties should hold at call time:}


@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (attributes),  , Documentation on exports (attributes), Attributed variables
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{attributes})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{verify_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex verify_attribute/2 
@glindex verify_attribute/2 
@deffn PREDICATE verify_attribute/2:






The predicate is @emph{multifile}.


@strong{Usage:} @code{verify_attribute(Attr,Term)}
@itemize @minus
@item @emph{Description:} @emph{A user defined predicate.} This predicate is called when an attributed variable with attribute @code{Attr} is about to be unified with the non-variable term @code{Term}. The user should define this predicate (as multifile) in the modules implementing special unification. 
@item @emph{The following properties should hold at call time:}


@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{Term} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{combine_attributes/2 (pred)}}}
@temp
@end iftex
@pdindex combine_attributes/2 
@glindex combine_attributes/2 
@deffn PREDICATE combine_attributes/2:






The predicate is @emph{multifile}.


@strong{Usage:} @code{combine_attributes(Var1,Var2)}
@itemize @minus
@item @emph{Description:} @emph{A user defined predicate.} This predicate is called when two attributed variables with attributes @code{Var1} and @code{Var2} are about to be unified. The user should define this predicate (as multifile) in the modules implementing special unification. 
@item @emph{The following properties should hold at call time:}


@code{Var1} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Var2} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Gathering some basic internal info, *** PART III - ISO-Prolog library (iso), Attributed variables, Top
@comment node-name, next,  previous,  up
@chapter Gathering some basic internal info
@liindex system_info
@c -------------------------------------------------
@c WARNING: Do not edit this file (system_info.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/engine/system_info.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#13 (1999/7/2, 18:49:49 MEST)

This module provides predicates which return basic internal info.



@menu
* Usage and interface (system_info)::  
* Documentation on exports (system_info)::  
* Documentation on internals (system_info)::  
@end menu

@node Usage and interface (system_info), Documentation on exports (system_info), Gathering some basic internal info, Gathering some basic internal info
@comment node-name, next,  previous,  up
@section Usage and interface (@code{system_info})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex get_arch/1
@code{get_arch/1}, 
@glindex get_os/1
@code{get_os/1}, 
@glindex this_module/1
@code{this_module/1}, 
@glindex current_module/1
@code{current_module/1}, 
@glindex ciaolibdir/1
@code{ciaolibdir/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (system_info), Documentation on internals (system_info), Usage and interface (system_info), Gathering some basic internal info
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{system_info})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_arch/1 (pred)}}}
@temp
@end iftex
@pdindex get_arch/1 
@glindex get_arch/1 
@deffn PREDICATE get_arch/1:



This predicate will describe the computer architecture wich is currently executing the predicate. 

Computer architectures are identified by a simple atom. This atom is implementation-defined, and may suffer any change from one Ciao Prolog version to another. 

For example,Ciao Prolog running on an Intel-based machine will retrieve: 
@smallexample 
?- get_arch(I).

I = i86 ? ;

no
?- 
@end smallexample  



@strong{Usage 1:} @code{get_arch(?ArchDescriptor)}
@itemize @minus
@item @emph{Description:} Unifies @code{ArchDescriptor} with a simple atom which describes the computer architecture currently executing the predicate. 
@item @emph{Calls should, and exit will be compatible with:}


@code{?ArchDescriptor} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 2:} @code{get_arch(ArchDescriptor)}
@itemize @minus
@item @emph{Description:} Unifies @code{ArchDescriptor} with a simple atom which describes the computer architecture currently executing the predicate. 
@item @emph{Calls should, and exit will be compatible with:}


@code{ArchDescriptor} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_os/1 (pred)}}}
@temp
@end iftex
@pdindex get_os/1 
@glindex get_os/1 
@deffn PREDICATE get_os/1:



This predicate will describe the Operating System which is running on the machine currently executing the Prolog program. 

Operating Systems are identified by a simple atom. This atom is implementation-defined, and may suffer any change from one Ciao Prolog version to another. 

For example,Ciao Prolog running on Linux will retrieve: 
@smallexample 
?- get_os(I).

I = 'LINUX' ? ;

no
?- 
@end smallexample  



@strong{Usage 1:} @code{get_os(?OsDescriptor)}
@itemize @minus
@item @emph{Description:} Unifies @code{OsDescriptor} with a simple atom which describes the running Operating System when predicate was called. 
@item @emph{Calls should, and exit will be compatible with:}


@code{?OsDescriptor} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 2:} @code{get_os(OsDescriptor)}
@itemize @minus
@item @emph{Description:} Unifies @code{OsDescriptor} with a simple atom which describes the running Operating System when predicate was called. 
@item @emph{Calls should, and exit will be compatible with:}


@code{OsDescriptor} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{this_module/1 (pred)}}}
@temp
@end iftex
@pdindex this_module/1 
@glindex this_module/1 
@deffn PREDICATE this_module/1:






@emph{Meta-predicate} with arguments: @code{this_module(addmodule)}.


@strong{Usage 1:} @code{this_module(Module)}
@itemize @minus
@item @emph{Description:} @code{Module} is the internal module identifier for current module. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Module} is an internal module identifier
@iftex
@hfill
@end iftex
 (@code{system_info:internal_module_id/1})
@end itemize

@strong{Usage 2:} @code{this_module(Module)}
@itemize @minus
@item @emph{Description:} @code{Module} is the internal module identifier for current module. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Module} is an internal module identifier
@iftex
@hfill
@end iftex
 (@code{system_info:internal_module_id/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_module/1 (pred)}}}
@temp
@end iftex
@pdindex current_module/1 
@glindex current_module/1 
@deffn PREDICATE current_module/1:



This predicate will successively unify its argument with all module names currently loaded. Module names will be simple atoms. 

When called using a free variable as argument, it will retrieve on backtracking all modules currently loaded. This is usefull when called from the Ciao 
@glindex toplevel
@code{toplevel}. 

When called using a module name as argument it will check whether the given module is loaded or not. This is usefull when called from user programs. 


@strong{Usage 1:} @code{current_module(Module)}
@itemize @minus
@item @emph{Description:} Retrieves (on backtracking) all currently loaded modules into your application. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Module} is an internal module identifier
@iftex
@hfill
@end iftex
 (@code{system_info:internal_module_id/1})
@end itemize

@strong{Usage 2:} @code{current_module(Module)}
@itemize @minus
@item @emph{Description:} Retrieves (on backtracking) all currently loaded modules into your application. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Module} is an internal module identifier
@iftex
@hfill
@end iftex
 (@code{system_info:internal_module_id/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ciaolibdir/1 (pred)}}}
@temp
@end iftex
@pdindex ciaolibdir/1 
@glindex ciaolibdir/1 
@deffn PREDICATE ciaolibdir/1:






@strong{Usage 1:} @code{ciaolibdir(CiaoPath)}
@itemize @minus
@item @emph{Description:} @code{CiaoPath} is the path to the root of the Ciao libraries. Inside this directory, there are the directories 'lib', 'library' and 'contrib', which contain library modules. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{CiaoPath} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize

@strong{Usage 2:} @code{ciaolibdir(CiaoPath)}
@itemize @minus
@item @emph{Description:} @code{CiaoPath} is the path to the root of the Ciao libraries. Inside this directory, there are the directories 'lib', 'library' and 'contrib', which contain library modules. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{CiaoPath} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (system_info),  , Documentation on exports (system_info), Gathering some basic internal info
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{system_info})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{internal_module_id/1 (prop)}}}
@temp
@end iftex
@prindex internal_module_id/1 
@glindex internal_module_id/1 
@deffn PROPERTY internal_module_id/1:



For a user file it is a term user/1 with an argument different for each user file, for other modules is just the name of the module (as an atom).


@strong{Usage:} @code{internal_module_id(M)}
@itemize @minus
@item @emph{Description:} @code{M} is an internal module identifier 
@end itemize
@end deffn
@sp 1


@c (component)


@node *** PART III - ISO-Prolog library (iso), ISO-Prolog package, Gathering some basic internal info, Top
@comment node-name, next,  previous,  up
@unnumbered PART III - ISO-Prolog library (iso)
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (IsoProlog.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/IsoProlog.pl
@c -------------------------------------------------


 This part documents the 
@coindex iso
@glindex iso
@emph{iso} package which provides to Ciao programs (most of) the ISO-Prolog functionality , including the 
@coindex ISO-Prolog builtins
@glindex ISO-Prolog builtins
@emph{ISO-Prolog builtins} not covered by the basic library. All these predicates are loaded by default in user files and in modules which use standard module declarations such as: 

@code{:- module(@emph{modulename},@emph{exports}).} 

which are equivalent to: 

@code{:- module(@emph{modulename},@emph{exports},[iso]).} 

or 

@code{:- module(@emph{modulename},@emph{exports}).} 

@code{:- use_package([iso]).} 

If you do not want these ISO builtins loaded for a given file (in order to make the executable smaller) you can ask for this explicitly using: 

@code{:- module(@emph{modulename},@emph{exports},[]).} 

or 

@code{:- module(@emph{modulename},@emph{exports}).} 

@code{:- use_package([]).} 

See the description of the declarations for declaring modules and using other modules, and the documentation of the 
@glindex iso
@code{iso} library for details. 

@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node ISO-Prolog package, All solutions predicates, *** PART III - ISO-Prolog library (iso), Top
@comment node-name, next,  previous,  up
@chapter ISO-Prolog package
@liindex iso
@c -------------------------------------------------
@c WARNING: Do not edit this file (iso_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/iso_doc.pl
@c -------------------------------------------------


This library package allows the use of the ISO-Prolog predicates in Ciao programs. It is included by default in modules starting with a 
@glindex module/2
@code{module/2} declaration or user files without a starting 
@glindex use_package/1
@code{use_package/1} declaration.



@menu
* Usage and interface (iso)::	
@end menu

@node Usage and interface (iso),  , ISO-Prolog package, ISO-Prolog package
@comment node-name, next,  previous,  up
@section Usage and interface (@code{iso})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(iso).}

or

@code{:- module(...,...,[iso]).}

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex aggregates
@code{aggregates}, 
@glindex dynamic
@code{dynamic}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex iso_byte_char
@code{iso_byte_char}, 
@glindex iso_incomplete
@code{iso_incomplete}, 
@glindex operators
@code{operators}, 
@glindex read
@code{read}, 
@glindex write
@code{write}.


@end itemize

@end itemize
@end cartouche

@c (component)


@node All solutions predicates, Dynamic predicates, ISO-Prolog package, Top
@comment node-name, next,  previous,  up
@chapter All solutions predicates
@liindex aggregates
@c -------------------------------------------------
@c WARNING: Do not edit this file (aggregates.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/aggregates.pl
@c -------------------------------------------------

@strong{Author(s):} First version by Richard A. O'Keefe and David H.D. Warren. Changes by Mats Carlsson, Daniel Cabeza, and Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#115 (2000/4/12, 12:17:22 CEST)

This module implements the standard solution aggregation predicates. 

When there are many solutions to a problem, and when all those solutions are required to be collected together, this can be achieved by repeatedly backtracking and gradually building up a list of the solutions. The following built-in predicates are provided to automate this process. 





@menu
* Usage and interface (aggregates)::  
* Documentation on exports (aggregates)::  
@end menu

@node Usage and interface (aggregates), Documentation on exports (aggregates), All solutions predicates, All solutions predicates
@comment node-name, next,  previous,  up
@section Usage and interface (@code{aggregates})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(aggregates)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex setof/3
@code{setof/3}, 
@glindex bagof/3
@code{bagof/3}, 
@glindex findall/3
@code{findall/3}, 
@glindex findall/4
@code{findall/4}, 
@glindex findnsols/4
@code{findnsols/4}, 
@glindex findnsols/5
@code{findnsols/5}, 
@glindex ^/2
@code{^/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sort
@code{sort}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (aggregates),  , Usage and interface (aggregates), All solutions predicates
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{aggregates})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{setof/3 (pred)}}}
@temp
@end iftex
@pdindex setof/3 
@glindex setof/3 
@deffn PREDICATE setof/3:


@code{setof(Template,Generator,Set)}


Finds the @code{Set} of instances of the @code{Template} satisfying @code{Generator}. The set is in ascending order (see @ref{Comparing terms} for a definition of this order) without duplicates, and is non-empty. If there are no solutions, @code{setof} fails. @code{setof} may succeed in more than one way, binding free variables in @code{Generator} to different values. This can be avoided by using existential quantifiers on the free variables in front of @code{Generator}, using 
@glindex ^/2
@code{^/2}. For example, given the clauses: 
@smallexample 
father(bill, tom).
father(bill, ann).
father(bill, john).
father(harry, july).
father(harry, daniel).
@end smallexample  

The following query produces two alternative solutions via backtracking: 
@smallexample 
?- setof(X,father(F,X),Sons).

F = bill,
Sons = [ann,john,tom] ? ;

F = harry,
Sons = [daniel,july] ? ;

no
?- 
@end smallexample 



@emph{Meta-predicate} with arguments: @code{setof(?,goal,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{bagof/3 (pred)}}}
@temp
@end iftex
@pdindex bagof/3 
@glindex bagof/3 
@deffn PREDICATE bagof/3:


@code{bagof(Template,Generator,Bag)}


Finds all the instances of the @code{Template} produced by the @code{Generator}, and returns them in the @code{Bag} in the order in which they were found. If the @code{Generator} contains free variables which are not bound in the @code{Template}, it assumes that this is like any other Prolog question and that you want bindings for those variables. This can be avoided by using existential quantifiers on the free variables in front of the @code{Generator}, using 
@glindex ^/2
@code{^/2}.


@emph{Meta-predicate} with arguments: @code{bagof(?,goal,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{findall/3 (pred)}}}
@temp
@end iftex
@pdindex findall/3 
@glindex findall/3 
@deffn PREDICATE findall/3:


@code{findall(Template,Generator,List)}


A special case of bagof, where all free variables in the @code{Generator} are taken to be existentially quantified. Faster than the other aggregation predicates.


@emph{Meta-predicate} with arguments: @code{findall(?,goal,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{findall/4 (pred)}}}
@temp
@end iftex
@pdindex findall/4 
@glindex findall/4 
@deffn PREDICATE findall/4:






@emph{Meta-predicate} with arguments: @code{findall(?,goal,?,?)}.


@strong{Usage:} @code{findall(Template,Generator,List,Tail)}
@itemize @minus
@item @emph{Description:} As 
@glindex findall/3
@code{findall/3}, but returning in @code{Tail} the tail of @code{List}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{findnsols/4 (pred)}}}
@temp
@end iftex
@pdindex findnsols/4 
@glindex findnsols/4 
@deffn PREDICATE findnsols/4:


@code{findnsols(N,Template,Generator,List)}


As 
@glindex findall/3
@code{findall/3}, but generating at most @code{N} solutions of @code{Generator}. Thus, the length of @code{List} will not be greater than @code{N}. If @code{N}=<0, returns directly an empty list. This predicate is especially useful if @code{Generator} may have an infinite number of solutions.


@emph{Meta-predicate} with arguments: @code{findnsols(?,?,goal,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{findnsols/5 (pred)}}}
@temp
@end iftex
@pdindex findnsols/5 
@glindex findnsols/5 
@deffn PREDICATE findnsols/5:


@code{findnsols(N,Template,Generator,List,Tail)}


As 
@glindex findnsols/4
@code{findnsols/4}, but returning in @code{Tail} the tail of @code{List}.


@emph{Meta-predicate} with arguments: @code{findnsols(?,?,goal,?,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(^)/2 (pred)}}}
@temp
@end iftex
@pdindex ^/2 
@glindex ^/2 
@deffn PREDICATE ^/2:






@strong{Usage:} @code{X ^ P}
@itemize @minus
@item @emph{Description:} Existential quantification: @code{X} is existentially quantified in @code{P}. E.g., in @code{A^p(A,B)}, @code{A} is existentially quantified. Used only within 
@glindex aggregation predicates
aggregation predicates. In all other contexts, simply, execute the procedure call @code{P}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Dynamic predicates, Term input, All solutions predicates, Top
@comment node-name, next,  previous,  up
@chapter Dynamic predicates
@liindex dynamic
@c -------------------------------------------------
@c WARNING: Do not edit this file (dynamic.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/dynamic.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#146 (2000/5/19, 21:1:42 CEST)

This module implements the assert/retract family of predicates to manipulate dynamic predicates. 

The predicates defined in this module allow modification of the program as it is actually running. Clauses can be added to the program (@emph{asserted}) or removed from the program (@emph{retracted}). For these predicates, the argument which corresponds to the clause head must be instantiated to an atom or a compound term. The argument corresponding to the clause must be instantiated either to a term @code{Head :- Body} or, if the body part is empty, to @code{Head}. An empty body part is represented as @code{true}. Note that using this library is very detrimental to global analysis, and that for most uses the predicates listed in @ref{Fast/concurrent update of facts} suffice.



@menu
* Usage and interface (dynamic)::  
* Documentation on exports (dynamic)::	
* Documentation on multifiles (dynamic)::  
@end menu

@node Usage and interface (dynamic), Documentation on exports (dynamic), Dynamic predicates, Dynamic predicates
@comment node-name, next,  previous,  up
@section Usage and interface (@code{dynamic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(dynamic)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex asserta/1
@code{asserta/1}, 
@glindex asserta/2
@code{asserta/2}, 
@glindex assertz/1
@code{assertz/1}, 
@glindex assertz/2
@code{assertz/2}, 
@glindex assert/1
@code{assert/1}, 
@glindex assert/2
@code{assert/2}, 
@glindex retract/1
@code{retract/1}, 
@glindex retractall/1
@code{retractall/1}, 
@glindex abolish/1
@code{abolish/1}, 
@glindex clause/2
@code{clause/2}, 
@glindex clause/3
@code{clause/3}, 
@glindex current_predicate/1
@code{current_predicate/1}, 
@glindex current_predicate/2
@code{current_predicate/2}, 
@glindex data/1
@code{data/1}, 
@glindex wellformed_body/3
@code{wellformed_body/3}.


@item @emph{Multifiles:}

@glindex do_on_abolish/1
@code{do_on_abolish/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (dynamic), Documentation on multifiles (dynamic), Usage and interface (dynamic), Dynamic predicates
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{dynamic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{asserta/1 (pred)}}}
@temp
@end iftex
@pdindex asserta/1 
@glindex asserta/1 
@deffn PREDICATE asserta/1:






@emph{Meta-predicate} with arguments: @code{asserta(clause)}.


@strong{Usage:} @code{asserta(+Clause)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The current instance of @code{Clause} is interpreted as a clause and is added to the current program. The predicate concerned must be dynamic. The new clause becomes the @emph{first} clause for the predicate concerned. Any uninstantiated variables in @code{Clause} will be replaced by new private variables. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{asserta/2 (pred)}}}
@temp
@end iftex
@pdindex asserta/2 
@glindex asserta/2 
@deffn PREDICATE asserta/2:






@emph{Meta-predicate} with arguments: @code{asserta(clause,?)}.


@strong{Usage:} @code{asserta(+Clause,-Ref)}
@itemize @minus
@item @emph{Description:} Like @code{asserta/1}. @code{Ref} is a unique identifier of the asserted clause. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assertz/1 (pred)}}}
@temp
@end iftex
@pdindex assertz/1 
@glindex assertz/1 
@deffn PREDICATE assertz/1:






@emph{Meta-predicate} with arguments: @code{assertz(clause)}.


@strong{Usage:} @code{assertz(+Clause)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Like @code{asserta/1}, except that the new clause becomes the @emph{last} clause for the predicate concerned. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assertz/2 (pred)}}}
@temp
@end iftex
@pdindex assertz/2 
@glindex assertz/2 
@deffn PREDICATE assertz/2:






@emph{Meta-predicate} with arguments: @code{assertz(clause,?)}.


@strong{Usage:} @code{assertz(+Clause,-Ref)}
@itemize @minus
@item @emph{Description:} Like @code{assertz/1}. @code{Ref} is a unique identifier of the asserted clause. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assert/1 (pred)}}}
@temp
@end iftex
@pdindex assert/1 
@glindex assert/1 
@deffn PREDICATE assert/1:






@emph{Meta-predicate} with arguments: @code{assert(clause)}.


@strong{Usage:} @code{assert(+Clause)}
@itemize @minus
@item @emph{Description:} Identical to @code{assertz/1}. Included for compatibility. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assert/2 (pred)}}}
@temp
@end iftex
@pdindex assert/2 
@glindex assert/2 
@deffn PREDICATE assert/2:






@emph{Meta-predicate} with arguments: @code{assert(clause,?)}.


@strong{Usage:} @code{assert(+Clause,-Ref)}
@itemize @minus
@item @emph{Description:} Identical to @code{assertz/2}. Included for compatibility. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{retract/1 (pred)}}}
@temp
@end iftex
@pdindex retract/1 
@glindex retract/1 
@deffn PREDICATE retract/1:






@emph{Meta-predicate} with arguments: @code{retract(clause)}.


@strong{Usage:} @code{retract(+Clause)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The first clause in the program that matches @code{Clause} is erased. The predicate concerned must be dynamic. 

The predicate @code{retract/1} may be used in a non-determinate fashion, i.e., it will successively retract clauses matching the argument through backtracking. If reactivated by backtracking, invocations of the predicate whose clauses are being retracted will proceed unaffected by the retracts. This is also true for invocations of @code{clause} for the same predicate. The space occupied by a retracted clause will be recovered when instances of the clause are no longer in use. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{retractall/1 (pred)}}}
@temp
@end iftex
@pdindex retractall/1 
@glindex retractall/1 
@deffn PREDICATE retractall/1:






@emph{Meta-predicate} with arguments: @code{retractall(fact)}.


@strong{Usage:} @code{retractall(+Head)}
@itemize @minus
@item @emph{Description:} Erase all clauses whose head matches @code{Head}, where @code{Head} must be instantiated to an atom or a compound term. The predicate concerned must be dynamic. The predicate definition is retained. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{abolish/1 (pred)}}}
@temp
@end iftex
@pdindex abolish/1 
@glindex abolish/1 
@deffn PREDICATE abolish/1:






@emph{Meta-predicate} with arguments: @code{abolish(spec)}.


@strong{Usage:} @code{abolish(+Spec)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Erase all clauses of the predicate specified by the predicate spec @code{Spec}. The predicate definition itself is also erased (the predicate is deemed undefined after execution of the abolish). The predicates concerned must all be user defined. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{clause/2 (pred)}}}
@temp
@end iftex
@pdindex clause/2 
@glindex clause/2 
@deffn PREDICATE clause/2:






@emph{Meta-predicate} with arguments: @code{clause(fact,?)}.


@strong{Usage:} @code{clause(+Head,?Body)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The clause '@code{Head} @code{:-} @code{Body}' exists in the current program. The predicate concerned must be dynamic. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{clause/3 (pred)}}}
@temp
@end iftex
@pdindex clause/3 
@glindex clause/3 
@deffn PREDICATE clause/3:


@code{clause(Head,Body,Ref)}


Like @code{clause(Head,Body)}, plus the clause is uniquely identified by @code{Ref}.


@emph{Meta-predicate} with arguments: @code{clause(fact,?,?)}.


@strong{Usage 1:} @code{clause(+Head,?Body,?Ref)}
@itemize @minus
@item @emph{Description:} @code{Head} must be instantiated to an atom or a compound term. 
@end itemize

@strong{Usage 2:} @code{clause(?Head,?Body,+Ref)}
@itemize @minus
@item @emph{Description:} @code{Ref} must be instantiated to a valid identifier. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_predicate/1 (pred)}}}
@temp
@end iftex
@pdindex current_predicate/1 
@glindex current_predicate/1 
@deffn PREDICATE current_predicate/1:






@strong{Usage:} @code{current_predicate(?Spec)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} A predicate in the current module is named @code{Spec}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_predicate/2 (pred)}}}
@temp
@end iftex
@pdindex current_predicate/2 
@glindex current_predicate/2 
@deffn PREDICATE current_predicate/2:






@strong{Usage:} @code{current_predicate(?Spec,+Module)}
@itemize @minus
@item @emph{Description:} A predicate in @code{Module} is named @code{Spec}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(dynamic)/1 (pred)}}}
@temp
@end iftex
@pdindex dynamic/1 
@glindex dynamic/1 
@deffn PREDICATE dynamic/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(data)/1 (pred)}}}
@temp
@end iftex
@pdindex data/1 
@glindex data/1 
@deffn PREDICATE data/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{wellformed_body/3 (pred)}}}
@temp
@end iftex
@pdindex wellformed_body/3 
@glindex wellformed_body/3 
@deffn PREDICATE wellformed_body/3:


@code{wellformed_body(BodyIn,Env,BodyOut)}


@code{BodyIn} is a well-formed clause body. @code{BodyOut} is its counterpart with no single-variable meta-goals (i.e., with @code{call(X)} for @code{X}). @code{Env} denotes if global cuts are admissible in @code{BodyIn} (@code{+} if they are, @code{-} if they are not).

@end deffn
@sp 1



@node Documentation on multifiles (dynamic),  , Documentation on exports (dynamic), Dynamic predicates
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{dynamic})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{do_on_abolish/1 (pred)}}}
@temp
@end iftex
@pdindex do_on_abolish/1 
@glindex do_on_abolish/1 
@deffn PREDICATE do_on_abolish/1:


@code{do_on_abolish(Head)}


A hook predicate which will be called when the definition of the predicate of @code{Head} is abolished.


The predicate is @emph{multifile}.

@end deffn
@sp 1


@c (component)


@node Term input, Term output, Dynamic predicates, Top
@comment node-name, next,  previous,  up
@chapter Term input
@liindex read
@c -------------------------------------------------
@c WARNING: Do not edit this file (read.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/read.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#100 (2000/3/30, 18:1:28 CEST)





@menu
* Usage and interface (read)::	
* Documentation on exports (read)::  
@end menu

@node Usage and interface (read), Documentation on exports (read), Term input, Term input
@comment node-name, next,  previous,  up
@section Usage and interface (@code{read})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(read)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex read/1
@code{read/1}, 
@glindex read/2
@code{read/2}, 
@glindex read_term/2
@code{read_term/2}, 
@glindex read_term/3
@code{read_term/3}, 
@glindex read_top_level/3
@code{read_top_level/3}, 
@glindex second_prompt/2
@code{second_prompt/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex tokenize
@code{tokenize}, 
@glindex operators
@code{operators}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (read),  , Usage and interface (read), Term input
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{read})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{read/1 (pred)}}}
@temp
@end iftex
@pdindex read/1 
@glindex read/1 
@deffn PREDICATE read/1:


@code{read(Term)}


Like @code{read(Stream,Term)} with @code{Stream} associated to the current input stream.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{read/2 (pred)}}}
@temp
@end iftex
@pdindex read/2 
@glindex read/2 
@deffn PREDICATE read/2:






@strong{Usage:} @code{read(+Stream,?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} The next term, delimited by a full-stop (i.e., a @code{.} followed by either a space or a control character), is read from @code{Stream} and is unified with @code{Term}. The syntax of the term must agree with current operator declarations. If the end of @code{Stream} has been reached, @code{Term} is unified with the term @code{end_of_file}. Further calls to @code{read/2} for the same stream will then cause an error, unless the stream is connected to the terminal (in which case a prompt is opened on the terminal). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{read_term/2 (pred)}}}
@temp
@end iftex
@pdindex read_term/2 
@glindex read_term/2 
@deffn PREDICATE read_term/2:





@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{read_term/3 (pred)}}}
@temp
@end iftex
@pdindex read_term/3 
@glindex read_term/3 
@deffn PREDICATE read_term/3:





@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{read_top_level/3 (pred)}}}
@temp
@end iftex
@pdindex read_top_level/3 
@glindex read_top_level/3 
@deffn PREDICATE read_top_level/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{second_prompt/2 (pred)}}}
@temp
@end iftex
@pdindex second_prompt/2 
@glindex second_prompt/2 
@deffn PREDICATE second_prompt/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Term output, Defining operators, Term input, Top
@comment node-name, next,  previous,  up
@chapter Term output
@liindex write
@c -------------------------------------------------
@c WARNING: Do not edit this file (write.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/write.pl
@c -------------------------------------------------

@strong{Author(s):} Adapted from shared code written by Richard A. O'Keefe. Changes by Mats Carlsson, Daniel Cabeza, and Manuel Hermenegildo..

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#158 (2000/5/30, 13:8:10 CEST)

This library provides different predicates for term output, additional to the kernel predicates 
@glindex display/1
@code{display/1}-
@glindex display/2
@code{display/2} and @code{displayq/1}-@code{displayq/2}. All the predicates defined in ISO-Prolog are included, plus other traditionally provided by Prolog Implementations. Output predicates are provided in two versions: one that uses the current output stream and other in which the stream is specified explicitly, as an additional first argument.



@menu
* Usage and interface (write)::	 
* Documentation on exports (write)::  
* Documentation on multifiles (write)::	 
@end menu

@node Usage and interface (write), Documentation on exports (write), Term output, Term output
@comment node-name, next,  previous,  up
@section Usage and interface (@code{write})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(write)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex write_term/3
@code{write_term/3}, 
@glindex write_term/2
@code{write_term/2}, 
@glindex write/2
@code{write/2}, 
@glindex write/1
@code{write/1}, 
@glindex writeq/2
@code{writeq/2}, 
@glindex writeq/1
@code{writeq/1}, 
@glindex write_canonical/2
@code{write_canonical/2}, 
@glindex write_canonical/1
@code{write_canonical/1}, 
@glindex print/2
@code{print/2}, 
@glindex print/1
@code{print/1}, 
@glindex write_list1/1
@code{write_list1/1}, 
@glindex portray_clause/2
@code{portray_clause/2}, 
@glindex portray_clause/1
@code{portray_clause/1}, 
@glindex numbervars/3
@code{numbervars/3}, 
@glindex prettyvars/1
@code{prettyvars/1}, 
@glindex printable_char/1
@code{printable_char/1}.


@item @emph{Properties:}

@glindex write_option/1
@code{write_option/1}.


@item @emph{Multifiles:}

@glindex define_flag/3
@code{define_flag/3}, 
@glindex portray_attribute/2
@code{portray_attribute/2}, 
@glindex portray/1
@code{portray/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex operators
@code{operators}, 
@glindex sort
@code{sort}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (write), Documentation on multifiles (write), Usage and interface (write), Term output
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{write})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_term/3 (pred)}}}
@temp
@end iftex
@pdindex write_term/3 
@glindex write_term/3 
@deffn PREDICATE write_term/3:






@strong{Usage:} @code{write_term(@@Stream,?Term,+OptList)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Outputs the term @code{Term} to the stream @code{Stream}, with the list of write-options @code{OptList}. See 
@glindex write_option/1
@code{write_option/1} type for default options. 
@item @emph{The following properties should hold upon exit:}


@code{@@Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{+OptList} is a list of @code{write_option}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_term/2 (pred)}}}
@temp
@end iftex
@pdindex write_term/2 
@glindex write_term/2 
@deffn PREDICATE write_term/2:






@strong{Usage:} @code{write_term(?Term,+OptList)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{current_output(S), write_term(S,Term,OptList)}. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{+OptList} is a list of @code{write_option}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_option/1 (prop)}}}
@temp
@end iftex
@prindex write_option/1 
@glindex write_option/1 
@deffn PROPERTY write_option/1:



@code{Opt} is a valid write option which affects the predicate @code{write_term/3} and similar ones. Possible write_options are: 
@itemize @bullet{} 
@item @strong{quoted(}@emph{bool}@strong{):} If @emph{bool} is @code{true}, atoms and functors that can't be read back by 
@glindex read_term/3
@code{read_term/3} are quoted, if it is @code{false}, each atom and functor is written as its name. Default value is @code{false}. 


@item @strong{ignore_ops(}@emph{flag}@strong{):} If @emph{flag} is @code{true}, each compound term is output in functional notation, if it is @code{ops}, curly bracketed notation and list notation is enabled when outputing compound terms, if it is @code{false}, also operator notation is enabled when outputing compound terms. Default value is @code{false}. 


@item @strong{numbervars(}@emph{bool}@strong{):} If @emph{bool} is @code{true}, a term of the form @code{'$VAR'(N)} where @code{N} is an integer, is output as a variable name consisting of a capital letter possibly followed by an integer, a term of the form @code{'$VAR'(Atom)} where @code{Atom} is an atom, as this atom (without quotes), and a term of the form @code{'$VAR'(String)} where @code{String} is a character string, as the atom corresponding to this character string. See predicates @code{numbervars/3} and @code{prettyvars/1}. If @emph{bool} is @code{false} this cases are not treated in any special way. Default value is @code{false}. 


@item @strong{portrayed(}@emph{bool}@strong{):} If @emph{bool} is @code{true}, then call multifile predicates 
@glindex portray/1
@code{portray/1} and 
@glindex portray_attribute/1
@code{portray_attribute/1}, to provide the user handlers for pretty printing some terms. @code{portray_attribute/1} is called whenever an attributed variable is to be printed, @code{portray/1} is called whenever a non-variable term is to be printed. If either call succeeds, then it is assumed that the term has been output, else it is printed as usual. If @emph{bool} is @code{false}, these predicates are not called. Default value is @code{false}. This option is set by the toplevel when writting the final values of variables, and by the debugging package when writting the goals in the tracing messages. Thus you can vary the forms of these messages if you wish. 


@item @strong{max_depth(}@emph{depth}@strong{):} @emph{depth} is a positive integer or cero. If it is positive, it denotes the depth limit on printing compound terms. If it is cero, there is no limit. Default value is @code{0} (no limit). 


@item @strong{priority(}@emph{prio}@strong{):} @emph{prio} is an integer between 1 and 1200. If the term to be printed has higher priority than @emph{prio}, it will be printed parenthesized. Default value is 1200 (no term parenthesized). 


@end itemize 
.


@strong{Usage:} @code{write_option(Opt)}
@itemize @minus
@item @emph{Description:} @code{Opt} is a valid write option. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write/2 (pred)}}}
@temp
@end iftex
@pdindex write/2 
@glindex write/2 
@deffn PREDICATE write/2:






@strong{Usage:} @code{write(@@Stream,?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{write_term(Stream, Term, [numbervars(true)])}. 
@item @emph{The following properties should hold upon exit:}


@code{@@Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write/1 (pred)}}}
@temp
@end iftex
@pdindex write/1 
@glindex write/1 
@deffn PREDICATE write/1:






@strong{Usage:} @code{write(?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{current_output(S), write(S,Term)}. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{writeq/2 (pred)}}}
@temp
@end iftex
@pdindex writeq/2 
@glindex writeq/2 
@deffn PREDICATE writeq/2:






@strong{Usage:} @code{writeq(@@Stream,?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{write_term(Stream, Term, [quoted(true), numbervars(true)])}. 
@item @emph{The following properties should hold upon exit:}


@code{@@Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{writeq/1 (pred)}}}
@temp
@end iftex
@pdindex writeq/1 
@glindex writeq/1 
@deffn PREDICATE writeq/1:






@strong{Usage:} @code{writeq(?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{current_output(S), writeq(S,Term)}. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_canonical/2 (pred)}}}
@temp
@end iftex
@pdindex write_canonical/2 
@glindex write_canonical/2 
@deffn PREDICATE write_canonical/2:






@strong{Usage:} @code{write_canonical(@@Stream,?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{write_term(Stream, Term, [quoted(true), ignore_ops(true)])}. The output of this predicate can always be parsed by 
@glindex read_term/2
@code{read_term/2} even if the term contains special characters or if operator declarations have changed. 
@item @emph{The following properties should hold upon exit:}


@code{@@Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_canonical/1 (pred)}}}
@temp
@end iftex
@pdindex write_canonical/1 
@glindex write_canonical/1 
@deffn PREDICATE write_canonical/1:






@strong{Usage:} @code{write_canonical(?Term)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} Behaves like @code{current_output(S), write_canonical(S,Term)}. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{print/2 (pred)}}}
@temp
@end iftex
@pdindex print/2 
@glindex print/2 
@deffn PREDICATE print/2:






@strong{Usage:} @code{print(@@Stream,?Term)}
@itemize @minus
@item @emph{Description:} Behaves like @code{write_term(Stream, Term, [numbervars(true), portrayed(true)])}. 
@item @emph{The following properties should hold upon exit:}


@code{@@Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{print/1 (pred)}}}
@temp
@end iftex
@pdindex print/1 
@glindex print/1 
@deffn PREDICATE print/1:






@strong{Usage:} @code{print(?Term)}
@itemize @minus
@item @emph{Description:} Behaves like @code{current_output(S), print(S,Term)}. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_list1/1 (pred)}}}
@temp
@end iftex
@pdindex write_list1/1 
@glindex write_list1/1 
@deffn PREDICATE write_list1/1:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Writes a list to current output one element in each line. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Arg1} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{portray_clause/2 (pred)}}}
@temp
@end iftex
@pdindex portray_clause/2 
@glindex portray_clause/2 
@deffn PREDICATE portray_clause/2:






@strong{Usage:} @code{portray_clause(@@Stream,?Clause)}
@itemize @minus
@item @emph{Description:} Outputs the clause @code{Clause} onto @code{Stream}, pretty printing its variables and using indentation, including a period at the end. This predicate is used by @code{listing/0}. 
@item @emph{The following properties should hold upon exit:}


@code{@@Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?Clause} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{portray_clause/1 (pred)}}}
@temp
@end iftex
@pdindex portray_clause/1 
@glindex portray_clause/1 
@deffn PREDICATE portray_clause/1:






@strong{Usage:} @code{portray_clause(?Clause)}
@itemize @minus
@item @emph{Description:} Behaves like @code{current_output(S), portray_clause(S,Term)}. 
@item @emph{The following properties should hold upon exit:}


@code{?Clause} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{numbervars/3 (pred)}}}
@temp
@end iftex
@pdindex numbervars/3 
@glindex numbervars/3 
@deffn PREDICATE numbervars/3:






@strong{Usage:} @code{numbervars(?Term,+N,?M)}
@itemize @minus
@item @emph{Description:} Unifies each of the variables in term @code{Term} with a term of the form @code{'$VAR'(I)} where @code{I} is an integer from @code{N} onwards. @code{M} is unified with the last integer used plus 1. If the resulting term is output with a write option @code{numbervars(true)}, in the place of the variables in the original term will be printed a variable name consisting of a capital letter possibly followed by an integer. When @code{N} is 0 you will get the variable names A, B, ..., Z, A1, B1, etc. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{+N} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})

@code{?M} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prettyvars/1 (pred)}}}
@temp
@end iftex
@pdindex prettyvars/1 
@glindex prettyvars/1 
@deffn PREDICATE prettyvars/1:






@strong{Usage:} @code{prettyvars(?Term)}
@itemize @minus
@item @emph{Description:} Similar to @code{numbervars(Term,0,_)}, except that singleton variables in @code{Term} are unified with @code{'$VAR'('_')}, so that when the resulting term is output with a write option @code{numbervars(true)}, in the place of singleton variables @code{_} is written. This predicate is used by 
@glindex portray_clause/2
@code{portray_clause/2}. 
@item @emph{The following properties should hold upon exit:}


@code{?Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{printable_char/1 (pred)}}}
@temp
@end iftex
@pdindex printable_char/1 
@glindex printable_char/1 
@deffn PREDICATE printable_char/1:



No further documentation available for this predicate.

@end deffn
@sp 1



@node Documentation on multifiles (write),  , Documentation on exports (write), Term output
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{write})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{define_flag/3 (pred)}}}
@temp
@end iftex
@pdindex define_flag/3 
@glindex define_flag/3 
@deffn PREDICATE define_flag/3:



Defines flags as follows: 
@smallexample 
define_flag(write_strings,[on,off],off).
@end smallexample  
(See @ref{Changing system behaviour and various flags}). 

If flag is @code{on}, lists which may be written as strings are.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{portray_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex portray_attribute/2 
@glindex portray_attribute/2 
@deffn PREDICATE portray_attribute/2:






The predicate is @emph{multifile}.


@strong{Usage:} @code{portray_attribute(Attr,Var)}
@itemize @minus
@item @emph{Description:} @emph{A user defined predicate.} When an attributed variable @code{Var} is about to be printed, this predicate receives the variable and its attribute @code{Attr}. The predicate should either print something based on @code{Attr} or @code{Var}, or do nothing and fail. In the latter case, the default printer (
@glindex write/1
@code{write/1}) will print the attributed variable like an unbound variable, e.g. @code{_673}. 
@item @emph{The following properties should hold at call time:}


@code{Attr} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{Var} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{portray/1 (pred)}}}
@temp
@end iftex
@pdindex portray/1 
@glindex portray/1 
@deffn PREDICATE portray/1:






The predicate is @emph{multifile}.


@strong{Usage:} @code{portray(?Term)}
@itemize @minus
@item @emph{Description:} @emph{A user defined predicate.} This should either print the @code{Term} and succeed, or do nothing and fail. In the latter case, the default printer (@code{write/1}) will print the @code{Term}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Defining operators, iso_byte_char (library), Term output, Top
@comment node-name, next,  previous,  up
@chapter Defining operators
@liindex operators
@c -------------------------------------------------
@c WARNING: Do not edit this file (operators.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/operators.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#7 (1999/3/17, 17:29:23 MET)

Operators allow writting terms in a more clear way than the standard functional notation. Standard operators in Ciao are defined by this predicate (but note that the compiler itself defines more operators at compile time): 
@smallexample 
standard_ops :-
        op(1200,xfx,[:-]),
        op(1200,fx,[:-,?-]),
        op(1100,xfy,[;]),
        op(1050,xfy,[->]),
        op(1000,xfy,[',']),
        op(950,xfy,[@&,\@&]),
        op(950,xf,[@&]),
        op(900,fy,[\+]),
        op(700,xfx,[=,\=,==,\==,@@<,@@>,@@=<,@@>=,=..,is,=:=,=\=,<,=<,>,>=]),
        op(550,xfx,[:]),
        op(500,yfx,[+,-,/\,\/,#]),
        op(500,fy,[++,--]),
        op(400,yfx,[*,/,//,rem,mod,<<,>>]),
        op(200,fy,[+,-,\]),
        op(200,xfx,[**]),
        op(200,xfy,[^]),
        op(200,xfy,[`]),
        op(25,fy,[^]).
@end smallexample 




@menu
* Usage and interface (operators)::  
* Documentation on exports (operators)::  
@end menu

@node Usage and interface (operators), Documentation on exports (operators), Defining operators, Defining operators
@comment node-name, next,  previous,  up
@section Usage and interface (@code{operators})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(operators)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex op/3
@code{op/3}, 
@glindex current_op/3
@code{current_op/3}, 
@glindex current_prefixop/3
@code{current_prefixop/3}, 
@glindex current_infixop/4
@code{current_infixop/4}, 
@glindex current_postfixop/3
@code{current_postfixop/3}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (operators),  , Usage and interface (operators), Defining operators
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{operators})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{op/3 (pred)}}}
@temp
@end iftex
@pdindex op/3 
@glindex op/3 
@deffn PREDICATE op/3:


@code{op(Precedence,Type,Name)}


Declares the atom @code{Name} to be an operator of the stated @code{Type} and @code{Precedence} (0 =< @code{Precedence} =< 1200). @code{Name} may also be a list of atoms in which case all of them are declared to be operators. If @code{Precedence} is 0 then the operator properties of @code{Name} (if any) are cancelled. Note that, unlike in 
@glindex ISO-Prolog
ISO-Prolog, it is allowed to define two operators with the same name, one infix and the other postfix.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_op/3 (pred)}}}
@temp
@end iftex
@pdindex current_op/3 
@glindex current_op/3 
@deffn PREDICATE current_op/3:


@code{current_op(Precedence,Type,Op)}


The atom @code{Op} is currently an operator of type @code{Type} and precedence @code{Precedence}. Neither @code{Op} nor the other arguments need be instantiated at the time of the call; i.e., this predicate can be used to generate as well as to test.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_prefixop/3 (pred)}}}
@temp
@end iftex
@pdindex current_prefixop/3 
@glindex current_prefixop/3 
@deffn PREDICATE current_prefixop/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_infixop/4 (pred)}}}
@temp
@end iftex
@pdindex current_infixop/4 
@glindex current_infixop/4 
@deffn PREDICATE current_infixop/4:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_postfixop/3 (pred)}}}
@temp
@end iftex
@pdindex current_postfixop/3 
@glindex current_postfixop/3 
@deffn PREDICATE current_postfixop/3:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node iso_byte_char (library), iso_misc (library), Defining operators, Top
@comment node-name, next,  previous,  up
@chapter iso_byte_char (library)
@liindex iso_byte_char
@c -------------------------------------------------
@c WARNING: Do not edit this file (iso_byte_char.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/iso_byte_char.pl
@c -------------------------------------------------






@menu
* Usage and interface (iso_byte_char)::	 
* Documentation on exports (iso_byte_char)::  
@end menu

@node Usage and interface (iso_byte_char), Documentation on exports (iso_byte_char), iso_byte_char (library), iso_byte_char (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{iso_byte_char})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(iso_byte_char)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex char_code/2
@code{char_code/2}, 
@glindex atom_chars/2
@code{atom_chars/2}, 
@glindex number_chars/2
@code{number_chars/2}, 
@glindex get_byte/1
@code{get_byte/1}, 
@glindex get_byte/2
@code{get_byte/2}, 
@glindex peek_byte/1
@code{peek_byte/1}, 
@glindex peek_byte/2
@code{peek_byte/2}, 
@glindex put_byte/1
@code{put_byte/1}, 
@glindex put_byte/2
@code{put_byte/2}, 
@glindex get_char/1
@code{get_char/1}, 
@glindex get_char/2
@code{get_char/2}, 
@glindex peek_char/1
@code{peek_char/1}, 
@glindex peek_char/2
@code{peek_char/2}, 
@glindex put_char/1
@code{put_char/1}, 
@glindex put_char/2
@code{put_char/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (iso_byte_char),  , Usage and interface (iso_byte_char), iso_byte_char (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{iso_byte_char})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{char_code/2 (pred)}}}
@temp
@end iftex
@pdindex char_code/2 
@glindex char_code/2 
@deffn PREDICATE char_code/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom_chars/2 (pred)}}}
@temp
@end iftex
@pdindex atom_chars/2 
@glindex atom_chars/2 
@deffn PREDICATE atom_chars/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{number_chars/2 (pred)}}}
@temp
@end iftex
@pdindex number_chars/2 
@glindex number_chars/2 
@deffn PREDICATE number_chars/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_byte/1 (pred)}}}
@temp
@end iftex
@pdindex get_byte/1 
@glindex get_byte/1 
@deffn PREDICATE get_byte/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_byte/2 (pred)}}}
@temp
@end iftex
@pdindex get_byte/2 
@glindex get_byte/2 
@deffn PREDICATE get_byte/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{peek_byte/1 (pred)}}}
@temp
@end iftex
@pdindex peek_byte/1 
@glindex peek_byte/1 
@deffn PREDICATE peek_byte/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{peek_byte/2 (pred)}}}
@temp
@end iftex
@pdindex peek_byte/2 
@glindex peek_byte/2 
@deffn PREDICATE peek_byte/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{put_byte/1 (pred)}}}
@temp
@end iftex
@pdindex put_byte/1 
@glindex put_byte/1 
@deffn PREDICATE put_byte/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{put_byte/2 (pred)}}}
@temp
@end iftex
@pdindex put_byte/2 
@glindex put_byte/2 
@deffn PREDICATE put_byte/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_char/1 (pred)}}}
@temp
@end iftex
@pdindex get_char/1 
@glindex get_char/1 
@deffn PREDICATE get_char/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_char/2 (pred)}}}
@temp
@end iftex
@pdindex get_char/2 
@glindex get_char/2 
@deffn PREDICATE get_char/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{peek_char/1 (pred)}}}
@temp
@end iftex
@pdindex peek_char/1 
@glindex peek_char/1 
@deffn PREDICATE peek_char/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{peek_char/2 (pred)}}}
@temp
@end iftex
@pdindex peek_char/2 
@glindex peek_char/2 
@deffn PREDICATE peek_char/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{put_char/1 (pred)}}}
@temp
@end iftex
@pdindex put_char/1 
@glindex put_char/1 
@deffn PREDICATE put_char/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{put_char/2 (pred)}}}
@temp
@end iftex
@pdindex put_char/2 
@glindex put_char/2 
@deffn PREDICATE put_char/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node iso_misc (library), iso_incomplete (library), iso_byte_char (library), Top
@comment node-name, next,  previous,  up
@chapter iso_misc (library)
@liindex iso_misc
@c -------------------------------------------------
@c WARNING: Do not edit this file (iso_misc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/iso_misc.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (iso_misc)::  
* Documentation on exports (iso_misc)::	 
@end menu

@node Usage and interface (iso_misc), Documentation on exports (iso_misc), iso_misc (library), iso_misc (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{iso_misc})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(iso_misc)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex \=/2
@code{\=/2}, 
@glindex once/1
@code{once/1}, 
@glindex compound/1
@code{compound/1}, 
@glindex sub_atom/5
@code{sub_atom/5}, 
@glindex unify_with_occurs_check/2
@code{unify_with_occurs_check/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex between
@code{between}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (iso_misc),  , Usage and interface (iso_misc), iso_misc (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{iso_misc})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{\= /2 (pred)}}}
@temp
@end iftex
@pdindex \=/2 
@glindex \=/2 
@deffn PREDICATE \=/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{once/1 (pred)}}}
@temp
@end iftex
@pdindex once/1 
@glindex once/1 
@deffn PREDICATE once/1:



No further documentation available for this predicate.


@emph{Meta-predicate} with arguments: @code{once(goal)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{compound/1 (pred)}}}
@temp
@end iftex
@pdindex compound/1 
@glindex compound/1 
@deffn PREDICATE compound/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sub_atom/5 (pred)}}}
@temp
@end iftex
@pdindex sub_atom/5 
@glindex sub_atom/5 
@deffn PREDICATE sub_atom/5:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{unify_with_occurs_check/2 (pred)}}}
@temp
@end iftex
@pdindex unify_with_occurs_check/2 
@glindex unify_with_occurs_check/2 
@deffn PREDICATE unify_with_occurs_check/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node iso_incomplete (library), *** PART IV - Classic Prolog library (classic), iso_misc (library), Top
@comment node-name, next,  previous,  up
@chapter iso_incomplete (library)
@liindex iso_incomplete
@c -------------------------------------------------
@c WARNING: Do not edit this file (iso_incomplete.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/iso_incomplete.pl
@c -------------------------------------------------






@menu
* Usage and interface (iso_incomplete)::  
* Documentation on exports (iso_incomplete)::  
@end menu

@node Usage and interface (iso_incomplete), Documentation on exports (iso_incomplete), iso_incomplete (library), iso_incomplete (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{iso_incomplete})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(iso_incomplete)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex open/4
@code{open/4}, 
@glindex close/2
@code{close/2}, 
@glindex stream_property/2
@code{stream_property/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (iso_incomplete),  , Usage and interface (iso_incomplete), iso_incomplete (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{iso_incomplete})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open/4 (pred)}}}
@temp
@end iftex
@pdindex open/4 
@glindex open/4 
@deffn PREDICATE open/4:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close/2 (pred)}}}
@temp
@end iftex
@pdindex close/2 
@glindex close/2 
@deffn PREDICATE close/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stream_property/2 (pred)}}}
@temp
@end iftex
@pdindex stream_property/2 
@glindex stream_property/2 
@deffn PREDICATE stream_property/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node *** PART IV - Classic Prolog library (classic), Classic Prolog package, iso_incomplete (library), Top
@comment node-name, next,  previous,  up
@unnumbered PART IV - Classic Prolog library (classic)
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (ClassicProlog.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/ClassicProlog.pl
@c -------------------------------------------------


This part documents some Ciao libraries which provide additional predicates and functionalities that, despite not being in the ISO standard, are present in many popular Prolog systems. This includes definite clause grammars (DCGs), ``Quintus-style'' internal database, list processing predicates, dictionaries, string processing, DEC-10 Prolog-style input/output, formatted output, dynamic loading of modules, activation of operators at run-time, etc. 

@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node Classic Prolog package, Definite clause grammars, *** PART IV - Classic Prolog library (classic), Top
@comment node-name, next,  previous,  up
@chapter Classic Prolog package
@liindex classic
@c -------------------------------------------------
@c WARNING: Do not edit this file (classic_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/classic_doc.pl
@c -------------------------------------------------


This library package allows the use of certain Prolog features which have become sort of 'classical' from many Prolog implementations. These include definite clause grammars and some classical predicates like @code{append/3}. The libraries listed below define these predicates, and the following chapters describe them.



@menu
* Usage and interface (classic)::  
@end menu

@node Usage and interface (classic),  , Classic Prolog package, Classic Prolog package
@comment node-name, next,  previous,  up
@section Usage and interface (@code{classic})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(classic).}

or

@code{:- module(...,...,[classic]).}

@item @strong{New operators defined:}

@glindex -->/2
@code{-->/2} [1200,xfx].

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex operators
@code{operators}, 
@glindex old_database
@code{old_database}, 
@glindex lists
@code{lists}, 
@glindex sort
@code{sort}, 
@glindex dict
@code{dict}, 
@glindex strings
@code{strings}, 
@glindex dec10_io
@code{dec10_io}, 
@glindex format
@code{format}, 
@glindex ttyout
@code{ttyout}, 
@glindex dynmods
@code{dynmods}.


@end itemize

@end itemize
@end cartouche

@c (component)


@node Definite clause grammars, Definite clause grammars (expansion), Classic Prolog package, Top
@comment node-name, next,  previous,  up
@chapter Definite clause grammars
@liindex dcg
@c -------------------------------------------------
@c WARNING: Do not edit this file (dcg_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/dcg_doc.pl
@c -------------------------------------------------


This library package allows the use of DCGs (Definite Clause Grammars) [Col78,PW80] in a Ciao module/program. 

Definite clause grammars are an extension of the well-known context-free grammars. Prolog's grammar rules provide a convenient notation for expressing definite clause grammars. A DCG rule in Prolog takes the general form 


@smallexample 
@code{head} --> @code{body}.
@end smallexample  


@noindent
meaning ``a possible form for @code{head} is @code{body}''. Both @code{body} and @code{head} are sequences of one or more items linked by the standard Prolog conjunction operator "@code{,}". 

Definite clause grammars extend context-free grammars in the following ways: 


@enumerate  


@item A non-terminal symbol may be any Prolog term (other than a variable or number). 


@item A terminal symbol may be any Prolog term. To distinguish terminals from non-terminals, a sequence of one or more terminal symbols is written within a grammar rule as a Prolog list. An empty sequence is written as the empty list @code{[]}. If the terminal symbols are ASCII character codes, such lists can be written (as elsewhere) as strings. An empty sequence is written as the empty list, @code{[]} or @code{""}. 


@item Extra conditions, in the form of Prolog procedure calls, may be included in the right-hand side of a grammar rule. Such procedure calls are written enclosed in @code{@{@}} brackets. 


@item The left-hand side of a grammar rule consists of a non-terminal, optionally followed by a sequence of terminals (again written as a Prolog list). 


@item Alternatives may be stated explicitly in the right-hand side of a grammar rule, using the disjunction operator @code{;} or @code{|} as in Prolog. 


@item The cut symbol may be included in the right-hand side of a grammar rule, as in a Prolog clause. The cut symbol does not need to be enclosed in @code{@{@}} brackets. 
@end enumerate  

As an example, here is a simple grammar which parses an arithmetic expression (made up of digits and operators) and computes its value. 


@smallexample 
expr(Z) --> term(X), "+", expr(Y), @{Z is X + Y@}.
expr(Z) --> term(X), "-", expr(Y), @{Z is X - Y@}.
expr(X) --> term(X).

term(Z) --> number(X), "*", term(Y), @{Z is X * Y@}.
term(Z) --> number(X), "/", term(Y), @{Z is X / Y@}.
term(Z) --> number(Z).

number(C) --> "+", number(C).
number(C) --> "-", number(X), @{C is -X@}.
number(X) --> [C], @{0'0=<C, C=<0'9, X is C - 0'0@}.
@end smallexample  

In the last rule, @code{C} is the ASCII code of some digit. 

The query 


@smallexample 
| ?- expr(Z, "-2+3*5+1", []).
@end smallexample  


@noindent
will compute @code{Z}=14. The two extra arguments are explained below. 

Now, in fact, grammar rules are merely a convenient ``syntactic sugar'' for ordinary Prolog clauses. Each grammar rule takes an input string, analyses some initial portion, and produces the remaining portion (possibly enlarged) as output for further analysis. The arguments required for the input and output strings are not written explicitly in a grammar rule, but the syntax implicitly defines them. We now show how to translate grammar rules into ordinary clauses by making explicit the extra arguments. 

A rule such as 


@smallexample 
p(X) --> q(X).
@end smallexample  


@noindent
translates into 


@smallexample 
p(X, S0, S) :- q(X, S0, S).
@end smallexample  

If there is more than one non-terminal on the right-hand side, as in 


@smallexample 
p(X, Y) --> 
        q(X), 
        r(X, Y),
        s(Y).
@end smallexample  


@noindent
then corresponding input and output arguments are identified, as in 


@smallexample 
p(X, Y, S0, S) :- 
        q(X, S0, S1), 
        r(X, Y, S1, S2), 
        r(Y, S2, S).
@end smallexample  

Terminals are translated using the built-in predicate @code{'C'/3} (this predicate is not normally useful in itself; it has been given the name @code{'C'} simply to avoid using up a more useful name). Then, for instance 


@smallexample 
p(X) --> [go,to], q(X), [stop].
@end smallexample  


@noindent
is translated by 


@smallexample 
p(X, S0, S) :-
        'C'(S0, go, S1), 
        'C'(S1, to, S2), 
        q(X, S2, S3), 
        'C'(S3, stop, S).
@end smallexample  

Extra conditions expressed as explicit procedure calls naturally translate as themselves, e.g. 


@smallexample 
p(X) --> [X], @{integer(X), X>0@}, q(X).
@end smallexample  


@noindent
translates to 


@smallexample 
p(X, S0, S) :- 
        'C'(S0, X, S1), 
        integer(X), 
        X>0, 
        q(X, S1, S).
@end smallexample  

Similarly, a cut is translated literally. 

Terminals on the left-hand side of a rule translate into an explicit list in the output argument of the main non-terminal, e.g. 


@smallexample 
is(N), [not] --> [aint].
@end smallexample  


@noindent
becomes 


@smallexample 
is(N, S0, [not|S]) :- 'C'(S0, aint, S).
@end smallexample  

Disjunction has a fairly obvious translation, e.g. 


@smallexample 
args(X, Y) --> 
        (   dir(X), [to], indir(Y)
        ;   indir(Y), dir(X)
        ).
@end smallexample  


@noindent
translates to 


@smallexample 
args(X, Y, S0, S) :-
        (   dir(X, S0, S1), 
            'C'(S1, to, S2), 
            indir(Y, S2, S)
        ;   indir(Y, S0, S1), 
            dir(X, S1, S)
        ).
@end smallexample  





@menu
* Usage and interface (dcg)::	
@end menu

@node Usage and interface (dcg),  , Definite clause grammars, Definite clause grammars
@comment node-name, next,  previous,  up
@section Usage and interface (@code{dcg})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(dcg).}

or

@code{:- module(...,...,[dcg]).}
@end itemize
@end cartouche

@c (component)


@node Definite clause grammars (expansion), List processing, Definite clause grammars, Top
@comment node-name, next,  previous,  up
@chapter Definite clause grammars (expansion)
@liindex dcg_expansion
@c -------------------------------------------------
@c WARNING: Do not edit this file (dcg_expansion.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/dcg_expansion.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (dcg_expansion)::	 
* Documentation on exports (dcg_expansion)::  
@end menu

@node Usage and interface (dcg_expansion), Documentation on exports (dcg_expansion), Definite clause grammars (expansion), Definite clause grammars (expansion)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{dcg_expansion})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(dcg_expansion)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex phrase/2
@code{phrase/2}, 
@glindex phrase/3
@code{phrase/3}, 
@glindex dcg_translation/2
@code{dcg_translation/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex terms
@code{terms}, 
@glindex assertions/doc_props
@code{assertions/doc_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (dcg_expansion),  , Usage and interface (dcg_expansion), Definite clause grammars (expansion)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{dcg_expansion})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{phrase/2 (pred)}}}
@temp
@end iftex
@pdindex phrase/2 
@glindex phrase/2 
@deffn PREDICATE phrase/2:


@code{phrase(Phrase,List)}


Like @code{phrase(Phrase,List,[])}.


@emph{Meta-predicate} with arguments: @code{phrase(goal,?)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{phrase/3 (pred)}}}
@temp
@end iftex
@pdindex phrase/3 
@glindex phrase/3 
@deffn PREDICATE phrase/3:






@emph{Meta-predicate} with arguments: @code{phrase(goal,?,?)}.


@strong{Usage:} @code{phrase(+Phrase,?List,?Remainder)}
@itemize @minus
@item @emph{Description:} The list @code{List} is a phrase of type @code{Phrase} (according to the current grammar rules), where @code{Phrase} is either a non-terminal or more generally a grammar rule body. @code{Remainder} is what remains of the list after a phrase has been found. 
@item @emph{The following properties should hold globally:}


Documentation is still incomplete: @code{phrase(+Phrase,?List,?Remainder)} may not conform the functionality documented.
@iftex
@hfill
@end iftex
 (@code{doc_props:doc_incomplete/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dcg_translation/2 (pred)}}}
@temp
@end iftex
@pdindex dcg_translation/2 
@glindex dcg_translation/2 
@deffn PREDICATE dcg_translation/2:



Performs the code expansion of source clauses that use DCGs.

@end deffn
@sp 1


@c (component)


@node List processing, Sorting lists, Definite clause grammars (expansion), Top
@comment node-name, next,  previous,  up
@chapter List processing
@liindex lists
@c -------------------------------------------------
@c WARNING: Do not edit this file (lists.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/lists.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#41 (2000/2/4, 13:34:24 CET)

This module provides a set of predicates for list processing.



@menu
* Usage and interface (lists)::	 
* Documentation on exports (lists)::  
@end menu

@node Usage and interface (lists), Documentation on exports (lists), List processing, List processing
@comment node-name, next,  previous,  up
@section Usage and interface (@code{lists})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(lists)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex nonsingle/1
@code{nonsingle/1}, 
@glindex append/3
@code{append/3}, 
@glindex reverse/2
@code{reverse/2}, 
@glindex reverse/3
@code{reverse/3}, 
@glindex delete/3
@code{delete/3}, 
@glindex select/3
@code{select/3}, 
@glindex length/2
@code{length/2}, 
@glindex nth/3
@code{nth/3}, 
@glindex add_after/4
@code{add_after/4}, 
@glindex add_before/4
@code{add_before/4}, 
@glindex dlist/3
@code{dlist/3}, 
@glindex list_concat/2
@code{list_concat/2}, 
@glindex list_insert/2
@code{list_insert/2}, 
@glindex insert_last/3
@code{insert_last/3}, 
@glindex contains_ro/2
@code{contains_ro/2}, 
@glindex contains1/2
@code{contains1/2}, 
@glindex nocontainsx/2
@code{nocontainsx/2}, 
@glindex last/2
@code{last/2}, 
@glindex list_lookup/3
@code{list_lookup/3}, 
@glindex list_lookup/4
@code{list_lookup/4}, 
@glindex intset_insert/3
@code{intset_insert/3}, 
@glindex intset_delete/3
@code{intset_delete/3}, 
@glindex intset_in/2
@code{intset_in/2}, 
@glindex intset_sequence/3
@code{intset_sequence/3}, 
@glindex intersection/3
@code{intersection/3}, 
@glindex union/3
@code{union/3}, 
@glindex difference/3
@code{difference/3}, 
@glindex equal_lists/2
@code{equal_lists/2}, 
@glindex list_to_list_of_lists/2
@code{list_to_list_of_lists/2}, 
@glindex powerset/2
@code{powerset/2}.


@item @emph{Properties:}

@glindex list1/2
@code{list1/2}, 
@glindex sublist/2
@code{sublist/2}, 
@glindex subordlist/2
@code{subordlist/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (lists),  , Usage and interface (lists), List processing
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{lists})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nonsingle/1 (pred)}}}
@temp
@end iftex
@pdindex nonsingle/1 
@glindex nonsingle/1 
@deffn PREDICATE nonsingle/1:






@strong{Usage:} @code{nonsingle(X)}
@itemize @minus
@item @emph{Description:} @code{X} is not a singleton. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{append/3 (pred)}}}
@temp
@end iftex
@pdindex append/3 
@glindex append/3 
@deffn PREDICATE append/3:






@strong{Usage:} @code{append(Xs,Ys,Zs)}
@itemize @minus
@item @emph{Description:} @code{Zs} is @code{Ys} appended to @code{Xs}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{reverse/2 (pred)}}}
@temp
@end iftex
@pdindex reverse/2 
@glindex reverse/2 
@deffn PREDICATE reverse/2:






@strong{Usage:} @code{reverse(Xs,Ys)}
@itemize @minus
@item @emph{Description:} Reverses the order of elements in @code{Xs}. 
@item @emph{The following properties should hold at call time:}


@code{Xs} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{Ys} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Xs} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{Ys} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{reverse/3 (pred)}}}
@temp
@end iftex
@pdindex reverse/3 
@glindex reverse/3 
@deffn PREDICATE reverse/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{delete/3 (pred)}}}
@temp
@end iftex
@pdindex delete/3 
@glindex delete/3 
@deffn PREDICATE delete/3:






@strong{Usage:} @code{delete(L1,E,L2)}
@itemize @minus
@item @emph{Description:} @code{L2} is @code{L1} without the ocurrences of @code{E}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{select/3 (pred)}}}
@temp
@end iftex
@pdindex select/3 
@glindex select/3 
@deffn PREDICATE select/3:






@strong{Usage:} @code{select(X,Xs,Ys)}
@itemize @minus
@item @emph{Description:} @code{Xs} and @code{Ys} have the same elements except for one occurrence of @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{length/2 (pred)}}}
@temp
@end iftex
@pdindex length/2 
@glindex length/2 
@deffn PREDICATE length/2:






@strong{Usage 1:} @code{length(L,N)}
@itemize @minus
@item @emph{Description:} Computes the length of @code{L}. 
@item @emph{The following properties should hold at call time:}


@code{L} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{N} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{L} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{N} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@end itemize

@strong{Usage 2:} @code{length(L,N)}
@itemize @minus
@item @emph{Description:} Outputs @code{L} of length @code{N}. 
@item @emph{The following properties should hold at call time:}


@code{L} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{N} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@item @emph{The following properties should hold upon exit:}


@code{L} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{N} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@end itemize

@strong{Usage 3:} @code{length(L,N)}
@itemize @minus
@item @emph{Description:} Checks that @code{L} is of length @code{N}. 
@item @emph{The following properties should hold at call time:}


@code{L} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{N} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@item @emph{The following properties should hold upon exit:}


@code{L} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{N} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nth/3 (pred)}}}
@temp
@end iftex
@pdindex nth/3 
@glindex nth/3 
@deffn PREDICATE nth/3:


@code{nth(N,List,Elem)}


@code{N} is the position in @code{List} of @code{Elem}. @code{N} counts from one.


@strong{Usage 1:} @code{nth(+int,?list,?term)}
@itemize @minus
@item @emph{Description:} Unifies @code{Elem} and the @code{N}th element of @code{List}. 
@end itemize

@strong{Usage 2:} @code{nth(-int,?list,?term)}
@itemize @minus
@item @emph{Description:} Finds the positions where @code{Elem} is in @code{List}. Positions are found in ascending order. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_after/4 (pred)}}}
@temp
@end iftex
@pdindex add_after/4 
@glindex add_after/4 
@deffn PREDICATE add_after/4:






@strong{Usage:} @code{add_after(+L0,+E0,+E,-L)}
@itemize @minus
@item @emph{Description:} Adds element @code{E} after element @code{E0} (or at end) to list @code{L0} returning in @code{L} the new list (uses term comparison). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_before/4 (pred)}}}
@temp
@end iftex
@pdindex add_before/4 
@glindex add_before/4 
@deffn PREDICATE add_before/4:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list1/2 (prop)}}}
@temp
@end iftex
@prindex list1/2 
@glindex list1/2 
@deffn PROPERTY list1/2:






@emph{Meta-predicate} with arguments: @code{list1(?,pred(1))}.


@strong{Usage:} @code{list1(X,Y)}
@itemize @minus
@item @emph{Description:} @code{X} is a list of @code{Y}s of at least one element. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dlist/3 (pred)}}}
@temp
@end iftex
@pdindex dlist/3 
@glindex dlist/3 
@deffn PREDICATE dlist/3:






@strong{Usage:} @code{dlist(List,DList,Tail)}
@itemize @minus
@item @emph{Description:} @code{List} is the result of removing @code{Tail} from the end of @code{DList} (makes a difference list from a list). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_concat/2 (pred)}}}
@temp
@end iftex
@pdindex list_concat/2 
@glindex list_concat/2 
@deffn PREDICATE list_concat/2:






@strong{Usage:} @code{list_concat(LL,L)}
@itemize @minus
@item @emph{Description:} @code{L} is the concatenation of all the lists in @code{LL}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{LL} is a list of @code{list}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{L} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_insert/2 (pred)}}}
@temp
@end iftex
@pdindex list_insert/2 
@glindex list_insert/2 
@deffn PREDICATE list_insert/2:






@strong{Usage:} @code{list_insert(-List,+Term)}
@itemize @minus
@item @emph{Description:} Adds @code{Term} to the end of @code{List} if there is no element in @code{List} identical to @code{Term}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{insert_last/3 (pred)}}}
@temp
@end iftex
@pdindex insert_last/3 
@glindex insert_last/3 
@deffn PREDICATE insert_last/3:






@strong{Usage:} @code{insert_last(+L0,+E,-L)}
@itemize @minus
@item @emph{Description:} Adds element @code{E} at end of list @code{L0} returning @code{L}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{contains_ro/2 (pred)}}}
@temp
@end iftex
@pdindex contains_ro/2 
@glindex contains_ro/2 
@deffn PREDICATE contains_ro/2:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Impure membership (does not instantiate a variable in its first argument. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{contains1/2 (pred)}}}
@temp
@end iftex
@pdindex contains1/2 
@glindex contains1/2 
@deffn PREDICATE contains1/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nocontainsx/2 (pred)}}}
@temp
@end iftex
@pdindex nocontainsx/2 
@glindex nocontainsx/2 
@deffn PREDICATE nocontainsx/2:






@strong{Usage:} @code{nocontainsx(L,X)}
@itemize @minus
@item @emph{Description:} @code{X} is not identical to any element of @code{L}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{last/2 (pred)}}}
@temp
@end iftex
@pdindex last/2 
@glindex last/2 
@deffn PREDICATE last/2:






@strong{Usage:} @code{last(L,X)}
@itemize @minus
@item @emph{Description:} X is the last element of L. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_lookup/3 (pred)}}}
@temp
@end iftex
@pdindex list_lookup/3 
@glindex list_lookup/3 
@deffn PREDICATE list_lookup/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_lookup/4 (pred)}}}
@temp
@end iftex
@pdindex list_lookup/4 
@glindex list_lookup/4 
@deffn PREDICATE list_lookup/4:






@strong{Usage:} @code{list_lookup(List,Functor,Key,Value)}
@itemize @minus
@item @emph{Description:} Look up @code{Functor}(@code{Key},@code{Value}) pair in variable ended key-value pair list @code{L} or else add it at the end. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intset_insert/3 (pred)}}}
@temp
@end iftex
@pdindex intset_insert/3 
@glindex intset_insert/3 
@deffn PREDICATE intset_insert/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intset_delete/3 (pred)}}}
@temp
@end iftex
@pdindex intset_delete/3 
@glindex intset_delete/3 
@deffn PREDICATE intset_delete/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intset_in/2 (pred)}}}
@temp
@end iftex
@pdindex intset_in/2 
@glindex intset_in/2 
@deffn PREDICATE intset_in/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intset_sequence/3 (pred)}}}
@temp
@end iftex
@pdindex intset_sequence/3 
@glindex intset_sequence/3 
@deffn PREDICATE intset_sequence/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intersection/3 (pred)}}}
@temp
@end iftex
@pdindex intersection/3 
@glindex intersection/3 
@deffn PREDICATE intersection/3:






@strong{Usage:} @code{intersection(+List1,+List2,-List)}
@itemize @minus
@item @emph{Description:} @code{List} has the elements which are both in @code{List1} and @code{List2}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{union/3 (pred)}}}
@temp
@end iftex
@pdindex union/3 
@glindex union/3 
@deffn PREDICATE union/3:






@strong{Usage:} @code{union(+List1,+List2,-List)}
@itemize @minus
@item @emph{Description:} @code{List} has the elements which are in @code{List1} followed by the elements which are in @code{List2} but not in @code{List1}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{difference/3 (pred)}}}
@temp
@end iftex
@pdindex difference/3 
@glindex difference/3 
@deffn PREDICATE difference/3:






@strong{Usage:} @code{difference(+List1,+List2,-List)}
@itemize @minus
@item @emph{Description:} @code{List} has the elements which are in @code{List1} but not in @code{List2}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sublist/2 (prop)}}}
@temp
@end iftex
@prindex sublist/2 
@glindex sublist/2 
@deffn PROPERTY sublist/2:






@strong{Usage:} @code{sublist(List1,List2)}
@itemize @minus
@item @emph{Description:} @code{List2} contains all the elements of @code{List1}. 
@item @emph{If the following properties should hold at call time:}


@code{List2} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{subordlist/2 (prop)}}}
@temp
@end iftex
@prindex subordlist/2 
@glindex subordlist/2 
@deffn PROPERTY subordlist/2:






@strong{Usage:} @code{subordlist(List1,List2)}
@itemize @minus
@item @emph{Description:} @code{List2} contains all the elements of @code{List1} in the same order. 
@item @emph{If the following properties should hold at call time:}


@code{List2} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{equal_lists/2 (pred)}}}
@temp
@end iftex
@pdindex equal_lists/2 
@glindex equal_lists/2 
@deffn PREDICATE equal_lists/2:






@strong{Usage:} @code{equal_lists(+List1,+List2)}
@itemize @minus
@item @emph{Description:} @code{List1} has all the elements of @code{List2}, and vice versa. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_to_list_of_lists/2 (pred)}}}
@temp
@end iftex
@pdindex list_to_list_of_lists/2 
@glindex list_to_list_of_lists/2 
@deffn PREDICATE list_to_list_of_lists/2:






@strong{Usage:} @code{list_to_list_of_lists(+List,-LList)}
@itemize @minus
@item @emph{Description:} @code{LList} is the list of one element lists with elements of @code{List}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{powerset/2 (pred)}}}
@temp
@end iftex
@pdindex powerset/2 
@glindex powerset/2 
@deffn PREDICATE powerset/2:






@strong{Usage:} @code{powerset(+List,-LList)}
@itemize @minus
@item @emph{Description:} @code{LList} is the powerset of @code{List}, i.e., the list of all lists which have elements of @code{List}. If @code{List} is ordered, @code{LList} and all its elements are ordered. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Sorting lists, Dictionaries, List processing, Top
@comment node-name, next,  previous,  up
@chapter Sorting lists
@liindex sort
@c -------------------------------------------------
@c WARNING: Do not edit this file (sort.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/sort.pl
@c -------------------------------------------------

@strong{Author(s):} Richard A. O'Keefe. All changes by UPM CLIP Group..

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (sort)::	
* Documentation on exports (sort)::  
* Documentation on internals (sort)::  
@end menu

@node Usage and interface (sort), Documentation on exports (sort), Sorting lists, Sorting lists
@comment node-name, next,  previous,  up
@section Usage and interface (@code{sort})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(sort)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex sort/2
@code{sort/2}, 
@glindex keysort/2
@code{keysort/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (sort), Documentation on internals (sort), Usage and interface (sort), Sorting lists
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{sort})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sort/2 (pred)}}}
@temp
@end iftex
@pdindex sort/2 
@glindex sort/2 
@deffn PREDICATE sort/2:


@code{sort(List1,List2)}


The elements of @code{List1} are sorted into the standard order (see @ref{Comparing terms}) and any identical elements are merged, yielding @code{List2}. The time and space complexity of this operation is at worst @code{O(N lg N)} where @code{N} is the length of @code{List1}.


@strong{Usage:} @code{sort(+list,?list)}
@itemize @minus
@item @emph{Description:} @code{List2} is the sorted list corresponding to @code{List1}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{keysort/2 (pred)}}}
@temp
@end iftex
@pdindex keysort/2 
@glindex keysort/2 
@deffn PREDICATE keysort/2:


@code{keysort(List1,List2)}


@code{List1} is sorted into order according to the value of the @emph{keys} of its elements, yielding the list @code{List2}. No merging takes place. This predicate is @emph{stable}, i.e., if an element @code{A} occurs before another element @code{B} @emph{with the same key} in the input, then @code{A} will occur before @code{B} also in the output. The time and space complexity of this operation is at worst @code{O(N lg N)} where @code{N} is the length of @code{List1}.


@strong{Usage:} @code{keysort(+keylist,?keylist)}
@itemize @minus
@item @emph{Description:} @code{List2} is the (key-)sorted list corresponding to @code{List1}. 
@end itemize
@end deffn
@sp 1



@node Documentation on internals (sort),  , Documentation on exports (sort), Sorting lists
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{sort})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{keypair/1 (regtype)}}}
@temp
@end iftex
@teindex keypair/1 
@glindex keypair/1 
@deffn REGTYPE keypair/1:






@strong{Usage:} @code{keypair(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a pair of the form "@code{K-_}", where @code{K} is considered the @emph{key}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Dictionaries, String processing, Sorting lists, Top
@comment node-name, next,  previous,  up
@chapter Dictionaries
@liindex dict
@c -------------------------------------------------
@c WARNING: Do not edit this file (dict.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/dict.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)

This module provides predicates for implementing dictionaries. Such dictionaries are currently implemented as ordered binary trees.



@menu
* Usage and interface (dict)::	
* Documentation on exports (dict)::  
@end menu

@node Usage and interface (dict), Documentation on exports (dict), Dictionaries, Dictionaries
@comment node-name, next,  previous,  up
@section Usage and interface (@code{dict})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(dict)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex dic_node/2
@code{dic_node/2}, 
@glindex dic_lookup/3
@code{dic_lookup/3}, 
@glindex dic_lookup/4
@code{dic_lookup/4}, 
@glindex dic_get/3
@code{dic_get/3}, 
@glindex dic_replace/4
@code{dic_replace/4}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (dict),  , Usage and interface (dict), Dictionaries
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{dict})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dic_node/2 (pred)}}}
@temp
@end iftex
@pdindex dic_node/2 
@glindex dic_node/2 
@deffn PREDICATE dic_node/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dic_lookup/3 (pred)}}}
@temp
@end iftex
@pdindex dic_lookup/3 
@glindex dic_lookup/3 
@deffn PREDICATE dic_lookup/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dic_lookup/4 (pred)}}}
@temp
@end iftex
@pdindex dic_lookup/4 
@glindex dic_lookup/4 
@deffn PREDICATE dic_lookup/4:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dic_get/3 (pred)}}}
@temp
@end iftex
@pdindex dic_get/3 
@glindex dic_get/3 
@deffn PREDICATE dic_get/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dic_replace/4 (pred)}}}
@temp
@end iftex
@pdindex dic_replace/4 
@glindex dic_replace/4 
@deffn PREDICATE dic_replace/4:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node String processing, Formatted output, Dictionaries, Top
@comment node-name, next,  previous,  up
@chapter String processing
@liindex strings
@c -------------------------------------------------
@c WARNING: Do not edit this file (strings.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/strings.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 0.4#5 (1998/2/24)

This module provides predicates for doing input/output with strings (character code lists) and for including in grammars defining strings.



@menu
* Usage and interface (strings)::  
* Documentation on exports (strings)::	
* Documentation on internals (strings)::  
@end menu

@node Usage and interface (strings), Documentation on exports (strings), String processing, String processing
@comment node-name, next,  previous,  up
@section Usage and interface (@code{strings})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(strings)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex get_line/2
@code{get_line/2}, 
@glindex get_line/1
@code{get_line/1}, 
@glindex write_string/2
@code{write_string/2}, 
@glindex write_string/1
@code{write_string/1}, 
@glindex whitespace/2
@code{whitespace/2}, 
@glindex whitespace0/2
@code{whitespace0/2}, 
@glindex string/3
@code{string/3}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (strings), Documentation on internals (strings), Usage and interface (strings), String processing
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{strings})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_line/2 (pred)}}}
@temp
@end iftex
@pdindex get_line/2 
@glindex get_line/2 
@deffn PREDICATE get_line/2:


@code{get_line(Stream,Line)}


Reads from @code{Stream} a line of text and unifies @code{Line} with it. The end of the line can have UNIX [10] or MS-DOS [13 10] termination, which is not included in @code{Line}. At EOF, the term end_of_file is returned.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_line/1 (pred)}}}
@temp
@end iftex
@pdindex get_line/1 
@glindex get_line/1 
@deffn PREDICATE get_line/1:


@code{get_line(Line)}


Behaves like @code{current_input(S), get_line(S,Line)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_string/2 (pred)}}}
@temp
@end iftex
@pdindex write_string/2 
@glindex write_string/2 
@deffn PREDICATE write_string/2:


@code{write_string(Stream,String)}


Writes @code{String} onto @code{Stream}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_string/1 (pred)}}}
@temp
@end iftex
@pdindex write_string/1 
@glindex write_string/1 
@deffn PREDICATE write_string/1:


@code{write_string(String)}


Behaves like @code{current_input(S), write_string(S, String)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{whitespace/2 (pred)}}}
@temp
@end iftex
@pdindex whitespace/2 
@glindex whitespace/2 
@deffn PREDICATE whitespace/2:


@code{whitespace(String,Rest)}


In a grammar rule, as @code{whitespace/0}, represents whitespace (a positive number of space (32), tab (9), newline (10) or return (13) characters). Thus, @code{Rest} is a proper suffix of @code{String} with one or more whitespace characters removed. An example of use would be: 
@smallexample 
   attrs([]) --> ""
   attrs([N|Ns]) -->
       whitespace,
       attr(N),
       attrs(Ns).
@end smallexample  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{whitespace0/2 (pred)}}}
@temp
@end iftex
@pdindex whitespace0/2 
@glindex whitespace0/2 
@deffn PREDICATE whitespace0/2:


@code{whitespace0(String,Rest)}


In a grammar rule, as @code{whitespace0/0}, represents possible whitespace (any number of space (32), tab (9), newline (10) or return (13) characters). Thus, @code{Rest} is @code{String} or a proper suffix of @code{String} with one or more whitespace characters removed. An example of use would be: 


@smallexample 
   assignment(N,V) -->
       variable_name(N), whitespace0, "=", whitespace0, value(V).
@end smallexample  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{string/3 (pred)}}}
@temp
@end iftex
@pdindex string/3 
@glindex string/3 
@deffn PREDICATE string/3:


@code{string(String,Head,Tail)}


In a 
@glindex grammar rule
grammar rule, as @code{string/1}, represents literally @code{String}. An example of use would be: 


@smallexample 
double(A) -->
        string(A),
        string(A).
@end smallexample  


@end deffn
@sp 1



@node Documentation on internals (strings),  , Documentation on exports (strings), String processing
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{strings})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{line/1 (prop)}}}
@temp
@end iftex
@prindex line/1 
@glindex line/1 
@deffn PROPERTY line/1:



A property, defined as follows:
@smallexample 
@smallexample 
line(L) :-
        string(L).
line(end_of_file).
@end smallexample 
@end smallexample 


@end deffn
@sp 1


@c (component)


@node Formatted output, DEC-10 Prolog file IO, String processing, Top
@comment node-name, next,  previous,  up
@chapter Formatted output
@liindex format
@c -------------------------------------------------
@c WARNING: Do not edit this file (format.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/format.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#27 (1999/7/9, 20:25:50 MEST)

The @code{format} family of predicates is due to Quintus Prolog. They act as a Prolog interface to the C @code{stdio} function @code{printf()}, allowing formatted output. 

Output is formatted according to an output pattern which can have either a format control sequence or any other character, which will appear verbatim in the output. Control sequences act as place-holders for the actual terms that will be output. Thus 
@smallexample 
        ?- format("Hello ~q!",world).
        @end smallexample  
@noindent
will print @code{Hello world!}. 

If there is only one item to print it may be supplied alone. If there are more they have to be given as a list. If there are none then an empty list should be supplied. There has to be as many items as control characters. 

The character @code{~} introduces a control sequence. To print a @code{~} verbatim just repeat it: 
@smallexample 
        ?- format("Hello ~~world!", []).
        @end smallexample  
@noindent
will result in @code{Hello ~world!}. 

A format may be spread over several lines. The control sequence @code{\c} followed by a @key{LFD} will translate to the empty string: 
@smallexample 
        ?- format("Hello \c
        world!", []).
        @end smallexample  
@noindent
will result in @code{Hello world!}.



@menu
* Usage and interface (format)::  
* Documentation on exports (format)::  
@end menu

@node Usage and interface (format), Documentation on exports (format), Formatted output, Formatted output
@comment node-name, next,  previous,  up
@section Usage and interface (@code{format})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(format)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex format/2
@code{format/2}, 
@glindex format/3
@code{format/3}.


@item @emph{Regular Types:}

@glindex format_control/1
@code{format_control/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex write
@code{write}, 
@glindex assertions/doc_props
@code{assertions/doc_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (format),  , Usage and interface (format), Formatted output
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{format})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{format/2 (pred)}}}
@temp
@end iftex
@pdindex format/2 
@glindex format/2 
@deffn PREDICATE format/2:






@strong{Usage:} @code{format(Format,Arguments)}
@itemize @minus
@item @emph{Description:} Print @code{Arguments} onto current output stream according to format @code{Format}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Format} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{format/3 (pred)}}}
@temp
@end iftex
@pdindex format/3 
@glindex format/3 
@deffn PREDICATE format/3:






@strong{Usage:} @code{format(+Stream,Format,Arguments)}
@itemize @minus
@item @emph{Description:} Print @code{Arguments} onto @code{Stream} according to format @code{Format}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Format} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{format_control/1 (regtype)}}}
@temp
@end iftex
@teindex format_control/1 
@glindex format_control/1 
@deffn REGTYPE format_control/1:



 The general format of a control sequence is @code{~@code{N}@code{C}}. The character @code{C} determines the type of the control sequence. @code{N} is an optional numeric argument. An alternative form of @code{N} is @code{*}. @code{*} implies that the next argument in @code{Arguments} should be used as a numeric argument in the control sequence. Example: 


@smallexample 
?- format("Hello~4cworld!", [0'x]).
@end smallexample  


@noindent
and 


@smallexample 
?- format("Hello~*cworld!", [4,0'x]).
@end smallexample  


@noindent
both produce 


@smallexample 
Helloxxxxworld!
@end smallexample  

The following control sequences are available. 


@itemize @bullet{} 


@item ~a The argument is an atom. The atom is printed without quoting. 


@item ~@code{N}c (Print character.) The argument is a number that will be interpreted as an ASCII code. @code{N} defaults to one and is interpreted as the number of times to print the character. 


@item ~@code{N}e 
@item ~@code{N}E 
@item ~@code{N}f 
@item ~@code{N}g 
@item ~@code{N}G (Print float). The argument is a float. The float and @code{N} will be passed to the C @code{printf()} function as 


@smallexample 
printf("%.@code{N}e", @code{Arg})
printf("%.@code{N}E", @code{Arg})
printf("%.@code{N}f", @code{Arg})
printf("%.@code{N}g", @code{Arg})
printf("%.@code{N}G", @code{Arg})
@end smallexample  

If @code{N} is not supplied the action defaults to 


@smallexample 
printf("%e", @code{Arg})
printf("%E", @code{Arg})
printf("%f", @code{Arg})
printf("%g", @code{Arg})
printf("%G", @code{Arg})
@end smallexample  


@item ~@code{N}d (Print decimal.) The argument is an integer. @code{N} is interpreted as the number of digits after the decimal point. If @code{N} is 0 or missing, no decimal point will be printed. Example: 


@smallexample 
?- format("Hello ~1d world!", [42]).
?- format("Hello ~d world!", [42]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello 4.2 world!
Hello 42 world!
@end smallexample  


@noindent
respectively. 


@item ~@code{N}D (Print decimal.) The argument is an integer. Identical to @code{~@code{N}d} except that @code{,} will separate groups of three digits to the left of the decimal point. Example: 


@smallexample 
?- format("Hello ~1D world!", [12345]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello 1,234.5 world!
@end smallexample  


@item ~@code{N}r (Print radix.) The argument is an integer. @code{N} is interpreted as a radix. @code{N} should be >= 2 and <= 36. If @code{N} is missing the radix defaults to 8. The letters @code{a-z} will denote digits larger than 9. Example: 


@smallexample 
?- format("Hello ~2r world!", [15]).
?- format("Hello ~16r world!", [15]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello 1111 world!
Hello f world!
@end smallexample  


@noindent
respectively. 


@item ~@code{N}R (Print radix.) The argument is an integer. Identical to @code{~@code{N}r} except that the letters @code{A-Z} will denote digits larger than 9. Example: 


@smallexample 
?- format("Hello ~16R world!", [15]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello F world!
@end smallexample  


@item ~@code{N}s (Print string.) The argument is a list of ASCII codes. Exactly @code{N} characters will be printed. @code{N} defaults to the length of the string. Example: 


@smallexample 
?- format("Hello ~4s ~4s!", ["new","world"]).
?- format("Hello ~s world!", ["new"]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello new  worl!
Hello new world!
@end smallexample  


@noindent
respectively. 


@item ~i (Ignore argument.) The argument may be of any type. The argument will be ignored. Example: 


@smallexample 
?- format("Hello ~i~s world!", ["old","new"]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello new world!
@end smallexample  


@item ~k (Print canonical.) The argument may be of any type. The argument will be passed to @code{write_canonical/2} (@ref{Term output}). Example: 


@smallexample 
?- format("Hello ~k world!", [[a,b,c]]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello .(a,.(b,.(c,[]))) world!
@end smallexample  


@item ~p (print.) The argument may be of any type. The argument will be passed to @code{print/2} (@ref{Term output}). Example: 


@noindent
suposing the user has defined the predicate 


@smallexample 
portray([X|Y]) :- print(cons(X,Y)).
@end smallexample  


@noindent
then 


@smallexample 
?- format("Hello ~p world!", [[a,b,c]]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello cons(a,cons(b,cons(c,[]))) world!
@end smallexample  


@item ~q (Print quoted.) The argument may be of any type. The argument will be passed to @code{writeq/2} (@ref{Term output}). Example: 


@smallexample 
?- format("Hello ~q world!", [['A','B']]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello ['A','B'] world!
@end smallexample  


@item ~w (write.) The argument may be of any type. The argument will be passed to @code{write/2} (@ref{Term output}). Example: 


@smallexample 
?- format("Hello ~w world!", [['A','B']]).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello [A,B] world!
@end smallexample  


@item ~@code{N}n (Print newline.) Print @code{N} newlines. @code{N} defaults to 1. Example: 


@smallexample 
?- format("Hello ~n world!", []).
@end smallexample  


@noindent
will print as 


@smallexample 
Hello
 world!
@end smallexample  


@item ~N (Fresh line.) Print a newline, if not already at the beginning of a line. 
@end itemize  
 
The following control sequences are also available for compatibility, but do not perform any useful functions. 


@itemize @bullet{} 
@item ~@code{N}| (Set tab.) Set a tab stop at position @code{N}, where @code{N} defaults to the current position, and advance the current position there. 


@item ~@code{N}+ (Advance tab.) Set a tab stop at @code{N} positions past the current position, where @code{N} defaults to 8, and advance the current position there. 


@item ~@code{N}t (Set fill character.) Set the fill character to be used in the next position movement to @code{N}, where @code{N} defaults to @key{SPC}. 
@end itemize  




@strong{Usage:} @code{format_control(C)}
@itemize @minus
@item @emph{Description:} @code{C} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}. 
@item @emph{The following properties should hold globally:}


Documentation is still incomplete: @code{format_control(C)} may not conform the functionality documented.
@iftex
@hfill
@end iftex
 (@code{doc_props:doc_incomplete/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node DEC-10 Prolog file IO, ttyout (library), Formatted output, Top
@comment node-name, next,  previous,  up
@chapter DEC-10 Prolog file IO
@liindex dec10_io
@c -------------------------------------------------
@c WARNING: Do not edit this file (dec10_io.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/dec10_io.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.4#5 (1998/2/24)

This module implements the support for DEC-10 Prolog style file I/O.



@menu
* Usage and interface (dec10_io)::  
* Documentation on exports (dec10_io)::	 
@end menu

@node Usage and interface (dec10_io), Documentation on exports (dec10_io), DEC-10 Prolog file IO, DEC-10 Prolog file IO
@comment node-name, next,  previous,  up
@section Usage and interface (@code{dec10_io})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(dec10_io)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex see/1
@code{see/1}, 
@glindex seeing/1
@code{seeing/1}, 
@glindex seen/0
@code{seen/0}, 
@glindex tell/1
@code{tell/1}, 
@glindex telling/1
@code{telling/1}, 
@glindex told/0
@code{told/0}, 
@glindex close_file/1
@code{close_file/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex streams
@code{streams}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (dec10_io),  , Usage and interface (dec10_io), DEC-10 Prolog file IO
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{dec10_io})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{see/1 (pred)}}}
@temp
@end iftex
@pdindex see/1 
@glindex see/1 
@deffn PREDICATE see/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{seeing/1 (pred)}}}
@temp
@end iftex
@pdindex seeing/1 
@glindex seeing/1 
@deffn PREDICATE seeing/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{seen/0 (pred)}}}
@temp
@end iftex
@pdindex seen/0 
@glindex seen/0 
@deffn PREDICATE seen/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tell/1 (pred)}}}
@temp
@end iftex
@pdindex tell/1 
@glindex tell/1 
@deffn PREDICATE tell/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{telling/1 (pred)}}}
@temp
@end iftex
@pdindex telling/1 
@glindex telling/1 
@deffn PREDICATE telling/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{told/0 (pred)}}}
@temp
@end iftex
@pdindex told/0 
@glindex told/0 
@deffn PREDICATE told/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close_file/1 (pred)}}}
@temp
@end iftex
@pdindex close_file/1 
@glindex close_file/1 
@deffn PREDICATE close_file/1:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node ttyout (library), dynmods (library), DEC-10 Prolog file IO, Top
@comment node-name, next,  previous,  up
@chapter ttyout (library)
@liindex ttyout
@c -------------------------------------------------
@c WARNING: Do not edit this file (ttyout.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/ttyout.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (ttyout)::  
* Documentation on exports (ttyout)::  
@end menu

@node Usage and interface (ttyout), Documentation on exports (ttyout), ttyout (library), ttyout (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{ttyout})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(ttyout)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex ttyget/1
@code{ttyget/1}, 
@glindex ttyget1/1
@code{ttyget1/1}, 
@glindex ttynl/0
@code{ttynl/0}, 
@glindex ttyput/1
@code{ttyput/1}, 
@glindex ttyskip/1
@code{ttyskip/1}, 
@glindex ttytab/1
@code{ttytab/1}, 
@glindex ttyflush/0
@code{ttyflush/0}, 
@glindex ttydisplay/1
@code{ttydisplay/1}, 
@glindex ttydisplayq/1
@code{ttydisplayq/1}, 
@glindex ttyskipeol/0
@code{ttyskipeol/0}, 
@glindex ttydisplay_string/1
@code{ttydisplay_string/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (ttyout),  , Usage and interface (ttyout), ttyout (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{ttyout})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttyget/1 (pred)}}}
@temp
@end iftex
@pdindex ttyget/1 
@glindex ttyget/1 
@deffn PREDICATE ttyget/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttyget1/1 (pred)}}}
@temp
@end iftex
@pdindex ttyget1/1 
@glindex ttyget1/1 
@deffn PREDICATE ttyget1/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttynl/0 (pred)}}}
@temp
@end iftex
@pdindex ttynl/0 
@glindex ttynl/0 
@deffn PREDICATE ttynl/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttyput/1 (pred)}}}
@temp
@end iftex
@pdindex ttyput/1 
@glindex ttyput/1 
@deffn PREDICATE ttyput/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttyskip/1 (pred)}}}
@temp
@end iftex
@pdindex ttyskip/1 
@glindex ttyskip/1 
@deffn PREDICATE ttyskip/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttytab/1 (pred)}}}
@temp
@end iftex
@pdindex ttytab/1 
@glindex ttytab/1 
@deffn PREDICATE ttytab/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttyflush/0 (pred)}}}
@temp
@end iftex
@pdindex ttyflush/0 
@glindex ttyflush/0 
@deffn PREDICATE ttyflush/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttydisplay/1 (pred)}}}
@temp
@end iftex
@pdindex ttydisplay/1 
@glindex ttydisplay/1 
@deffn PREDICATE ttydisplay/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttydisplayq/1 (pred)}}}
@temp
@end iftex
@pdindex ttydisplayq/1 
@glindex ttydisplayq/1 
@deffn PREDICATE ttydisplayq/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttyskipeol/0 (pred)}}}
@temp
@end iftex
@pdindex ttyskipeol/0 
@glindex ttyskipeol/0 
@deffn PREDICATE ttyskipeol/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ttydisplay_string/1 (pred)}}}
@temp
@end iftex
@pdindex ttydisplay_string/1 
@glindex ttydisplay_string/1 
@deffn PREDICATE ttydisplay_string/1:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node dynmods (library), Quintus-like internal database, ttyout (library), Top
@comment node-name, next,  previous,  up
@chapter dynmods (library)
@liindex dynmods
@c -------------------------------------------------
@c WARNING: Do not edit this file (dynmods.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/dynmods.pl
@c -------------------------------------------------






@menu
* Usage and interface (dynmods)::  
* Documentation on exports (dynmods)::	
@end menu

@node Usage and interface (dynmods), Documentation on exports (dynmods), dynmods (library), dynmods (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{dynmods})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(dynmods)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex use_module/1
@code{use_module/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex aggregates
@code{aggregates}, 
@glindex dynamic
@code{dynamic}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex iso_byte_char
@code{iso_byte_char}, 
@glindex iso_incomplete
@code{iso_incomplete}, 
@glindex operators
@code{operators}, 
@glindex read
@code{read}, 
@glindex write
@code{write}, 
@glindex compiler/compiler
@code{compiler/compiler}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (dynmods),  , Usage and interface (dynmods), dynmods (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{dynmods})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_module/1 (pred)}}}
@temp
@end iftex
@pdindex use_module/1 
@glindex use_module/1 
@deffn PREDICATE use_module/1:



No further documentation available for this predicate.


@emph{Meta-predicate} with arguments: @code{use_module(addmodule)}.

@end deffn
@sp 1


@c (component)


@node Quintus-like internal database, runtime_ops (library), dynmods (library), Top
@comment node-name, next,  previous,  up
@chapter Quintus-like internal database
@liindex old_database
@c -------------------------------------------------
@c WARNING: Do not edit this file (old_database.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/old_database.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)

 The predicates described in this section were introduced in early implementations of Prolog to provide efficient means of performing operations on large quantities of data. The introduction of indexed dynamic predicates have rendered these predicates obsolete, and the sole purpose of providing them is to support existing code. There is no reason whatsoever to use them in new code. 

These predicates store arbitrary terms in the database without interfering with the clauses which make up the program. The terms which are stored in this way can subsequently be retrieved via the key on which they were stored. Many terms may be stored on the same key, and they can be individually accessed by pattern matching. Alternatively, access can be achieved via a special identifier which uniquely identifies each recorded term and which is returned when the term is stored. 



@menu
* Usage and interface (old_database)::	
* Documentation on exports (old_database)::  
@end menu

@node Usage and interface (old_database), Documentation on exports (old_database), Quintus-like internal database, Quintus-like internal database
@comment node-name, next,  previous,  up
@section Usage and interface (@code{old_database})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(old_database)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex recorda/3
@code{recorda/3}, 
@glindex recordz/3
@code{recordz/3}, 
@glindex recorded/3
@code{recorded/3}, 
@glindex current_key/2
@code{current_key/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (old_database),  , Usage and interface (old_database), Quintus-like internal database
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{old_database})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{recorda/3 (pred)}}}
@temp
@end iftex
@pdindex recorda/3 
@glindex recorda/3 
@deffn PREDICATE recorda/3:


@code{recorda(+Key,?Term,-Ref)}


The term @code{Term} is recorded in the internal database as the first item for the key @code{Key}, where @code{Ref} is its implementation-defined identifier. The key must be given, and only its principal functor is significant. Any uninstantiated variables in the @code{Term} will be replaced by new private variables, along with copies of any subgoals blocked on these variables.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{recordz/3 (pred)}}}
@temp
@end iftex
@pdindex recordz/3 
@glindex recordz/3 
@deffn PREDICATE recordz/3:


@code{recordz(+Key,?Term,-Ref)}


Like @code{recorda/3}, except that the new term becomes the @emph{last} item for the key @code{Key}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{recorded/3 (pred)}}}
@temp
@end iftex
@pdindex recorded/3 
@glindex recorded/3 
@deffn PREDICATE recorded/3:


@code{recorded(?Key,?Term,?Ref)}


The internal database is searched for terms recorded under the key @code{Key}. These terms are successively unified with @code{Term} in the order they occur in the database. At the same time, @code{Ref} is unified with the implementation-defined identifier uniquely identifying the recorded item. If the key is instantiated to a compound term, only its principal functor is significant. If the key is uninstantiated, all terms in the database are successively unified with @code{Term} in the order they occur.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_key/2 (pred)}}}
@temp
@end iftex
@pdindex current_key/2 
@glindex current_key/2 
@deffn PREDICATE current_key/2:


@code{current_key(?KeyName,?KeyTerm)}


@code{KeyTerm} is the most general form of the key for a currently recorded term, and @code{KeyName} is the name of that key. This predicate can be used to enumerate in undefined order all keys for currently recorded terms through backtracking.

@end deffn
@sp 1


@c (component)


@node runtime_ops (library), *** PART V - Annotated Prolog library (assertions), Quintus-like internal database, Top
@comment node-name, next,  previous,  up
@chapter runtime_ops (library)
@liindex runtime_ops
@c -------------------------------------------------
@c WARNING: Do not edit this file (runtime_ops.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/runtime_ops.pl
@c -------------------------------------------------






@menu
* Usage and interface (runtime_ops)::  
@end menu

@node Usage and interface (runtime_ops),  , runtime_ops (library), runtime_ops (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{runtime_ops})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(runtime_ops).}

or

@code{:- module(...,...,[runtime_ops]).}

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex operators
@code{operators}, 
@glindex aggregates
@code{aggregates}, 
@glindex dynamic
@code{dynamic}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex iso_byte_char
@code{iso_byte_char}, 
@glindex iso_incomplete
@code{iso_incomplete}, 
@glindex read
@code{read}, 
@glindex write
@code{write}.


@end itemize

@end itemize
@end cartouche

@c (component)


@node *** PART V - Annotated Prolog library (assertions), The Ciao assertion package, runtime_ops (library), Top
@comment node-name, next,  previous,  up
@unnumbered PART V - Annotated Prolog library (assertions)
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (AnnotatedProlog.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/AnnotatedProlog.pl
@c -------------------------------------------------


Ciao allows @emph{annotating} the program code with @emph{assertions}. Such assertions include 
@glindex type
type and 
@glindex instantiation mode
instantiation mode declarations, but also more general properties as well as comments in the style of the @emph{literate programming}. These assertions document predicates (and modules and whole applications) and can be used by the Ciao preprocessor/compiler while debugging and optimizing the program or library, and by the Ciao documenter to build the program or library reference manual. 

@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node The Ciao assertion package, Types and properties related to assertions, *** PART V - Annotated Prolog library (assertions), Top
@comment node-name, next,  previous,  up
@chapter The Ciao assertion package
@liindex assertions
@c -------------------------------------------------
@c WARNING: Do not edit this file (assertions_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/assertions/assertions_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo, Francisco Bueno, German Puebla.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#8 (1999/12/9, 21:1:11 MET)

The 
@glindex assertions
@code{assertions} package adds a number of new declaration definitions and new operator definitions which allow including 
@glindex program assertions
program assertions in user programs. Such assertions can be used to describe predicates, properties, modules, applications, etc. These descriptions can be formal specifications (such as preconditions and post-conditions) or machine-readable textual comments. 

This module is part of the 
@glindex assertions
@code{assertions} library. It defines the basic code-related assertions, i.e., those intended to be used mainly by compilation-related tools, such as the static analyzer or the run-time test generator. 

Giving 
@glindex specifications
specifications for predicates and other program elements is the main functionality documented here. The exact syntax of comments 
@coindex comments, machine readable
@glindex comments, machine readable 
is described in the autodocumenter (
@glindex lpdoc
@code{lpdoc} [Knu84,Her99]) manual, although some support for adding machine-readable comments in assertions is also mentioned here. 

There are two kinds of assertions: predicate assertions and program point assertions. All predicate assertions are currently placed as directives in the source code, i.e., preceded by ``@code{:-}''. Program point assertions are placed as goals in clause bodies. 



@menu
* More info::			
* Some attention points::	
* Usage and interface (assertions)::  
* Documentation on new declarations (assertions)::  
* Documentation on exports (assertions)::  
@end menu

@node More info, Some attention points, The Ciao assertion package, The Ciao assertion package
@comment node-name, next,  previous,  up
@section More info 

The facilities provided by the library are documented in the description of its component modules. This documentation is intended to provide information only at a ``reference manual'' level. For a more tutorial introduction to the subject and some more examples please see the document ``An Assertion Language for Debugging of Constraint Logic Programs (Technical Report CLIP2/97.1)''. The assertion language implemented in this library is modeled after this design document, although, due to implementation issues, it may differ in some details. The purpose of this manual is to document precisely what the implementation of the library supports at any given point in time. 



@node Some attention points, Usage and interface (assertions), More info, The Ciao assertion package
@comment node-name, next,  previous,  up
@section Some attention points 


@itemize @bullet{} 


@item @strong{Formatting commands within text strings:} 
@coindex formatting commands
@glindex formatting commands 
many of the predicates defined in these modules include arguments intended for providing textual information. This includes titles, descriptions, comments, etc. The type of this argument is a character string. In order for the automatic generation of documentation to work correctly, this 
@glindex character string
character string should adhere to certain conventions. See the description of the 
@glindex docstring/1
@code{docstring/1} type/grammar for details. 


@item @strong{Referring to variables:} In order for the automatic documentation system to work correctly, 
@glindex variable names
variable names (for example, when referring to arguments in the head patterns of @emph{pred} declarations) must be surrounded by an @code{@@var} command. For example, @code{@@var@{VariableName@}} should be used for referring to the variable ``VariableName'', which will appear then formatted as follows: @code{VariableName}. See the description of the 
@glindex docstring/1
@code{docstring/1} type/grammar for details. 


@end itemize  





@node Usage and interface (assertions), Documentation on new declarations (assertions), Some attention points, The Ciao assertion package
@comment node-name, next,  previous,  up
@section Usage and interface (@code{assertions})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

The recommended procedure in order to make use of assertions in user programs is to include the 
@glindex assertions
@code{assertions} syntax library, using one of the following declarations, as appropriate: 


@smallexample 
   :- module(...,...,[assertions]).
   :- include(library(assertions)).
   :- use_package([assertions]).
@end smallexample  


@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex check/1
@code{check/1}, 
@glindex trust/1
@code{trust/1}, 
@glindex true/1
@code{true/1}, 
@glindex false/1
@code{false/1}.


@end itemize


@item @strong{New operators defined:}

@glindex =>/2
@code{=>/2} [975,xfx], 
@glindex ::/2
@code{::/2} [978,xfx], 
@glindex decl/1
@code{decl/1} [1150,fx], 
@glindex decl/2
@code{decl/2} [1150,xfx], 
@glindex pred/1
@code{pred/1} [1150,fx], 
@glindex pred/2
@code{pred/2} [1150,xfx], 
@glindex prop/1
@code{prop/1} [1150,fx], 
@glindex prop/2
@code{prop/2} [1150,xfx], 
@glindex modedef/1
@code{modedef/1} [1150,fx], 
@glindex calls/1
@code{calls/1} [1150,fx], 
@glindex calls/2
@code{calls/2} [1150,xfx], 
@glindex success/1
@code{success/1} [1150,fx], 
@glindex success/2
@code{success/2} [1150,xfx], 
@glindex comp/1
@code{comp/1} [1150,fx], 
@glindex comp/2
@code{comp/2} [1150,xfx], 
@glindex entry/1
@code{entry/1} [1150,fx].

@item @strong{New declarations defined:}

@glindex pred/1
@code{pred/1}, 
@glindex pred/2
@code{pred/2}, 
@glindex calls/1
@code{calls/1}, 
@glindex calls/2
@code{calls/2}, 
@glindex success/1
@code{success/1}, 
@glindex success/2
@code{success/2}, 
@glindex comp/1
@code{comp/1}, 
@glindex comp/2
@code{comp/2}, 
@glindex prop/1
@code{prop/1}, 
@glindex prop/2
@code{prop/2}, 
@glindex entry/1
@code{entry/1}, 
@glindex modedef/1
@code{modedef/1}, 
@glindex decl/1
@code{decl/1}, 
@glindex decl/2
@code{decl/2}, 
@glindex comment/2
@code{comment/2}.


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/assertions_props
@code{assertions/assertions_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on new declarations (assertions), Documentation on exports (assertions), Usage and interface (assertions), The Ciao assertion package
@comment node-name, next,  previous,  up
@section Documentation on new declarations (@code{assertions})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pred/1 (decl)}}}
@temp
@end iftex
@deindex pred/1 
@glindex pred/1 
@deffn DECLARATION pred/1:




@coindex pred assertion
@glindex pred assertion 
This assertion provides information on a predicate. The body of the assertion (its only argument) contains properties or comments in the formats defined by 
@glindex assrt_body/1
@code{assrt_body/1}. 

More than one of these assertions may appear per predicate, in which case each one represents a possible ``
@glindex mode
mode'' of use (
@glindex usage
usage) of the predicate. The exact scope of the usage is defined by the properties given for calls in the body of each assertion (which should thus distinguish the different usages intended). All of them together cover all possible modes of usage. 

For example, the following assertions describe (all the and the only) modes of usage of predicate @code{length/2} (see 
@glindex lists
@code{lists}): 
@smallexample 
:- pred length(L,N) : list * var => list * integer
	# "Computes the length of @code{L}.".
:- pred length(L,N) : var * integer => list * integer
	# "Outputs @code{L} of length @code{N}.".
:- pred length(L,N) : list * integer => list * integer
	# "Checks that @code{L} is of length @code{N}.".
     @end smallexample  



@strong{Usage:} :- @code{pred(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pred/2 (decl)}}}
@temp
@end iftex
@deindex pred/2 
@glindex pred/2 
@deffn DECLARATION pred/2:




@coindex pred assertion
@glindex pred assertion 
This assertion is similar to a 
@glindex pred/1
@code{pred/1} assertion but it is explicitely qualified. Non-qualified 
@glindex pred/1
@code{pred/1} assertions are assumed the qualifier @code{check}. 


@strong{Usage:} :- @code{pred(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{calls/1 (decl)}}}
@temp
@end iftex
@deindex calls/1 
@glindex calls/1 
@deffn DECLARATION calls/1:




@coindex calls assertion
@glindex calls assertion 
This assertion is similar to a 
@glindex pred/1
@code{pred/1} assertion but it only provides information about the calls to a predicate. If one or several calls assertions are given they are understood to describe all possible calls to the predicate. 

For example, the following assertion describes all possible calls to predicate @code{is/2} (see 
@glindex arithmetic
@code{arithmetic}): 
@smallexample 
:- calls is(term,arithexpression).
     @end smallexample  



@strong{Usage:} :- @code{calls(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is a call assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:c_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{calls/2 (decl)}}}
@temp
@end iftex
@deindex calls/2 
@glindex calls/2 
@deffn DECLARATION calls/2:




@coindex calls assertion
@glindex calls assertion 
This assertion is similar to a 
@glindex calls/1
@code{calls/1} assertion but it is explicitely qualified. Non-qualified 
@glindex calls/1
@code{calls/1} assertions are assumed the qualifier @code{check}. 


@strong{Usage:} :- @code{calls(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is a call assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:c_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{success/1 (decl)}}}
@temp
@end iftex
@deindex success/1 
@glindex success/1 
@deffn DECLARATION success/1:




@coindex success assertion
@glindex success assertion 
This assertion is similar to a 
@glindex pred/1
@code{pred/1} assertion but it only provides information about the answers to a predicate. The described answers might be conditioned to a particular way of calling the predicate. 

For example, the following assertion specifies the answers of the @code{length/2} predicate @emph{if} it is called as in the first mode of usage above (note that the previous pred assertion already conveys such information, however it also compelled the predicate calls, while the success assertion does not): 
@smallexample 
:- success length(L,N) : list * var => list * integer.
     @end smallexample  



@strong{Usage:} :- @code{success(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is a predicate assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:s_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{success/2 (decl)}}}
@temp
@end iftex
@deindex success/2 
@glindex success/2 
@deffn DECLARATION success/2:




@coindex success assertion
@glindex success assertion 
This assertion is similar to a 
@glindex success/1
@code{success/1} assertion but it is explicitely qualified. Non-qualified 
@glindex success/1
@code{success/1} assertions are assumed the qualifier @code{check}. 


@strong{Usage:} :- @code{success(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is a predicate assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:s_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{comp/1 (decl)}}}
@temp
@end iftex
@deindex comp/1 
@glindex comp/1 
@deffn DECLARATION comp/1:




@coindex comp assertion
@glindex comp assertion 
This assertion is similar to a 
@glindex pred/1
@code{pred/1} assertion but it only provides information about the global execution properties of a predicate (note that such kind of information is also conveyed by pred assertions). The described properties might be conditioned to a particular way of calling the predicate. 

For example, the following assertion specifies that the computation of @code{append/3} (see 
@glindex lists
@code{lists}) will not fail @emph{if} it is called as described (but does not compel the predicate to be called that way): 
@smallexample 
:- comp append(Xs,Ys,Zs) : var * var * var + not_fail.
     @end smallexample  



@strong{Usage:} :- @code{comp(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is a comp assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:g_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{comp/2 (decl)}}}
@temp
@end iftex
@deindex comp/2 
@glindex comp/2 
@deffn DECLARATION comp/2:




@coindex comp assertion
@glindex comp assertion 
This assertion is similar to a 
@glindex comp/1
@code{comp/1} assertion but it is explicitely qualified. Non-qualified 
@glindex comp/1
@code{comp/1} assertions are assumed the qualifier @code{check}. 


@strong{Usage:} :- @code{comp(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is a comp assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:g_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prop/1 (decl)}}}
@temp
@end iftex
@deindex prop/1 
@glindex prop/1 
@deffn DECLARATION prop/1:




@coindex prop assertion
@glindex prop assertion 
This assertion is similar to a @code{pred/1} assertion but it flags that the predicate being documented is also a ``
@glindex property
property.'' 

Properties are standard predicates, but which are @emph{guaranteed to terminate for any possible instantiation state of their argument(s)}, do not perform side-effects which may interfere with the program behaviour, and do not further instantiate their arguments or add new constraints. 

Provided the above holds, properties can thus be safely used as 
@glindex run-time checks
run-time checks. The program transformation used in @code{ciaopp} for run-time checking guarantees the third requirement. It also performs some basic checks on properties which in most cases are enough for the second requirement. However, it is the user's responsibility to guarantee termination of the properties defined. (See also @ref{Declaring regular types} for some considerations applicable to writing properties.) 

The set of properties is thus a strict subset of the set of predicates. Note that properties can be used to describe characteristics of arguments in assertions and they can also be executed (called) as any other predicates. 


@strong{Usage:} :- @code{prop(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prop/2 (decl)}}}
@temp
@end iftex
@deindex prop/2 
@glindex prop/2 
@deffn DECLARATION prop/2:




@coindex prop assertion
@glindex prop assertion 
This assertion is similar to a 
@glindex prop/1
@code{prop/1} assertion but it is explicitely qualified. Non-qualified 
@glindex prop/1
@code{prop/1} assertions are assumed the qualifier @code{check}. 


@strong{Usage:} :- @code{prop(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{entry/1 (decl)}}}
@temp
@end iftex
@deindex entry/1 
@glindex entry/1 
@deffn DECLARATION entry/1:




@coindex entry assertion
@glindex entry assertion 
This assertion provides information about the @emph{external} calls to a predicate. It is identical syntactically to a 
@glindex calls/1
@code{calls/1} assertion. However, they describe only external calls, i.e., calls to the exported predicates of a module from outside the module, or calls to the predicates in a non-modular file from other files (or the user). 

These assertions are @emph{trusted} by the compiler. As a result, if their descriptions are erroneous they can introduce bugs in programs. Thus, 
@glindex entry/1
@code{entry/1} assertions should be written with care. 

An important use of these assertions is in 
@glindex providing information to the compiler
providing information to the compiler which it may not be able to infer from the program. The main use is in providing information on the ways in which exported predicates of a module will be called from outside the module. This will greatly improve the precision of the analyzer, which otherwise has to assume that the arguments that exported predicates receive are any arbitrary term. 


@strong{Usage:} :- @code{entry(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is a call assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:c_assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{modedef/1 (decl)}}}
@temp
@end iftex
@deindex modedef/1 
@glindex modedef/1 
@deffn DECLARATION modedef/1:



This assertion is used to define modes. A mode defines in a compact way a set of call and success properties. Once defined, modes can be applied to predicate arguments in assertions. The meaning of this application is that the call and success properties defined by the mode hold for the argument to which the mode is applied. Thus, a mode is conceptually a ``property macro''. 

The syntax of mode definitions is similar to that of pred declarations. For example, the following set of assertions: 


@smallexample 
:- modedef +A : nonvar(A) # "@code{A} is bound upon predicate entry.".

:- pred p(+A,B) : integer(A) =>  ground(B).
@end smallexample  

is equivalent to: 


@smallexample 
:- pred p(A,B) : (nonvar(A),integer(A)) =>  ground(B)
   # "@code{A} is bound upon predicate entry.".
@end smallexample  



@strong{Usage:} :- @code{modedef(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{decl/1 (decl)}}}
@temp
@end iftex
@deindex decl/1 
@glindex decl/1 
@deffn DECLARATION decl/1:




@coindex decl assertion
@glindex decl assertion 
This assertion is similar to a 
@glindex pred/1
@code{pred/1} assertion but it is used for declarations instead than for predicates. 


@strong{Usage:} :- @code{decl(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{decl/2 (decl)}}}
@temp
@end iftex
@deindex decl/2 
@glindex decl/2 
@deffn DECLARATION decl/2:




@coindex decl assertion
@glindex decl assertion 
This assertion is similar to a 
@glindex decl/1
@code{decl/1} assertion but it is explicitely qualified. Non-qualified 
@glindex decl/1
@code{decl/1} assertions are assumed the qualifier @code{check}. 


@strong{Usage:} :- @code{decl(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{comment/2 (decl)}}}
@temp
@end iftex
@deindex comment/2 
@glindex comment/2 
@deffn DECLARATION comment/2:






@strong{Usage:} :- @code{comment(Pred,Comment)}.
@itemize @minus
@item @emph{Description:} 
@coindex comment assertion
@glindex comment assertion 
This assertion gives a text @code{Comment} for a given predicate @code{Pred}. 
@item @emph{The following properties should hold at call time:}


@code{Pred} is a head pattern.
@iftex
@hfill
@end iftex
 (@code{assertions_props:head_pattern/1})

@code{Comment} is a text comment with admissible documentation commands. The usual formatting commands that are applicable in comment strings are defined by 
@glindex stringcommand/1
@code{stringcommand/1}. See the 
@glindex lpdoc
@code{lpdoc} manual for documentation on comments. 
@iftex
@hfill
@end iftex
 (@code{assertions_props:docstring/1})
@end itemize
@end deffn
@sp 1



@node Documentation on exports (assertions),  , Documentation on new declarations (assertions), The Ciao assertion package
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{assertions})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{check/1 (pred)}}}
@temp
@end iftex
@pdindex check/1 
@glindex check/1 
@deffn PREDICATE check/1:






@strong{Usage:} @code{check(PropertyConjunction)}
@itemize @minus
@item @emph{Description:} 
@coindex check assertion
@glindex check assertion 
This assertion provides information on a clause program point (position in the body of a clause). Calls to a 
@glindex check/1
@code{check/1} assertion can appear in the body of a clause in any place where a literal can normally appear. The property defined by @code{PropertyConjunction} should hold in all the run-time stores corresponding to that program point. See also @ref{Run-time checking of assertions}. 
@item @emph{The following properties should hold at call time:}


@code{PropertyConjunction} is either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. The first argument of each such term is a variable which appears as a head argument.
@iftex
@hfill
@end iftex
 (@code{assertions_props:property_conjunction/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{trust/1 (pred)}}}
@temp
@end iftex
@pdindex trust/1 
@glindex trust/1 
@deffn PREDICATE trust/1:






@strong{Usage:} @code{trust(PropertyConjunction)}
@itemize @minus
@item @emph{Description:} 
@coindex trust assertion
@glindex trust assertion 
This assertion also provides information on a clause program point. It is identical syntactically to a 
@glindex check/1
@code{check/1} assertion. However, the properties stated are not taken as something to be checked but are instead @emph{trusted} by the compiler. While the compiler may in some cases detect an inconsistency between a 
@glindex trust/1
@code{trust/1} assertion and the program, in all other cases the information given in the assertion will be taken to be true. As a result, if these assertions are erroneous they can introduce bugs in programs. Thus, 
@glindex trust/1
@code{trust/1} assertions should be written with care. 

An important use of these assertions is in 
@glindex providing information to the compiler
providing information to the compiler which it may not be able to infer from the program (either because the information is not present or because the analyzer being used is not precise enough). In particular, providing information on external predicates which may not be accessible at the time of compiling the module can greatly improve the precision of the analyzer. This can be easily done with trust assertion.  
@item @emph{The following properties should hold at call time:}


@code{PropertyConjunction} is either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. The first argument of each such term is a variable which appears as a head argument.
@iftex
@hfill
@end iftex
 (@code{assertions_props:property_conjunction/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{true/1 (pred)}}}
@temp
@end iftex
@pdindex true/1 
@glindex true/1 
@deffn PREDICATE true/1:






@strong{Usage:} @code{true(PropertyConjunction)}
@itemize @minus
@item @emph{Description:} 
@coindex true assertion
@glindex true assertion 
This assertion is identical syntactically to a 
@glindex check/1
@code{check/1} assertion. However, the properties stated have been proved to hold by the analyzer. Thus, these assertions often represent the 
@glindex analyzer output
analyzer output. 
@item @emph{The following properties should hold at call time:}


@code{PropertyConjunction} is either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. The first argument of each such term is a variable which appears as a head argument.
@iftex
@hfill
@end iftex
 (@code{assertions_props:property_conjunction/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{false/1 (pred)}}}
@temp
@end iftex
@pdindex false/1 
@glindex false/1 
@deffn PREDICATE false/1:






@strong{Usage:} @code{false(PropertyConjunction)}
@itemize @minus
@item @emph{Description:} 
@coindex false assertion
@glindex false assertion 
This assertion is identical syntactically to a 
@glindex check/1
@code{check/1} assertion. However, the properties stated have been proved not to hold by the analyzer. Thus, these assertions often represent the 
@glindex analyzer output
analyzer output. 
@item @emph{The following properties should hold at call time:}


@code{PropertyConjunction} is either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. The first argument of each such term is a variable which appears as a head argument.
@iftex
@hfill
@end iftex
 (@code{assertions_props:property_conjunction/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Types and properties related to assertions, Declaring regular types, The Ciao assertion package, Top
@comment node-name, next,  previous,  up
@chapter Types and properties related to assertions
@liindex assertions_props
@c -------------------------------------------------
@c WARNING: Do not edit this file (assertions_props.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/assertions/assertions_props.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#25 (1999/12/29, 12:46:8 CET)

This module is part of the 
@glindex assertions
@code{assertions} library. It defines types and properties related to assertions.



@menu
* Usage and interface (assertions_props)::  
* Documentation on exports (assertions_props)::	 
@end menu

@node Usage and interface (assertions_props), Documentation on exports (assertions_props), Types and properties related to assertions, Types and properties related to assertions
@comment node-name, next,  previous,  up
@section Usage and interface (@code{assertions_props})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(assertions_props)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Properties:}

@glindex head_pattern/1
@code{head_pattern/1}, 
@glindex nabody/1
@code{nabody/1}, 
@glindex docstring/1
@code{docstring/1}.


@item @emph{Regular Types:}

@glindex assrt_body/1
@code{assrt_body/1}, 
@glindex complex_arg_property/1
@code{complex_arg_property/1}, 
@glindex property_conjunction/1
@code{property_conjunction/1}, 
@glindex property_starterm/1
@code{property_starterm/1}, 
@glindex complex_goal_property/1
@code{complex_goal_property/1}, 
@glindex dictionary/1
@code{dictionary/1}, 
@glindex c_assrt_body/1
@code{c_assrt_body/1}, 
@glindex s_assrt_body/1
@code{s_assrt_body/1}, 
@glindex g_assrt_body/1
@code{g_assrt_body/1}, 
@glindex assrt_status/1
@code{assrt_status/1}, 
@glindex assrt_type/1
@code{assrt_type/1}, 
@glindex predfunctor/1
@code{predfunctor/1}, 
@glindex propfunctor/1
@code{propfunctor/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex dcg_expansion
@code{dcg_expansion}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (assertions_props),  , Usage and interface (assertions_props), Types and properties related to assertions
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{assertions_props})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assrt_body/1 (regtype)}}}
@temp
@end iftex
@teindex assrt_body/1 
@glindex assrt_body/1 
@deffn REGTYPE assrt_body/1:



 
@coindex assertion body syntax
@glindex assertion body syntax 
This predicate defines the different types of syntax admissible in the bodies of 
@glindex pred/1
@code{pred/1}, 
@glindex decl/1
@code{decl/1}, etc. assertions. Such a body is of the form: 


@smallexample 
      Pr [:: DP] [: CP] [=> AP] [+ GP] [# CO]
     @end smallexample  

where (fields between [...] are optional): 


@itemize @bullet{} 


@item @code{Pr} is a 
@glindex head pattern
head pattern (
@glindex head_pattern/1
@code{head_pattern/1}) which describes the predicate or property and possibly gives some implicit call/answer information. 


@item @code{DP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which expresses properties which are 
@glindex compatible
compatible with the predicate, i.e., instantiations made by the predicate are @emph{compatible} with the properties in the sense that applying the property at any point to would not make it fail. 


@item @code{CP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which applies to the @emph{calls} to the predicate. 


@item @code{AP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which applies to the @emph{answers} to the predicate (if the predicate succeeds). These only apply if the (possibly empty) properties given for calls in the assertion hold. 


@item @code{GP} is a (possibly empty) 
@glindex complex goal property
complex goal property (
@glindex complex_goal_property/1
@code{complex_goal_property/1}) which applies to the @emph{whole execution} of a call to the predicate. These only apply if the (possibly empty) properties given for calls in the assertion hold. 


@item @code{CO} is a 
@glindex comment string
comment string (
@glindex docstring/1
@code{docstring/1}). This comment only applies if the (possibly empty) properties given for calls in the assertion hold. The usual formatting commands that are applicable in comment strings can be used (see 
@glindex stringcommand/1
@code{stringcommand/1}). 

See the 
@glindex lpdoc
@code{lpdoc} manual for documentation on assertion comments. 


@end itemize  




@strong{Usage:} @code{assrt_body(X)}
@itemize @minus
@item @emph{Description:} @code{X} is an assertion body. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{head_pattern/1 (prop)}}}
@temp
@end iftex
@prindex head_pattern/1 
@glindex head_pattern/1 
@deffn PROPERTY head_pattern/1:



A 
@glindex head pattern
head pattern can be a predicate name (functor/arity) (
@glindex predname/1
@code{predname/1}) or a term. Thus, both @code{p/3} and @code{p(A,B,C)} are valid head patterns. In the case in which the head pattern is a term, each argument of such a term can be: 


@itemize @bullet{} 


@item A variable. This is useful in order to be able to refer to the corresponding argument positions by name within properties and in comments. Thus, @code{p(Input,Parameter,Output)} is a valid head pattern. 


@item A ground term. In this case this term determines a property of the corresponding argument. The actual property referred to is that given by the term but with one more argument added at the beginning, which is a new variable which, in a rewriting of the head pattern, appears at the argument position occupied by the term. Unless otherwise stated (see below), the property built this way is understood to hold for both calls and answers. For example, the head pattern @code{p(Input,list(integer),Output)} is valid and equivalent for example to having the head pattern @code{p(Input,A,Output)} and stating that the property @code{list(A,integer)} holds for the calls and successes of the predicate. 


@item Finally, it can also be a variable or a ground term, as above, but preceded by a ``
@glindex mode
mode.'' This mode determines in a compact way certain call or answer properties. For example, the head pattern @code{p(Input,+list(integer),Output)} is valid, as long as 
@glindex +/1
@code{+/1} is declared as a mode. 

Acceptable modes 
@coindex acceptable modes
@glindex acceptable modes 
are documented in 
@glindex library(modes)
@code{library(modes)}. User defined modes are documented in 
@glindex modedef/1
@code{modedef/1}. 


@end itemize  




@strong{Usage:} @code{head_pattern(Pr)}
@itemize @minus
@item @emph{Description:} @code{Pr} is a head pattern. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{complex_arg_property/1 (regtype)}}}
@temp
@end iftex
@teindex complex_arg_property/1 
@glindex complex_arg_property/1 
@deffn REGTYPE complex_arg_property/1:


@code{complex_arg_property(Props)}


@code{Props} is a (possibly empty) 
@glindex complex argument property
complex argument property. Such properties can appear in two formats, which are defined by 
@glindex property_conjunction/1
@code{property_conjunction/1} and 
@glindex property_starterm/1
@code{property_starterm/1} respectively. The two formats can be mixed provided they are not in the same field of an assertion. I.e., the following is a valid assertion: 

@code{:- pred foo(X,Y) : nonvar * var => (ground(X),ground(Y)).} 


@strong{Usage:} @code{complex_arg_property(Props)}
@itemize @minus
@item @emph{Description:} @code{Props} is a (possibly empty) complex argument property 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{property_conjunction/1 (regtype)}}}
@temp
@end iftex
@teindex property_conjunction/1 
@glindex property_conjunction/1 
@deffn REGTYPE property_conjunction/1:



This type defines the first, unabridged format in which properties can be expressed in the bodies of assertions. It is essentially a conjunction of properties which refer to variables. The following is an example of a complex property in this format: 


@itemize @bullet{} 


@item @code{(integer(X),list(Y,integer))}: @code{X} has the property 
@glindex integer/1
@code{integer/1} and @code{Y} has the property 
@glindex list/2
@code{list/2}, with second argument @code{integer}. 


@end itemize  



@strong{Usage:} @code{property_conjunction(Props)}
@itemize @minus
@item @emph{Description:} @code{Props} is either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. The first argument of each such term is a variable which appears as a head argument. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{property_starterm/1 (regtype)}}}
@temp
@end iftex
@teindex property_starterm/1 
@glindex property_starterm/1 
@deffn REGTYPE property_starterm/1:



This type defines a second, compact format in which properties can be expressed in the bodies of assertions. A 
@glindex property_starterm/1
@code{property_starterm/1} is a term whose main functor is 
@glindex */2
@code{*/2} and, when it appears in an assertion, the number of terms joined by 
@glindex */2
@code{*/2} is exactly the arity of the predicate it refers to. A similar series of properties as in 
@glindex property_conjunction/1
@code{property_conjunction/1} appears, but the arity of each property is one less: the argument position to which they refer (first argument) is left out and determined by the position of the property in the 
@glindex property_starterm/1
@code{property_starterm/1}. The idea is that each element of the 
@glindex */2
@code{*/2} term corresponds to a head argument position. Several properties can be assigned to each argument position by grouping them in curly brackets. The following is an example of a complex property in this format: 


@itemize @bullet{} 


@item @code{ integer * list(integer)}: the first argument of the procedure (or function, or ...) has the property 
@glindex integer/1
@code{integer/1} and the second one has the property 
@glindex list/2
@code{list/2}, with second argument @code{integer}. 


@item @code{ @{integer,var@} * list(integer)}: the first argument of the procedure (or function, or ...) has the properties 
@glindex integer/1
@code{integer/1} and 
@glindex var/1
@code{var/1} and the second one has the property 
@glindex list/2
@code{list/2}, with second argument @code{integer}. 


@end itemize  




@strong{Usage:} @code{property_starterm(Props)}
@itemize @minus
@item @emph{Description:} @code{Props} is either a term or several terms separated by 
@glindex */2
@code{*/2}. The main functor of each of those terms corresponds to that of the definition of a property, and the arity should be one less than in the definition of such property. All arguments of each such term are ground. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{complex_goal_property/1 (regtype)}}}
@temp
@end iftex
@teindex complex_goal_property/1 
@glindex complex_goal_property/1 
@deffn REGTYPE complex_goal_property/1:


@code{complex_goal_property(Props)}


@code{Props} is a (possibly empty) 
@glindex complex goal property
complex goal property. Such properties can be either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. Such properties apply to all executions of all goals of the predicate which comply with the assertion in which the @code{Props} appear. 

The arguments of the terms in @code{Props} are implicitely augmented with a first argument which corresponds to a goal of the predicate of the assertion in which the @code{Props} appear. For example, the assertion 
@smallexample 
     :- comp var(A) + not_further_inst(A).
     @end smallexample  
has property 
@glindex not_further_inst/1
@code{not_further_inst/1} as goal property, and establishes that in all executions of @code{var(A)} it should hold that @code{not_further_inst(var(A),A)}. 




@strong{Usage:} @code{complex_goal_property(Props)}
@itemize @minus
@item @emph{Description:} @code{Props} is either a term or a @emph{conjunction} of terms. The main functor and arity of each of those terms corresponds to the definition of a property. A first implicit argument in such terms identifies goals to which the properties apply. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nabody/1 (prop)}}}
@temp
@end iftex
@prindex nabody/1 
@glindex nabody/1 
@deffn PROPERTY nabody/1:






@strong{Usage:} @code{nabody(ABody)}
@itemize @minus
@item @emph{Description:} @code{ABody} is a normalized assertion body. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dictionary/1 (regtype)}}}
@temp
@end iftex
@teindex dictionary/1 
@glindex dictionary/1 
@deffn REGTYPE dictionary/1:






@strong{Usage:} @code{dictionary(D)}
@itemize @minus
@item @emph{Description:} @code{D} is a dictionary of variable names. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{c_assrt_body/1 (regtype)}}}
@temp
@end iftex
@teindex c_assrt_body/1 
@glindex c_assrt_body/1 
@deffn REGTYPE c_assrt_body/1:



 


@coindex assertion body syntax
@glindex assertion body syntax 
This predicate defines the different types of syntax admissible in the bodies of 
@glindex call/1
@code{call/1}, 
@glindex entry/1
@code{entry/1}, etc. assertions. The following are admissible: 


@smallexample 
      Pr : CP [# CO]
     @end smallexample  

where (fields between [...] are optional): 


@itemize @bullet{} 


@item @code{CP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which applies to the @emph{calls} to the predicate. 


@item @code{CO} is a 
@glindex comment string
comment string (
@glindex docstring/1
@code{docstring/1}). This comment only applies if the (possibly empty) properties given for calls in the assertion hold. The usual formatting commands that are applicable in comment strings can be used (see 
@glindex stringcommand/1
@code{stringcommand/1}). 


@end itemize  

The format of the different parts of the assertion body are given by 
@glindex n_assrt_body/5
@code{n_assrt_body/5} and its auxiliary types. 




@strong{Usage:} @code{c_assrt_body(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a call assertion body. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{s_assrt_body/1 (regtype)}}}
@temp
@end iftex
@teindex s_assrt_body/1 
@glindex s_assrt_body/1 
@deffn REGTYPE s_assrt_body/1:



 


@coindex assertion body syntax
@glindex assertion body syntax 
This predicate defines the different types of syntax admissible in the bodies of 
@glindex pred/1
@code{pred/1}, 
@glindex func/1
@code{func/1}, etc. assertions. The following are admissible: 


@smallexample 
      Pr : CP => AP # CO       
      Pr : CP => AP            
      Pr => AP # CO            
      Pr => AP                 
     @end smallexample  

where: 


@itemize @bullet{} 


@item @code{Pr} is a 
@glindex head pattern
head pattern (
@glindex head_pattern/1
@code{head_pattern/1}) which describes the predicate or property and possibly gives some implicit call/answer information. 


@item @code{CP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which applies to the @emph{calls} to the predicate. 


@item @code{AP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which applies to the @emph{answers} to the predicate (if the predicate succeeds). These only apply if the (possibly empty) properties given for calls in the assertion hold. 


@item @code{CO} is a 
@glindex comment string
comment string (
@glindex docstring/1
@code{docstring/1}). This comment only applies if the (possibly empty) properties given for calls in the assertion hold. The usual formatting commands that are applicable in comment strings can be used (see 
@glindex stringcommand/1
@code{stringcommand/1}). 


@end itemize  

The format of the different parts of the assertion body are given by 
@glindex n_assrt_body/5
@code{n_assrt_body/5} and its auxiliary types. 




@strong{Usage:} @code{s_assrt_body(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a predicate assertion body. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{g_assrt_body/1 (regtype)}}}
@temp
@end iftex
@teindex g_assrt_body/1 
@glindex g_assrt_body/1 
@deffn REGTYPE g_assrt_body/1:



 


@coindex assertion body syntax
@glindex assertion body syntax 
This predicate defines the different types of syntax admissible in the bodies of 
@glindex comp/1
@code{comp/1} assertions. The following are admissible: 


@smallexample 
      Pr : CP + GP # CO        
      Pr : CP + GP             
      Pr + GP # CO             
      Pr + GP                  
     @end smallexample  

where: 


@itemize @bullet{} 


@item @code{Pr} is a 
@glindex head pattern
head pattern (
@glindex head_pattern/1
@code{head_pattern/1}) which describes the predicate or property and possibly gives some implicit call/answer information. 


@item @code{CP} is a (possibly empty) 
@glindex complex argument property
complex argument property (
@glindex complex_arg_property/1
@code{complex_arg_property/1}) which applies to the @emph{calls} to the predicate. 


@item @code{GP} contains (possibly empty) 
@glindex complex goal property
complex goal property (
@glindex complex_goal_property/1
@code{complex_goal_property/1}) which applies to the @emph{whole execution} of a call to the predicate. These only apply if the (possibly empty) properties given for calls in the assertion hold. 


@item @code{CO} is a 
@glindex comment string
comment string (
@glindex docstring/1
@code{docstring/1}). This comment only applies if the (possibly empty) properties given for calls in the assertion hold. The usual formatting commands that are applicable in comment strings can be used (see 
@glindex stringcommand/1
@code{stringcommand/1}). 


@end itemize  

The format of the different parts of the assertion body are given by 
@glindex n_assrt_body/5
@code{n_assrt_body/5} and its auxiliary types. 




@strong{Usage:} @code{g_assrt_body(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a comp assertion body. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assrt_status/1 (regtype)}}}
@temp
@end iftex
@teindex assrt_status/1 
@glindex assrt_status/1 
@deffn REGTYPE assrt_status/1:



The types of assertion status. They have the same meaning as the program-point assertions, and are as follows: 
@smallexample 
assrt_status(true).
assrt_status(false).
assrt_status(check).
assrt_status(checked).
assrt_status(trust).
@end smallexample 



@strong{Usage:} @code{assrt_status(X)}
@itemize @minus
@item @emph{Description:} @code{X} is an acceptable status for an assertion. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{assrt_type/1 (regtype)}}}
@temp
@end iftex
@teindex assrt_type/1 
@glindex assrt_type/1 
@deffn REGTYPE assrt_type/1:



The admissible kinds of assertions: 
@smallexample 
assrt_type(pred).
assrt_type(prop).
assrt_type(decl).
assrt_type(func).
assrt_type(calls).
assrt_type(success).
assrt_type(comp).
assrt_type(entry).
assrt_type(modedef).
@end smallexample 



@strong{Usage:} @code{assrt_type(X)}
@itemize @minus
@item @emph{Description:} @code{X} is an admissible kind of assertion. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{predfunctor/1 (regtype)}}}
@temp
@end iftex
@teindex predfunctor/1 
@glindex predfunctor/1 
@deffn REGTYPE predfunctor/1:






@strong{Usage:} @code{predfunctor(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a type of assertion which defines a predicate. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{propfunctor/1 (regtype)}}}
@temp
@end iftex
@teindex propfunctor/1 
@glindex propfunctor/1 
@deffn REGTYPE propfunctor/1:






@strong{Usage:} @code{propfunctor(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a type of assertion which defines a @emph{property}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{docstring/1 (prop)}}}
@temp
@end iftex
@prindex docstring/1 
@glindex docstring/1 
@deffn PROPERTY docstring/1:






@strong{Usage:} @code{docstring(String)}
@itemize @minus
@item @emph{Description:} @code{String} is a text comment with admissible documentation commands. The usual formatting commands that are applicable in comment strings are defined by 
@glindex stringcommand/1
@code{stringcommand/1}. See the 
@glindex lpdoc
@code{lpdoc} manual for documentation on comments.  
@end itemize
@end deffn
@sp 1


@c (component)


@node Declaring regular types, Properties which are native to analyzers, Types and properties related to assertions, Top
@comment node-name, next,  previous,  up
@chapter Declaring regular types
@liindex regtypes
@c -------------------------------------------------
@c WARNING: Do not edit this file (regtypes_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/regtypes/regtypes_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo, Pedro Lopez, Francisco Bueno.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#9 (1999/12/9, 21:57:42 MET)

This library package adds some new declaration definitions and new operator definitions to user programs. These new declarations and operators provide some very simple syntactic sugar to support 
@glindex regular type definitions
regular type definitions in source code. Regular types are just properties which have the additional characteristic of being 
@glindex regular types
regular types (
@glindex basic_props:regtype/1
@code{basic_props:regtype/1}). 

For example, this library package allows writing: 
@smallexample 
   :- regtype tree(X) # "@code{X} is a tree.".
   @end smallexample  
instead of the more combersome: 
@smallexample 
   :- prop tree(X) + regtype # "@code{X} is a tree.".
   @end smallexample  

Regular types can be used as properties to describe predicates and play an essential role in program debugging (see the Ciao Prolog preprocessor (@code{ciaopp}) manual). 

In this chapter we explain some general considerations worth taking into account when writing properties in general, not just regular types. The exact 
@glindex syntax of regular types
syntax of regular types is also described. 

 

@menu
* Defining properties::		
* Usage and interface (regtypes)::  
* Documentation on new declarations (regtypes)::  
@end menu

@node Defining properties, Usage and interface (regtypes), Declaring regular types, Declaring regular types
@comment node-name, next,  previous,  up
@section Defining properties 

Given the classes of assertions in the Ciao assertion language, there are two fundamental classes of properties. Properties used in assertions which refer to execution states (i.e., @code{calls/1}, @code{success/1}, and the like) are called 
@coindex properties of execution states
@glindex properties of execution states
@emph{properties of execution states}. Properties used in assertions related to computations (i.e., @code{comp/1}) are called 
@coindex properties of computations
@glindex properties of computations
@emph{properties of computations}. Different considerations apply when writing a property of the former or of the later kind. 

Consider a definition of the predicate @code{string_concat/3} which concatenates two character strings (represented as lists of ASCII codes): 
@smallexample 
string_concat([],L,L).
string_concat([X|Xs],L,[X|NL]):- string_concat(Xs,L,NL).
@end smallexample  

Assume that we would like to state in an assertion that each argument ``is a list of integers.'' However, we must decide which one of the following two possibilities we mean exactly: ``the argument is @emph{instantiated} to a list of integers'' (let us call this property @code{instantiated_to_intlist/1}), or ``if any part of the argument is instantiated, this instantiation must be compatible with the argument being a list of integers'' (we will call this property @code{compatible_with_intlist/1}). For example, @code{instantiated_to_intlist/1} should be true for the terms @code{[]} and @code{[1,2]}, but should not for @code{X}, @code{[a,2]}, and @code{[X,2]}. In turn, @code{compatible_with_intlist/1} should be true for @code{[]}, @code{X}, @code{[1,2]}, and @code{[X,2]}, but should not be for @code{[X|1]}, @code{[a,2]}, and @code{1}. We refer to properties such as @code{instantiated_to_intlist/1} above as 
@coindex instantiation properties
@glindex instantiation properties
@emph{instantiation properties} and to those such as @code{compatible_with_intlist/1} as 
@coindex compatibility properties
@glindex compatibility properties
@emph{compatibility properties} (corresponding to the traditional notions of ``instantiation types'' and ``compatibility types''). 

It turns out that both of these notions are quite useful in practice. In the example above, we probably would like to use @code{compatible_with_intlist/1} to state that on success of @code{string_concat/3} all three argument must be compatible with lists of integers in an assertion like: 


@smallexample 
:- success string_concat(A,B,C) => ( compatible_with_intlist(A),
                                     compatible_with_intlist(B),
                                     compatible_with_intlist(C) ).
@end smallexample  

With this assertion, no error will be flagged for a call to @code{string_concat/3} such as @code{string_concat([20],L,R)}, which on success produces the resulting atom @code{string_concat([20],L,[20|L])}, but a call @code{string_concat([],a,R)} would indeed flag an error. 

On the other hand, and assuming that we are running on a Prolog system, we would probably like to use @code{instantiated_to_intlist/1} for @code{sumlist/2} as follows: 


@smallexample 
:- calls sumlist(L,N) : instantiated_to_intlist(L).

sumlist([],0).
sumlist([X|R],S) :- sumlist(R,PS), S is PS+X.
@end smallexample  


@noindent
to describe the type of calls for which the program has been designed, i.e., those in which the first argument of @code{sumlist/2} is indeed a list of integers. 

The property @code{instantiated_to_intlist/1} might be written as in the following (Prolog) definition: 


@smallexample 
:- prop instantiated_to_intlist/1.

instantiated_to_intlist(X) :- 
       nonvar(X), instantiated_to_intlist_aux(X).

instantiated_to_intlist_aux([]).
instantiated_to_intlist_aux([X|T]) :-
       integer(X), instantiated_to_intlist(T).
@end smallexample  

(Recall that the Prolog builtin @code{integer/1} itself implements an instantiation check, failing if called with a variable as the argument.) 

The property @code{compatible_with_intlist/1} might in turn be written as follows (also in Prolog): 


@smallexample 
:- prop compatible_with_intlist/1.

compatible_with_intlist(X) :- var(X).
compatible_with_intlist(X) :- 
       nonvar(X), compatible_with_intlist_aux(X).

compatible_with_intlist_aux([]).
compatible_with_intlist_aux([X|T]) :-
       int_compat(X), compatible_with_intlist(T).

int_compat(X) :- var(X).
int_compat(X) :- nonvar(X), integer(X).
@end smallexample  

Note that these predicates meet the criteria for being properties and thus the @code{prop/1} declaration is correct. 

Ensuring that a property meets the criteria for ``not affecting the computation'' can sometimes make its coding somewhat tedious. In some ways, one would like to be able to write simply: 


@smallexample 
intlist([]).
intlist([X|R]) :- int(X), intlist(R).
@end smallexample  


@noindent
(Incidentally, note that the above definition, provided that it suits the requirements for being a property and that @code{int/1} is a regular type, meets the criteria for being a regular type. Thus, it could be declared @code{:- regtype intlist/1}.) 

But note that (independently of the definition of @code{int/1}) the definition above is not the correct instantiation check, since it would succeed for a call such as @code{intlist(X)}. In fact, it is not strictly correct as a compatibility property either, because, while it would fail or succeed as expected, it would perform instantiations (e.g., if called with @code{intlist(X)} it would bind @code{X} to @code{[]}). In practice, it is convenient to provide some run-time support to aid in this task. 

The run-time support of the Ciao system (see @ref{Run-time checking of assertions}) ensures that the execution of properties is performed in such a way that properties written as above can be used directly as instantiation checks. Thus, writing: 


@smallexample 
:- calls sumlist(L,N) : intlist(L).
@end smallexample  


@noindent
has the desired effect. Also, the same properties can often be used as compatibility checks by writing them in the assertions as @code{compat(Property)} (@code{basic_props:compat/1}). Thus, writing: 


@smallexample 
:- success string_concat(A,B,C) => ( compat(intlist(A)),
                                     compat(intlist(B)),
                                     compat(intlist(C)) ).
@end smallexample  


@noindent
also has the desired effect. 

As a general rule, the properties that can be used directly for checking for compatibility should be @emph{downwards closed}, i.e., once they hold they will keep on holding in every state accessible in forwards execution. There are certain predicates which are inherently @emph{instantiation} checks and should not be used as @emph{compatibility} properties nor appear in the definition of a property that is to be used with @code{compat}. Examples of such predicates (for Prolog) are @code{==}, @code{ground}, @code{nonvar}, @code{integer}, @code{atom}, @code{>}, etc. as they require a certain instantiation degree of their arguments in order to succeed. 

In contrast with properties of execution states, @emph{properties of computations} refer to the entire execution of the call(s) that the assertion relates to. One such property is, for example, @code{not_fail/1} (note that although it has been used as in @code{:- comp append(Xs,Ys,Zs) + not_fail}, it is in fact read as @code{not_fail(append(Xs,Ys,Zs))}; see @code{assertions_props:complex_goal_property/1}). For this property, which should be interpreted as ``execution of the predicate either succeeds at least once or loops,'' we can use the following predicate @code{not_fail/1} for run-time checking: 


@smallexample 
not_fail(Goal):-
      if( call(Goal),
          true,            %% then
          warning(Goal) ). %% else
@end smallexample  


@noindent
where the @code{warning/1} (library) predicate simply prints a warning message. 

In this simple case, implementation of the predicate is not very difficult using the (non-standard) @code{if/3} builtin predicate present in many Prolog systems. 



However, it is not so easy to code predicates which check other properties of the computation and we may in general need to program a meta-interpreter for this purpose. 





@node Usage and interface (regtypes), Documentation on new declarations (regtypes), Defining properties, Declaring regular types
@comment node-name, next,  previous,  up
@section Usage and interface (@code{regtypes})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(regtypes).}

or

@code{:- module(...,...,[regtypes]).}

@item @strong{New operators defined:}

@glindex regtype/1
@code{regtype/1} [1150,fx], 
@glindex regtype/2
@code{regtype/2} [1150,xfx].

@item @strong{New declarations defined:}

@glindex regtype/1
@code{regtype/1}, 
@glindex regtype/2
@code{regtype/2}.


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/assertions_props
@code{assertions/assertions_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on new declarations (regtypes),  , Usage and interface (regtypes), Declaring regular types
@comment node-name, next,  previous,  up
@section Documentation on new declarations (@code{regtypes})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{regtype/1 (decl)}}}
@temp
@end iftex
@deindex regtype/1 
@glindex regtype/1 
@deffn DECLARATION regtype/1:




@coindex regtype assertion
@glindex regtype assertion 
This assertion is similar to a pred assertion but it flags that the predicate being documented is also a ``
@glindex regular type
regular type.'' This allows for example checking whether it is in the class of types supported by the type checking and inference modules. Currently, types are properties whose definitions are @emph{regular programs}. 

 A regular program is defined by a set of clauses, each of the form: 
@smallexample 
p(x, v_1, ..., v_n)  :- body_1, ..., body_k.
@end smallexample  
where: 
@enumerate  
@item @code{x} is a term whose variables (which are called @emph{term variables}) are unique, i.e., it is not allowed to introduce equality constraints between the variables of @code{x}. 

For example, @code{p(f(X, Y)) :- ...} is valid, but @code{p(f(X, X)) :- ...} is not. 


@item in all clauses defining @code{p/n+1} the terms @code{x} do not unify except maybe for one single clause in which @code{x} is a variable. 


@item @code{n} >= 0 and @code{p/n} is a @emph{parametric type functor} (whereas the predicate defined by the clauses is @code{p/n}+1). 


@item @code{v_1}, ..., @code{v_n} are unique variables, which are called @emph{parametric variables}. 


@item Each @code{body_i} is of the form: 


@enumerate  
@item @code{regtype(z, t)} where @code{z} is one of the @emph{term variables} and @code{t} is a @emph{regular type expression}; 


@item @code{q(y, t_1, ..., t_m)} where @code{m} >= 0, @code{q/m} is a @emph{parametric type functor}, not in the set of functors @code{=/2}, @code{^/2}, @code{./3} @code{regtype/2}. 

@code{t_1, ..., t_m} are @emph{regular type expressions}, and @code{y} is a @emph{term variable}. 
@end enumerate  


@item Each term variable occurs at most once in the clause's body (and should be as the first argument of a literal). 
@end enumerate  
A @emph{regular type expression} is either a parametric variable or a parametric type functor applied to some of the parametric variables. 

A parametric type functor is a regular type, defined by a regular program, or a basic type. Basic types are defined in the CIAO 
@glindex engine(basic_props)
@code{engine(basic_props)} manual. 







The set of types is thus a well defined subset of the set of properties. Note that types can be used to describe characteristics of arguments in assertions and they can also be executed (called) as any other predicates. 


@strong{Usage:} :- @code{regtype(AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{regtype/2 (decl)}}}
@temp
@end iftex
@deindex regtype/2 
@glindex regtype/2 
@deffn DECLARATION regtype/2:




@coindex regtype assertion
@glindex regtype assertion 
This assertion is similar to a 
@glindex regtype/1
@code{regtype/1} assertion but it is explicitely qualified. Non-qualified 
@glindex regtype/1
@code{regtype/1} assertions are assumed the qualifier @code{check}. Note that checking regular type definitions should be done with the @code{ciaopp} preprocessor. 


@strong{Usage:} :- @code{regtype(AssertionStatus,AssertionBody)}.
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{AssertionStatus} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{AssertionBody} is an assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_body/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Properties which are native to analyzers, Meta-properties, Declaring regular types, Top
@comment node-name, next,  previous,  up
@chapter Properties which are native to analyzers
@liindex native_props
@c -------------------------------------------------
@c WARNING: Do not edit this file (native_props.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/assertions/native_props.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno, Manuel Hermenegildo, Pedro Lopez.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#1 (1999/11/29, 17:12:34 MET)


@coindex properties, native
@glindex properties, native 
This library contains a set of properties which are natively understood by the different program analyzers of 
@glindex ciaopp
@code{ciaopp}. They are used by 
@glindex ciaopp
@code{ciaopp} on output and they can also be used as properties in assertions.



@menu
* Usage and interface (native_props)::	
* Documentation on exports (native_props)::  
@end menu

@node Usage and interface (native_props), Documentation on exports (native_props), Properties which are native to analyzers, Properties which are native to analyzers
@comment node-name, next,  previous,  up
@section Usage and interface (@code{native_props})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library('assertions/native_props'))} 

or also as a package @code{:- use_package(nativeprops)}. 

Note the different names of the library and the package.

@item @strong{Exports:}
@itemize @minus


@item @emph{Properties:}

@glindex linear/1
@code{linear/1}, 
@glindex mshare/1
@code{mshare/1}, 
@glindex fails/1
@code{fails/1}, 
@glindex not_fails/1
@code{not_fails/1}, 
@glindex possibly_fails/1
@code{possibly_fails/1}, 
@glindex covered/1
@code{covered/1}, 
@glindex not_covered/1
@code{not_covered/1}, 
@glindex is_det/1
@code{is_det/1}, 
@glindex possibly_nondet/1
@code{possibly_nondet/1}, 
@glindex mut_exclusive/1
@code{mut_exclusive/1}, 
@glindex not_mut_exclusive/1
@code{not_mut_exclusive/1}, 
@glindex size_lb/2
@code{size_lb/2}, 
@glindex size_ub/2
@code{size_ub/2}, 
@glindex steps_lb/2
@code{steps_lb/2}, 
@glindex steps_ub/2
@code{steps_ub/2}, 
@glindex sideff_pure/1
@code{sideff_pure/1}, 
@glindex sideff_soft/1
@code{sideff_soft/1}, 
@glindex sideff_hard/1
@code{sideff_hard/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex andprolog/andprolog
@code{andprolog/andprolog}, 
@glindex metaterms
@code{metaterms}, 
@glindex sort
@code{sort}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (native_props),  , Usage and interface (native_props), Properties which are native to analyzers
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{native_props})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{linear/1 (prop)}}}
@temp
@end iftex
@prindex linear/1 
@glindex linear/1 
@deffn PROPERTY linear/1:


@code{linear(X)}


@code{X} is bound to a term which is linear, i.e., if it contains any variables, such variables appear only once in the term. For example, @code{[1,2,3]} and @code{f(A,B)} are linear terms, while @code{f(A,A)} is not.


@strong{Usage:} @code{linear(X)}
@itemize @minus
@item @emph{Description:} @code{X} is instantiated to a linear term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{mshare/1 (prop)}}}
@temp
@end iftex
@prindex mshare/1 
@glindex mshare/1 
@deffn PROPERTY mshare/1:


@code{mshare(X)}


@code{X} contains all 
@coindex sharing sets
@glindex sharing sets
@emph{sharing sets} [JL88,MH89] which specify the possible variable occurrences in the terms to which the variables involved in the clause may be bound. Sharing sets are a compact way of representing groundness of variables and dependencies between variables. This representation is however generally difficult to read for humans. For this reason, this information is often translated to 
@glindex ground/1
@code{ground/1}, 
@glindex indep/1
@code{indep/1} and 
@glindex indep/2
@code{indep/2} properties, which are easier to read.


@strong{Usage:} @code{mshare(X)}
@itemize @minus
@item @emph{Description:} The sharing pattern is @code{@code{X}}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fails/1 (prop)}}}
@temp
@end iftex
@prindex fails/1 
@glindex fails/1 
@deffn PROPERTY fails/1:


@code{fails(X)}


Calls of the form @code{X} fail.


@strong{Usage:} @code{fails(X)}
@itemize @minus
@item @emph{Description:} Calls of the form @code{X} fail. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{not_fails/1 (prop)}}}
@temp
@end iftex
@prindex not_fails/1 
@glindex not_fails/1 
@deffn PROPERTY not_fails/1:


@code{not_fails(X)}


Calls of the form @code{X} produce at least one solution, or not terminate [DLGH97].


@strong{Usage:} @code{not_fails(X)}
@itemize @minus
@item @emph{Description:} All the calls of the form @code{X} do not fail. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{possibly_fails/1 (prop)}}}
@temp
@end iftex
@prindex possibly_fails/1 
@glindex possibly_fails/1 
@deffn PROPERTY possibly_fails/1:


@code{possibly_fails(X)}


Non-failure is not ensured for any call of the form @code{X} [DLGH97]. In other words, nothing can be ensured about non-failure nor termination of such calls.


@strong{Usage:} @code{possibly_fails(X)}
@itemize @minus
@item @emph{Description:} Non-failure is not ensured for calls of the form @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{covered/1 (prop)}}}
@temp
@end iftex
@prindex covered/1 
@glindex covered/1 
@deffn PROPERTY covered/1:


@code{covered(X)}


For any call of the form @code{X} there is at least one clause whose test succeeds (i.e. all the calls of the form @code{X} are covered.) [DLGH97].


@strong{Usage:} @code{covered(X)}
@itemize @minus
@item @emph{Description:} All the calls of the form @code{X} are covered. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{not_covered/1 (prop)}}}
@temp
@end iftex
@prindex not_covered/1 
@glindex not_covered/1 
@deffn PROPERTY not_covered/1:


@code{not_covered(X)}


There is some call of the form @code{X} for which there is not any clause whose test succeeds [DLGH97].


@strong{Usage:} @code{not_covered(X)}
@itemize @minus
@item @emph{Description:} Not all of the calls of the form @code{X} are covered. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{is_det/1 (prop)}}}
@temp
@end iftex
@prindex is_det/1 
@glindex is_det/1 
@deffn PROPERTY is_det/1:


@code{is_det(X)}


All calls of the form @code{X} are deterministic, i.e. produce at most one solution, or not terminate.


@strong{Usage:} @code{is_det(X)}
@itemize @minus
@item @emph{Description:} All calls of the form @code{X} are deterministic. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{possibly_nondet/1 (prop)}}}
@temp
@end iftex
@prindex possibly_nondet/1 
@glindex possibly_nondet/1 
@deffn PROPERTY possibly_nondet/1:


@code{possibly_nondet(X)}


Non-determinism is not ensured for all calls of the form @code{X}. In other words, nothing can be ensured about determinacy nor termination of such calls.


@strong{Usage:} @code{possibly_nondet(X)}
@itemize @minus
@item @emph{Description:} Non-determinism is not ensured for calls of the form @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{mut_exclusive/1 (prop)}}}
@temp
@end iftex
@prindex mut_exclusive/1 
@glindex mut_exclusive/1 
@deffn PROPERTY mut_exclusive/1:


@code{mut_exclusive(X)}


For any call of the form @code{X} at most one clause succeeds, i.e. clauses are pairwise exclusive.


@strong{Usage:} @code{mut_exclusive(X)}
@itemize @minus
@item @emph{Description:} For any call of the form @code{X} at most one clause succeeds. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{not_mut_exclusive/1 (prop)}}}
@temp
@end iftex
@prindex not_mut_exclusive/1 
@glindex not_mut_exclusive/1 
@deffn PROPERTY not_mut_exclusive/1:


@code{not_mut_exclusive(X)}


Not for all calls of the form @code{X} at most one clause succeeds. I.e. clauses are not disjoint for some call.


@strong{Usage:} @code{not_mut_exclusive(X)}
@itemize @minus
@item @emph{Description:} Not for all calls of the form @code{X} at most one clause succeeds. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{size_lb/2 (prop)}}}
@temp
@end iftex
@prindex size_lb/2 
@glindex size_lb/2 
@deffn PROPERTY size_lb/2:


@code{size_lb(X,Y)}


The minimum size of the terms to which the argument @code{Y} is bound to is given by the expression @code{Y}. Various measures can be used to determine the size of an argument, e.g., list-length, term-size, term-depth, integer-value, etc. [DL93].


@strong{Usage:} @code{size_lb(X,Y)}
@itemize @minus
@item @emph{Description:} @code{Y} is a lower bound on the size of argument @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{size_ub/2 (prop)}}}
@temp
@end iftex
@prindex size_ub/2 
@glindex size_ub/2 
@deffn PROPERTY size_ub/2:


@code{size_ub(X,Y)}


The maximum size of the terms to which the argument @code{Y} is bound to is given by the expression @code{Y}. Various measures can be used to determine the size of an argument, e.g., list-length, term-size, term-depth, integer-value, etc. [DL93].


@strong{Usage:} @code{size_ub(X,Y)}
@itemize @minus
@item @emph{Description:} @code{Y} is a upper bound on the size of argument @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{steps_lb/2 (prop)}}}
@temp
@end iftex
@prindex steps_lb/2 
@glindex steps_lb/2 
@deffn PROPERTY steps_lb/2:


@code{steps_lb(X,Y)}


The minimum computation time (in resolution steps) spent by any call of the form @code{X} is given by the expression @code{Y} [DLGHL97,LGHD96]


@strong{Usage:} @code{steps_lb(X,Y)}
@itemize @minus
@item @emph{Description:} @code{Y} is a lower bound on the cost of any call of the form @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{steps_ub/2 (prop)}}}
@temp
@end iftex
@prindex steps_ub/2 
@glindex steps_ub/2 
@deffn PROPERTY steps_ub/2:


@code{steps_ub(X,Y)}


The maximum computation time (in resolution steps) spent by any call of the form @code{X} is given by the expression @code{Y} [DL93,LGHD96]


@strong{Usage:} @code{steps_ub(X,Y)}
@itemize @minus
@item @emph{Description:} @code{Y} is a upper bound on the cost of any call of the form @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sideff_pure/1 (prop)}}}
@temp
@end iftex
@prindex sideff_pure/1 
@glindex sideff_pure/1 
@deffn PROPERTY sideff_pure/1:






@strong{Usage:} @code{sideff_pure(X)}
@itemize @minus
@item @emph{Description:} @code{X} is pure, i.e., has no side-effects. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sideff_soft/1 (prop)}}}
@temp
@end iftex
@prindex sideff_soft/1 
@glindex sideff_soft/1 
@deffn PROPERTY sideff_soft/1:






@strong{Usage:} @code{sideff_soft(X)}
@itemize @minus
@item @emph{Description:} @code{X} has 
@coindex soft side-effects
@glindex soft side-effects
@emph{soft side-effects}, i.e., those not affecting program execution (e.g., input/output). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sideff_hard/1 (prop)}}}
@temp
@end iftex
@prindex sideff_hard/1 
@glindex sideff_hard/1 
@deffn PROPERTY sideff_hard/1:






@strong{Usage:} @code{sideff_hard(X)}
@itemize @minus
@item @emph{Description:} @code{X} has 
@coindex hard side-effects
@glindex hard side-effects
@emph{hard side-effects}, i.e., those that might affect program execution (e.g., assert/retract). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{indep/1 (prop)}}}
@temp
@end iftex
@prindex indep/1 
@glindex indep/1 
@deffn PROPERTY indep/1:






@strong{Usage:} @code{indep(X)}
@itemize @minus
@item @emph{Description:} The variables in pairs in @code{@code{X}} are pairwise independent. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{indep/2 (prop)}}}
@temp
@end iftex
@prindex indep/2 
@glindex indep/2 
@deffn PROPERTY indep/2:






@strong{Usage:} @code{indep(X,Y)}
@itemize @minus
@item @emph{Description:} @code{X} and @code{Y} do not have variables in common. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Meta-properties, ISO-Prolog modes, Properties which are native to analyzers, Top
@comment node-name, next,  previous,  up
@chapter Meta-properties
@liindex meta_props
@c -------------------------------------------------
@c WARNING: Do not edit this file (meta_props.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/assertions/meta_props.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno.


This library allows the use of some meta-constructs which provide for specifying properties of terms which are unknown at the time of the specification, or expressed with a shorthand for the property definition, i.e., without really defining it. 

An example of such use is an assertion which specifies that any property holding upon call will also hold upon exit: 
@smallexample 
         :- pred p(X) : Prop(X) => Prop(X).
        @end smallexample  

Another example is using shorthands for properties when documenting: 
@smallexample 
         :- pred p(X) : regtype(X,(^(list;list);list)).
        @end smallexample  

(See below for an explanation of such a regular type.) 



@menu
* Usage and interface (meta_props)::  
* Documentation on exports (meta_props)::  
* Documentation on multifiles (meta_props)::  
* Documentation on internals (meta_props)::  
* Known bugs and planned improvements (meta_props)::  
@end menu

@node Usage and interface (meta_props), Documentation on exports (meta_props), Meta-properties, Meta-properties
@comment node-name, next,  previous,  up
@section Usage and interface (@code{meta_props})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library('assertions/meta_props'))} 

or also as a package @code{:- use_package(metaprops)}. 

Note the different names of the library and the package.

@item @strong{Exports:}
@itemize @minus


@item @emph{Properties:}

@glindex call/2
@code{call/2}, 
@glindex prop/2
@code{prop/2}, 
@glindex regtype/2
@code{regtype/2}.


@item @emph{Multifiles:}

@glindex callme/2
@code{callme/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (meta_props), Documentation on multifiles (meta_props), Usage and interface (meta_props), Meta-properties
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{meta_props})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{call/2 (prop)}}}
@temp
@end iftex
@prindex call/2 
@glindex call/2 
@deffn PROPERTY call/2:


@code{call(P,A)}


@code{A} has property @code{P} (provided that @code{P} is a property). Equivalent to @code{P(A)}.


@strong{Usage:} @code{call(P,A)}
@itemize @minus
@item @emph{Description:} @code{A} has property @code{P}. 
@item @emph{If the following properties hold at call time:}


@code{P} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prop/2 (prop)}}}
@temp
@end iftex
@prindex prop/2 
@glindex prop/2 
@deffn PROPERTY prop/2:






@strong{Usage:} @code{prop(A,P)}
@itemize @minus
@item @emph{Description:} @code{A} has property @code{P}. 
@item @emph{If the following properties hold at call time:}


@code{P} has property @code{^ (callable;prop_abs)}.
@iftex
@hfill
@end iftex
 (@code{meta_props:prop/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{regtype/2 (prop)}}}
@temp
@end iftex
@prindex regtype/2 
@glindex regtype/2 
@deffn PROPERTY regtype/2:






@strong{Usage:} @code{regtype(A,T)}
@itemize @minus
@item @emph{Description:} @code{A} is of type @code{T}. 
@item @emph{If the following properties hold at call time:}


@code{T} has property @code{^ (regtype;prop_abs)}.
@iftex
@hfill
@end iftex
 (@code{meta_props:prop/2})
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (meta_props), Documentation on internals (meta_props), Documentation on exports (meta_props), Meta-properties
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{meta_props})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{callme/2 (pred)}}}
@temp
@end iftex
@pdindex callme/2 
@glindex callme/2 
@deffn PREDICATE callme/2:



(User defined.) A hook predicate you have to define as @code{callme(P,X):- P(X), !.} in the program that uses this library. This is done automatically if the package is used instead of the library module (but then you @emph{should not} define @code{callme/2} in your program).


The predicate is @emph{multifile}.

@end deffn
@sp 1



@node Documentation on internals (meta_props), Known bugs and planned improvements (meta_props), Documentation on multifiles (meta_props), Meta-properties
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{meta_props})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prop_abs/1 (prop)}}}
@temp
@end iftex
@prindex prop_abs/1 
@glindex prop_abs/1 
@deffn PROPERTY prop_abs/1:


@code{prop_abs(Prop)}


@code{Prop} is a 
@coindex property abstraction
@glindex property abstraction
@emph{property abstraction}, i.e., a 
@coindex parametric property
@glindex parametric property
@emph{parametric property}, or a term formed of property abstractions, where the functors used in the term are escaped by @code{^}. 

One particular case of property abstractions are 
@coindex parametric regular type abstractions
@glindex parametric regular type abstractions
@emph{parametric regular type abstractions}, i.e., a parametric type functor or a @code{^}-escaped term formed of regular type abstractions. 

Such abstractions are a short-hand for a corresponding regular type (correspondingly, property). For example, the following abstraction: 
@smallexample 
         ^(list;list);list
        @end smallexample  
denotes terms of the form @code{(X;Y)} where @code{list(X)} and @code{list(Y)} hold and also terms @code{T} such that @code{list(T)} holds. It is equivalent to the regular type: 
@smallexample 
         abstract_type((X;Y)):- list(X), list(Y).
         abstract_type(T):- list(T).
        @end smallexample  



@strong{Usage:} @code{prop_abs(Prop)}
@itemize @minus
@item @emph{Description:} @code{Prop} is a 
@glindex property abstraction
property abstraction. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (meta_props),  , Documentation on internals (meta_props), Meta-properties
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{meta_props})

@itemize @bullet{}

@item
Using a hook predicate is not very elegant. Need something else.

@item
The cut in the hook prevents backtracking (enough for most uses of properties but not quite ok).
@end itemize

@c (component)


@node ISO-Prolog modes, Classical Prolog modes, Meta-properties, Top
@comment node-name, next,  previous,  up
@chapter ISO-Prolog modes
@liindex isomodes
@c -------------------------------------------------
@c WARNING: Do not edit this file (isomodes_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/isomodes_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#112 (1999/11/23, 1:8:50 MET)

This file defines the ``
@glindex modes
modes'' used in the documentation of the ISO-Prolog standard. See also @ref{Classical Prolog modes} for an alternative set of modes.



@menu
* Usage and interface (isomodes)::  
* Documentation on new modes (isomodes)::  
@end menu

@node Usage and interface (isomodes), Documentation on new modes (isomodes), ISO-Prolog modes, ISO-Prolog modes
@comment node-name, next,  previous,  up
@section Usage and interface (@code{isomodes})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package([assertions,isomodes]).}

@item @strong{New operators defined:}

@glindex ?/1
@code{?/1} [200,fy], 
@glindex @@/1
@code{@@/1} [200,fy].

@item @strong{New modes defined:}

@glindex +/1
@code{+/1}, 
@glindex @@/1
@code{@@/1}, 
@glindex -/1
@code{-/1}, 
@glindex ?/1
@code{?/1}, 
@glindex */1
@code{*/1}, 
@glindex +/2
@code{+/2}, 
@glindex @@/2
@code{@@/2}, 
@glindex -/2
@code{-/2}, 
@glindex ?/2
@code{?/2}, 
@glindex */2
@code{*/2}.


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/meta_props
@code{assertions/meta_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on new modes (isomodes),  , Usage and interface (isomodes), ISO-Prolog modes
@comment node-name, next,  previous,  up
@section Documentation on new modes (@code{isomodes})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(+)/1 (modedef)}}}
@temp
@end iftex
@glindex +/1 
@deffn MODE +/1:






@strong{Usage:} @code{+ A}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(@@)/1 (modedef)}}}
@temp
@end iftex
@glindex @@/1 
@deffn MODE @@/1:






@strong{Usage:} @code{@@ A}
@itemize @minus
@item @emph{The following properties are added globally:}


@code{A} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(-)/1 (modedef)}}}
@temp
@end iftex
@glindex -/1 
@deffn MODE -/1:






@strong{Usage:} @code{- A}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(?)/1 (modedef)}}}
@temp
@end iftex
@glindex ?/1 
@deffn MODE ?/1:



Unspecified argument.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{* /1 (modedef)}}}
@temp
@end iftex
@glindex */1 
@deffn MODE */1:



Unspecified argument.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(+)/2 (modedef)}}}
@temp
@end iftex
@glindex +/2 
@deffn MODE +/2:






@strong{Usage:} @code{A + X}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(@@)/2 (modedef)}}}
@temp
@end iftex
@glindex @@/2 
@deffn MODE @@/2:






@strong{Usage:} @code{@@(A,X)}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added upon exit:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added globally:}


@code{A} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(-)/2 (modedef)}}}
@temp
@end iftex
@glindex -/2 
@deffn MODE -/2:






@strong{Usage:} @code{A - X}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties are added upon exit:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(?)/2 (modedef)}}}
@temp
@end iftex
@glindex ?/2 
@deffn MODE ?/2:






@strong{Usage:} @code{?(A,X)}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added upon exit:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{* /2 (modedef)}}}
@temp
@end iftex
@glindex */2 
@deffn MODE */2:






@strong{Usage:} @code{A * X}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node Classical Prolog modes, Run-time checking of assertions, ISO-Prolog modes, Top
@comment node-name, next,  previous,  up
@chapter Classical Prolog modes
@liindex basicmodes
@c -------------------------------------------------
@c WARNING: Do not edit this file (basicmodes_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/basicmodes_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.8#43 (1999/3/6, 18:39:38 CET)

This file defines a number of very simple ``
@glindex modes
modes'' which are frequently useful in programs. These correspond to the modes used in classical Prolog texts with some simple addtions. Note that some of these modes use the same symbol as one of the ISO-modes (see @ref{ISO-Prolog modes}) but with subtly different meaning.



@menu
* Usage and interface (basicmodes)::  
* Documentation on new modes (basicmodes)::  
@end menu

@node Usage and interface (basicmodes), Documentation on new modes (basicmodes), Classical Prolog modes, Classical Prolog modes
@comment node-name, next,  previous,  up
@section Usage and interface (@code{basicmodes})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

:- use_package([assertions,basicmodes]).

@item @strong{New operators defined:}

@glindex ?/1
@code{?/1} [500,fx], 
@glindex @@/1
@code{@@/1} [500,fx].

@item @strong{New modes defined:}

@glindex +/1
@code{+/1}, 
@glindex -/1
@code{-/1}, 
@glindex ?/1
@code{?/1}, 
@glindex @@/1
@code{@@/1}, 
@glindex in/1
@code{in/1}, 
@glindex out/1
@code{out/1}, 
@glindex go/1
@code{go/1}, 
@glindex +/2
@code{+/2}, 
@glindex -/2
@code{-/2}, 
@glindex ?/2
@code{?/2}, 
@glindex @@/2
@code{@@/2}, 
@glindex in/2
@code{in/2}, 
@glindex out/2
@code{out/2}, 
@glindex go/2
@code{go/2}.


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/meta_props
@code{assertions/meta_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on new modes (basicmodes),  , Usage and interface (basicmodes), Classical Prolog modes
@comment node-name, next,  previous,  up
@section Documentation on new modes (@code{basicmodes})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(+)/1 (modedef)}}}
@temp
@end iftex
@glindex +/1 
@deffn MODE +/1:



Input value in argument.


@strong{Usage:} @code{+ A}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(-)/1 (modedef)}}}
@temp
@end iftex
@glindex -/1 
@deffn MODE -/1:



No input value in argument.


@strong{Usage:} @code{- A}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{? /1 (modedef)}}}
@temp
@end iftex
@glindex ?/1 
@deffn MODE ?/1:



Unspecified argument.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(@@)/1 (modedef)}}}
@temp
@end iftex
@glindex @@/1 
@deffn MODE @@/1:



No output value in argument.


@strong{Usage:} @code{@@ A}
@itemize @minus
@item @emph{The following properties are added globally:}


@code{A} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{in/1 (modedef)}}}
@temp
@end iftex
@glindex in/1 
@deffn MODE in/1:



Input argument.


@strong{Usage:} @code{in(A)}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@item @emph{The following properties are added upon exit:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{out/1 (modedef)}}}
@temp
@end iftex
@glindex out/1 
@deffn MODE out/1:



Output argument.


@strong{Usage:} @code{out(A)}
@itemize @minus
@item @emph{The following properties are added at call time:}


@code{A} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties are added upon exit:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{go/1 (modedef)}}}
@temp
@end iftex
@glindex go/1 
@deffn MODE go/1:



Ground output (input/output argument).


@strong{Usage:} @code{go(A)}
@itemize @minus
@item @emph{The following properties are added upon exit:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(+)/2 (modedef)}}}
@temp
@end iftex
@glindex +/2 
@deffn MODE +/2:






@strong{Usage:} @code{A + X}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added at call time:}


@code{A} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(-)/2 (modedef)}}}
@temp
@end iftex
@glindex -/2 
@deffn MODE -/2:






@strong{Usage:} @code{A - X}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added at call time:}


@code{A} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{? /2 (modedef)}}}
@temp
@end iftex
@glindex ?/2 
@deffn MODE ?/2:






@strong{Usage:} @code{?(A,X)}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(@@)/2 (modedef)}}}
@temp
@end iftex
@glindex @@/2 
@deffn MODE @@/2:






@strong{Usage:} @code{@@(A,X)}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added globally:}


@code{A} is not further instantiated.
@iftex
@hfill
@end iftex
 (@code{basic_props:not_further_inst/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{in/2 (modedef)}}}
@temp
@end iftex
@glindex in/2 
@deffn MODE in/2:






@strong{Usage:} @code{in(A,X)}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added at call time:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@item @emph{The following properties are added upon exit:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{out/2 (modedef)}}}
@temp
@end iftex
@glindex out/2 
@deffn MODE out/2:






@strong{Usage:} @code{out(A,X)}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added at call time:}


@code{A} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties are added upon exit:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{go/2 (modedef)}}}
@temp
@end iftex
@glindex go/2 
@deffn MODE go/2:






@strong{Usage:} @code{go(A,X)}
@itemize @minus
@item @emph{Call and exit are @emph{compatible} with:}


@code{A} has property @code{X}.
@iftex
@hfill
@end iftex
 (@code{meta_props:call/2})
@item @emph{The following properties are added upon exit:}


@code{A} is currently ground (it contains no variables).
@iftex
@hfill
@end iftex
 (@code{term_typing:ground/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Run-time checking of assertions, *** PART VI - Ciao Prolog library miscellanea, Classical Prolog modes, Top
@comment node-name, next,  previous,  up
@chapter Run-time checking of assertions
@liindex rtchecks
@c -------------------------------------------------
@c WARNING: Do not edit this file (rtchecks_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/rtchecks_doc.pl
@c -------------------------------------------------

@strong{Author(s):} German Puebla.


This library package allows the use of run-time checks for the assertions introduced in a program. 

The recommended way of performing 
@coindex run-time checks
@glindex run-time checks
@emph{run-time checks} of predicate assertions in a program is via the Ciao preprocessor (see @code{ciaopp} manual), which performs the required program transformation. However, this package can also be used to perform checking of program-point assertions. 



@menu
* Usage and interface (rtchecks)::  
* Documentation on multifiles (rtchecks)::  
* Known bugs and planned improvements (rtchecks)::  
@end menu

@node Usage and interface (rtchecks), Documentation on multifiles (rtchecks), Run-time checking of assertions, Run-time checking of assertions
@comment node-name, next,  previous,  up
@section Usage and interface (@code{rtchecks})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(rtchecks).}

or

@code{:- module(...,...,[rtchecks]).}

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/meta_props
@code{assertions/meta_props}, 
@glindex rtchecks/rtchecks_sys
@code{rtchecks/rtchecks_sys}.


@end itemize

@end itemize
@end cartouche


@node Documentation on multifiles (rtchecks), Known bugs and planned improvements (rtchecks), Usage and interface (rtchecks), Run-time checking of assertions
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{rtchecks})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{callme/2 (pred)}}}
@temp
@end iftex
@pdindex callme/2 
@glindex callme/2 
@deffn PREDICATE callme/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{callme/1 (pred)}}}
@temp
@end iftex
@pdindex callme/1 
@glindex callme/1 
@deffn PREDICATE callme/1:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{proves/2 (pred)}}}
@temp
@end iftex
@pdindex proves/2 
@glindex proves/2 
@deffn PREDICATE proves/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{disproves/2 (pred)}}}
@temp
@end iftex
@pdindex disproves/2 
@glindex disproves/2 
@deffn PREDICATE disproves/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1



@node Known bugs and planned improvements (rtchecks),  , Documentation on multifiles (rtchecks), Run-time checking of assertions
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{rtchecks})

@itemize @bullet{}

@item
All the code in this package is included in the user program when it is used, ant there is a lot of it! A module should be used instead.

@item
@code{check/1} uses lists instead of "proper" properties.
@end itemize

@c (component)


@node *** PART VI - Ciao Prolog library miscellanea, Structured stream handling, Run-time checking of assertions, Top
@comment node-name, next,  previous,  up
@unnumbered PART VI - Ciao Prolog library miscellanea
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (MiscProlog.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/MiscProlog.pl
@c -------------------------------------------------


This part documents several Ciao libraries which provide different useful additional functionalities. Such functionalities include performing operating system calls, gathering statistics from the Prolog engine, file and file name manipulation, error and exception handling, fast reading and writing of terms (
@glindex marshalling
marshalling and 
@glindex unmarshalling
unmarshalling), file locking, program reporting messages, pretty-printing programs and assertions, a browser of the system libraries, additional expansion utilities, concurrent aggregates, graph visualization, etc. 



@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node Structured stream handling, Operating system utilities, *** PART VI - Ciao Prolog library miscellanea, Top
@comment node-name, next,  previous,  up
@chapter Structured stream handling
@liindex streams
@c -------------------------------------------------
@c WARNING: Do not edit this file (streams.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/streams.pl
@c -------------------------------------------------

@strong{Version:} 0.5#15 (1998/6/9, 16:30:53 MET DST)





@menu
* Usage and interface (streams)::  
* Documentation on exports (streams)::	
@end menu

@node Usage and interface (streams), Documentation on exports (streams), Structured stream handling, Structured stream handling
@comment node-name, next,  previous,  up
@section Usage and interface (@code{streams})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(streams)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex open_null_stream/1
@code{open_null_stream/1}, 
@glindex open_input/2
@code{open_input/2}, 
@glindex close_input/1
@code{close_input/1}, 
@glindex open_output/2
@code{open_output/2}, 
@glindex close_output/1
@code{close_output/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (streams),  , Usage and interface (streams), Structured stream handling
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{streams})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open_null_stream/1 (pred)}}}
@temp
@end iftex
@pdindex open_null_stream/1 
@glindex open_null_stream/1 
@deffn PREDICATE open_null_stream/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open_input/2 (pred)}}}
@temp
@end iftex
@pdindex open_input/2 
@glindex open_input/2 
@deffn PREDICATE open_input/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close_input/1 (pred)}}}
@temp
@end iftex
@pdindex close_input/1 
@glindex close_input/1 
@deffn PREDICATE close_input/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open_output/2 (pred)}}}
@temp
@end iftex
@pdindex open_output/2 
@glindex open_output/2 
@deffn PREDICATE open_output/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close_output/1 (pred)}}}
@temp
@end iftex
@pdindex close_output/1 
@glindex close_output/1 
@deffn PREDICATE close_output/1:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Operating system utilities, Prolog system internal predicates, Structured stream handling, Top
@comment node-name, next,  previous,  up
@chapter Operating system utilities
@liindex system
@c -------------------------------------------------
@c WARNING: Do not edit this file (system.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/system.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#50 (1999/9/8, 22:35:15 MEST)

This module contains predicates for invoking services which are typically provided by the operating system. Note that the predicates which take names of files or directories as arguments in this module expect atoms, not 
@glindex path alias
path aliases. I.e., generally these predicates will not call 
@glindex absolute_file_name/2
@code{absolute_file_name/2} on names of files or directories taken as arguments.



@menu
* Usage and interface (system)::  
* Documentation on exports (system)::  
@end menu

@node Usage and interface (system), Documentation on exports (system), Operating system utilities, Operating system utilities
@comment node-name, next,  previous,  up
@section Usage and interface (@code{system})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(system)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex pause/1
@code{pause/1}, 
@glindex time/1
@code{time/1}, 
@glindex datime/1
@code{datime/1}, 
@glindex datime/9
@code{datime/9}, 
@glindex getenvstr/2
@code{getenvstr/2}, 
@glindex extract_paths/2
@code{extract_paths/2}, 
@glindex get_pid/1
@code{get_pid/1}, 
@glindex current_host/1
@code{current_host/1}, 
@glindex current_executable/1
@code{current_executable/1}, 
@glindex umask/2
@code{umask/2}, 
@glindex working_directory/2
@code{working_directory/2}, 
@glindex cd/1
@code{cd/1}, 
@glindex shell/0
@code{shell/0}, 
@glindex shell/1
@code{shell/1}, 
@glindex shell/2
@code{shell/2}, 
@glindex system/1
@code{system/1}, 
@glindex system/2
@code{system/2}, 
@glindex popen/3
@code{popen/3}, 
@glindex exec/4
@code{exec/4}, 
@glindex exec/3
@code{exec/3}, 
@glindex directory_files/2
@code{directory_files/2}, 
@glindex mktemp/2
@code{mktemp/2}, 
@glindex file_exists/1
@code{file_exists/1}, 
@glindex file_exists/2
@code{file_exists/2}, 
@glindex file_property/2
@code{file_property/2}, 
@glindex file_properties/6
@code{file_properties/6}, 
@glindex modif_time/2
@code{modif_time/2}, 
@glindex modif_time0/2
@code{modif_time0/2}, 
@glindex fmode/2
@code{fmode/2}, 
@glindex chmod/2
@code{chmod/2}, 
@glindex chmod/3
@code{chmod/3}, 
@glindex delete_file/1
@code{delete_file/1}.


@item @emph{Regular Types:}

@glindex datime_struct/1
@code{datime_struct/1}, 
@glindex popen_mode/1
@code{popen_mode/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (system),  , Usage and interface (system), Operating system utilities
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{system})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pause/1 (pred)}}}
@temp
@end iftex
@pdindex pause/1 
@glindex pause/1 
@deffn PREDICATE pause/1:


@code{pause(Seconds)}


Make this thread sleep for some @code{Seconds}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{time/1 (pred)}}}
@temp
@end iftex
@pdindex time/1 
@glindex time/1 
@deffn PREDICATE time/1:


@code{time(Time)}


@code{Time} is unified with the number of seconds elapsed since January, 1, 1970 (UTC).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{datime/1 (pred)}}}
@temp
@end iftex
@pdindex datime/1 
@glindex datime/1 
@deffn PREDICATE datime/1:


@code{datime(Datime)}


@code{Datime} is unified with a term of the form @code{datime(Year,Month,Day,Hour,Minute,Second)} which contains the current date and time.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{datime/9 (pred)}}}
@temp
@end iftex
@pdindex datime/9 
@glindex datime/9 
@deffn PREDICATE datime/9:


@code{datime(Time,Year,Month,Day,Hour,Min,Sec,WeekDay,YearDay)}


@code{Time} is as in 
@glindex time/1
@code{time/1}. @code{WeekDay} is the number of days since Sunday, in the range 0 to 6. @code{YearDay} is the number of days since January 1, in the range 0 to 365.


@strong{Usage 1:} @code{datime(+int,?int,?int,?int,?int,?int,?int,?int,?int)}
@itemize @minus
@item @emph{Description:} If @code{Time} is given, the rest of the arguments are unified with the date and time to which the @code{Time} argument refers. 
@end itemize

@strong{Usage 2:} @code{datime(-int,?int,?int,?int,?int,?int,?int,?int,?int)}
@itemize @minus
@item @emph{Description:} Bound @code{Time} to current time and the rest of the arguments refer to current time. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{datime_struct/1 (regtype)}}}
@temp
@end iftex
@teindex datime_struct/1 
@glindex datime_struct/1 
@deffn REGTYPE datime_struct/1:



A regular type, defined as follows:
@smallexample 
@smallexample 
datime_struct(datime(Year,Month,Day,Hour,Min,Sec)) :-
        int(Year),
        int(Month),
        int(Day),
        int(Hour),
        int(Min),
        int(Sec).
@end smallexample 
@end smallexample 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{getenvstr/2 (pred)}}}
@temp
@end iftex
@pdindex getenvstr/2 
@glindex getenvstr/2 
@deffn PREDICATE getenvstr/2:


@code{getenvstr(Name,Value)}


The environment variable @code{Name} has @code{Value}. Fails if variable @code{Name} is not defined.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{extract_paths/2 (pred)}}}
@temp
@end iftex
@pdindex extract_paths/2 
@glindex extract_paths/2 
@deffn PREDICATE extract_paths/2:


@code{extract_paths(String,Paths)}


Interpret @code{String} as the value of a UNIX environment variable holding a list of paths and return in @code{Paths} the list of the paths. Paths in @code{String} are separated by colons, and an empty path is considered a shorthand for '.' (current path). The most typical environment variable with this format is PATH. For example, this is a typical use: 
@smallexample 
?- set_prolog_flag(write_strings, on).

yes
?- getenvstr('PATH', PATH), extract_paths(PATH, Paths).

PATH = ":/home/bardo/bin:/home/clip/bin:/opt/bin/:/bin",
Paths = [".","/home/bardo/bin","/home/clip/bin","/opt/bin/","/bin"] ?

yes
?- 
@end smallexample  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_pid/1 (pred)}}}
@temp
@end iftex
@pdindex get_pid/1 
@glindex get_pid/1 
@deffn PREDICATE get_pid/1:


@code{get_pid(Pid)}


Unifies @code{Pid} with the process identificator of the current process or thread.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_host/1 (pred)}}}
@temp
@end iftex
@pdindex current_host/1 
@glindex current_host/1 
@deffn PREDICATE current_host/1:


@code{current_host(Hostname)}


@code{Hostname} is unified with the fully qualified name of the host.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_executable/1 (pred)}}}
@temp
@end iftex
@pdindex current_executable/1 
@glindex current_executable/1 
@deffn PREDICATE current_executable/1:


@code{current_executable(Path)}


Unifies @code{Path} with the path to the current executable.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{umask/2 (pred)}}}
@temp
@end iftex
@pdindex umask/2 
@glindex umask/2 
@deffn PREDICATE umask/2:


@code{umask(OldMask,NewMask)}


The process file creation mask was @code{OldMask}, and it is changed to @code{NewMask}.


@strong{Usage 2:} @code{umask(OldMask,NewMask)}
@itemize @minus
@item @emph{Description:} Gets the process file creation mask without changing it. 
@item @emph{The following properties should hold at call time:}


@code{OldMask} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{NewMask} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

The terms @code{OldMask} and @code{NewMask} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@item @emph{The following properties hold upon exit:}


@code{OldMask} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{NewMask} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{working_directory/2 (pred)}}}
@temp
@end iftex
@pdindex working_directory/2 
@glindex working_directory/2 
@deffn PREDICATE working_directory/2:


@code{working_directory(OldDir,NewDir)}


Unifies current working directory with @code{OldDir}, and then changes the working directory to @code{NewDir}. Calling @code{working_directory(Dir,Dir)} simply unifies @code{Dir} with the current working directory without changing anything else.


@strong{Usage 2:} @code{working_directory(OldDir,NewDir)}
@itemize @minus
@item @emph{Description:} Gets current working directory. 
@item @emph{The following properties should hold at call time:}


@code{OldDir} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{NewDir} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

The terms @code{OldDir} and @code{NewDir} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@item @emph{The following properties hold upon exit:}


@code{OldDir} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{NewDir} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{cd/1 (pred)}}}
@temp
@end iftex
@pdindex cd/1 
@glindex cd/1 
@deffn PREDICATE cd/1:


@code{cd(Path)}


Changes working directory to @code{Path}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{shell/0 (pred)}}}
@temp
@end iftex
@pdindex shell/0 
@glindex shell/0 
@deffn PREDICATE shell/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Execs the shell specified by the environment variable @code{SHELL}. When the shell process terminates, control is returned to Prolog. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{shell/1 (pred)}}}
@temp
@end iftex
@pdindex shell/1 
@glindex shell/1 
@deffn PREDICATE shell/1:


@code{shell(Command)}


@code{Command} is executed in the shell specified by the environment variable @code{SHELL}. It succeeds if the exit code is zero and fails otherwise.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{shell/2 (pred)}}}
@temp
@end iftex
@pdindex shell/2 
@glindex shell/2 
@deffn PREDICATE shell/2:


@code{shell(Command,ReturnCode)}


Executes @code{Command} in the shell specified by the environment variable @code{SHELL} and stores the exit code in @code{ReturnCode}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{system/1 (pred)}}}
@temp
@end iftex
@pdindex system/1 
@glindex system/1 
@deffn PREDICATE system/1:


@code{system(Command)}


Executes @code{Command} using the shell 
@glindex /bin/sh
@code{/bin/sh}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{system/2 (pred)}}}
@temp
@end iftex
@pdindex system/2 
@glindex system/2 
@deffn PREDICATE system/2:


@code{system(Command,ReturnCode)}


Executes @code{Command} in the 
@glindex /bin/sh
@code{/bin/sh} shell and stores the exit code in @code{ReturnCode}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{popen/3 (pred)}}}
@temp
@end iftex
@pdindex popen/3 
@glindex popen/3 
@deffn PREDICATE popen/3:


@code{popen(Command,Mode,Stream)}


Open a pipe to process @code{Command} in a new shell with a given @code{Mode} and return a communication @code{Stream} (as in UNIX @code{popen(3)}). If @code{Mode} is @code{read} the output from the process is sent to @code{Stream}. If @code{Mode} is @code{write}, @code{Stream} is sent as input to the process. @code{Stream} may be read from or written into using the ordinary stream I/O predicates. @code{Stream} must be closed explicitly using 
@glindex close/1
@code{close/1}, i.e., it is not closed automatically when the process dies. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{popen_mode/1 (regtype)}}}
@temp
@end iftex
@teindex popen_mode/1 
@glindex popen_mode/1 
@deffn REGTYPE popen_mode/1:






@strong{Usage:} @code{popen_mode(M)}
@itemize @minus
@item @emph{Description:} @code{M} is 'read' or 'write'. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{exec/4 (pred)}}}
@temp
@end iftex
@pdindex exec/4 
@glindex exec/4 
@deffn PREDICATE exec/4:


@code{exec(Command,StdIn,StdOut,StdErr)}


Starts the process @code{Command} and returns the standart I/O streams of the process in @code{StdIn}, @code{StdOut}, and @code{StdErr}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{exec/3 (pred)}}}
@temp
@end iftex
@pdindex exec/3 
@glindex exec/3 
@deffn PREDICATE exec/3:


@code{exec(Command,StdIn,StdOut)}


Starts the process @code{Command} and returns the standart I/O streams of the process in @code{StdIn} and @code{StdOut}. @code{Standard error} is connected to whichever the parent process had it connected to.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{directory_files/2 (pred)}}}
@temp
@end iftex
@pdindex directory_files/2 
@glindex directory_files/2 
@deffn PREDICATE directory_files/2:


@code{directory_files(Directory,FileList)}


@code{FileList} is the unordered list of entries (files, directories, etc.) in @code{Directory}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{mktemp/2 (pred)}}}
@temp
@end iftex
@pdindex mktemp/2 
@glindex mktemp/2 
@deffn PREDICATE mktemp/2:


@code{mktemp(Template,Filename)}


Returns a unique @code{Filename} based on @code{Template}: @code{Template} must be a valid file name with six trailing X, which are substituted to create a new file name.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_exists/1 (pred)}}}
@temp
@end iftex
@pdindex file_exists/1 
@glindex file_exists/1 
@deffn PREDICATE file_exists/1:


@code{file_exists(File)}


Succeeds if @code{File} (a file or directory) exists (and is accessible).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_exists/2 (pred)}}}
@temp
@end iftex
@pdindex file_exists/2 
@glindex file_exists/2 
@deffn PREDICATE file_exists/2:


@code{file_exists(File,Mode)}


@code{File} (a file or directory) exists and it is accessible with @code{Mode}, as in the Unix call @code{access(2)}. Typically, @code{Mode} is 4 for read permission, 2 for write permission and 1 for execute permission.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_property/2 (pred)}}}
@temp
@end iftex
@pdindex file_property/2 
@glindex file_property/2 
@deffn PREDICATE file_property/2:


@code{file_property(File,Property)}


@code{File} has the property @code{Property}. The possible properties are: 


@table @asis 


@item type(@code{Type}) 
@code{Type} is one of @code{regular}, @code{directory}, @code{symlink}, @code{fifo}, @code{socket} or @code{unknown}. 


@item linkto(@code{Linkto}) 
If @code{File} is a symbolic link, @code{Linkto} is the file pointed to by the link (and the other properties come from that file, not from the link itself). 


@item mod_time(@code{ModTime}) 
@code{ModTime} is the time of last modification (seconds since January, 1, 1970). 


@item mode(@code{Protection}) 
@code{Protection} is the protection mode. 


@item size(@code{Size}) 
@code{Size} is the size. 


@end table  

If @code{Property} is uninstantiated, the predicate will enumerate the properties on backtracking.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_properties/6 (pred)}}}
@temp
@end iftex
@pdindex file_properties/6 
@glindex file_properties/6 
@deffn PREDICATE file_properties/6:


@code{file_properties(Path,Type,Linkto,Time,Protection,Size)}


The file @code{Path} has the following properties: 


@itemize @bullet{} 


@item File type @code{Type} (one of @code{regular}, @code{directory}, @code{symlink}, @code{fifo}, @code{socket} or @code{unknown}). 


@item If @code{Path} is a symbolic link, @code{Linkto} is the file pointed to. All other properties come from the file pointed, not the link. @code{Linkto} is '' if @code{Path} is not a symbolic link. 


@item Time of last modification @code{Time} (seconds since January, 1, 1970). 


@item Protection mode @code{Protection}. 


@item Size in bytes @code{Size}. 


@end itemize  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{modif_time/2 (pred)}}}
@temp
@end iftex
@pdindex modif_time/2 
@glindex modif_time/2 
@deffn PREDICATE modif_time/2:


@code{modif_time(File,Time)}


The file @code{File} was last modified at @code{Time}, which is in seconds since January, 1, 1970. Fails if @code{File} does not exist.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{modif_time0/2 (pred)}}}
@temp
@end iftex
@pdindex modif_time0/2 
@glindex modif_time0/2 
@deffn PREDICATE modif_time0/2:


@code{modif_time0(File,Time)}


If @code{File} exists, @code{Time} is its latest modification time, as in 
@glindex modif_time/2
@code{modif_time/2}. Otherwise, if @code{File} does not exist, @code{Time} is zero.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fmode/2 (pred)}}}
@temp
@end iftex
@pdindex fmode/2 
@glindex fmode/2 
@deffn PREDICATE fmode/2:


@code{fmode(File,Mode)}


The file @code{File} has protection mode @code{Mode}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{chmod/2 (pred)}}}
@temp
@end iftex
@pdindex chmod/2 
@glindex chmod/2 
@deffn PREDICATE chmod/2:


@code{chmod(File,NewMode)}


Change the protection mode of file @code{File} to @code{NewMode}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{chmod/3 (pred)}}}
@temp
@end iftex
@pdindex chmod/3 
@glindex chmod/3 
@deffn PREDICATE chmod/3:


@code{chmod(File,OldMode,NewMode)}


The file @code{File} has protection mode @code{OldMode} and it is changed to @code{NewMode}.


@strong{Usage 2:} @code{chmod(File,OldMode,NewMode)}
@itemize @minus
@item @emph{Description:} Equivalent to fmode(@code{File},@code{OldMode}) 
@item @emph{The following properties should hold at call time:}


@code{File} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{OldMode} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{NewMode} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

The terms @code{OldMode} and @code{NewMode} are strictly identical.
@iftex
@hfill
@end iftex
 (@code{term_compare:== /2})
@item @emph{The following properties hold upon exit:}


@code{File} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{OldMode} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{NewMode} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{delete_file/1 (pred)}}}
@temp
@end iftex
@pdindex delete_file/1 
@glindex delete_file/1 
@deffn PREDICATE delete_file/1:


@code{delete_file(File)}


Delete the file @code{File}.

@end deffn
@sp 1


@c (component)


@node Prolog system internal predicates, Atom to Term Conversion, Operating system utilities, Top
@comment node-name, next,  previous,  up
@chapter Prolog system internal predicates
@liindex prolog_sys
@c -------------------------------------------------
@c WARNING: Do not edit this file (prolog_sys.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/prolog_sys.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Daniel Cabeza, Mats Carlsson.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#153 (2000/5/29, 10:24:35 CEST)

This module implements some miscellaneous predicates which provide access to some internal statistics, special properties of the predicates, etc.



@menu
* Usage and interface (prolog_sys)::  
* Documentation on exports (prolog_sys)::  
* Documentation on internals (prolog_sys)::  
* Known bugs and planned improvements (prolog_sys)::  
@end menu

@node Usage and interface (prolog_sys), Documentation on exports (prolog_sys), Prolog system internal predicates, Prolog system internal predicates
@comment node-name, next,  previous,  up
@section Usage and interface (@code{prolog_sys})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(prolog_sys)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex statistics/0
@code{statistics/0}, 
@glindex statistics/2
@code{statistics/2}, 
@glindex predicate_property/2
@code{predicate_property/2}, 
@glindex current_atom/1
@code{current_atom/1}, 
@glindex current_predicate/2
@code{current_predicate/2}, 
@glindex garbage_collect/0
@code{garbage_collect/0}, 
@glindex new_atom/1
@code{new_atom/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (prolog_sys), Documentation on internals (prolog_sys), Usage and interface (prolog_sys), Prolog system internal predicates
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{prolog_sys})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{statistics/0 (pred)}}}
@temp
@end iftex
@pdindex statistics/0 
@glindex statistics/0 
@deffn PREDICATE statistics/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Prints statistics about the system. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{statistics/2 (pred)}}}
@temp
@end iftex
@pdindex statistics/2 
@glindex statistics/2 
@deffn PREDICATE statistics/2:






@strong{Usage 1:} @code{statistics(Time_option,Time_result)}
@itemize @minus
@item @emph{Description:} Gather information about time (either process time or wall time) since last consult or since start of program. Results are returned in milliseconds. 
@item @emph{The following properties should hold at call time:}


Options to get information about execution time. @code{Time_option} must be one of @code{runtime}, @code{walltime}.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:time_option/1})

@code{Time_result} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


Options to get information about execution time. @code{Time_option} must be one of @code{runtime}, @code{walltime}.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:time_option/1})

@code{Time_result} is a two-element list of integers. The first integer is the time since the start of the execution; the second integer is the time since the previous consult to time.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:time_result/1})
@end itemize

@strong{Usage 2:} @code{statistics(Memory_option,Memory_result)}
@itemize @minus
@item @emph{Description:} Gather information about memory consumption. 
@item @emph{The following properties should hold at call time:}


Options to get information about memory usage.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:memory_option/1})

@code{Memory_result} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


Options to get information about memory usage.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:memory_option/1})

Result is a two-element list of integers. The first element is the space taken up by the option selected, measured in bytes; the second integer is zero for program space (which grows as necessary), and the amount of free space otherwise.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:memory_result/1})
@end itemize

@strong{Usage 3:} @code{statistics(Garbage_collection_option,Gc_result)}
@itemize @minus
@item @emph{Description:} Gather information about garbage collection. 
@item @emph{The following properties should hold at call time:}


Options to get information about garbage collection.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:garbage_collection_option/1})

@code{Gc_result} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


Options to get information about garbage collection.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:garbage_collection_option/1})

@code{Gc_result} is a tree-element list of integers, related to 
@glindex garbage collection
garbage collection and 
@glindex memory management
memory management. When @code{stack_shifts} is selected, the first one is the number of shifts (reallocations) of the local stack; the second is the number of shifts of the trail, and the third is the time spent in these shifts. When @code{garbage_collection} is selected, the numbers are, respectively, the number of garbage collections performed, the number of bytes freed, and the time spent in garbage collection.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:gc_result/1})
@end itemize

@strong{Usage 4:} @code{statistics(Symbol_option,Symbol_result)}
@itemize @minus
@item @emph{Description:} Gather information about number of symbols and predicates. 
@item @emph{The following properties should hold at call time:}


Option to get information about the number of symbols in the program.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:symbol_option/1})

@code{Symbol_result} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


Option to get information about the number of symbols in the program.
@iftex
@hfill
@end iftex
 (@code{prolog_sys:symbol_option/1})

@code{Symbol_result} is a two-element list of integers. The first one is the number of atom, functor, and predicate names in the symbol table. The second is the number of predicates known to be defined (although maybe without clauses).
@iftex
@hfill
@end iftex
 (@code{prolog_sys:symbol_result/1})
@end itemize

@strong{Usage 5:} @code{statistics(Option,?term)}
@itemize @minus
@item @emph{Description:} If @code{Option} is unbound, it is bound to the values on the other cases. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{predicate_property/2 (pred)}}}
@temp
@end iftex
@pdindex predicate_property/2 
@glindex predicate_property/2 
@deffn PREDICATE predicate_property/2:






@strong{Usage:} @code{predicate_property(Head,Property)}
@itemize @minus
@item @emph{Description:} The predicate with clause @code{Head} is @code{Property}. 
@item @emph{The following properties should hold at call time:}


@code{Head} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{Property} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{Head} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{Property} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_atom/1 (pred)}}}
@temp
@end iftex
@pdindex current_atom/1 
@glindex current_atom/1 
@deffn PREDICATE current_atom/1:






@strong{Usage:} @code{current_atom(Atom)}
@itemize @minus
@item @emph{Description:} Enumerates on backtracking all the existing atoms in the system. 
@item @emph{The following properties should hold at call time:}


@code{Atom} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties hold upon exit:}


@code{Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{current_predicate/2 (pred)}}}
@temp
@end iftex
@pdindex current_predicate/2 
@glindex current_predicate/2 
@deffn PREDICATE current_predicate/2:






@strong{Usage:} @code{current_predicate(?PredSpec,?Module)}
@itemize @minus
@item @emph{Description:} PredSpec exists in Module. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{garbage_collect/0 (pred)}}}
@temp
@end iftex
@pdindex garbage_collect/0 
@glindex garbage_collect/0 
@deffn PREDICATE garbage_collect/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Forces garbage collection when called. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{new_atom/1 (pred)}}}
@temp
@end iftex
@pdindex new_atom/1 
@glindex new_atom/1 
@deffn PREDICATE new_atom/1:






@strong{Usage:} @code{new_atom(Atom)}
@itemize @minus
@item @emph{Description:} Returns, on success, a new atom, not existing before in the system. The entry argument must be a variable. The idea behind this atom generation is to provide a fast source of identifiers for new objects, concurrent predicates, etc. on the fly. 
@item @emph{The following properties should hold at call time:}


@code{Atom} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties hold upon exit:}


@code{Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (prolog_sys), Known bugs and planned improvements (prolog_sys), Documentation on exports (prolog_sys), Prolog system internal predicates
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{prolog_sys})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{time_option/1 (regtype)}}}
@temp
@end iftex
@teindex time_option/1 
@glindex time_option/1 
@deffn REGTYPE time_option/1:






@strong{Usage:} @code{time_option(M)}
@itemize @minus
@item @emph{Description:} Options to get information about execution time. @code{M} must be one of @code{runtime}, @code{walltime}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{memory_option/1 (regtype)}}}
@temp
@end iftex
@teindex memory_option/1 
@glindex memory_option/1 
@deffn REGTYPE memory_option/1:






@strong{Usage:} @code{memory_option(M)}
@itemize @minus
@item @emph{Description:} Options to get information about memory usage. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{garbage_collection_option/1 (regtype)}}}
@temp
@end iftex
@teindex garbage_collection_option/1 
@glindex garbage_collection_option/1 
@deffn REGTYPE garbage_collection_option/1:






@strong{Usage:} @code{garbage_collection_option(M)}
@itemize @minus
@item @emph{Description:} Options to get information about garbage collection. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{symbol_option/1 (regtype)}}}
@temp
@end iftex
@teindex symbol_option/1 
@glindex symbol_option/1 
@deffn REGTYPE symbol_option/1:






@strong{Usage:} @code{symbol_option(M)}
@itemize @minus
@item @emph{Description:} Option to get information about the number of symbols in the program. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{time_result/1 (regtype)}}}
@temp
@end iftex
@teindex time_result/1 
@glindex time_result/1 
@deffn REGTYPE time_result/1:






@strong{Usage:} @code{time_result(Result)}
@itemize @minus
@item @emph{Description:} @code{Result} is a two-element list of integers. The first integer is the time since the start of the execution; the second integer is the time since the previous consult to time. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{memory_result/1 (regtype)}}}
@temp
@end iftex
@teindex memory_result/1 
@glindex memory_result/1 
@deffn REGTYPE memory_result/1:






@strong{Usage:} @code{memory_result(Result)}
@itemize @minus
@item @emph{Description:} Result is a two-element list of integers. The first element is the space taken up by the option selected, measured in bytes; the second integer is zero for program space (which grows as necessary), and the amount of free space otherwise. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{gc_result/1 (regtype)}}}
@temp
@end iftex
@teindex gc_result/1 
@glindex gc_result/1 
@deffn REGTYPE gc_result/1:






@strong{Usage:} @code{gc_result(Result)}
@itemize @minus
@item @emph{Description:} @code{Result} is a tree-element list of integers, related to 
@glindex garbage collection
garbage collection and 
@glindex memory management
memory management. When @code{stack_shifts} is selected, the first one is the number of shifts (reallocations) of the local stack; the second is the number of shifts of the trail, and the third is the time spent in these shifts. When @code{garbage_collection} is selected, the numbers are, respectively, the number of garbage collections performed, the number of bytes freed, and the time spent in garbage collection. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{symbol_result/1 (regtype)}}}
@temp
@end iftex
@teindex symbol_result/1 
@glindex symbol_result/1 
@deffn REGTYPE symbol_result/1:






@strong{Usage:} @code{symbol_result(Result)}
@itemize @minus
@item @emph{Description:} @code{Result} is a two-element list of integers. The first one is the number of atom, functor, and predicate names in the symbol table. The second is the number of predicates known to be defined (although maybe without clauses). 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (prolog_sys),  , Documentation on internals (prolog_sys), Prolog system internal predicates
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{prolog_sys})

@itemize @bullet{}

@item
The space used by the process is not measured here: process data, code, and stack also take up memory. The memory reported for atoms is not what is actually used, but the space used up by the hash table (which is enlarged as needed).
@end itemize

@c (component)


@node Atom to Term Conversion, ctrlcclean (library), Prolog system internal predicates, Top
@comment node-name, next,  previous,  up
@chapter Atom to Term Conversion
@liindex atom2term
@c -------------------------------------------------
@c WARNING: Do not edit this file (atom2term.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/atom2term.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno, Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#78 (1999/5/3, 19:19:27 MEST)





@menu
* Usage and interface (atom2term)::  
* Documentation on exports (atom2term)::  
@end menu

@node Usage and interface (atom2term), Documentation on exports (atom2term), Atom to Term Conversion, Atom to Term Conversion
@comment node-name, next,  previous,  up
@section Usage and interface (@code{atom2term})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(atom2term)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex atom2term/2
@code{atom2term/2}, 
@glindex string2term/2
@code{string2term/2}, 
@glindex parse_term/3
@code{parse_term/3}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (atom2term),  , Usage and interface (atom2term), Atom to Term Conversion
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{atom2term})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom2term/2 (pred)}}}
@temp
@end iftex
@pdindex atom2term/2 
@glindex atom2term/2 
@deffn PREDICATE atom2term/2:






@strong{Usage:} @code{atom2term(+Atom,-Term)}
@itemize @minus
@item @emph{Description:} Convert an atom into a term. @code{Atom} is an atom, but must have term syntax. @code{Term} is a term resulting from parsing @code{Atom} char by char. Note: this is just a simple version written for parsing daVinci's messages. There should be a call to the standard reader to do this! 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{string2term/2 (pred)}}}
@temp
@end iftex
@pdindex string2term/2 
@glindex string2term/2 
@deffn PREDICATE string2term/2:






@strong{Usage:} @code{string2term(+String,-Term)}
@itemize @minus
@item @emph{Description:} Same as 
@glindex atom2term/2
@code{atom2term/2} but first argument is a string (containing a term). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{parse_term/3 (pred)}}}
@temp
@end iftex
@pdindex parse_term/3 
@glindex parse_term/3 
@deffn PREDICATE parse_term/3:





@end deffn
@sp 1


@c (component)


@node ctrlcclean (library), errhandle (library), Atom to Term Conversion, Top
@comment node-name, next,  previous,  up
@chapter ctrlcclean (library)
@liindex ctrlcclean
@c -------------------------------------------------
@c WARNING: Do not edit this file (ctrlcclean.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/ctrlcclean.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (ctrlcclean)::  
* Documentation on exports (ctrlcclean)::  
@end menu

@node Usage and interface (ctrlcclean), Documentation on exports (ctrlcclean), ctrlcclean (library), ctrlcclean (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{ctrlcclean})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(ctrlcclean)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex ctrlc_clean/1
@code{ctrlc_clean/1}, 
@glindex delete_on_ctrlc/2
@code{delete_on_ctrlc/2}, 
@glindex ctrlcclean/0
@code{ctrlcclean/0}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex system
@code{system}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (ctrlcclean),  , Usage and interface (ctrlcclean), ctrlcclean (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{ctrlcclean})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ctrlc_clean/1 (pred)}}}
@temp
@end iftex
@pdindex ctrlc_clean/1 
@glindex ctrlc_clean/1 
@deffn PREDICATE ctrlc_clean/1:



No further documentation available for this predicate.


@emph{Meta-predicate} with arguments: @code{ctrlc_clean(goal)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{delete_on_ctrlc/2 (pred)}}}
@temp
@end iftex
@pdindex delete_on_ctrlc/2 
@glindex delete_on_ctrlc/2 
@deffn PREDICATE delete_on_ctrlc/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ctrlcclean/0 (pred)}}}
@temp
@end iftex
@pdindex ctrlcclean/0 
@glindex ctrlcclean/0 
@deffn PREDICATE ctrlcclean/0:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node errhandle (library), Fast Reading and Writing of Terms, ctrlcclean (library), Top
@comment node-name, next,  previous,  up
@chapter errhandle (library)
@liindex errhandle
@c -------------------------------------------------
@c WARNING: Do not edit this file (errhandle.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/errhandle.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (errhandle)::  
* Documentation on exports (errhandle)::  
@end menu

@node Usage and interface (errhandle), Documentation on exports (errhandle), errhandle (library), errhandle (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{errhandle})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(errhandle)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex error_protect/1
@code{error_protect/1}, 
@glindex handle_error/2
@code{handle_error/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (errhandle),  , Usage and interface (errhandle), errhandle (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{errhandle})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error_protect/1 (pred)}}}
@temp
@end iftex
@pdindex error_protect/1 
@glindex error_protect/1 
@deffn PREDICATE error_protect/1:



No further documentation available for this predicate.


@emph{Meta-predicate} with arguments: @code{error_protect(goal)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{handle_error/2 (pred)}}}
@temp
@end iftex
@pdindex handle_error/2 
@glindex handle_error/2 
@deffn PREDICATE handle_error/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Fast Reading and Writing of Terms, File name manipulation, errhandle (library), Top
@comment node-name, next,  previous,  up
@chapter Fast Reading and Writing of Terms
@liindex fastrw
@c -------------------------------------------------
@c WARNING: Do not edit this file (fastrw.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/fastrw.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Oscar Portela Arjona.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#81 (2000/3/23, 16:37:17 CET)

This library provides predicates to support reading / writing of terms on a format designed to be handled on read faster than standart representation.



@menu
* Usage and interface (fastrw)::  
* Documentation on exports (fastrw)::  
@end menu

@node Usage and interface (fastrw), Documentation on exports (fastrw), Fast Reading and Writing of Terms, Fast Reading and Writing of Terms
@comment node-name, next,  previous,  up
@section Usage and interface (@code{fastrw})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(fastrw)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex fast_read/1
@code{fast_read/1}, 
@glindex fast_write/1
@code{fast_write/1}, 
@glindex fast_write_to_string/3
@code{fast_write_to_string/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex dict
@code{dict}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (fastrw),  , Usage and interface (fastrw), Fast Reading and Writing of Terms
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{fastrw})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fast_read/1 (pred)}}}
@temp
@end iftex
@pdindex fast_read/1 
@glindex fast_read/1 
@deffn PREDICATE fast_read/1:


@code{fast_read(Term)}


The next term is read from current standart input and is unified with @code{Term}. The syntax of the term must agree with fast_read / fast_write format. If the end of the input has been reached, @code{Term} is unified with the term 'end_of_file'. Further calls to 
@glindex fast_read/1
@code{fast_read/1} will then cause an error.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fast_write/1 (pred)}}}
@temp
@end iftex
@pdindex fast_write/1 
@glindex fast_write/1 
@deffn PREDICATE fast_write/1:


@code{fast_write(Term)}


Output @code{Term} in a way that 
@glindex fast_read/1
@code{fast_read/1} will be able to read it back.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fast_write_to_string/3 (pred)}}}
@temp
@end iftex
@pdindex fast_write_to_string/3 
@glindex fast_write_to_string/3 
@deffn PREDICATE fast_write_to_string/3:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node File name manipulation, file_utils (library), Fast Reading and Writing of Terms, Top
@comment node-name, next,  previous,  up
@chapter File name manipulation
@liindex filenames
@c -------------------------------------------------
@c WARNING: Do not edit this file (filenames.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/filenames.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#51 (1999/9/9, 16:28:44 MEST)

This library provides some small utilities to handle file name syntax.



@menu
* Usage and interface (filenames)::  
* Documentation on exports (filenames)::  
@end menu

@node Usage and interface (filenames), Documentation on exports (filenames), File name manipulation, File name manipulation
@comment node-name, next,  previous,  up
@section Usage and interface (@code{filenames})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(filenames)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex no_path_file_name/2
@code{no_path_file_name/2}, 
@glindex file_name_extension/3
@code{file_name_extension/3}, 
@glindex basename/2
@code{basename/2}, 
@glindex extension/2
@code{extension/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (filenames),  , Usage and interface (filenames), File name manipulation
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{filenames})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{no_path_file_name/2 (pred)}}}
@temp
@end iftex
@pdindex no_path_file_name/2 
@glindex no_path_file_name/2 
@deffn PREDICATE no_path_file_name/2:



This predicate will extract the last item (usually the file name) from a given path. 

The first argument must be instantiated to a string or atom. Whenever the first argument is an atom, the second argument will be an atom. Whenever the first argument is a string, the second argument will be a string. 

This predicate will fail under any of the following conditions: 
@itemize @bullet{} 
@item First argument is not an atom, nor a string. 
@item Second argument is not the last given path item (given path is the first argument). 
@end itemize  

Those are the most usual usages of no_path_file_name/2: 
@smallexample 
?- no_path_file_name_("/home/nexusV/somefile.txt",K).

K = "somefile.txt" ? 

yes
?- no_path_file_name('/home/nexusV/somefile.txt',K).

K = 'somefile.txt' ? 

yes
?- 
@end smallexample  



@strong{Usage:} @code{no_path_file_name(Path,FileName)}
@itemize @minus
@item @emph{Description:} @code{FileName} is the file corresponding to the given @code{Path}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Path} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})

@code{FileName} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_name_extension/3 (pred)}}}
@temp
@end iftex
@pdindex file_name_extension/3 
@glindex file_name_extension/3 
@deffn PREDICATE file_name_extension/3:



This predicate may be used in two ways: 
@itemize @bullet{} 


@item To create a file name from its components: name and extension. For instance: 


@smallexample 
?- file_name_extension(File,mywork,'.txt').

File = 'mywork.txt' ? 

yes
?- 
@end smallexample  


@item To split a file name into its name and extension. For Instance: 
@smallexample 
?- file_name_extension('mywork.txt',A,B).

A = mywork,
B = '.txt' ? 

yes
?- 
@end smallexample  
@end itemize  

Any other usage of file_name_extension/3 will cause the predicate to fail. Notice that valid arguments are accepted both as atoms or strings. 


@strong{Usage:} @code{file_name_extension(FileName,BaseName,Extension)}
@itemize @minus
@item @emph{Description:} Splits a @code{FileName} into its @code{BaseName} and @code{Extension}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{FileName} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})

@code{BaseName} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})

@code{Extension} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{basename/2 (pred)}}}
@temp
@end iftex
@pdindex basename/2 
@glindex basename/2 
@deffn PREDICATE basename/2:


@code{basename(FileName,BaseName)}


@code{BaseName} is @code{FileName} without extension. Equivalent to @code{file_name_extension(FileName,BaseName,_)}. Useful to extract the base name of a file using functional syntax.


@strong{Usage:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{FileName} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})

@code{BaseName} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{extension/2 (pred)}}}
@temp
@end iftex
@pdindex extension/2 
@glindex extension/2 
@deffn PREDICATE extension/2:


@code{extension(FileName,Extension)}


@code{Extension} is the extension (suffix) of @code{FileName}. Equivalent to @code{file_name_extension(FileName,_,Extension)}. Useful to extract the extension of a file using functional syntax.


@strong{Usage:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{FileName} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})

@code{Extension} is an atom or a string
@iftex
@hfill
@end iftex
 (@code{filenames:atom_or_str/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node file_utils (library), terms (library), File name manipulation, Top
@comment node-name, next,  previous,  up
@chapter file_utils (library)
@liindex file_utils
@c -------------------------------------------------
@c WARNING: Do not edit this file (file_utils.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/file_utils.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#55 (2000/2/11, 21:19:43 CET)





@menu
* Usage and interface (file_utils)::  
* Documentation on exports (file_utils)::  
@end menu

@node Usage and interface (file_utils), Documentation on exports (file_utils), file_utils (library), file_utils (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{file_utils})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(file_utils)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex file_terms/2
@code{file_terms/2}, 
@glindex copy_stdout/1
@code{copy_stdout/1}, 
@glindex file_to_string/2
@code{file_to_string/2}, 
@glindex stream_to_string/2
@code{stream_to_string/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex read
@code{read}, 
@glindex streams
@code{streams}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (file_utils),  , Usage and interface (file_utils), file_utils (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{file_utils})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_terms/2 (pred)}}}
@temp
@end iftex
@pdindex file_terms/2 
@glindex file_terms/2 
@deffn PREDICATE file_terms/2:






@strong{Usage 1:} @code{file_terms(@@File,?Terms)}
@itemize @minus
@item @emph{Description:} Transform a file @code{File} to/from a list of terms @code{Terms}. 
@item @emph{The following properties should hold upon exit:}


@code{@@File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{?Terms} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize

@strong{Usage 2:} @code{file_terms(File,Terms)}
@itemize @minus
@item @emph{Description:} Unifies @code{Terms} with the list of all terms in @code{File}. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Terms} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Terms} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize

@strong{Usage 3:} @code{file_terms(File,Terms)}
@itemize @minus
@item @emph{Description:} Writes the terms in list @code{Terms} (including the ending '.') onto file @code{File}. 
@item @emph{The following properties should hold at call time:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Terms} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@item @emph{The following properties should hold upon exit:}


@code{File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Terms} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{copy_stdout/1 (pred)}}}
@temp
@end iftex
@pdindex copy_stdout/1 
@glindex copy_stdout/1 
@deffn PREDICATE copy_stdout/1:






@strong{Usage:} @code{copy_stdout(+File)}
@itemize @minus
@item @emph{Description:} Copies file @code{File} to standard output. 
@item @emph{The following properties should hold upon exit:}


@code{+File} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{file_to_string/2 (pred)}}}
@temp
@end iftex
@pdindex file_to_string/2 
@glindex file_to_string/2 
@deffn PREDICATE file_to_string/2:






@strong{Usage:} @code{file_to_string(+FileName,-String)}
@itemize @minus
@item @emph{Description:} Reads all the characters from the file @code{FileName} and returns them in @code{String}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+FileName} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{-String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stream_to_string/2 (pred)}}}
@temp
@end iftex
@pdindex stream_to_string/2 
@glindex stream_to_string/2 
@deffn PREDICATE stream_to_string/2:






@strong{Usage:} @code{stream_to_string(+Stream,-String)}
@itemize @minus
@item @emph{Description:} Reads all the characters from @code{Stream} and returns them in @code{String}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{-String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node terms (library), Printing status and error messages, file_utils (library), Top
@comment node-name, next,  previous,  up
@chapter terms (library)
@liindex terms
@c -------------------------------------------------
@c WARNING: Do not edit this file (terms.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/terms.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#124 (1999/11/27, 4:4:5 MET)





@menu
* Usage and interface (terms)::	 
* Documentation on exports (terms)::  
@end menu

@node Usage and interface (terms), Documentation on exports (terms), terms (library), terms (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{terms})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(terms)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex copy_args/3
@code{copy_args/3}, 
@glindex arg/2
@code{arg/2}, 
@glindex atom_concat/2
@code{atom_concat/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (terms),  , Usage and interface (terms), terms (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{terms})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{copy_args/3 (pred)}}}
@temp
@end iftex
@pdindex copy_args/3 
@glindex copy_args/3 
@deffn PREDICATE copy_args/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{arg/2 (pred)}}}
@temp
@end iftex
@pdindex arg/2 
@glindex arg/2 
@deffn PREDICATE arg/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom_concat/2 (pred)}}}
@temp
@end iftex
@pdindex atom_concat/2 
@glindex atom_concat/2 
@deffn PREDICATE atom_concat/2:


@code{atom_concat(Atms,Atm)}


@code{Atm} is the atom resulting from concatenating all atoms in the list @code{Atms} in the order in which they appear.

@end deffn
@sp 1


@c (component)


@node Printing status and error messages, A simple pretty-printer for Ciao programs, terms (library), Top
@comment node-name, next,  previous,  up
@chapter Printing status and error messages
@liindex messages
@c -------------------------------------------------
@c WARNING: Do not edit this file (messages.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/messages.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#108 (1999/11/18, 13:48:3 MET)

This is a very simple library for printing status and error messages to the console.



@menu
* Usage and interface (messages)::  
* Documentation on exports (messages)::	 
* Documentation on multifiles (messages)::  
* Known bugs and planned improvements (messages)::  
@end menu

@node Usage and interface (messages), Documentation on exports (messages), Printing status and error messages, Printing status and error messages
@comment node-name, next,  previous,  up
@section Usage and interface (@code{messages})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(messages)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex error_message/1
@code{error_message/1}, 
@glindex error_message/2
@code{error_message/2}, 
@glindex error_message/3
@code{error_message/3}, 
@glindex warning_message/1
@code{warning_message/1}, 
@glindex warning_message/2
@code{warning_message/2}, 
@glindex warning_message/3
@code{warning_message/3}, 
@glindex note_message/1
@code{note_message/1}, 
@glindex note_message/2
@code{note_message/2}, 
@glindex note_message/3
@code{note_message/3}, 
@glindex simple_message/1
@code{simple_message/1}, 
@glindex simple_message/2
@code{simple_message/2}, 
@glindex optional_message/2
@code{optional_message/2}, 
@glindex optional_message/3
@code{optional_message/3}, 
@glindex debug_message/1
@code{debug_message/1}, 
@glindex debug_message/2
@code{debug_message/2}, 
@glindex debug_goal/2
@code{debug_goal/2}, 
@glindex debug_goal/3
@code{debug_goal/3}.


@item @emph{Multifiles:}

@glindex callme/2
@code{callme/2}, 
@glindex issue_debug_messages/1
@code{issue_debug_messages/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/meta_props
@code{assertions/meta_props}, 
@glindex format
@code{format}, 
@glindex lists
@code{lists}, 
@glindex filenames
@code{filenames}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (messages), Documentation on multifiles (messages), Usage and interface (messages), Printing status and error messages
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{messages})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error_message/1 (pred)}}}
@temp
@end iftex
@pdindex error_message/1 
@glindex error_message/1 
@deffn PREDICATE error_message/1:






@emph{Meta-predicate} with arguments: @code{error_message(addmodule)}.


@strong{Usage:} @code{error_message(Text)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as an ERROR message. 
@item @emph{The following properties should hold at call time:}


@code{Text} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error_message/2 (pred)}}}
@temp
@end iftex
@pdindex error_message/2 
@glindex error_message/2 
@deffn PREDICATE error_message/2:






@emph{Meta-predicate} with arguments: @code{error_message(?,addmodule)}.


@strong{Usage:} @code{error_message(Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as an ERROR message, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error_message/3 (pred)}}}
@temp
@end iftex
@pdindex error_message/3 
@glindex error_message/3 
@deffn PREDICATE error_message/3:






@emph{Meta-predicate} with arguments: @code{error_message(?,?,addmodule)}.


@strong{Usage:} @code{error_message(Lc,Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as an ERROR message, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}, and reporting error location @code{Lc} (file and line numbers). 
@item @emph{The following properties should hold at call time:}


@code{Lc} is of type @code{^loc(atm,int,int)}.
@iftex
@hfill
@end iftex
 (@code{meta_props:regtype/2})

@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{warning_message/1 (pred)}}}
@temp
@end iftex
@pdindex warning_message/1 
@glindex warning_message/1 
@deffn PREDICATE warning_message/1:






@emph{Meta-predicate} with arguments: @code{warning_message(addmodule)}.


@strong{Usage:} @code{warning_message(Text)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a WARNING message. 
@item @emph{The following properties should hold at call time:}


@code{Text} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{warning_message/2 (pred)}}}
@temp
@end iftex
@pdindex warning_message/2 
@glindex warning_message/2 
@deffn PREDICATE warning_message/2:






@emph{Meta-predicate} with arguments: @code{warning_message(?,addmodule)}.


@strong{Usage:} @code{warning_message(Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a WARNING message, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{warning_message/3 (pred)}}}
@temp
@end iftex
@pdindex warning_message/3 
@glindex warning_message/3 
@deffn PREDICATE warning_message/3:






@emph{Meta-predicate} with arguments: @code{warning_message(?,?,addmodule)}.


@strong{Usage:} @code{warning_message(Lc,Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a WARNING message, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}, and reporting error location @code{Lc} (file and line numbers). 
@item @emph{The following properties should hold at call time:}


@code{Lc} is of type @code{^loc(atm,int,int)}.
@iftex
@hfill
@end iftex
 (@code{meta_props:regtype/2})

@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{note_message/1 (pred)}}}
@temp
@end iftex
@pdindex note_message/1 
@glindex note_message/1 
@deffn PREDICATE note_message/1:






@emph{Meta-predicate} with arguments: @code{note_message(addmodule)}.


@strong{Usage:} @code{note_message(Text)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a NOTE. 
@item @emph{The following properties should hold at call time:}


@code{Text} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{note_message/2 (pred)}}}
@temp
@end iftex
@pdindex note_message/2 
@glindex note_message/2 
@deffn PREDICATE note_message/2:






@emph{Meta-predicate} with arguments: @code{note_message(?,addmodule)}.


@strong{Usage:} @code{note_message(Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a NOTE, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{note_message/3 (pred)}}}
@temp
@end iftex
@pdindex note_message/3 
@glindex note_message/3 
@deffn PREDICATE note_message/3:






@emph{Meta-predicate} with arguments: @code{note_message(?,?,addmodule)}.


@strong{Usage:} @code{note_message(Lc,Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a NOTE, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}, and reporting error location @code{Lc} (file and line numbers). 
@item @emph{The following properties should hold at call time:}


@code{Lc} is of type @code{^loc(atm,int,int)}.
@iftex
@hfill
@end iftex
 (@code{meta_props:regtype/2})

@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{simple_message/1 (pred)}}}
@temp
@end iftex
@pdindex simple_message/1 
@glindex simple_message/1 
@deffn PREDICATE simple_message/1:






@strong{Usage:} @code{simple_message(Text)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed. 
@item @emph{The following properties should hold at call time:}


@code{Text} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{simple_message/2 (pred)}}}
@temp
@end iftex
@pdindex simple_message/2 
@glindex simple_message/2 
@deffn PREDICATE simple_message/2:






@strong{Usage:} @code{simple_message(Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a message, using the arguments in @code{ArgList}. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{optional_message/2 (pred)}}}
@temp
@end iftex
@pdindex optional_message/2 
@glindex optional_message/2 
@deffn PREDICATE optional_message/2:






@strong{Usage:} @code{optional_message(Text,Opts)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a message, but only if the atom @code{-v} is a member of @code{Opts}. These predicates are meant to be used for optional messages, which are only to be printed when @emph{verbose} output is requested explicitly. 
@item @emph{The following properties should hold at call time:}


@code{Text} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})

@code{Opts} is a list of @code{atm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{optional_message/3 (pred)}}}
@temp
@end iftex
@pdindex optional_message/3 
@glindex optional_message/3 
@deffn PREDICATE optional_message/3:






@strong{Usage:} @code{optional_message(Text,ArgList,Opts)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a message, using the arguments in @code{ArgList}, but only if the atom @code{-v} is a member of @code{Opts}. These predicates are meant to be used for optional messages, which are only to be printed when @emph{verbose} output is requested explicitly. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{Opts} is a list of @code{atm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug_message/1 (pred)}}}
@temp
@end iftex
@pdindex debug_message/1 
@glindex debug_message/1 
@deffn PREDICATE debug_message/1:






@emph{Meta-predicate} with arguments: @code{debug_message(addmodule)}.


@strong{Usage:} @code{debug_message(Text)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a debugging message. These messages are turned @code{on} by defining a fact of 
@glindex issue_debug_messages/1
@code{issue_debug_messages/1} with the module name as argument. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug_message/2 (pred)}}}
@temp
@end iftex
@pdindex debug_message/2 
@glindex debug_message/2 
@deffn PREDICATE debug_message/2:






@emph{Meta-predicate} with arguments: @code{debug_message(?,addmodule)}.


@strong{Usage:} @code{debug_message(Text,ArgList)}
@itemize @minus
@item @emph{Description:} The text provided in @code{Text} is printed as a debugging message, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}. These messages are turned @code{on} by defining a fact of 
@glindex issue_debug_messages/1
@code{issue_debug_messages/1} which the module name as argument. 
@item @emph{The following properties should hold at call time:}


@code{Text} is an atom or string describing how the arguments should be formatted. If it is an atom it will be converted into a string with @code{name/2}.
@iftex
@hfill
@end iftex
 (@code{format:format_control/1})

@code{ArgList} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug_goal/2 (pred)}}}
@temp
@end iftex
@pdindex debug_goal/2 
@glindex debug_goal/2 
@deffn PREDICATE debug_goal/2:






@emph{Meta-predicate} with arguments: @code{debug_goal(goal,addmodule)}.


@strong{Usage:} @code{debug_goal(Goal,Text)}
@itemize @minus
@item @emph{Description:} @code{Goal} is called. The text provided in @code{Text} is then printed as a debugging message. The whole process (including running @code{Goal}) is turned @code{on} by defining a fact of 
@glindex issue_debug_messages/1
@code{issue_debug_messages/1} with the module name as argument. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{debug_goal/3 (pred)}}}
@temp
@end iftex
@pdindex debug_goal/3 
@glindex debug_goal/3 
@deffn PREDICATE debug_goal/3:






@emph{Meta-predicate} with arguments: @code{debug_goal(goal,?,addmodule)}.


@strong{Usage:} @code{debug_goal(Goal,Text,ArgList)}
@itemize @minus
@item @emph{Description:} @code{Goal} is called. The text provided in @code{Text} is then printed as a debugging message, using the arguments in @code{ArgList} to interpret any variable-related formatting commands embedded in @code{Text}. Note that the variables in @code{ArgList} can be computed by @code{Goal}. The whole process (including running @code{Goal}) is turned @code{on} by defining a fact of 
@glindex issue_debug_messages/1
@code{issue_debug_messages/1} with the module name as argument. 
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (messages), Known bugs and planned improvements (messages), Documentation on exports (messages), Printing status and error messages
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{messages})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{callme/2 (pred)}}}
@temp
@end iftex
@pdindex callme/2 
@glindex callme/2 
@deffn PREDICATE callme/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{issue_debug_messages/1 (pred)}}}
@temp
@end iftex
@pdindex issue_debug_messages/1 
@glindex issue_debug_messages/1 
@deffn PREDICATE issue_debug_messages/1:






The predicate is @emph{multifile}.


The predicate is of type @emph{data}.


@strong{Usage:} @code{issue_debug_messages(Module)}
@itemize @minus
@item @emph{Description:} Printing of debugging messages is enabled for module @code{Module}. 
@item @emph{The following properties should hold upon exit:}


@code{Module} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (messages),  , Documentation on multifiles (messages), Printing status and error messages
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{messages})

@itemize @bullet{}

@item
Debug message switching should really be done with an expansion, for performance.
@end itemize

@c (component)


@node A simple pretty-printer for Ciao programs, Pretty-printing assertions, Printing status and error messages, Top
@comment node-name, next,  previous,  up
@chapter A simple pretty-printer for Ciao programs
@liindex pretty_print
@c -------------------------------------------------
@c WARNING: Do not edit this file (pretty_print.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/pretty_print.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#100 (1999/5/26, 12:36:46 MEST)

This library module writes out to standard output a clause or a list of clauses.



@menu
* Usage and interface (pretty_print)::	
* Documentation on exports (pretty_print)::  
* Documentation on internals (pretty_print)::  
@end menu

@node Usage and interface (pretty_print), Documentation on exports (pretty_print), A simple pretty-printer for Ciao programs, A simple pretty-printer for Ciao programs
@comment node-name, next,  previous,  up
@section Usage and interface (@code{pretty_print})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(pretty_print)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex pretty_print/2
@code{pretty_print/2}, 
@glindex pretty_print/3
@code{pretty_print/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex vndict
@code{vndict}, 
@glindex write
@code{write}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (pretty_print), Documentation on internals (pretty_print), Usage and interface (pretty_print), A simple pretty-printer for Ciao programs
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{pretty_print})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pretty_print/2 (pred)}}}
@temp
@end iftex
@pdindex pretty_print/2 
@glindex pretty_print/2 
@deffn PREDICATE pretty_print/2:






@strong{Usage:} @code{pretty_print(Cls,Flags)}
@itemize @minus
@item @emph{Description:} Prints each clause in the list @code{Cls} after numbering its variables. 
@item @emph{The following properties should hold at call time:}


@code{pretty_print:clauses(Cls)}
@iftex
@hfill
@end iftex
 (@code{pretty_print:clauses/1})

@code{Flags} is a list of @code{flag}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pretty_print/3 (pred)}}}
@temp
@end iftex
@pdindex pretty_print/3 
@glindex pretty_print/3 
@deffn PREDICATE pretty_print/3:






@strong{Usage:} @code{pretty_print(Cls,Flags,Ds)}
@itemize @minus
@item @emph{Description:} Prints each clause in the list @code{Cls} after using the corresponding variable names dictionary in @code{Ds} to name its variables. 
@item @emph{The following properties should hold at call time:}


@code{pretty_print:clauses(Cls)}
@iftex
@hfill
@end iftex
 (@code{pretty_print:clauses/1})

@code{Flags} is a list of @code{flag}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{Ds} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamedict/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (pretty_print),  , Documentation on exports (pretty_print), A simple pretty-printer for Ciao programs
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{pretty_print})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{clauses/1 (regtype)}}}
@temp
@end iftex
@teindex clauses/1 
@glindex clauses/1 
@deffn REGTYPE clauses/1:



A regular type, defined as follows:
@smallexample 
@smallexample 
clauses([]).
clauses([_1|_2]) :-
        clause(_1),
        clauses(_2).
clauses(_1) :-
        clause(_1).
@end smallexample 
@end smallexample 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{clause/1 (regtype)}}}
@temp
@end iftex
@teindex clause/1 
@glindex clause/1 
@deffn REGTYPE clause/1:



A regular type, defined as follows:
@smallexample 
@smallexample 
clause(_1) :-
        clterm(_1).
clause((_1,_2)) :-
        clterm(_1),
        term(_2).
@end smallexample 
@end smallexample 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{clterm/1 (regtype)}}}
@temp
@end iftex
@teindex clterm/1 
@glindex clterm/1 
@deffn REGTYPE clterm/1:



A regular type, defined as follows:
@smallexample 
@smallexample 
clterm(clause(_1,_2)) :-
        callable(_1),
        body(_2).
clterm(directive(_1)) :-
        body(_1).
clterm((_1:-_2)) :-
        callable(_1),
        body(_2).
clterm(_1) :-
        callable(_1).
@end smallexample 
@end smallexample 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{body/1 (regtype)}}}
@temp
@end iftex
@teindex body/1 
@glindex body/1 
@deffn REGTYPE body/1:



A well formed body, including cge expressions and &-concurrent expressions. The atomic goals may or may not have a key in the form @code{^(goal:any)}, and may or may not be module qualified, but if they are it has to be in the form @code{^(^(moddesc:goal):any)}.


@strong{Usage:} @code{body(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a printable body. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{flag/1 (regtype)}}}
@temp
@end iftex
@teindex flag/1 
@glindex flag/1 
@deffn REGTYPE flag/1:



A keyword @code{ask/1} flags whether to output @emph{asks} or @emph{whens} and @code{nl/1} whether to separate clauses with a blank line or not.


@strong{Usage:} @code{flag(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a flag for the pretty-printer. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Pretty-printing assertions, The Ciao library browser, A simple pretty-printer for Ciao programs, Top
@comment node-name, next,  previous,  up
@chapter Pretty-printing assertions
@liindex assrt_write
@c -------------------------------------------------
@c WARNING: Do not edit this file (assrt_write.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/assertions/assrt_write.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno Carrillo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#2 (1999/11/29, 18:2:53 MET)

This module defines some predicates which are useful for writing assertions in a readable form.



@menu
* Usage and interface (assrt_write)::  
* Documentation on exports (assrt_write)::  
@end menu

@node Usage and interface (assrt_write), Documentation on exports (assrt_write), Pretty-printing assertions, Pretty-printing assertions
@comment node-name, next,  previous,  up
@section Usage and interface (@code{assrt_write})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(assrt_write)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex write_assertion/6
@code{write_assertion/6}, 
@glindex write_assertion_as_comment/6
@code{write_assertion_as_comment/6}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex format
@code{format}, 
@glindex assertions/assrt_lib
@code{assertions/assrt_lib}, 
@glindex messages
@code{messages}, 
@glindex assertions/assertions_props
@code{assertions/assertions_props}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (assrt_write),  , Usage and interface (assrt_write), Pretty-printing assertions
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{assrt_write})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_assertion/6 (pred)}}}
@temp
@end iftex
@pdindex write_assertion/6 
@glindex write_assertion/6 
@deffn PREDICATE write_assertion/6:






@strong{Usage:} @code{write_assertion(Goal,Status,Type,Body,Dict,Flag)}
@itemize @minus
@item @emph{Description:} Writes the (normalized) assertion to current output. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Status} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{Type} is an admissible kind of assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_type/1})

@code{Body} is a normalized assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:nabody/1})

@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{assertions_props:dictionary/1})

@code{Flag} is @code{status} or @code{nostatus}.
@iftex
@hfill
@end iftex
 (@code{assrt_write:status_flag/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_assertion_as_comment/6 (pred)}}}
@temp
@end iftex
@pdindex write_assertion_as_comment/6 
@glindex write_assertion_as_comment/6 
@deffn PREDICATE write_assertion_as_comment/6:






@strong{Usage:} @code{write_assertion_as_comment(Goal,Status,Type,Body,Dict,Flag)}
@itemize @minus
@item @emph{Description:} Writes the (normalized) assertion to current output as a Prolog comment. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Status} is an acceptable status for an assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_status/1})

@code{Type} is an admissible kind of assertion.
@iftex
@hfill
@end iftex
 (@code{assertions_props:assrt_type/1})

@code{Body} is a normalized assertion body.
@iftex
@hfill
@end iftex
 (@code{assertions_props:nabody/1})

@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{assertions_props:dictionary/1})

@code{Flag} is @code{status} or @code{nostatus}.
@iftex
@hfill
@end iftex
 (@code{assrt_write:status_flag/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node The Ciao library browser, Code translation utilities, Pretty-printing assertions, Top
@comment node-name, next,  previous,  up
@chapter The Ciao library browser
@liindex librowser
@c -------------------------------------------------
@c WARNING: Do not edit this file (librowser.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/librowser/librowser.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#39 (1999/7/21, 12:8:4 MEST)


@glindex librowser
@code{librowser} library provides a set of predicates wich enables the user to interactively find Ciao/Prolog libraries and/or any predicate exported by them. 

This is a simple example: 


@smallexample 
?- apropos('*find*').
persdbrt_sql: dbfindall/4
persdbrtsql: dbfindall/4
conc_aggregates: findall/3
linda: rd_findall/3
vndict: find_name/4
internals: $find_file/8
aggregates: findall/4,findall/3

yes
?- 
@end smallexample  

Librowser is specially usefull when using inside GNU Emacs, just place the cursor over a librowser response and press C-cTAB in order to get help on the related predicate. Refer to the @strong{"Using Ciao inside GNU Emacs"} chapter for further information. 



@menu
* Usage and interface (librowser)::  
* Documentation on exports (librowser)::  
* Documentation on internals (librowser)::  
@end menu

@node Usage and interface (librowser), Documentation on exports (librowser), The Ciao library browser, The Ciao library browser
@comment node-name, next,  previous,  up
@section Usage and interface (@code{librowser})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

It is not necesary to use this library at user programs. It was designed to be used at the Ciao @emph{toplevel} shell: 
@glindex ciaosh
@code{ciaosh}. In order to do so, just make use of 
@glindex use_module/1
@code{use_module/1} as follows: 

@code{use_module(library(librowser))}. 

Then, the library interface must be read. This is automatically done when calling any predicate at librowser, and the entire process will take a little moment.So, you should want to perform such a process after loading the Ciao toplevel: 


@smallexample 
Ciao 0.9 #75: Fri Apr 30 19:04:24 MEST 1999
?- use_module(library(librowser)).

yes
?- update.

@end smallexample  

Whether you want this process to be automatically performed when loading 
@glindex ciaosh
@code{ciaosh}, you may include those lines in your @emph{.ciaorc} personal initialization file. 

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex update/0
@code{update/0}, 
@glindex browse/2
@code{browse/2}, 
@glindex where/1
@code{where/1}, 
@glindex describe/1
@code{describe/1}, 
@glindex system_lib/1
@code{system_lib/1}, 
@glindex apropos/1
@code{apropos/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex filenames
@code{filenames}, 
@glindex read
@code{read}, 
@glindex system
@code{system}, 
@glindex streams
@code{streams}, 
@glindex patterns
@code{patterns}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (librowser), Documentation on internals (librowser), Usage and interface (librowser), The Ciao library browser
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{librowser})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{update/0 (pred)}}}
@temp
@end iftex
@pdindex update/0 
@glindex update/0 
@deffn PREDICATE update/0:



This predicate will scan the Ciao 
@glindex system libraries
system libraries for predicate definitions. This may be done once time before calling any other predicate at this library. 

update/0 will also be automatically called (once) when calling any other predicate at librowser.


@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Creates an internal database of modules at Ciao 
@glindex system libraries
system libraries. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{browse/2 (pred)}}}
@temp
@end iftex
@pdindex browse/2 
@glindex browse/2 
@deffn PREDICATE browse/2:



This predicate is fully reversible, and is provided to inspect concrete predicate specifications. For example: 
@smallexample 
?- browse(M,findall/A).

A = 3,
M = conc_aggregates ? ;

A = 4,
M = aggregates ? ;

A = 3,
M = aggregates ? ;

no
?- 
@end smallexample  



@strong{Usage:} @code{browse(Module,Spec)}
@itemize @minus
@item @emph{Description:} Asocciates the given @code{Spec} predicate specification with the @code{Module} which exports it. 
@item @emph{The following properties should hold at call time:}


@code{Module} is a module name (an atom)
@iftex
@hfill
@end iftex
 (@code{librowser:module_name/1})

@code{Spec} is a @strong{Functor/Arity} predicate specification
@iftex
@hfill
@end iftex
 (@code{librowser:pred_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{where/1 (pred)}}}
@temp
@end iftex
@pdindex where/1 
@glindex where/1 
@deffn PREDICATE where/1:



This predicate will print at the screen the module needed in order to import a given predicate specification. For example: 
@smallexample 
?- where(findall/A).
findall/3 exported at module conc_aggregates
findall/4 exported at module aggregates
findall/3 exported at module aggregates

yes
?- 
@end smallexample  



@strong{Usage:} @code{where(Spec)}
@itemize @minus
@item @emph{Description:} Display what module to load in order to import the given @code{Spec}. 
@item @emph{The following properties should hold at call time:}


@code{Spec} is a @strong{Functor/Arity} predicate specification
@iftex
@hfill
@end iftex
 (@code{librowser:pred_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{describe/1 (pred)}}}
@temp
@end iftex
@pdindex describe/1 
@glindex describe/1 
@deffn PREDICATE describe/1:



This one is used to find out which predicates were exported by a given module. Very usefull when you know the library, but not the concrete predicate. For example: 
@smallexample 
?- describe(librowser).
Predicates at library librowser : 

apropos/1 
system_lib/1 
describe/1 
where/1 
browse/2 
update/0 

yes
?- 
@end smallexample  



@strong{Usage:} @code{describe(Module)}
@itemize @minus
@item @emph{Description:} Display a list of exported predicates at the given @code{Module} 
@item @emph{The following properties should hold at call time:}


@code{Module} is a module name (an atom)
@iftex
@hfill
@end iftex
 (@code{librowser:module_name/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{system_lib/1 (pred)}}}
@temp
@end iftex
@pdindex system_lib/1 
@glindex system_lib/1 
@deffn PREDICATE system_lib/1:



It retrieves on backtracking all Ciao system libraries stored in the internal database. Certainly, those which were scanned at 
@glindex update/0
@code{update/0} calling. 


@strong{Usage:} @code{system_lib(Module)}
@itemize @minus
@item @emph{Description:} @code{Module} variable will be successively instantiated to the system libaries stored in the internal database. 
@item @emph{The following properties should hold at call time:}


@code{Module} is a module name (an atom)
@iftex
@hfill
@end iftex
 (@code{librowser:module_name/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{apropos/1 (pred)}}}
@temp
@end iftex
@pdindex apropos/1 
@glindex apropos/1 
@deffn PREDICATE apropos/1:



This tool makes use of 
@glindex regular expresions
regular expresions in order to find predicate specifications. It is very usefull whether you can't renember the full name of a predicate. Regular expresions take the same format as described in library 
@glindex patterns
@code{patterns}. Example: 
@smallexample 
?- apropos('atom_*').

metaterms: atom_concat/2
concurrency: atom_lock_state/2
atomic_basic: atom_concat/3,atom_length/2,atom_codes/2
iso_byte_char: atom_chars/2

yes
?- 
@end smallexample  




@strong{Usage:} @code{apropos(RegSpec)}
@itemize @minus
@item @emph{Description:} This will search any predicate specification @code{Spec} which matches the given @code{RegSpec} incomplete predicate specification.  
@item @emph{The following properties should hold at call time:}


@code{RegSpec} is a Pattern/Arity specification.
@iftex
@hfill
@end iftex
 (@code{librowser:apropos_spec/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (librowser),  , Documentation on exports (librowser), The Ciao library browser
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{librowser})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{apropos_spec/1 (regtype)}}}
@temp
@end iftex
@teindex apropos_spec/1 
@glindex apropos_spec/1 
@deffn REGTYPE apropos_spec/1:



Defined as: 
@smallexample 
apropos_spec(_1).
apropos_spec(Pattern/Arity) :-
        pattern(Pattern),
        int(Arity).
@end smallexample  



@strong{Usage:} @code{apropos_spec(S)}
@itemize @minus
@item @emph{Description:} @code{S} is a Pattern/Arity specification. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Code translation utilities, Low-level concurrency/multithreading primitives, The Ciao library browser, Top
@comment node-name, next,  previous,  up
@chapter Code translation utilities
@liindex expansion_tools
@c -------------------------------------------------
@c WARNING: Do not edit this file (expansion_tools.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/expansion_tools.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#110 (1999/11/22, 11:52:54 MET)

This library offers a general way to perform clause body expansions. Goal, fact and spec translation predicates are authomatically called when needed, while this utility navigates through the meta-argument specification of the body itself. All predicates within this library must be called at @emph{second-pass expansions}, since it uses information stored at 
@glindex c_itf
@code{c_itf} library.



@menu
* Usage and interface (expansion_tools)::  
* Documentation on exports (expansion_tools)::	
* Documentation on internals (expansion_tools)::  
* Known bugs and planned improvements (expansion_tools)::  
@end menu

@node Usage and interface (expansion_tools), Documentation on exports (expansion_tools), Code translation utilities, Code translation utilities
@comment node-name, next,  previous,  up
@section Usage and interface (@code{expansion_tools})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

This library is provided as a tool for those modules which performs source-to-source code translation, usually known as @emph{code expanders}. It may be loaded as other modules using a 
@glindex use_module/1
@code{use_module/1}. Nothing special needs to be done.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex imports_meta_pred/3
@code{imports_meta_pred/3}, 
@glindex body_expander/6
@code{body_expander/6}, 
@glindex arg_expander/6
@code{arg_expander/6}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex compiler/c_itf
@code{compiler/c_itf}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (expansion_tools), Documentation on internals (expansion_tools), Usage and interface (expansion_tools), Code translation utilities
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{expansion_tools})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{imports_meta_pred/3 (pred)}}}
@temp
@end iftex
@pdindex imports_meta_pred/3 
@glindex imports_meta_pred/3 
@deffn PREDICATE imports_meta_pred/3:



Macro provided in order to know meta-predicate specifications accessible from a module.


@strong{Usage:} @code{imports_meta_pred(Module,MetaSpec,AccessibleAt)}
@itemize @minus
@item @emph{Description:} Tells whether @code{MetaSpec} meta-predicate specification is accessible from @code{Module}. @code{AccessibleAt} will be binded to '-' whether meta-predicate is a builtin one. If not, it will be unified with the module which defines the meta-predicate.  
@item @emph{The following properties should hold at call time:}


@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{MetaSpec} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})

@code{AccessibleAt} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{body_expander/6 (pred)}}}
@temp
@end iftex
@pdindex body_expander/6 
@glindex body_expander/6 
@deffn PREDICATE body_expander/6:



This predicate is the main translation tool. It navigates through a clause body, when a single @emph{goal} appears, user-code is called in order to perform a translation. Whether user-code fails to translate the involved goal, it remains the same. Regardless that goal is translated or not, an argument expansion will be performed over all goals if applicable (see 
@glindex arg_expander/6
@code{arg_expander/6} predicate). 

Variable (unknown at compile time) goals will also be attempt to translate. 


@emph{Meta-predicate} with arguments: @code{body_expander(pred(3),pred(3),pred(3),?,?,?)}.


@strong{Usage:} @code{body_expander(GoalTrans,FactTrans,SpecTrans,Module,Body,ExpandedBody)}
@itemize @minus
@item @emph{Description:} Translates @code{Body} to @code{ExpandedBody} by the usage of user-defined translators @code{GoalTrans}, @code{FactTrans} and @code{SpecTrans}. The module where the original body appears must be unified with @code{Module} argument.  
@item @emph{The following properties should hold at call time:}


@code{GoalTrans} is a user-defined predicate which performs @emph{goal} meta-type translation
@iftex
@hfill
@end iftex
 (@code{expansion_tools:goal_expander/1})

@code{FactTrans} is a user-defined predicate which performs @emph{fact} meta-type translation
@iftex
@hfill
@end iftex
 (@code{expansion_tools:fact_expander/1})

@code{SpecTrans} is a user-defined predicate which performs @emph{spec} meta-type translation
@iftex
@hfill
@end iftex
 (@code{expansion_tools:spec_expander/1})

@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Body} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{ExpandedBody} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{arg_expander/6 (pred)}}}
@temp
@end iftex
@pdindex arg_expander/6 
@glindex arg_expander/6 
@deffn PREDICATE arg_expander/6:



This predicate is an auxiliary translation tool, which is used by 
@glindex body_expander/6
@code{body_expander/6} predicate. It remains exported as a macro. The predicate navigates through the @emph{meta-argument specification} of a goal. Whether a @emph{goal,fact or spec} argument appears, user-code is called in order to perform a translation. Whether user-code fails to translate the involved argument, it remains the same. Builtins as ','/2 or ';'/2 are treated as meta-predicates defining @emph{goal} meta-arguments. When a @emph{goal} meta-argument is located, 
@glindex body_expander/6
@code{body_expander/6} will be called in order to navigate through it. Notice that a @emph{goal} meta-argument may be unified with another goal defining another meta-argument, so navigation is required. If arguments are not known to arg_expander/6, translation will not occur. This is posible whether goal or qualifing module are variables. 


@emph{Meta-predicate} with arguments: @code{arg_expander(pred(3),pred(3),pred(3),?,?,?)}.


@strong{Usage:} @code{arg_expander(GoalTrans,FactTrans,SpecTrans,Module,Goal,ExpandedGoal)}
@itemize @minus
@item @emph{Description:} Translates @code{Goal} to @code{ExpandedGoal} by applying user-defined translators (@code{GoalTrans}, @code{FactTrans} and @code{SpecTrans}) to each meta-argument present at such goal. The module where the original goal appears must be unified with @code{Module} argument.  
@item @emph{The following properties should hold at call time:}


@code{GoalTrans} is a user-defined predicate which performs @emph{goal} meta-type translation
@iftex
@hfill
@end iftex
 (@code{expansion_tools:goal_expander/1})

@code{FactTrans} is a user-defined predicate which performs @emph{fact} meta-type translation
@iftex
@hfill
@end iftex
 (@code{expansion_tools:fact_expander/1})

@code{SpecTrans} is a user-defined predicate which performs @emph{spec} meta-type translation
@iftex
@hfill
@end iftex
 (@code{expansion_tools:spec_expander/1})

@code{Module} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Goal} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:nonvar/1})

@code{ExpandedBody} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (expansion_tools), Known bugs and planned improvements (expansion_tools), Documentation on exports (expansion_tools), Code translation utilities
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{expansion_tools})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{expander_pred/1 (prop)}}}
@temp
@end iftex
@prindex expander_pred/1 
@glindex expander_pred/1 
@deffn PROPERTY expander_pred/1:






@strong{Usage:} @code{expander_pred(Pred)}
@itemize @minus
@item @emph{Description:} @code{Pred} is a user-defined predicate used to perform code translations. First argument will be binded to the corresponding term to be translated. Second argument must be binded to the corresponding translation. Third argument will be binded to the current module were first argument appears. Additional arguments will be user-defined.  
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (expansion_tools),  , Documentation on internals (expansion_tools), Code translation utilities
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{expansion_tools})

@itemize @bullet{}

@item
@emph{pred(N)} meta-arguments are not supported at this moment.
@end itemize

@c (component)


@node Low-level concurrency/multithreading primitives, conc_aggregates (library), Code translation utilities, Top
@comment node-name, next,  previous,  up
@chapter Low-level concurrency/multithreading primitives
@liindex concurrency
@c -------------------------------------------------
@c WARNING: Do not edit this file (concurrency.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/concurrency/concurrency.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#145 (2000/5/18, 16:13:40 CEST)

This module provides basic mechanisms for using concurrency and implementing multi-goal applications.
@coindex concurrency
@glindex concurrency 
It provides a means for arbitrary goals to be specified to be run in a separate stack set; in that case, they are assigned a goal identifier with which further accesses (e.g., asking for more solutions) to the goal can be made. Additionally, in some architectures, these goals can be assigned an O.S. thread, separate from the one which made the initial call, thus providing concurrency and, in multiprocessors, parallelism capabilities. 

As for now, the memory space of the threads (c.f., stack sets) is separate in the sense that goals are copied to the new stack set, and bindings of variables are not seen among stack sets which allows forward and backward execution to proceed independently in each stack set, at the cost of the initial goal copy. However, the program space (including, specially, the 
@glindex concurrent predicates
concurrent predicates) are shared and seen by all the goals and threads, and should be used as the primary means of communication and synchronization. Higer level libraries can be built using these basic blocks. 

Additionally, a small set of lock primitives are provided. Locks are associated with atom names. Whereas the concurrent database facilities are enough to implement locks, semaphores, messages, etc., the predicates implementing atom-based locks are faster than the ones accessing the concurrent database (but they are less powerful). 





@menu
* Usage and interface (concurrency)::  
* Documentation on exports (concurrency)::  
* Known bugs and planned improvements (concurrency)::  
@end menu

@node Usage and interface (concurrency), Documentation on exports (concurrency), Low-level concurrency/multithreading primitives, Low-level concurrency/multithreading primitives
@comment node-name, next,  previous,  up
@section Usage and interface (@code{concurrency})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

These predicates are builtin in Ciao, so nothing special has to be done to use them.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex eng_call/4
@code{eng_call/4}, 
@glindex eng_call/3
@code{eng_call/3}, 
@glindex eng_backtrack/2
@code{eng_backtrack/2}, 
@glindex eng_cut/1
@code{eng_cut/1}, 
@glindex eng_release/1
@code{eng_release/1}, 
@glindex eng_wait/1
@code{eng_wait/1}, 
@glindex eng_kill/1
@code{eng_kill/1}, 
@glindex eng_killothers/0
@code{eng_killothers/0}, 
@glindex eng_self/1
@code{eng_self/1}, 
@glindex eng_status/0
@code{eng_status/0}, 
@glindex lock_atom/1
@code{lock_atom/1}, 
@glindex unlock_atom/1
@code{unlock_atom/1}, 
@glindex atom_lock_state/2
@code{atom_lock_state/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (concurrency), Known bugs and planned improvements (concurrency), Usage and interface (concurrency), Low-level concurrency/multithreading primitives
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{concurrency})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_call/4 (pred)}}}
@temp
@end iftex
@pdindex eng_call/4 
@glindex eng_call/4 
@deffn PREDICATE eng_call/4:






@emph{Meta-predicate} with arguments: @code{eng_call(goal,?,?,?)}.


@strong{Usage:} @code{eng_call(+Goal,+EngineCreation,+ThreadCreation,-GoalId)}
@itemize @minus
@item @emph{Description:} Calls @code{Goal} in a new engine (stack set), possibly using a new thread, and returns a @code{GoalId} to designate this new goal henceforth. @code{EngineCreation} can be either @code{wait} or @code{create}; the distinction is not yet meaningful. @code{ThreadCreation} can be one of @code{self}, @code{wait}, or @code{create}. In the first case the creating thread is used to execute @code{Goal}, and thus it has to wait until its first result or failure. The call will fail if @code{Goal} fails, and succeed otherwise. However, the call will always suceed when a remote thread is started. The space and identifiers reclaimed for the thread must be explicitly deallocated by calling 
@glindex eng_release/1
@code{eng_release/1}. 
@item @emph{The following properties should hold at call time:}


@code{+Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{+EngineCreation} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{+ThreadCreation} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{-GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_call/3 (pred)}}}
@temp
@end iftex
@pdindex eng_call/3 
@glindex eng_call/3 
@deffn PREDICATE eng_call/3:






@emph{Meta-predicate} with arguments: @code{eng_call(goal,?,?)}.


@strong{Usage:} @code{eng_call(+Goal,+EngineCreation,+ThreadCreation)}
@itemize @minus
@item @emph{Description:} Similar to 
@glindex eng_call/4
@code{eng_call/4}, but the thread (if created) and stack areas are automatically released upon success or failure of the goal. No @code{GoalId} is provided for further interaction with the goal. 
@item @emph{The following properties should hold at call time:}


@code{+Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})

@code{+EngineCreation} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{+ThreadCreation} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_backtrack/2 (pred)}}}
@temp
@end iftex
@pdindex eng_backtrack/2 
@glindex eng_backtrack/2 
@deffn PREDICATE eng_backtrack/2:






@strong{Usage:} @code{eng_backtrack(+GoalId,+ThreadCreation)}
@itemize @minus
@item @emph{Description:} Performs backtracking on the goal designed by @code{GoalId}. A new thread can be used to perform backtracking, according to @code{ThreadCreation} (same as in 
@glindex eng_call/4
@code{eng_call/4}). Fails if the goal is backtracked over by the local thread, and there are no more solutions. Always succeeds if executed by a remote thread. The engine is @strong{not} automatically released up upon failure: 
@glindex eng_release/1
@code{eng_release/1} must be called to that end. 
@item @emph{The following properties should hold at call time:}


@code{+GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{+ThreadCreation} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_cut/1 (pred)}}}
@temp
@end iftex
@pdindex eng_cut/1 
@glindex eng_cut/1 
@deffn PREDICATE eng_cut/1:






@strong{Usage:} @code{eng_cut(+GoalId)}
@itemize @minus
@item @emph{Description:} Performs a @emph{cut} in the execution of the goal @code{GoalId}. The next call to 
@glindex eng_backtrack/2
@code{eng_backtrack/2} will therefore backtrack all the way and fail. 
@item @emph{The following properties should hold at call time:}


@code{+GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_release/1 (pred)}}}
@temp
@end iftex
@pdindex eng_release/1 
@glindex eng_release/1 
@deffn PREDICATE eng_release/1:






@strong{Usage:} @code{eng_release(+GoalId)}
@itemize @minus
@item @emph{Description:} Cleans up and releases the engine executing the goal designed by @code{GoalId}. The engine must be idle, i.e., currently not exedcuting any goal. 
@glindex eng_wait/1
@code{eng_wait/1} can be used to ensure this. 
@item @emph{The following properties should hold at call time:}


@code{+GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_wait/1 (pred)}}}
@temp
@end iftex
@pdindex eng_wait/1 
@glindex eng_wait/1 
@deffn PREDICATE eng_wait/1:






@strong{Usage:} @code{eng_wait(+GoalId)}
@itemize @minus
@item @emph{Description:} Waits for the engine executing the goal denoted by @code{GoalId} to finish the computation (i.e., it has finished searching for a solution, either with success or failure). 
@item @emph{The following properties should hold at call time:}


@code{+GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_kill/1 (pred)}}}
@temp
@end iftex
@pdindex eng_kill/1 
@glindex eng_kill/1 
@deffn PREDICATE eng_kill/1:






@strong{Usage:} @code{eng_kill(+GoalId)}
@itemize @minus
@item @emph{Description:} Kills the thread executing @code{GoalId} (if any), and frees the memory used up by the stack set. Usually one should wait (
@glindex eng_wait/1
@code{eng_wait/1}) for a goal, and then release it, but killing the thread explicitly allows recovering from error states. A goal cannot kill itself. This feature should be used with caution, because there are situations where killing a thread might render the system in an unstable state. Threads should cooperate in their killing, but if the killed thread is blocked in a I/O operation, or inside an internal critical region, this cooperation is not possible and the system, although stopped, might very well end up in a incosistent state. 
@item @emph{The following properties should hold at call time:}


@code{+GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_killothers/0 (pred)}}}
@temp
@end iftex
@pdindex eng_killothers/0 
@glindex eng_killothers/0 
@deffn PREDICATE eng_killothers/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Kills threads and releases stack sets of all active goals, but the one calling 
@glindex eng_killothers
@code{eng_killothers}. Again, a safety measure. The same cautions as with 
@glindex eng_kill/1
@code{eng_kill/1} should be taken. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_self/1 (pred)}}}
@temp
@end iftex
@pdindex eng_self/1 
@glindex eng_self/1 
@deffn PREDICATE eng_self/1:






@strong{Usage:} @code{eng_self(?GoalId)}
@itemize @minus
@item @emph{Description:} @code{GoalId} is unified with the identifier of the goal within which 
@glindex eng_self/1
@code{eng_self/1} is executed. 
@item @emph{The following properties should hold at call time:}


@code{?GoalId} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{eng_status/0 (pred)}}}
@temp
@end iftex
@pdindex eng_status/0 
@glindex eng_status/0 
@deffn PREDICATE eng_status/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Prints to standard output the current status of the stack sets. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{lock_atom/1 (pred)}}}
@temp
@end iftex
@pdindex lock_atom/1 
@glindex lock_atom/1 
@deffn PREDICATE lock_atom/1:






@strong{Usage:} @code{lock_atom(+Atom)}
@itemize @minus
@item @emph{Description:} The 
@glindex semaphore
semaphore associated to @code{Atom} is accessed; if its value is nonzero, it is atomically decremented and the execution of this thread proceeds. Otherwise, the goal waits until a nonzero value is reached. The semaphore is then atomically decremented and the execution of this thread proceeds. 
@item @emph{The following properties should hold at call time:}


@code{+Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{unlock_atom/1 (pred)}}}
@temp
@end iftex
@pdindex unlock_atom/1 
@glindex unlock_atom/1 
@deffn PREDICATE unlock_atom/1:






@strong{Usage:} @code{unlock_atom(+Atom)}
@itemize @minus
@item @emph{Description:} The 
@glindex semaphore
semaphore associated to @code{Atom} is atomically incremented. 
@item @emph{The following properties should hold at call time:}


@code{+Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{atom_lock_state/2 (pred)}}}
@temp
@end iftex
@pdindex atom_lock_state/2 
@glindex atom_lock_state/2 
@deffn PREDICATE atom_lock_state/2:






@strong{Usage 1:} @code{atom_lock_state(+Atom,+Value)}
@itemize @minus
@item @emph{Description:} Sets the semaphore associated to @code{Atom} to @code{Value}. This is usually done at the beginning of the execution, but can be executed at any time. If not called, semaphore associated to atoms are by default inited to 1. It should be used with caution: arbitrary use can transform programs using locks in a mess of internal relations. The change of a semaphore value in a place other than the initialization stage of a program is @strong{not} among the allowed operations as defined by Dijkstra [Dij65,BA82]. 
@item @emph{The following properties should hold at call time:}


@code{+Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{+Value} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize

@strong{Usage 2:} @code{atom_lock_state(+Atom,-Value)}
@itemize @minus
@item @emph{Description:} Consults the @code{Value} of the semaphore associated to @code{Atom}. Use sparingly and mainly as a medium to check state correctness. Not among the operations on semaphore by Djikstra. 
@item @emph{The following properties should hold at call time:}


@code{+Atom} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{-Value} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (concurrency),  , Documentation on exports (concurrency), Low-level concurrency/multithreading primitives
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{concurrency})

@itemize @bullet{}

@item
@strong{This library is being rewritten at the moment. The Prolog interface herein described may not correspond exactly with the existing implementation. This note will be removed when the documentation corresponds to the implementation.}

@item
Available architectures implementing POSIX threads and in Windows 32 environments.

@item
Some implementation of threads have a limit on the total number of threads that can be created by a process. Thread creation, in this case, just hangs. A better solution is planned for the future.
@end itemize

@c (component)


@node conc_aggregates (library), The socket interface, Low-level concurrency/multithreading primitives, Top
@comment node-name, next,  previous,  up
@chapter conc_aggregates (library)
@liindex conc_aggregates
@c -------------------------------------------------
@c WARNING: Do not edit this file (conc_aggregates.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/conc_aggregates.pl
@c -------------------------------------------------

@strong{Author(s):} Concurrent-safe (and incomplete) version of the aggregates predicates, based on the regular versions by Richard A. O'Keefe and David H.D. Warren. Concurrency-safeness provided by Manuel Carro..


This module implements thread-safe aggregation predicates. Its use and results should be the same as those in the 
@glindex aggregates
aggregates library, but several goals can use them concurrently without the interference and wrong results (due to implementation reasons) 
@glindex aggregates
aggregates might lead to. This particular implementation is completely based on the one used in the 
@glindex aggregates
aggregates library.



@menu
* Usage and interface (conc_aggregates)::  
* Documentation on exports (conc_aggregates)::	
* Known bugs and planned improvements (conc_aggregates)::  
@end menu

@node Usage and interface (conc_aggregates), Documentation on exports (conc_aggregates), conc_aggregates (library), conc_aggregates (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{conc_aggregates})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(conc_aggregates)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex findall/3
@code{findall/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex prolog_sys
@code{prolog_sys}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (conc_aggregates), Known bugs and planned improvements (conc_aggregates), Usage and interface (conc_aggregates), conc_aggregates (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{conc_aggregates})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{findall/3 (pred)}}}
@temp
@end iftex
@pdindex findall/3 
@glindex findall/3 
@deffn PREDICATE findall/3:






@emph{Meta-predicate} with arguments: @code{findall(?,goal,?)}.


@strong{Usage:} @code{findall(?Template,+Generator,?List)}
@iftex
@hfill
@end iftex
@key{ @bullet{} ISO @bullet{} }
@itemize @minus
@item @emph{Description:} A special case of bagof, where all free variables in the @code{Generator} are taken to be existentially quantified. Safe in concurrent applications. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (conc_aggregates),  , Documentation on exports (conc_aggregates), conc_aggregates (library)
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{conc_aggregates})

@itemize @bullet{}

@item
Thread-safe 
@glindex setof/3
@code{setof/3} is not yet implemented.

@item
Thread-safe 
@glindex bagof/3
@code{bagof/3} is not yet implemented.
@end itemize

@c (component)


@node The socket interface, *** PART VII - Ciao Prolog extensions, conc_aggregates (library), Top
@comment node-name, next,  previous,  up
@chapter The socket interface
@liindex sockets
@c -------------------------------------------------
@c WARNING: Do not edit this file (sockets.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/sockets/sockets.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#169 (2000/7/6, 13:27:35 CEST)

This module defines primitives to open sockets, send, and receive data from them. This allows communicating with other processes, on the same machine or across the Internet. The reader should also consult standard bibliography on the topic for a proper use of these primitives.



@menu
* Usage and interface (sockets)::  
* Documentation on exports (sockets)::	
@end menu

@node Usage and interface (sockets), Documentation on exports (sockets), The socket interface, The socket interface
@comment node-name, next,  previous,  up
@section Usage and interface (@code{sockets})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(sockets)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex connect_to_socket/3
@code{connect_to_socket/3}, 
@glindex socket_recv/2
@code{socket_recv/2}, 
@glindex hostname_address/2
@code{hostname_address/2}, 
@glindex socket_recv_code/3
@code{socket_recv_code/3}, 
@glindex socket_send/2
@code{socket_send/2}, 
@glindex select_socket/5
@code{select_socket/5}, 
@glindex socket_accept/2
@code{socket_accept/2}, 
@glindex bind_socket/3
@code{bind_socket/3}, 
@glindex connect_to_socket_type/4
@code{connect_to_socket_type/4}.


@item @emph{Regular Types:}

@glindex socket_type/1
@code{socket_type/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sockets/sockets_c
@code{sockets/sockets_c}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (sockets),  , Usage and interface (sockets), The socket interface
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{sockets})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{connect_to_socket/3 (pred)}}}
@temp
@end iftex
@pdindex connect_to_socket/3 
@glindex connect_to_socket/3 
@deffn PREDICATE connect_to_socket/3:






@strong{Usage:} @code{connect_to_socket(+Host,+Port,-Stream)}
@itemize @minus
@item @emph{Description:} Calls 
@glindex connect_to_socket_type/4
@code{connect_to_socket_type/4} with SOCK_STREAM connection type. This is the connection type you want in order to use the 
@glindex write/2
@code{write/2} and 
@glindex read/2
@code{read/2} predicates (and other stream IO related predicates). 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Host} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{+Port} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{-Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_recv/2 (pred)}}}
@temp
@end iftex
@pdindex socket_recv/2 
@glindex socket_recv/2 
@deffn PREDICATE socket_recv/2:






@strong{Usage:} @code{socket_recv(+Stream,?String)}
@itemize @minus
@item @emph{Description:} As 
@glindex socket_recv_code/3
@code{socket_recv_code/3}, but the return code is ignored. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_type/1 (regtype)}}}
@temp
@end iftex
@teindex socket_type/1 
@glindex socket_type/1 
@deffn REGTYPE socket_type/1:



Defines the atoms which can be used to specify the socket type recognized by 
@glindex connect_to_socket_type/4
@code{connect_to_socket_type/4}. Defined as follows: 
@smallexample 
socket_type(stream).
socket_type(dgram).
socket_type(raw).
socket_type(seqpacket).
socket_type(rdm).
@end smallexample 



@strong{Usage:} @code{socket_type(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a valid socket type. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{hostname_address/2 (pred)}}}
@temp
@end iftex
@pdindex hostname_address/2 
@glindex hostname_address/2 
@deffn PREDICATE hostname_address/2:






@strong{Usage:} @code{hostname_address(+Hostname,?Address)}
@itemize @minus
@item @emph{Description:} @code{Address} is unified with the atom representing the address (in AF_INET format) corresponding to @code{Hostname}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Hostname} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{?Address} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_recv_code/3 (pred)}}}
@temp
@end iftex
@pdindex socket_recv_code/3 
@glindex socket_recv_code/3 
@deffn PREDICATE socket_recv_code/3:






@strong{Usage:} @code{socket_recv_code(+Stream,?String,?Length)}
@itemize @minus
@item @emph{Description:} Receives a @code{String} from the socket associated to @code{Stream}, and returns its @code{Length}. If @code{Length} is -1, no more data is available. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{?String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})

@code{?Length} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_send/2 (pred)}}}
@temp
@end iftex
@pdindex socket_send/2 
@glindex socket_send/2 
@deffn PREDICATE socket_send/2:






@strong{Usage:} @code{socket_send(+Stream,+String)}
@itemize @minus
@item @emph{Description:} Sends @code{String} to the socket associated to @code{Stream}. The socket has to be in connected state. @code{String} is not supposed to be NULL terminated, since it is a Prolog string. If a NULL terminated string is needed at the other side, it has to be explicitly created in Prolog. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{+String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{select_socket/5 (pred)}}}
@temp
@end iftex
@pdindex select_socket/5 
@glindex select_socket/5 
@deffn PREDICATE select_socket/5:






@strong{Usage:} @code{select_socket(+Socket,-NewStream,+TO_ms,+Streams,-ReadStreams)}
@itemize @minus
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Socket} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{-NewStream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{+TO_ms} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{+Streams} is a list of @code{stream}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{-ReadStreams} is a list of @code{stream}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_accept/2 (pred)}}}
@temp
@end iftex
@pdindex socket_accept/2 
@glindex socket_accept/2 
@deffn PREDICATE socket_accept/2:






@strong{Usage:} @code{socket_accept(+Sock,-Stream)}
@itemize @minus
@item @emph{Description:} Creates a new @code{Stream} connected to @code{Sock}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Sock} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{-Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{bind_socket/3 (pred)}}}
@temp
@end iftex
@pdindex bind_socket/3 
@glindex bind_socket/3 
@deffn PREDICATE bind_socket/3:






@strong{Usage:} @code{bind_socket(?Port,+Length,-Socket)}
@itemize @minus
@item @emph{Description:} Returs an AF_INET @code{Socket} bound to @code{Port} (which may be assigned by the OS or defined by the caller), and listens to it (hence no listen call in this set of primitives). @code{Length} specifies the maximum number of pending connections. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{?Port} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{+Length} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{-Socket} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{connect_to_socket_type/4 (pred)}}}
@temp
@end iftex
@pdindex connect_to_socket_type/4 
@glindex connect_to_socket_type/4 
@deffn PREDICATE connect_to_socket_type/4:






@strong{Usage:} @code{connect_to_socket_type(+Host,+Port,+Type,-Stream)}
@itemize @minus
@item @emph{Description:} Returns a @code{Stream} which connects to @code{Host}. The @code{Type} of connection can be defined. A @code{Stream} is returned, which can be used to 
@glindex write/2
@code{write/2} to, to 
@glindex read/2
@code{read/2}, to 
@glindex socket_send/2
@code{socket_send/2} to, or to 
@glindex socket_recv/2
@code{socket_recv/2} from the socket. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Host} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{+Port} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{+Type} is a valid socket type.
@iftex
@hfill
@end iftex
 (@code{sockets:socket_type/1})

@code{-Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node *** PART VII - Ciao Prolog extensions, Pure Prolog package, The socket interface, Top
@comment node-name, next,  previous,  up
@unnumbered PART VII - Ciao Prolog extensions
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (ExtendProlog.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/ExtendProlog.pl
@c -------------------------------------------------


The libraries documented in this part extend the Ciao language in several different ways. The extensions include: 
@itemize @bullet{} 
@item 
@glindex pure Prolog
pure Prolog programming (well, this can be viewed more as a restriction than an extension); 
@item 
@glindex feature terms
feature terms or 
@coindex records
@glindex records
@emph{records} (i.e., structures with names for each field); 
@item 
@glindex parallel programming
parallel programming (e.g., &-Prolog style); 
@item 
@glindex functional syntax
functional syntax; 
@item 
@glindex higher-order library
higher-order library; 
@item 
@glindex global variables
global variables; 
@item @code{setarg} and @code{undo}; 
@item 
@glindex delaying predicate execution
delaying predicate execution; 
@item 
@glindex active modules
active modules; 
@item 
@glindex breadth-first execution
breadth-first execution; 
@item 
@glindex iterative deepening-based execution
iterative deepening-based execution; 
@item 
@glindex constraint logic programming
constraint logic programming; 
@item 
@glindex object oriented programming
object oriented programming. 
@end itemize  


@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node Pure Prolog package, argnames (library), *** PART VII - Ciao Prolog extensions, Top
@comment node-name, next,  previous,  up
@chapter Pure Prolog package
@liindex pure
@c -------------------------------------------------
@c WARNING: Do not edit this file (pure_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/pure_doc.pl
@c -------------------------------------------------


This library package allows the use of 
@coindex pure Prolog
@glindex pure Prolog
@emph{pure Prolog} in a Ciao module/program. It is based on the fact that if an 
@coindex engine module
@glindex engine module
@emph{engine module} is imported explicitly then all of them have to be imported explicitly. The engine modules are: 
@itemize @bullet{} 
@item @code{engine(arithmetic)} 

@ref{Arithmetic}. 
@item @code{engine(atomic_basic)} 

@ref{Basic predicates handling names of constants}. 
@item @code{engine(attributes)} 

@ref{Attributed variables}. 
@item @code{engine(basic_props)} 

@ref{Basic data types and properties}. 
@item @code{engine(basiccontrol)} 

@ref{Control constructs/predicates}. 
@item @code{engine(data_facts)} 

@ref{Fast/concurrent update of facts}. 
@item @code{engine(exceptions)} 

@ref{Exception handling}. 
@item @code{engine(io_aux)} 

@ref{Message printing primitives}. 
@item @code{engine(io_basic)} 

@ref{Basic input/output}. 
@item @code{engine(prolog_flags)} 

@ref{Changing system behaviour and various flags}. 
@item @code{engine(streams_basic)} 

@ref{Basic file/stream handling}. 
@item @code{engine(system_info)} 

@ref{Gathering some basic internal info}. 
@item @code{engine(term_basic)} 

@ref{Basic term manipulation}. 
@item @code{engine(term_compare)} 

@ref{Comparing terms}. 
@item @code{engine(term_typing)} 

@ref{Extra-logical properties for typing}. 
@end itemize  

Note that if any of these modules is explicitely imported in a program then the language defaults to Pure Prolog, plus the functionality added by the modules explicitely imported. 

It is recommended that if you explicitely import an engine module you also use this package, which will guarantee that the predicate @code{true/0} is defined (note that this is the only Ciao builtin which cannot be redefined). 



@menu
* Usage and interface (pure)::	
@end menu

@node Usage and interface (pure),  , Pure Prolog package, Pure Prolog package
@comment node-name, next,  previous,  up
@section Usage and interface (@code{pure})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(pure).}

or

@code{:- module(...,...,[pure]).}
@end itemize
@end cartouche

@c (component)


@node argnames (library), Independent and-parallel execution, Pure Prolog package, Top
@comment node-name, next,  previous,  up
@chapter argnames (library)
@liindex argnames
@c -------------------------------------------------
@c WARNING: Do not edit this file (argnames.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/argnames.pl
@c -------------------------------------------------






@menu
* Usage and interface (argnames)::  
@end menu

@node Usage and interface (argnames),  , argnames (library), argnames (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{argnames})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(argnames).}

or

@code{:- module(...,...,[argnames]).}

@item @strong{New operators defined:}

@glindex $/2
@code{$/2} [150,xfx], 
@glindex =>/2
@code{=>/2} [950,xfx], 
@glindex argnames/1
@code{argnames/1} [1150,fx].

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex aggregates
@code{aggregates}, 
@glindex dynamic
@code{dynamic}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex iso_byte_char
@code{iso_byte_char}, 
@glindex iso_incomplete
@code{iso_incomplete}, 
@glindex operators
@code{operators}, 
@glindex read
@code{read}, 
@glindex write
@code{write}.


@end itemize

@end itemize
@end cartouche

@c (component)


@node Independent and-parallel execution, functions (library), argnames (library), Top
@comment node-name, next,  previous,  up
@chapter Independent and-parallel execution
@liindex andprolog
@c -------------------------------------------------
@c WARNING: Do not edit this file (andprolog.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/andprolog/andprolog.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo, Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#120 (1999/11/26, 12:5:17 MET)

This library allows and-parallel execution of goals in (Herbrand-)independent fashion. It resembles the execution rules of &-Prolog [HG90]. Basically, goals are run in and-parallel @emph{provided that their arguments do not share bindings}, i.e., are not bound to terms which contain a common variable.



@menu
* Usage and interface (andprolog)::  
* Documentation on exports (andprolog)::  
* Known bugs and planned improvements (andprolog)::  
@end menu

@node Usage and interface (andprolog), Documentation on exports (andprolog), Independent and-parallel execution, Independent and-parallel execution
@comment node-name, next,  previous,  up
@section Usage and interface (@code{andprolog})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(andprolog)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex &/2
@code{@&/2}, 
@glindex =>/2
@code{=>/2}, 
@glindex active_agents/1
@code{active_agents/1}.


@item @emph{Properties:}

@glindex indep/1
@code{indep/1}, 
@glindex indep/2
@code{indep/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex assertions/doc_props
@code{assertions/doc_props}, 
@glindex concurrency/concurrency
@code{concurrency/concurrency}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (andprolog), Known bugs and planned improvements (andprolog), Usage and interface (andprolog), Independent and-parallel execution
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{andprolog})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{@& /2 (pred)}}}
@temp
@end iftex
@pdindex &/2 
@glindex &/2 
@deffn PREDICATE @&/2:


@code{@&(GoalA,GoalB)}


@code{GoalA} and @code{GoalB} are run in independent and-parallel fashion. This is just a first sketch, and valid only for deterministic independent goals.


@emph{Meta-predicate} with arguments: @code{@&(goal,goal)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{=> /2 (pred)}}}
@temp
@end iftex
@pdindex =>/2 
@glindex =>/2 
@deffn PREDICATE =>/2:


@code{=>(A,B)}


If @code{A} is true @code{B} is run in parallel, otherwise sequentially.


@emph{Meta-predicate} with arguments: @code{=>(goal,goal)}.


@strong{Usage:} @code{=>(A,B)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{B} is of the form @code{goal&goal}.
@iftex
@hfill
@end iftex
 (@code{andprolog:andcallable/1})
@item @emph{The following properties hold globally:}


Documentation is still incomplete: @code{=>(A,B)} may not conform the functionality documented.
@iftex
@hfill
@end iftex
 (@code{doc_props:doc_incomplete/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{indep/1 (prop)}}}
@temp
@end iftex
@prindex indep/1 
@glindex indep/1 
@deffn PROPERTY indep/1:


@code{indep(X)}


The variables in each pair of the list @code{@code{X}} are pairwise independent.


@strong{Usage:} @code{indep(X)}
@itemize @minus
@item @emph{Description:} The variables in pairs in @code{@code{X}} are pairwise independent. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{indep/2 (prop)}}}
@temp
@end iftex
@prindex indep/2 
@glindex indep/2 
@deffn PROPERTY indep/2:


@code{indep(X,Y)}


@code{X} and @code{Y} are 
@coindex independent
@glindex independent
@emph{independent}, i.e., they are bound to terms which have no variables in common. For example, @code{indep(X,Y)} holds for @code{X=f(Z),Y=g(K)} and also for @code{X=f(a),Y=X} (since both @code{X} and @code{Y} are bound to ground terms). It does not hold for @code{X=f(Z),Y=g(Z)} and for @code{X=Y}.


@strong{Usage:} @code{indep(X,Y)}
@itemize @minus
@item @emph{Description:} @code{X} and @code{Y} do not have variables in common. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{active_agents/1 (pred)}}}
@temp
@end iftex
@pdindex active_agents/1 
@glindex active_agents/1 
@deffn PREDICATE active_agents/1:






@strong{Usage:} @code{active_agents(?NumberOfAgents)}
@itemize @minus
@item @emph{Description:} Tests/sets the number of active agents looking for goals to execute. As for now, those agents are resource-consuming, even when they are just looking for work, and not executing any user goals. 
@item @emph{The following properties should hold at call time:}


@code{?NumberOfAgents} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (andprolog),  , Documentation on exports (andprolog), Independent and-parallel execution
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{andprolog})

@itemize @bullet{}

@item
@strong{Beware:} it is highly unstable and probably not correct at all at the moment! It is provided for the sole purpose of experimentation and development.

@item
The fact that only the first solution is returned for the conjunction is due to performance matters, and we expect to remove it in a near future.

@item
CGEs (i.e., @code{=>}) are not supported.

@item
The 
@glindex indep/1
@code{indep/1}, 
@glindex indep/2
@code{indep/2}, and 
@glindex ground/1
@code{ground/1} are not very efficient; they might be replaced by native versions in a future.
@end itemize

@c (component)


@node functions (library), Some Higher-Order Predicates, Independent and-parallel execution, Top
@comment node-name, next,  previous,  up
@chapter functions (library)
@liindex functions
@c -------------------------------------------------
@c WARNING: Do not edit this file (functions.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/functions/functions.pl
@c -------------------------------------------------






@menu
* Usage and interface (functions)::  
@end menu

@node Usage and interface (functions),  , functions (library), functions (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{functions})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(functions).}

or

@code{:- module(...,...,[functions]).}

@item @strong{New operators defined:}

@glindex function/1
@code{function/1} [1150,fx], 
@glindex :=/2
@code{:=/2} [800,xfx], 
@glindex ~/1
@code{~/1} [50,fx].

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex aggregates
@code{aggregates}, 
@glindex dynamic
@code{dynamic}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex iso_byte_char
@code{iso_byte_char}, 
@glindex iso_incomplete
@code{iso_incomplete}, 
@glindex operators
@code{operators}, 
@glindex read
@code{read}, 
@glindex write
@code{write}.


@end itemize

@end itemize
@end cartouche

@c (component)


@node Some Higher-Order Predicates, global (library), functions (library), Top
@comment node-name, next,  previous,  up
@chapter Some Higher-Order Predicates
@liindex hiord
@c -------------------------------------------------
@c WARNING: Do not edit this file (hiord.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/hiord.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#65 (2000/3/15, 22:9:28 CET)

This library implements a few basic higher-order predicates. These add functionality to the basic higher-order functionality of Ciao. Examples of the latter are: 
 
Using pred(1): 


@smallexample 
  list(L, between(1,6))
  list(L, functor(_,2))
  list(L, >(0))
@end smallexample  

Using pred(2): 





@menu
* Usage and interface (hiord)::	 
* Documentation on exports (hiord)::  
@end menu

@node Usage and interface (hiord), Documentation on exports (hiord), Some Higher-Order Predicates, Some Higher-Order Predicates
@comment node-name, next,  previous,  up
@section Usage and interface (@code{hiord})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(hiord)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex map/3
@code{map/3}, 
@glindex foldl/4
@code{foldl/4}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (hiord),  , Usage and interface (hiord), Some Higher-Order Predicates
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{hiord})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{map/3 (pred)}}}
@temp
@end iftex
@pdindex map/3 
@glindex map/3 
@deffn PREDICATE map/3:






@emph{Meta-predicate} with arguments: @code{map(?,pred(2),?)}.


@strong{Usage:} @code{map(LList,Op,RList)}
@itemize @minus
@item @emph{Description:} Examples of use: 
@smallexample 
  map([1,3,2], arg(f(a,b,c,d)), [a,c,b]) or
  map([1,3,2], nth([a,b,c,d]), [a,c,b])
  map(["D","C"], append("."), ["D.","C."])
@end smallexample  
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{foldl/4 (pred)}}}
@temp
@end iftex
@pdindex foldl/4 
@glindex foldl/4 
@deffn PREDICATE foldl/4:






@emph{Meta-predicate} with arguments: @code{foldl(?,?,pred(3),?)}.


@strong{Usage:} @code{foldl(List,Seed,Op,Result)}
@itemize @minus
@item @emph{Description:} Example of use: 
@smallexample 
?- foldl(["daniel","cabeza","gras"], "", 
         (:(X,Y,Z) :- append(X, " "||Y, Z)), R).

R = "daniel cabeza gras " ? 
@end smallexample  
 
@end itemize
@end deffn
@sp 1


@c (component)


@node global (library), Miscellaneous predicates, Some Higher-Order Predicates, Top
@comment node-name, next,  previous,  up
@chapter global (library)
@liindex global
@c -------------------------------------------------
@c WARNING: Do not edit this file (global.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/global.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (global)::  
* Documentation on exports (global)::  
@end menu

@node Usage and interface (global), Documentation on exports (global), global (library), global (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{global})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(global)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex set_global/2
@code{set_global/2}, 
@glindex get_global/2
@code{get_global/2}, 
@glindex push_global/2
@code{push_global/2}, 
@glindex pop_global/2
@code{pop_global/2}, 
@glindex del_global/1
@code{del_global/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (global),  , Usage and interface (global), global (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{global})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_global/2 (pred)}}}
@temp
@end iftex
@pdindex set_global/2 
@glindex set_global/2 
@deffn PREDICATE set_global/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_global/2 (pred)}}}
@temp
@end iftex
@pdindex get_global/2 
@glindex get_global/2 
@deffn PREDICATE get_global/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{push_global/2 (pred)}}}
@temp
@end iftex
@pdindex push_global/2 
@glindex push_global/2 
@deffn PREDICATE push_global/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pop_global/2 (pred)}}}
@temp
@end iftex
@pdindex pop_global/2 
@glindex pop_global/2 
@deffn PREDICATE pop_global/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{del_global/1 (pred)}}}
@temp
@end iftex
@pdindex del_global/1 
@glindex del_global/1 
@deffn PREDICATE del_global/1:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Miscellaneous predicates, Delaying predicates (freeze), global (library), Top
@comment node-name, next,  previous,  up
@chapter Miscellaneous predicates
@liindex odd
@c -------------------------------------------------
@c WARNING: Do not edit this file (odd.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/odd.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#95 (1999/11/8, 18:37:30 MET)

This module implements some miscellaneous non-logical (but sometimes very useful) predicates.



@menu
* Usage and interface (odd)::	
* Documentation on exports (odd)::  
@end menu

@node Usage and interface (odd), Documentation on exports (odd), Miscellaneous predicates, Miscellaneous predicates
@comment node-name, next,  previous,  up
@section Usage and interface (@code{odd})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(odd)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex setarg/3
@code{setarg/3}, 
@glindex undo/1
@code{undo/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (odd),  , Usage and interface (odd), Miscellaneous predicates
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{odd})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{setarg/3 (pred)}}}
@temp
@end iftex
@pdindex setarg/3 
@glindex setarg/3 
@deffn PREDICATE setarg/3:






@strong{Usage:} @code{setarg(Index,Term,NewArg)}
@itemize @minus
@item @emph{Description:} Replace destructively argument @code{Index} in @code{Term} by @code{NewArg}. The assignment is undone on backtracking. This is a major change to the normal behavior of data assignment in Ciao Prolog. 
@item @emph{The following properties should hold at call time:}


@code{Index} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})

@code{Term} is a compound term.
@iftex
@hfill
@end iftex
 (@code{basic_props:struct/1})

@code{NewArg} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties hold upon exit:}


@code{Index} is currently instantiated to an integer.
@iftex
@hfill
@end iftex
 (@code{term_typing:integer/1})

@code{Term} is a compound term.
@iftex
@hfill
@end iftex
 (@code{basic_props:struct/1})

@code{NewArg} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{undo/1 (pred)}}}
@temp
@end iftex
@pdindex undo/1 
@glindex undo/1 
@deffn PREDICATE undo/1:






@strong{Usage:} @code{undo(Goal)}
@itemize @minus
@item @emph{Description:}  @code{call(@code{Goal})} is executed on backtracking. This is a major change to the normal 
@glindex control
control of Ciao Prolog execution. 
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@item @emph{The following properties hold upon exit:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Delaying predicates (freeze), Delaying predicates (when), Miscellaneous predicates, Top
@comment node-name, next,  previous,  up
@chapter Delaying predicates (freeze)
@liindex freeze
@c -------------------------------------------------
@c WARNING: Do not edit this file (freeze.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/freeze/freeze.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#72 (2000/3/19, 19:9:14 CET)

This library offers a simple implementation of 
@glindex freeze/2
@code{freeze/2}, 
@glindex frozen/2
@code{frozen/2}, etc. [Col82,Nai85,Nai91,Car87] based on the use of attributed variables [Hol92,Hol90].



@menu
* Usage and interface (freeze)::  
* Documentation on exports (freeze)::  
* Documentation on multifiles (freeze)::  
@end menu

@node Usage and interface (freeze), Documentation on exports (freeze), Delaying predicates (freeze), Delaying predicates (freeze)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{freeze})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(freeze)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex freeze/2
@code{freeze/2}, 
@glindex frozen/2
@code{frozen/2}.


@item @emph{Multifiles:}

@glindex verify_attribute/2
@code{verify_attribute/2}, 
@glindex combine_attributes/2
@code{combine_attributes/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (freeze), Documentation on multifiles (freeze), Usage and interface (freeze), Delaying predicates (freeze)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{freeze})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{freeze/2 (pred)}}}
@temp
@end iftex
@pdindex freeze/2 
@glindex freeze/2 
@deffn PREDICATE freeze/2:






@emph{Meta-predicate} with arguments: @code{freeze(?,goal)}.


@strong{Usage:} @code{freeze(X,Goal)}
@itemize @minus
@item @emph{Description:} If @code{X} is free delay @code{Goal} until @code{X} is non-variable. 
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{frozen/2 (pred)}}}
@temp
@end iftex
@pdindex frozen/2 
@glindex frozen/2 
@deffn PREDICATE frozen/2:






@emph{Meta-predicate} with arguments: @code{frozen(?,goal)}.


@strong{Usage:} @code{frozen(X,Goal)}
@itemize @minus
@item @emph{Description:} @code{Goal} is currently delayed until variable @code{X} becomes bound. 
@item @emph{The following properties should hold upon exit:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (freeze),  , Documentation on exports (freeze), Delaying predicates (freeze)
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{freeze})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{verify_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex verify_attribute/2 
@glindex verify_attribute/2 
@deffn PREDICATE verify_attribute/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{combine_attributes/2 (pred)}}}
@temp
@end iftex
@pdindex combine_attributes/2 
@glindex combine_attributes/2 
@deffn PREDICATE combine_attributes/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1


@c (component)


@node Delaying predicates (when), Active modules (high-level distributed execution), Delaying predicates (freeze), Top
@comment node-name, next,  previous,  up
@chapter Delaying predicates (when)
@liindex when
@c -------------------------------------------------
@c WARNING: Do not edit this file (when.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/when/when.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro.

@strong{Version:} 1.5#172 (2000/7/12, 16:45:31 CEST)

@strong{Version of last change:} 1.5#165 (2000/6/26, 17:11:16 CEST)

 


@glindex when/2
@code{when/2} delays a predicate until some condition in its variable is met. For example, we may want to find out the maximum of two numbers, but we are not sure when they will be instantiated. We can write the standard 
@glindex max/3
@code{max/3} predicate (but changing its name to 
@glindex gmax/3
@code{gmax/3} to denote that the first and second arguments must be ground) as 


@smallexample 
gmax(X, Y, X):- X > Y, !.
gmax(X, Y, Y):- X =< Y.
@end smallexample  

and then define a 'safe' 
@glindex max/3
@code{max/3} as 
 
@smallexample 
max(X, Y, Z):-
        when((ground(X),ground(Y)), gmax(X, Y, Z)).
@end smallexample  

which can be called as follows: 


@smallexample 
?- max(X, Y, Z) , Y = 0, X = 8.

X = 8,
Y = 0,
Z = 8 ? 

yes
@end smallexample  

Alternatively, 
@glindex max/3
@code{max/3} could have been defined as 


@smallexample 
max(X, Y, Z):-
        when(ground((X, Y)), gmax(X, Y, Z)).
@end smallexample  

with the same effects as above. More complex implementations are possible. Look, for example, at the @code{max.pl} implementation under the @code{when} library directory, where a 
@glindex max/3
@code{max/3} predicate is implemented which waits on all the arguments until there is enough information to determine their values: 


@smallexample 
?- use_module(library('when/max')).

yes
?- max(X, Y, Z), Z = 5, Y = 4.

X = 5,
Y = 4,
Z = 5 ? 

yes
@end smallexample  





@menu
* Usage and interface (when)::	
* Documentation on exports (when)::  
* Documentation on multifiles (when)::	
* Known bugs and planned improvements (when)::	
@end menu

@node Usage and interface (when), Documentation on exports (when), Delaying predicates (when), Delaying predicates (when)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{when})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(when)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex when/2
@code{when/2}.


@item @emph{Regular Types:}

@glindex wakeup_exp/1
@code{wakeup_exp/1}.


@item @emph{Multifiles:}

@glindex verify_attribute/2
@code{verify_attribute/2}, 
@glindex combine_attributes/2
@code{combine_attributes/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex metaterms
@code{metaterms}, 
@glindex sort
@code{sort}, 
@glindex sets
@code{sets}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (when), Documentation on multifiles (when), Usage and interface (when), Delaying predicates (when)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{when})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{when/2 (pred)}}}
@temp
@end iftex
@pdindex when/2 
@glindex when/2 
@deffn PREDICATE when/2:






@emph{Meta-predicate} with arguments: @code{when(?,goal)}.


@strong{Usage:} @code{when(WakeupCond,Goal)}
@itemize @minus
@item @emph{Description:} Delays / executes @code{Goal} according to @code{WakeupCond} given. The @code{WakeupCond}s now acceptable are @code{ground(T)} (
@glindex Goal
@code{Goal} is delayed until @code{T} is ground), @code{nonvar(T)} (
@glindex Goal
@code{Goal} is delayed until @code{T} is not a variable), and conjunctions and disjunctions of conditions: 


@smallexample 
wakeup_exp(ground(_)).
wakeup_exp(nonvar(_)).
wakeup_exp((C1, C2)):- wakeup_exp(C1), wakeup_exp(C2).
wakeup_exp((C1; C2)):- wakeup_exp(C1), wakeup_exp(C2).
@end smallexample  


@glindex when/2
@code{when/2} only fails it the @code{WakeupCond} is not legally formed. If @code{WakeupCond} is met at the time of the call no delay mechanism is involved --- but there exists a time penalty in the condition checking. 

In case that an instantiation fires the execution of several predicates, the order in which these are executed is not defined. 
@item @emph{The following properties should hold at call time:}


@code{WakeupCond} is a legal expression for delaying goals.
@iftex
@hfill
@end iftex
 (@code{when:wakeup_exp/1})

@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{wakeup_exp/1 (regtype)}}}
@temp
@end iftex
@teindex wakeup_exp/1 
@glindex wakeup_exp/1 
@deffn REGTYPE wakeup_exp/1:






@strong{Usage:} @code{wakeup_exp(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a legal expression for delaying goals. 
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (when), Known bugs and planned improvements (when), Documentation on exports (when), Delaying predicates (when)
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{when})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{verify_attribute/2 (pred)}}}
@temp
@end iftex
@pdindex verify_attribute/2 
@glindex verify_attribute/2 
@deffn PREDICATE verify_attribute/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{combine_attributes/2 (pred)}}}
@temp
@end iftex
@pdindex combine_attributes/2 
@glindex combine_attributes/2 
@deffn PREDICATE combine_attributes/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1



@node Known bugs and planned improvements (when),  , Documentation on multifiles (when), Delaying predicates (when)
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{when})

@itemize @bullet{}

@item
Redundant conditions are not removed.

@item
Floundered goals are not appropriately printed.
@end itemize

@c (component)


@node Active modules (high-level distributed execution), Breadth-first execution, Delaying predicates (when), Top
@comment node-name, next,  previous,  up
@chapter Active modules (high-level distributed execution)
@liindex actmods
@c -------------------------------------------------
@c WARNING: Do not edit this file (actmods_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/actmods/actmods_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo, Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#141 (2000/5/11, 13:33:29 CEST)

 

Active modules [CH95] provide a high-level model of 
@glindex inter-process communication
inter-process communication and 
@glindex distributed execution
distributed execution (note that using Ciao's communication and concurrency primitives, such as sockets, concurrent predicates, etc.). An 
@coindex active module
@glindex active module
@emph{active module} (or an 
@coindex active object
@glindex active object
@emph{active object}) is an ordinary module to which computational resources are attached, and which resides at a given location on the network. Compiling an active module produces an executable which, when running, acts as a server for a number of predicates, the predicates exported by the module. Predicates exported by an active module can be accessed by a program on the network by simply ``using'' the module, which then imports such ``remote predicates.'' The process of loading an active module does not involve transferring any code, but rather setting up things so that calls in the module using the active module are executed as remote procedure calls to the active module. This occurs in the same way independently of whether the active module and the using module are in the same machine or in different machines across the network. 

Except for having compiling it in a special way (see below), an active module is identical from the programmer point of view to an ordinary module. A program using an active module imports it and uses it in the same way as any other module, except that it uses ``
@glindex use_active_module
@code{use_active_module}'' rather than ``
@glindex use_module
@code{use_module}'' (see below). Also, an active module has an address (network address) which must be known in order to use it. In order to use an active module it is necessary to know its address. 
 
@footnote{It is also possible to provide active modules via a WWW address. However, we find it more straightforward to simply use socket addresses. In any case, this is generally hidden inside the access method and can be thus made transparent to the user.} 

From the implementation point of view, active modules are essentially daemons: executables which are started as independent processes at the operating system level. Communication with active modules is implemented using sockets (thus, the address of an active module is an IP socket address in a particular machine). Requests to execute goals in the module are sent through the socket by remote programs. When such a request arrives, the process running the active module takes it and executes it, returning through the socket the computed answers. These results are then taken and used by the remote processes. Backtracking over such remote calls works as usual and transparently. The only limitation (this may change in the future, but it is currently done for efficiency reasons) is that all alternative answers are precomputed (and cached) upon the first call to an active module and thus @emph{an active module should not export a predicate which has an infinite number of answers}. 
 

The first thing to do is to select a method whereby the client(s) (the module(s) that will use the active module) can find out in which machine/port (IP address/socket number) the server (i.e., the active module) will be listening once started. The easiest way to do this is to use of the redezvous methods which are provided in the Ciao distribution in the @code{library/actmods} directory, such as @code{tmpbased...} or @code{filebased...}. 

The first is based on saving the IP address and socket number of the server in a file in a predefined directory (generally @code{/tmp}, but this can be changed by changing @code{tmpbased_common.pl}). 

The second one is similar but saves the info in the directory in which the server is started (as @emph{<module_name>}@code{.addr}). The clients must be started in the same directory. However, they can be started in different machines, provided this directory is shared (e.g., by NFS or Samba). 

These rendezvous methods are encoded in two modules: a first one, called @code{...publish.pl}, is used by the server to publish its info. The second one, called @code{...locate.pl}, is used by the client(s) to locate the server info. For efficiency, the client methods maintain a cache of addresses, so that the server information only needs to be read from the file system the first time the active module is accessed. 

Active modules are compiled using the @code{-a} option of the Ciao compiler (this can also be done from the interactive top-level shell using 
@glindex make_actmod/2
@code{make_actmod/2}). For example, issuing the following command: 


@smallexample 
  ciaoc -a 'actmods/filebased_publish' simple_server
  @end smallexample  

compiles the simple server example that comes with the distribution (in the @code{actmods/example} directory). The @code{simple_client_with_main} example (in the same directory) can be compiled as usual: 


@smallexample 
  ciaoc simple_client_with_main
  @end smallexample  

Now, if the server is running (e.g., @code{simple_server &} in Un*x or double-clicking on it in Win32) when the client is executed it will connect with the server to access the predicate(s) that it imports from it. 

A simpler even client 
@glindex simple_client.pl
@code{simple_client.pl} can be loaded into the top level and its predicates called as usual (and they will connect with the server if it is running). 

The architecture of the active modules model in Ciao allows defining other methods for this communication to happen. For example, one can implement a 
@glindex name server
name server. This can itself be an active module which resides at a fixed and known machine and port number (this is known as a @emph{service} and is defined in @code{/etc/services} in a Un*x machine). In order the best way is to mimick the code of the redezvous methods provided in the Ciao distribution. 
 
Security: in the access method (?). 





@menu
* Usage and interface (actmods)::  
* Documentation on new declarations (actmods)::	 
@end menu

@node Usage and interface (actmods), Documentation on new declarations (actmods), Active modules (high-level distributed execution), Active modules (high-level distributed execution)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{actmods})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(actmods).}

or

@code{:- module(...,...,[actmods]).}

@item @strong{New declarations defined:}

@glindex use_active_module/2
@code{use_active_module/2}.

@end itemize
@end cartouche


@node Documentation on new declarations (actmods),  , Usage and interface (actmods), Active modules (high-level distributed execution)
@comment node-name, next,  previous,  up
@section Documentation on new declarations (@code{actmods})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_active_module/2 (decl)}}}
@temp
@end iftex
@deindex use_active_module/2 
@glindex use_active_module/2 
@deffn DECLARATION use_active_module/2:






@strong{Usage:} :- @code{use_active_module(AModule,Predicates)}.
@itemize @minus
@item @emph{Description:} Specifies that this code imports from the @emph{active module} defined in @code{AModule} the predicates in @code{Imports}. The imported predicates must be exported by the active module.  
@item @emph{The following properties should hold at call time:}


@code{AModule} is a source name.
@iftex
@hfill
@end iftex
 (@code{streams_basic:sourcename/1})

@code{Predicates} is a list of @code{predname}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node Breadth-first execution, Iterative-deepening execution, Active modules (high-level distributed execution), Top
@comment node-name, next,  previous,  up
@chapter Breadth-first execution
@liindex bf
@c -------------------------------------------------
@c WARNING: Do not edit this file (bf_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/bf/bf_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Carro.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#143 (2000/5/12, 13:54:34 CEST)

This package implements breadth-first execution of predicates. Predicates written with operators 
@glindex '<-'/1
@code{'<-'/1} (facts) and 
@glindex '<-'/2
@code{'<-'/2} (clauses) are executed using breadth-first search. This may be useful in search problems when a 
@glindex complete proof procedure
complete proof procedure is needed. An example of code would be: 
@smallexample 
:- module(chain, _, [bf]).

test(bf) :- bfchain(a,d).
test(df) :- chain(a,d).   % loops!

bfchain(X,X) <- .
bfchain(X,Y) <- arc(X,Z), bfchain(Z,Y).

chain(X,X).
chain(X,Y) :- arc(X,Z), chain(Z,Y).

arc(a,b).
arc(a,d).
arc(b,c).
arc(c,a).

@end smallexample  

There is another version, called 
@glindex bf/af
@code{bf/af}, which ensures AND-fairness by goal shuffling. This version correctly says ``@code{no}'' executing the following test: 
@smallexample 
:- module(sublistapp, [test/0,sublistapp/2], ['bf/af']).

test :- sublistapp([a],[b]).

sublistapp(S,L) <- append(_,S,Y), append(Y,_,L).

append([], L, L) <- .
append([X|Xs], L, [X|Ys]) <- append(Xs, L, Ys).

@end smallexample  




@menu
* Usage and interface (bf)::	
* Known bugs and planned improvements (bf)::  
@end menu

@node Usage and interface (bf), Known bugs and planned improvements (bf), Breadth-first execution, Breadth-first execution
@comment node-name, next,  previous,  up
@section Usage and interface (@code{bf})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(bf).}

or

@code{:- module(...,...,[bf]).}

@item @strong{New operators defined:}

@glindex <-/2
@code{<-/2} [1200,xfx], 
@glindex <-/1
@code{<-/1} [1200,xf].
@end itemize
@end cartouche


@node Known bugs and planned improvements (bf),  , Usage and interface (bf), Breadth-first execution
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{bf})

@itemize @bullet{}

@item
Does not correctly work in user files.
@end itemize

@c (component)


@node Iterative-deepening execution, Constraint programming over rationals, Breadth-first execution, Top
@comment node-name, next,  previous,  up
@chapter Iterative-deepening execution
@liindex id
@c -------------------------------------------------
@c WARNING: Do not edit this file (id_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/id/id_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Claudio Vaucheret, Manuel Hermenegildo.


This package applies a @emph{compiling control} technique to implement 
@coindex depth first iterative deepening
@glindex depth first iterative deepening
@emph{depth first iterative deepening} execution [BibRef: iterative-deepening]. It changes the usual @emph{depth-first} computation rule by 
@coindex iterative-deepening
@glindex iterative-deepening
@emph{iterative-deepening} on those predicates specifically marked. This is very useful in search problems when a 
@glindex complete proof procedure
complete proof procedure is needed. 

When this computation rule is used, first all goals are expanded only up to a given depth. If no solution is found or more solutions are needed by backtracking, the depth limit is incremented and the whole goal is repeated. Although it might seem that this approach is very inefficient because all higher levels are repeated for the deeper ones, it has been shown that is performs only about b/(b - 1) times as many operations than the corresponding breadth-first search, (where b is the branching factor of the proof tree) while the waste of memory is the same as depth first. 

The usage is by means of the following directive: 

@code{:- iterative(Name, FirstCut, Formula).} 

which states than the predicate 'Name' given in functor/arity form will be executed using iterative deepening rule starting at the depth 'FirstCut' with depth being incremented by the predicate 'Formula'. This predicate compute the new depth using the previous one. It must implement a dilating function i.e. the new depth must be greater. For example, to start with depth 5 and increment by 10 you can write: 

@code{:- iterative(p/1,5,f).} 

@code{f(X,Y) :- Y is X + 10.} 

or if you prefer, 

@code{:- iterative(p/1,5,(_(X,Y):- Y is X + 10)).} 


@coindex depth limit
@glindex depth limit 
You can also use a fourth parameter to set a limiting depth. All goals below the given depth limit simply fail. Thus, with the following directive: 

@code{:- iterative(p/1,5,(_(X,Y):- Y is X + 10),100).} 

all goals deeper than 100 will fail. 

An example of code using this package would be: 


@smallexample 
:- module(example_id, _,[id]).

test(id) :- 
        idchain(a,d).
test(df) :- 
        chain(a,d).   % loops!

:- iterative(idchain/2, 3, ( _(X,Z) :- Z is X + 1) ).

idchain(X,X).
idchain(X,Y) :- 
        arc(X,Z), 
        idchain(Z,Y).

chain(X,X).
chain(X,Y) :- 
        arc(X,Z), 
        chain(Z,Y).

arc(a,b).
arc(a,d).
arc(b,c).
arc(c,a).

@end smallexample  

The order of solutions are first the shallower and then the deeper. Solutions which are between two cutoff are given in the usual left to right order. For example, 


@smallexample 
:- module(_,_,[id]).

:- iterative(p/1,0,(_(X,Z) :- Z is X + 1),2). % all goals deeper than 2 will fail

%:- iterative(p/1,1,(_(X,Z) :- Z is X + 3)). % change the solutions' order 
                                             % to goal p(X). 

p(X) :- q(X).
p(a).

q(X) :- r(X).
q(b).

r(X) :- s(X).
r(c).

s(d).


@end smallexample  

It is possible to preserve the iterative-deepening behavior for calls to predicates defined in other modules. These modules should obviously also use this package. In addition @emph{all} predicates from such modules should imported, i.e., the directive @code{:- use_module(module)}, should be used in this case instead of @code{:- use_module(module,[...])}. Otherwise calls to predicates outside the module will be treated in the usual way i.e. by depth-first computation. 

Another complete proof procedure implemented is the 
@glindex bf
@code{bf} package (
@glindex breadth first execution
breadth first execution). 





@menu
* Usage and interface (id)::	
@end menu

@node Usage and interface (id),  , Iterative-deepening execution, Iterative-deepening execution
@comment node-name, next,  previous,  up
@section Usage and interface (@code{id})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(id).}

or

@code{:- module(...,...,[id]).}
@end itemize
@end cartouche

@c (component)


@node Constraint programming over rationals, Constraint programming over reals, Iterative-deepening execution, Top
@comment node-name, next,  previous,  up
@chapter Constraint programming over rationals
@liindex clpq
@c -------------------------------------------------
@c WARNING: Do not edit this file (clpq_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/clpqr_src/clpq_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Christian Holzbaur, Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#156 (2000/5/30, 11:0:51 CEST)

 

@strong{Note:} This package is currently being adapted to the new characteristics of the Ciao module system. This new version now works right now to some extent, but it is under further development at the moment. Use with (lots of) caution. 





@menu
* Usage and interface (clpq)::	
* Other information (clpq)::	
@end menu

@node Usage and interface (clpq), Other information (clpq), Constraint programming over rationals, Constraint programming over rationals
@comment node-name, next,  previous,  up
@section Usage and interface (@code{clpq})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(clpq).}

or

@code{:- module(...,...,[clpq]).}
@end itemize
@end cartouche


@node Other information (clpq),  , Usage and interface (clpq), Constraint programming over rationals
@comment node-name, next,  previous,  up
@section Other information (@code{clpq})

 



@menu
* Some CLP(Q) examples::	
@end menu

@node Some CLP(Q) examples,  , Other information (clpq), Other information (clpq)
@comment node-name, next,  previous,  up
@subsection Some CLP(Q) examples 


@noindent
(Other examples can be found in the source and library directories.) 


@itemize @bullet{} 
@item 'Reversible' Fibonacci (clpq): 
@end itemize  


@noindent

@smallexample 
:- module(_, [fib/2], []).
:- use_package(clpq).

fib(X,Y):- X .=. 0, Y .=. 0.
fib(X,Y):- X .=. 1, Y .=. 1.
fib(N,F) :-
        N .>. 1,
        N1 .=. N - 1,
        N2 .=. N - 2,
        fib(N1, F1),
        fib(N2, F2),
        F .=. F1+F2.

@end smallexample  
 
@itemize @bullet{} 
@item Matrix multiplication (clpq): 
@end itemize  


@noindent

@smallexample 
:- use_package(clpq).
:- use_module(library(write)).

mmultiply([],_,[]).
mmultiply([V0|Rest], V1, [Result|Others]):-  
            mmultiply(Rest, V1, Others),
                multiply(V1,V0,Result).

multiply([],_,[]).
multiply([V0|Rest], V1, [Result|Others]):-  
            multiply(Rest, V1, Others),
                vmul(V0,V1,Result).

vmul([],[],0).
vmul([H1|T1], [H2|T2], Result):- 
        vmul(T1,T2, Newresult), 
        Result .=. H1*H2+Newresult.

matrix(1,[[1,2,3,4,5],[4,0,-1,5,6],[7,1,-2,8,9],[-1,0,1,3,2],[1,5,-3,2,4]]).
matrix(2,[[3,2,1,0,-1],[-2,1,3,0,2],[1,2,0,-1,5],[1,3,2,4,5],[-5,1,4,2,2]]).

%% Call with: ?- go(M).

go(M):-
        matrix(1,M1),
        matrix(2,M2), 
        mmultiply(M1, M, M2).


@end smallexample  
 
@itemize @bullet{} 
@item Queens (clpq): 
@end itemize  


@noindent

@smallexample 

@end smallexample  
 



@c (component)


@node Constraint programming over reals, Object oriented programming, Constraint programming over rationals, Top
@comment node-name, next,  previous,  up
@chapter Constraint programming over reals
@liindex clpr
@c -------------------------------------------------
@c WARNING: Do not edit this file (clpr_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/clpqr_src/clpr_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Christian Holzbaur, Daniel Cabeza.


 

@strong{Note:} This package is currently being adapted to the new characteristics of the Ciao module system. This new version now works right now to some extent, but it under further development at the moment. Use with (lots of) caution. 





@menu
* Usage and interface (clpr)::	
* Other information (clpr)::	
@end menu

@node Usage and interface (clpr), Other information (clpr), Constraint programming over reals, Constraint programming over reals
@comment node-name, next,  previous,  up
@section Usage and interface (@code{clpr})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(clpr).}

or

@code{:- module(...,...,[clpr]).}
@end itemize
@end cartouche


@node Other information (clpr),  , Usage and interface (clpr), Constraint programming over reals
@comment node-name, next,  previous,  up
@section Other information (@code{clpr})

 



@menu
* Some CLP(R) examples::	
@end menu

@node Some CLP(R) examples,  , Other information (clpr), Other information (clpr)
@comment node-name, next,  previous,  up
@subsection Some CLP(R) examples 


@noindent
(Other examples can be found in the source and library directories.) 


@itemize @bullet{} 
@item 'Reversible' Fibonacci (clpr): 
@end itemize  


@noindent

@smallexample 
:- module(_, [fib/2], []).
:- use_package(clpr).

fib(X,Y):- X .=. 0, Y .=. 0.
fib(X,Y):- X .=. 1, Y .=. 1.
fib(N,F) :-
        N .>. 1,
        N1 .=. N - 1,
        N2 .=. N - 2,
        fib(N1, F1),
        fib(N2, F2),
        F .=. F1+F2.

@end smallexample  


@itemize @bullet{} 
@item Dirichlet problem for Laplace's equation (clpr): 
@end itemize  


@noindent

@smallexample 

@end smallexample  




@c (component)


@node Object oriented programming, Declaring classes and interfaces, Constraint programming over reals, Top
@comment node-name, next,  previous,  up
@chapter Object oriented programming
@c -------------------------------------------------
@c WARNING: Do not edit this file (ociao_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/objects/ociao_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#63 (1999/9/29, 19:54:17 MEST)

O'Ciao is a set of libraries which allows object-oriented programming in Ciao Prolog. It extends the Ciao Prolog module system by introducing two new concepts: 


@itemize @bullet{} 
@item Inheritance. 
@item Instantiation. 
@end itemize  


@coindex Polymorphism
@glindex Polymorphism
@emph{Polymorphism} is the third fundamental concept provided by object oriented programming. This concept is not mentioned here since @strong{traditional PROLOG systems are polymorphic by nature}. 

Classes are declared in the same way as modules. However, they may be enriched with inheritance declarations and other object-oriented constructs. For an overview of the fundamentals of O'Ciao, see @uref{http://www.clip.dia.fi.upm.es/~clip/papers/ociao-tr.ps.gz}. However, we will introduce the concepts in a tutorial way via examples. 



@menu
* Early examples::		
* Recommendations on when to use objects::  
* Limitations on object usage::	 
@end menu

@node Early examples, Recommendations on when to use objects, Object oriented programming, Object oriented programming
@comment node-name, next,  previous,  up
@section Early examples 

The following one is a very simple example which declares a class -- a simple stack. Note that if you replace @emph{class/1} declaration with a @emph{module/1} declaration, it will compile correctly, and can be used as a normal Prolog module. 




@smallexample 
%%----------------------------------------------%%
%% A class for stacks.                          %%
%%----------------------------------------------%%

%% Class declaration: the current source defines a class.
:- class(stack,[],[]).

% State declaration: storage/1 is an attribute.
:- dynamic storage/1.

% Interface declaration: the following predicates will
% be available at run-time.
:- export(push/1).
:- export(pop/1).
:- export(top/1).
:- export(is_empty/0).

% Methods

push(Item) :-
        nonvar(Item), 
        asserta_fact(storage(Item)).

pop(Item) :-
        var(Item),
        retract_fact(storage(Item)).

top(Top) :-
        storage(Top), !.

is_empty :-
        storage(_), !, fail.
is_empty.

@end smallexample  

If we load this code at the Ciao toplevel shell: 


@smallexample 
        ?- use_package(objects).

        yes
        ?- use_class(library('class/examples/stack')).

        yes
        ?-
@end smallexample  

we can create two stack @emph{instances} : 


@smallexample 
        ?- St1 new stack,St2 new stack.

        St1 = stack('9254074093385163'),
        St2 = stack('9254074091') ? ,
@end smallexample  

and then, we can operate on them separately: 


@smallexample 
        1 ?- St1:push(8),St2:push(9).

        St1 = stack('9254074093385163'),
        St2 = stack('9254074091') ? 

        yes
        1 ?- St1:top(I),St2:top(K).

        I = 8,
        K = 9,
        St1 = stack('9254074093385163'),
        St2 = stack('9254074091') ? 

        yes
        1 ?-
@end smallexample  

The interesting point is that there are two stacks. If the previous example had been a normal module, we would have a stack , but @strong{only one} stack. 

The next example introduces the concepts of @emph{inheritable} predicate, @emph{constructor}, @emph{destructor} and @emph{virtual method}. Refer to the following sections for further explanation. 


@smallexample 
%%----------------------------------------------%%
%% A generic class for item storage.            %%
%%----------------------------------------------%%
:- class(generic).

% Public interface declaration:
:- export([set/1,get/1,callme/0]).

% An attribute
:- data datum/1.

% Inheritance declaration: datum/1 will be available to 
% descendant classes (if any).
:- inheritable(datum/1).

% Attribute initialization: attributes are easily initialized
% by writing clauses for them.
datum(none).

% Methods

set(X) :-
        type_check(X),
        set_fact(datum(X)).

get(X) :-
        datum(X).

callme :-
        a_virtual(IMPL),
        display(IMPL),
        display(' implementation of a_virtual/0 '),
        nl.

% Constructor: in this case, every time an instance
% of this class is created, it will display a message.
generic :-
        display(' generic class constructor '),
        nl.

% Destructor: analogous to the previous constructor,
% it will display a message every time an instance
% of this class is eliminated.
destructor :-
        display(' generic class destructor '),
        nl.

% Predicates:
% cannot be called as messages (X:method)

% Virtual declaration: tells the system to use the most
% descendant implementation of a_virtual/1 when calling
% it from inside this code (see callme/0).
% If there is no descendant implementation for it, 
% the one defined bellow will be used.
:- virtual a_virtual/1.

a_virtual(generic).

:- virtual type_check/1.

type_check(X) :-
        nonvar(X).

@end smallexample  

And the following example, is an extension of previous class. This is performed by establishing an inheritance relationship: 


@smallexample 
%%----------------------------------------------%%
%% This class provides additional functionality %%
%% to the "generic" class.                      %%
%%----------------------------------------------%%
:- class(specific).

% Establish an inheritance relationship with class "generic".
:- inherit_class(library('class/examples/generic')).

% Override inherited datum/1.
% datum/1 is said to be overriden because there are both an
% inherited definition (from class "generic") and a local one,
% which overrides the one inherited.
:- data datum/1. 
:- inheritable datum/1.

% Extend the public interface inherited from "generic".
% note that set/1 and a_virtual/0 are also overriden. 
% undo/0 is a new functionality added.
:- export([set/1,undo/0]).

% Methods

set(Value) :-
        inherited datum(OldValue),
        !,
        inherited set(Value),
        asserta_fact(datum(OldValue)).
set(Value) :-
        inherited set(Value).

undo :-
        retract_fact(datum(Last)), !,
        asserta_fact(inherited(datum(Last))).
undo :-
        retractall_fact(inherited(datum(_))).

% Constructor
specific :-
        generic,
        retractall_fact(inherited(datum(_))),
        display(' specific class constructor '),
        nl.

% Destructor
destructor :-
        display(' specific class destructor '),
        nl.

% Predicates

% New implementation of a_virtual/1. 
% Since this predicate was declared virtual, the
% implementation below will be called from the inherited 
% method callme/0 instead of the version defined at "generic".
a_virtual(specific).

@end smallexample  

@strong{Additional examples} may be found on the @emph{library/class/examples} directory relative to your Ciao Prolog instalation. 



@node Recommendations on when to use objects, Limitations on object usage, Early examples, Object oriented programming
@comment node-name, next,  previous,  up
@section Recommendations on when to use objects 



We would like to give some advice in the use of object oriented programming, in conjunction with the declarative paradigm. 

You should reconsider using O'Ciao in the following cases: 


@itemize @bullet{} 


@item The pretended "objects" have no state,i.e., no data or dynamic predicates. In this case, a normal module will suffice. 


@item There is state, but there will be only one instance of a pretended class. Again, a module suffices. 


@item The "objects" are data structures (list,trees,etc) already supported by Prolog. However, it does make sense to model, using objects, data structures whose change implies a side-effect such as drawing a particular window on the screen. 


@end itemize  

We recommend the usage of O'Ciao in the following cases: 


@itemize @bullet{} 


@item You feel you will need to have several copies of a "module". 
@item Local copies of a module are needed instead of a global module beeing modified by several ones. 
@item The "classes" are a representation of external entities to Prolog. For example: the X-Window system. 
@item There is state or code outside the Prolog system which needs to be manipulated. For example: interfaces to Java or Tcl/Tk code. 
@item You are not familiar with Prolog, but you know about object oriented programming. O'Ciao may be used as a learning tool to introduce yourself on the declarative programming paradigm. 


@end itemize  



@node Limitations on object usage,  , Recommendations on when to use objects, Object oriented programming
@comment node-name, next,  previous,  up
@section Limitations on object usage 

O'Ciao run-time speed is limited by the usage of meta-programming structures, for instance: @code{X = (Object:mymethod(25)), call(X)}. O'Ciao will optimize static manipulation of objects (those that can be determined at compile time). 


@c (component)


@node Declaring classes and interfaces, Compile-time usage of objects, Object oriented programming, Top
@comment node-name, next,  previous,  up
@chapter Declaring classes and interfaces
@liindex class
@c -------------------------------------------------
@c WARNING: Do not edit this file (class_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/class/class_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#162 (2000/6/14, 17:7:15 CEST)

O'Ciao classes are declared in the same way as traditional prolog modules. The general mechanism of @emph{source expansion} will translate object-oriented declarations to normal prolog code. This is done transparently to the user. 

Abstract 
@coindex interfaces
@glindex interfaces
@emph{interfaces} are restricted classes which declare exported predicates with no implementation. The implementation itselt will be provided by some class using an 
@glindex implements/1
@code{implements/1} declaration. Only 
@glindex export/1
@code{export/1} and 
@glindex data/1
@code{data/1} declarations are allowed when declaring an interface. Normal classes may treated as interfaces just ignoring all exported predicate implementations. 



@menu
* Usage and interface (class)::	 
* Documentation on new declarations (class)::  
* Documentation on exports (class)::  
* Other information (class)::	
* Known bugs and planned improvements (class)::	 
@end menu

@node Usage and interface (class), Documentation on new declarations (class), Declaring classes and interfaces, Declaring classes and interfaces
@comment node-name, next,  previous,  up
@section Usage and interface (@code{class})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

To declare a class the compiler must be told to use the @code{class} @emph{source expansion}. To do so, source code must start with a module declaration which loads the class package: 
@smallexample  
           :- class(ClassName).
@end smallexample  
@noindent
or a 
@glindex module/3
@code{module/3} declaration, as follows: 
@smallexample  
           :- module(ClassName,[],[class]).
@end smallexample  


@noindent

@glindex interfaces
interfaces are declared in a similar way: 
@smallexample  
           :- interface(InterfaceName).
@end smallexample  

Please, do not use SICStus-like module declaration, with a non-empty export list. In other case, some non-sense errors will be reported by normal Ciao module system. 

Most of the regular Ciao declarations may be used when defining a class, such as 
@glindex concurrent/1
@code{concurrent/1},
@glindex dynamic/1
@code{dynamic/1}, 
@glindex discontiguous/1
@code{discontiguous/1},
@glindex multifile/1
@code{multifile/1}, and so on. 

However, there are some restrictions wich apply to those declarations: 
@itemize @bullet{} 
@item 
@glindex meta_predicate/1
@code{meta_predicate/1} declaration is not allowed to hold 
@coindex addmodule and pred(N) meta-arguments
@glindex addmodule and pred(N) meta-arguments
@emph{addmodule and pred(N) meta-arguments}, except for previously declared multifiles. 
@item Attribute and multifile predicates must be declared before any clause of the related predicate. 
@item There is no sense in declaring an attribute as meta_predicate. 
@end itemize  

It is a good practique to put all your declarations at the very begining of the file, just before the code itself. 

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex inherited/1
@code{inherited/1}, 
@glindex self/1
@code{self/1}, 
@glindex constructor/0
@code{constructor/0}, 
@glindex destructor/0
@code{destructor/0}.


@end itemize


@item @strong{New declarations defined:}

@glindex export/1
@code{export/1}, 
@glindex public/1
@code{public/1}, 
@glindex inheritable/1
@code{inheritable/1}, 
@glindex data/1
@code{data/1}, 
@glindex dynamic/1
@code{dynamic/1}, 
@glindex concurrent/1
@code{concurrent/1}, 
@glindex inherit_class/1
@code{inherit_class/1}, 
@glindex implements/1
@code{implements/1}, 
@glindex virtual/1
@code{virtual/1}.


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex objects/objects_rt
@code{objects/objects_rt}.


@end itemize

@end itemize
@end cartouche


@node Documentation on new declarations (class), Documentation on exports (class), Usage and interface (class), Declaring classes and interfaces
@comment node-name, next,  previous,  up
@section Documentation on new declarations (@code{class})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{export/1 (decl)}}}
@temp
@end iftex
@deindex export/1 
@glindex export/1 
@deffn DECLARATION export/1:



Declares a method or attribute to be part of the 
@coindex public interface
@glindex public interface
@emph{public interface}. 

The public interface is the set of predicates wich will be accesible from any code establishing an usage relationship with this class (see 
@glindex use_class/1
@code{use_class/1} for further information). 

Publishing an attribute or method is very similar to @emph{exporting} a predicate in a Prolog module. 

Whether an inherited and exported predicate is 
@glindex overriden
overriden, it must be explicitly exported again. 

An inherited (but not exported) predicate may become exported, without overriding it by the usage of this declaration. 


@strong{Usage:} :- @code{export(Spec)}.
@itemize @minus
@item @emph{Description:} @code{Spec} will be part of the public (exported) interface. 
@item @emph{The following properties should hold at call time:}


@code{Spec} is a method or attribute specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:method_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{public/1 (decl)}}}
@temp
@end iftex
@deindex public/1 
@glindex public/1 
@deffn DECLARATION public/1:



Just an alias for 
@glindex export/1
@code{export/1}.


@strong{Usage:} :- @code{public(Spec)}.
@itemize @minus
@item @emph{Description:} This declaration may be used instead of 
@glindex export/1
@code{export/1}. 
@item @emph{The following properties should hold at call time:}


@code{Spec} is a method or attribute specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:method_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{inheritable/1 (decl)}}}
@temp
@end iftex
@deindex inheritable/1 
@glindex inheritable/1 
@deffn DECLARATION inheritable/1:



Declares a method or attribute to be inherited by descendant classes. Notice that all @strong{public predicates are inheritable by default}. There is no need to mark them as inheritable. 

Traditionaly, object oriented languages makes use of the 
@coindex protected
@glindex protected
@emph{protected} concept. Inheritable/1 may be used as the same concept. 

The set of inheritable predicates is called the 
@coindex inheritable interface
@glindex inheritable interface
@emph{inheritable interface}. 


@strong{Usage:} :- @code{inheritable(MethodSpec)}.
@itemize @minus
@item @emph{Description:} @code{MethodSpec} is accessible to descendant classes. 
@item @emph{The following properties should hold at call time:}


@code{MethodSpec} is a method or attribute specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:method_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(data)/1 (decl)}}}
@temp
@end iftex
@deindex data/1 
@glindex data/1 
@deffn DECLARATION data/1:



Declares an 
@coindex attribute
@glindex attribute
@emph{attribute} at current class. Attributes are used to build the internal state of instances. So, each instance will own a particular copy of those attribute definitions. In this way, one instance may have different state from another. 

O'Ciao attributes are restricted to hold simple facts. It is not possible to hold a Head :- Body clause at an instance attribute. 

Notice that attributes are 
@coindex multi-evaluated
@glindex multi-evaluated
@emph{multi-evaluated} by nature, and may be manipulated by the habitual @strong{assert/retract} family of predicates. 

Attributes may also be initialized. In order to do so, simply put some clauses after the attribute definition. Each time an instance is created, its initial state will be built from those 
@coindex initialization clauses
@glindex initialization clauses
@emph{initialization clauses}. 

Note: whether a data/1 declaration appears inside an interface, it will be automatically exported. 


@strong{Usage:} :- @code{data Spec}.
@itemize @minus
@item @emph{Description:} @code{Spec} is an attribute. 
@item @emph{The following properties should hold at call time:}


@code{Spec} is a method or attribute specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:method_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(dynamic)/1 (decl)}}}
@temp
@end iftex
@deindex dynamic/1 
@glindex dynamic/1 
@deffn DECLARATION dynamic/1:



Just an alias for 
@glindex data/1
@code{data/1}. 


@strong{Usage:} :- @code{dynamic Spec}.
@itemize @minus
@item @emph{Description:} You may use this declaration instead of 
@glindex data/1
@code{data/1}. 
@item @emph{The following properties should hold at call time:}


@code{Spec} is a method or attribute specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:method_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{(concurrent)/1 (decl)}}}
@temp
@end iftex
@deindex concurrent/1 
@glindex concurrent/1 
@deffn DECLARATION concurrent/1:



Declares a 
@coindex concurrent attribute
@glindex concurrent attribute
@emph{concurrent attribute} at current class. Concurrent attributes are just the same as normal attributes, those declared using 
@glindex data/1
@code{data/1}, except for they may freeze the calling thread instead of failing when no more choice points are remaining on the concurrent attribute. 

In order to get more information about concurrent behavior take a look to the concurrent/1 built-in declaration on Ciao Prolog module system. 


@strong{Usage:} :- @code{concurrent Spec}.
@itemize @minus
@item @emph{Description:} Declares @code{Spec} to be a concurrent attribute. 
@item @emph{The following properties should hold at call time:}


@code{Spec} is a method or attribute specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:method_spec/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{inherit_class/1 (decl)}}}
@temp
@end iftex
@deindex inherit_class/1 
@glindex inherit_class/1 
@deffn DECLARATION inherit_class/1:



Makes any public and/or inheritable predicate at inherited class to become accesible by any instance derived from current class. 

Inherited class is also called the 
@coindex super class
@glindex super class
@emph{super class}. 

Only one inherit_class/1 declaration is allowed to be present at current source. 

Notice that inheritance is 
@glindex public
public by default. Any public and/or inheritable declaration will remain the same to descendant classes. However, any inherited predicate may be @emph{overriden} (redefined). 

A predicate is said to be 
@coindex overriden
@glindex overriden
@emph{overriden} when it has been inherited from super class, but there are clauses (or a 
@glindex data/1
@code{data/1} declaration) present at current class for such a predicate. 

Whether a @strong{public} predicate is overriden, the local definition must also be exported, otherwise an error is reported. 

Whether an @strong{inheritable} predicate (not public) is overriden, the local definition must also be marked as inheritable or exported, otherwise an error is also reported. 

Note: whether inherit_class/1 appears inside an interface, it will be used as an 
@glindex implements/1
@code{implements/1} declaration. 


@strong{Usage:} :- @code{inherit_class(Source)}.
@itemize @minus
@item @emph{Description:} Establish an 
@coindex inheritance relationship
@glindex inheritance relationship
@emph{inheritance relationship} between current class and the class defined at @code{Source} file. 
@item @emph{The following properties should hold at call time:}


@code{Source} is a valid path to a prolog file containing a class declaration (without .pl extension).
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_source/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{implements/1 (decl)}}}
@temp
@end iftex
@deindex implements/1 
@glindex implements/1 
@deffn DECLARATION implements/1:



Forces current source to provide an implementation for the given interface file. Such interface file may declare another class or a specific interface. 

Every public predicate present at given interface file will be automatically declared as public at current source, so you @strong{must} provide an implementation for such predicates. 

The effect of this declaration is called 
@coindex interface inheritance
@glindex interface inheritance
@emph{interface inheritance},and there is no restriction on the number of implements/1 declarations present at current code. 


@strong{Usage:} :- @code{implements(Interface)}.
@itemize @minus
@item @emph{Description:} Current source is supposed to provide an implementation for @code{Interface}. 
@item @emph{The following properties should hold at call time:}


@code{Interface} is a valid path to a prolog file containing a class declaration or an interface declaration (without .pl extension).
@iftex
@hfill
@end iftex
 (@code{objects_rt:interface_source/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{virtual/1 (decl)}}}
@temp
@end iftex
@deindex virtual/1 
@glindex virtual/1 
@deffn DECLARATION virtual/1:



This declaration may be used whenever descendant classes are to implement different versions of a given predicate. 


@coindex virtual
@glindex virtual
@emph{virtual} predicates give a chance to handle, in an uniform way, different implementations of the same functionality. 

Whether a virtual predicate is declared as a method, there must be at least one clause of it present at current source. Whenever no special implementation is needed at current class, a never-fail/allways-fail clause may be defined (depending on your needs). For example: 


@smallexample 
   :- virtual([ test1/1 , test2/2 ]).
   test1(_).
   test2(_,_) :- fail.
@end smallexample  

This kind of virtual methods are also known as 
@coindex abstract methods
@glindex abstract methods
@emph{abstract methods}, since implementation is fully delegated to descendant classes. 

An attribute may be also declared as a virtual one, but there is no need to write clauses for it. 


@strong{Usage:} :- @code{virtual(VirtualMethodSpec)}.
@itemize @minus
@item @emph{Description:} All calls to @code{VirtualMethodSpec} predicate in current source will use the most descendant implementation of it. 
@item @emph{The following properties should hold at call time:}


@code{VirtualMethodSpec} is a method specification.
@iftex
@hfill
@end iftex
 (@code{objects_rt:virtual_method_spec/1})
@end itemize
@end deffn
@sp 1



@node Documentation on exports (class), Other information (class), Documentation on new declarations (class), Declaring classes and interfaces
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{class})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{inherited/1 (pred)}}}
@temp
@end iftex
@pdindex inherited/1 
@glindex inherited/1 
@deffn PREDICATE inherited/1:



This predicate qualificator may be used whenever you need to reference an attribute or method on the super class. 

Since methods and attributes may be 
@glindex redefined
redefined, this qualificator is need to distinguish between a locally declared predicate and the inherited one, which has the same name. 

There is no need to use inherited/1 if a particular inherited predicate has not been redefined at current class. 


@strong{Usage:} @code{inherited(Goal)}
@itemize @minus
@item @emph{Description:} References a given @code{Goal} at the super class 
@item @emph{The following properties should hold at call time:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{self/1 (pred)}}}
@temp
@end iftex
@pdindex self/1 
@glindex self/1 
@deffn PREDICATE self/1:



Determines which instance is currently executing self/1 goal. 

Predicate will fail if argument is not a free variable. Otherwise, it will allways succeed, retrieving the instance identifier which is executing current code. 

This functionality is very usefull since an object must have knowledge of other object's identifier in order to send messages to it.For example: 

:- concurrent ack/0. 

send_data_to_object(Data,Obj) :- self(X), Obj:take_this(Data,X), current_fact(ack). 

acknowledge :- asserta_fact(ack). 

take_this(Data,Sender) :- validate_data(Data), Sender:acknowledge. 


@strong{Usage:} @code{self(Variable)}
@itemize @minus
@item @emph{Description:} Retrieves current instance identifier in @code{Variable} 
@item @emph{The following properties should hold at call time:}


@code{Variable} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Variable} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{constructor/0 (pred)}}}
@temp
@end iftex
@pdindex constructor/0 
@glindex constructor/0 
@deffn PREDICATE constructor/0:



A 
@coindex constructor
@glindex constructor
@emph{constructor} is a special case of method which complains the following conditions: 


@itemize @bullet{} 
@item The constructor functor matches the current class name. 
@item A constructor may hold any number of arguments. 
@item If an inheritance relationship was defined, an inherited constructor must be manually called (see below). 
@item When instance creation takes place, any of the declared constructors are implicitly called. The actual constructor called depends on the 
@glindex new/2
@code{new/2} goal specified by the user. 
@end itemize  

This is a simple example of constructor declaration for the foo class: 


@smallexample 
           foo :- 
               display('an instance was born').
@end smallexample  

Constructor declaration is not mandatory, and there may be more than one constructor declarations (with different arity) at the source code. 

This functionality is usefull when some computation is needed at instance creation. For example: opening a socket, clearing the screen, etc. 

Whenever an inheritance relationship is established, and there is any constructor defined at the super class, you must call manually an inherited constructor. Here is an example: 


@smallexample 
           :- class(foo).
           :- inherit_class(myclass).

           foo :-
               myclass(0),
               display('an instance was born').

           foo(N) :- myclass(N).
@end smallexample  

Consequences may be unpredictable, if you forget to call an inherited constructor. You should also take care not to call an inherited constructor twice. 

All defined constructors are inheritable by default. A constructor may also be declared as public (by the user), but it is not mandatory. 


@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Constructors are implicitly declared 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{destructor/0 (pred)}}}
@temp
@end iftex
@pdindex destructor/0 
@glindex destructor/0 
@deffn PREDICATE destructor/0:



A 
@coindex destructor
@glindex destructor
@emph{destructor} is a special case of method which will be automatically called when instance destruction takes place. 

A destructor will never be wanted to be part of the public interface, and there is no need to mark them as inheritable, since all inherited destructors are called by O'Ciao just before yours. 

This is a simple example of destructor declaration: 


@smallexample 
           destructor :- 
               display('goodbye, cruel world!!!').
@end smallexample  

Destructor declaration is not mandatory. Failure or sucess of destructors will be ignored by O'Ciao, and they will be called only once. 

This functionality is useful when some computation is need at instance destruction. For example: closing an open file. 


@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Destructors are implicitly declared 
@end itemize
@end deffn
@sp 1



@node Other information (class), Known bugs and planned improvements (class), Documentation on exports (class), Declaring classes and interfaces
@comment node-name, next,  previous,  up
@section Other information (@code{class})

 

This describes the errors reported when declaring a class or an interface. The first section will explain compile-time errors, this is, any semantic error which may be determined at compile time. The second section will explain run-time errors, this is, any exception that may be raisen by the incorrect usage of O'Ciao. Some of those errors may be not reported at compile time, due to the use of meta-programational structures. For example: 

@code{functor(X,my_method,0),call(X).} 

O'Ciao is not able to check whether my_method/0 is a valid method or not. So, this kind of checking is left to run time. 



@menu
* Class and Interface error reporting at compile time::	 
* Class and Interface error reporting at run time::  
* Normal Prolog module system interaction::  
@end menu

@node Class and Interface error reporting at compile time, Class and Interface error reporting at run time, Other information (class), Other information (class)
@comment node-name, next,  previous,  up
@subsection Class and Interface error reporting at compile time 
 
@itemize @bullet{} 


@item @strong{ERROR : multiple inheritance not allowed.} 

There are two or more inherit_class/1 declarations found at your code. Only one declaration is allowed, since there is no multiple code inheritance support. 


@item @strong{ERROR : invalid inheritance declaration.} 

The given parameter to inherit_class/1 declaration is not a valid path to a Prolog source. 


@item @strong{ERROR : sorry, addmodule meta-arg is not allowed at @emph{F/A}. } 

You are trying to declare @emph{F/A} as meta-predicate, and one of the meta-arguments is @emph{addmodule}. This is not allowed in O'Ciao due to implementation restrictions. For example: 

@code{:- meta_predicate example(addmodule).} 

@code{example(X,FromModule) :- call(FromModule:X).} 


@item @strong{ERROR : invalid attribute declaration for @emph{Arg}. } 

Argument to data/1 or dynamic/1 declaration is not a valid predicate specification of the form @emph{Functor/Arity}. For example: 

@code{:- data attr.} 

@code{:- dynamic attr(_).} 

@code{:- data attr/m.} 

etc,etc... 


@item @strong{ERROR : pretended attribute @emph{F/A} was assumed to be a method.} 

You put some clauses of @emph{F/A} before the corresponding data/1 or dynamic/1 declaration. For example: 

@code{attr(initial_value).} 

@code{:- data attr/1.} 

It is a must to declare attributes before any clause of the given predicate. 


@item @strong{ERROR : destructor/0 is not allowed to be an attribute.} 

There is a :- data(destructor/0) or :- dynamic(destructor/0). declaration in your code. This is not allowed since destructor/0 is a reserved predicate, and must be allways a method. 


@item @strong{ERROR : @emph{Constructor} is not allowed to be an attribute.} 

As the previos error, you are trying to declare a constructor as an attribute. A constructor must be allways a method. 


@item @strong{ERROR : invalid multifile: destructor/0 is a reserved predicate.} 

There is a :- multifile(destructor/0). declaration in your code. This is not allowed since destructor/0 is a reserved predicate, and must be allways a method. 


@item @strong{ERROR : invalid multifile: @emph{Constructor} is a reserved predicate.} 

As the previos error, you are trying to declare a constructor as a multifile. Any constructor must allways be a method. 


@item @strong{ERROR : multifile declaration of @emph{F/A} ignored: it was assumed to be a method.} 

You put some clauses of @emph{F/A} before the corresponding multifile/1 declaration. For example: 

example(a,b). 

@code{:- multifile example/2.} 

Multifile predicates must be declared before any clause of the given predicate. 


@item @strong{ERROR : invalid multifile declaration: multifile(@emph{Arg}). } 

Given argument to multifile/1 declaration is not a valid predicate specification, of the form @emph{Functor/Arity}. 


@item @strong{ERROR : invalid public declaration: @emph{Arg}. } 

Given argument @emph{Arg} to public/1 or export/1 declaration is not a valid predicate specification, of the form @emph{Functor/Arity}. 


@item @strong{ERROR : invalid inheritable declaration: inheritable(@emph{Arg}). } 

Given argument @emph{Arg} to inheritable/1 declaration is not a valid predicate specification, of the form @emph{Functor/Arity}. 


@item @strong{ERROR : destructor/0 is not allowed to be virtual.} 

There is a :- virtual(destructor/0) declaration present at your code. Destructors and/or constructors are not allowed to be virtual. 


@item @strong{ERROR : @emph{Constructor} is not allowed to be virtual.} 

As the previous error, you are trying to declare a constructor as virtual. This is not allowed. 


@item @strong{ERROR : invalid virtual declaration: virtual(@emph{Arg}). } 

Given argument to virtual/1 declaration is not a valid predicate specification, of the form @emph{Functor/Arity}. 


@item @strong{ERROR : clause of @emph{F/A} ignored : only facts are allowed as initial state.} 

You declared @emph{F/A} as an attribute, then you put some clauses of that predicate in the form @emph{Head :- Body}. For example: 

@code{:- data my_attribute/1.} 

@code{my_attribute(X) :- X>=0 , X<=2.} 

This is not allowed since attributes are assumed to hold simple facts. The correct usage for those @emph{initialization clauses} is: 

@code{:- data my_attribute/1.} 

@code{my_attribute(0).} 

@code{my_attribute(1).} 

@code{my_attribute(2).} 


@item @strong{ERROR : multifile @emph{F/A} is not allowed to be public.} 

The given @emph{F/A} predicate is both present at multifile/1 and public/1 declarations. For example: 

@code{:- public(p/1).} 

@code{:- multifile(p/1).} 

This is not allowed since multifile predicates are not related to Object Oriented Programming. 


@item @strong{ERROR : multifile @emph{F/A} is not allowed to be inheritable.} 

Analogous to previous error. 


@item @strong{ERROR : multifile @emph{F/A} is not allowed to be virtual.} 

Analogous to previous error. 


@item @strong{ERROR : virtual @emph{F/A} must be a method or attribute defined at this class.} 

There is a virtual/1 declaration for @emph{F/A}, but there is not any clause of that predicate nor a 
@glindex data/1
@code{data/1} declaration. You must declare at least one clause for every virtual method. Virtual attributes does not require any clause but a 
@glindex data/1
@code{data/1} declaration must be present. 


@item @strong{ERROR : implemented interface @emph{Module} is not a valid interface.} 

There is an 
@glindex implements/1
@code{implements/1} declaration present at your code where given @emph{Module} is not declared as class nor interface. 


@item @strong{ERROR : predicate @emph{F/A} is required both as method (at @emph{Itf1} interface) and attribute (at @emph{Itf2} interface).} 

There is no chance to give a correct implementation for @emph{F/A} predicate since @emph{Itf1} and @emph{Itf2} interfaces require different definitions. To avoid this error, you must remove one of the related 
@glindex implements/1
@code{implements/1} declaration. 


@item @strong{ERROR : inherited @emph{Source} must be a class.} 

There is an :- inherit_class(@emph{Source}) declaration, but that source was not declared as a class. 


@item @strong{ERROR : circular inheritance: @emph{Source} is not a valid super-class.} 

Establishing an inheritance relationship with @emph{Source} will cause current class to be present twice in the inheritance line. This is not allowed. The cause of this is error is simple : There is some inherited class from @emph{Source} which also establishes an inheritance relationship with current source. 


@item @strong{ERROR : method/attribute @emph{F/A} must be implemented.} 

Some of the implemented interfaces requires @emph{F/A} to be defined, but there is no definition for such predicate, even an inherited one. 


@item @strong{ERROR : local implementation of @emph{F/A} hides inheritable/public definition.} 

There is an inherited definition for @emph{F/A} which is been redefined at current class, but there is no valid inheritable/public declaration for the last one. Overriden public predicates must be also declared as public. Overriden inheritable predicates must be declared either as public or inheritable. 


@item @strong{ERROR : public predicate @emph{F/A} was not defined nor inherited.} 

There is a 
@glindex public/1
@code{public/1} declaration for @emph{F/A}, but there is no definition for it at current class nor an inherited one. 


@item @strong{ERROR : argument to self/1 must be a free variable.} 

Argument to self/1 is not a variable, for example: @code{self(abc)}. 


@item @strong{ERROR : unknown inherited attribute in @emph{Goal}.} 

@emph{Goal} belongs to assert/retract family of predicates, and given argument is not a valid inherited attribute. The most probable causes of this error are: 


@itemize @bullet{} 


@item The given predicate is defined at super-class, but you forgot to mark it as inheritable (or public), at such class. 
@item The given predicate was not defined (at super-class) as an attribute, just as a method. 
@end itemize  


@item @strong{ERROR : unknown inherited goal: @emph{Goal}.} 

The given @emph{Goal} was not found at super-class, or it is not accessible. Check whether @emph{Goal} was marked as inheritable (or public) at super-class. 


@item @strong{ERROR : invalid argument: @emph{F/A} is not an attribute.} 

You are trying to pass a method as an argument to any predicate which expect a @emph{fact} predicate. 


@item @strong{ERROR : unknown inherited fact: @emph{Fact}.} 

There is a call to any predicate which expects a @emph{fact} argument (those declared as data or dynamic),but the actual argument is not an inherited attribute.For example: 

@code{asserta_fact(inherited(not_an_attribute(8)))} 

where not_an_attribute/1 was not declared as data or dynamic by the super-class (or corresponding ascendant). 


@item @strong{ERROR : unknown inherited spec: @emph{F/A}.} 

There is a reference to an inherited predicate specification, but the involved predicate has not been inherited. 


@item @strong{WARNING : meta-predicate specification of @emph{F/A} ignored since this is an attribute.} 

You declared @emph{F/A} both as an attribute and a meta-predicate. For example: 

@code{:- meta_predicate attr(goal).} 

@code{:- data attr/1.} 

There is no sense in declaring an attribute as meta-predicate. 


@item @strong{WARNING : class destructor is public} 

There is a :- public(destructor/0) declaration present at your code. Marking a destructor as public is a very bad idea since anybody may destroy or corrupt an instance before the proper time. 


@item @strong{WARNING : class destructor is inheritable} 

Analogous to previous error. 


@item @strong{WARNING : There is no call to inherited constructor/s} 

You have not declared any constructor at your class, but there is any inherited constructor that should be called. Whenever you do not need constructors, but there is an inheritance relationship (where super-class declares a constructor), you should write a simple constructor as the following example: 
@smallexample 
   :- class(myclass).
   :- inherit_class(other_class).

   myclass :-
           other_class.
@end smallexample  


@item @strong{WARNING : multifile @emph{F/A} hides inherited predicate.} 

You declared as multifle a predicate which matches an inherited predicate name. Any reference to the inherited predicate must be done by the ways of the inherited/1 qualificator. 


@end itemize  
 



@node Class and Interface error reporting at run time, Normal Prolog module system interaction, Class and Interface error reporting at compile time, Other information (class)
@comment node-name, next,  previous,  up
@subsection Class and Interface error reporting at run time 
 


@itemize @bullet{} 
 
@item @strong{EXCEPTION : error(existence_error(object_goal,@emph{Goal}),@emph{Mod}).} 

Called @emph{Goal} from module (or class) @emph{Mod} is unknown or has not been published. 


@end itemize  



@node Normal Prolog module system interaction,  , Class and Interface error reporting at run time, Other information (class)
@comment node-name, next,  previous,  up
@subsection Normal Prolog module system interaction 

O'Ciao works in conjunction with the Ciao Prolog module system, which also reports its own error messages. This will cause Ciao to report a little criptic error messages due to the general mechanism of source-to-source expansion. Those are some tips you must consider when compiling a class: 


@itemize @bullet{} 


@item Any error relative to method 'm' with arity A will be reported for predicate 'obj$m'/A+1. For example : 
 
@code{WARNING: (lns 28-30) [Item,Itema] - singleton variables in obj$remove/2} 
 
This error is relative to method remove/1. 


@item 
@glindex set_prolog_flag/1
@code{set_prolog_flag/1} declaration will be usefull when declaring multiple constructors. It will avoid some awful warnings. Example: 


@smallexample 
   :- class(myclass).

   %% Use this declaration whenever several constructors are needed.

   :- set_prolog_flag(multi_arity_warnings,off).

   myclass(_).

   myclass(_,_).

   :- set_prolog_flag(multi_arity_warnings,on).
@end smallexample  
@end itemize  




@node Known bugs and planned improvements (class),  , Other information (class), Declaring classes and interfaces
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{class})

@itemize @bullet{}

@item
addmodule and pred(N) meta-arguments are not allowed on meta-predicates. 
@end itemize

@c (component)


@node Compile-time usage of objects, Run time usage of objects, Declaring classes and interfaces, Top
@comment node-name, next,  previous,  up
@chapter Compile-time usage of objects
@liindex objects
@c -------------------------------------------------
@c WARNING: Do not edit this file (objects_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/objects/objects_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#90 (2000/3/24, 14:29:27 CET)

This package is required to enable user code to create objects and manipulate them, as well as loading any needed class. 



@menu
* Usage and interface (objects)::  
* Documentation on new declarations (objects)::	 
* Other information (objects)::	 
@end menu

@node Usage and interface (objects), Documentation on new declarations (objects), Compile-time usage of objects, Compile-time usage of objects
@comment node-name, next,  previous,  up
@section Usage and interface (@code{objects})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

Any code which needs to use objects must include the objects package: 
@smallexample 
    :- module(@emph{ModuleName},@emph{Exports},[objects]).
@end smallexample  
You can use objects even if your code is a class. Note that declaring a class does not automatically enables the code to create instances. 
@smallexample 
    :- class(@emph{ModuleName},[],[objects]).
@end smallexample  

This package enables both static and dynamic usage of objects. 

@item @strong{New declarations defined:}

@glindex  use_class/1
@code{ use_class/1}, 
@glindex  instance_of/2
@code{ instance_of/2}, 
@glindex  new/2
@code{ new/2}.


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex objects/objects_rt
@code{objects/objects_rt}.


@end itemize

@end itemize
@end cartouche


@node Documentation on new declarations (objects), Other information (objects), Usage and interface (objects), Compile-time usage of objects
@comment node-name, next,  previous,  up
@section Documentation on new declarations (@code{objects})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ use_class/1 (decl)}}}
@temp
@end iftex
@deindex  use_class/1 
@glindex  use_class/1 
@deffn DECLARATION  use_class/1:



It establishes an 
@glindex usage relationship
usage relationship between the given file (which is supposed to declare a class) and current source. Usage relationships are needed in order to enable code to create instances of the given class, and to make calls to instances derived from such class. 

Since an interface is some kind of class, they may be used within this declaration but only for semantic checking porpouses. Instances will not be derived from interfaces. 

use_class/1 is used in the same way as 
@glindex use_module/1
@code{use_module/1}. 


@strong{Usage:} :- @code{ use_class(ClassSource)}.
@itemize @minus
@item @emph{Description:} Establish usage relationship with @code{ClassSource}. 
@item @emph{The following properties should hold at call time:}


@code{ClassSource} is a valid path to a prolog file containing a class declaration (without .pl extension).
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_source/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ instance_of/2 (decl)}}}
@temp
@end iftex
@deindex  instance_of/2 
@glindex  instance_of/2 
@deffn DECLARATION  instance_of/2:



Statically declares an identifier to be an instance of a given class. 

It may be used as 
@glindex new/2
@code{new/2} predicate except for: 
@itemize @bullet{} 


@item The instance identifier will not be a variable, it must be provided by the user, and must be unique. 


@item Instance creation will never fail, even if the constructor fails. 
@end itemize  

For every statically declared object the given constructor will be called at program startup. Those instances may be destroyed manually, but it is not recommended. 

When reloading the involved class from the Ciao toplevel shell. It may destroy statically declared instances, and create them again. 

Statically declared instances must be called using a specifically designed module-qualification: @code{ClassName(Object):Goal}. For example: 
@smallexample 
    :- module(example,[main/0],[objects]).
    :- use_class(library(counter)).
    :- cnt instance_of counter(10).

    main :-
         counter(cnt):decrease(1),
         counter(cnt):current_value(X),
         display(X).
@end smallexample  
But @strong{statically written code} (only) is allowed to use module-style qualifications as a macro: 
@smallexample 
    main :-
         cnt:decrease(1),
         cnt:current_value(X),
         display(X).
@end smallexample  
Notice that dynamically expanded goals such as @code{X=cnt,X:decrease(1)} will not work, use @code{X=counter(cnt),X:decrease(1)} instead. 


@strong{Usage:} :- @code{ instance_of(Object,Constructor)}.
@itemize @minus
@item @emph{Description:} Declares @code{Object} to be an instance of the class denoted by @code{Constructor}. 
@item @emph{The following properties should hold at call time:}


@code{Object} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Constructor} is a term whose functor matches a class name.
@iftex
@hfill
@end iftex
 (@code{objects_rt:constructor/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ new/2 (decl)}}}
@temp
@end iftex
@deindex  new/2 
@glindex  new/2 
@deffn DECLARATION  new/2:



This declaration has the same effect as 
@glindex  instance_of/2
@code{ instance_of/2}.


@strong{Usage:} :- @code{ new(Object,Constructor)}.
@itemize @minus
@item @emph{Description:} Just an alias for 
@glindex  instance_of/2
@code{ instance_of/2}. 
@item @emph{The following properties should hold at call time:}


@code{Object} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Constructor} is a term whose functor matches a class name.
@iftex
@hfill
@end iftex
 (@code{objects_rt:constructor/1})
@end itemize
@end deffn
@sp 1



@node Other information (objects),  , Documentation on new declarations (objects), Compile-time usage of objects
@comment node-name, next,  previous,  up
@section Other information (@code{objects})

 Compile-time errors are restricted to some local analysis. Since there is no type declaration in the Prolog language, there is no posibility to determine whenever a given variable will hold an instance of any class. 

However, little semantic analysis is performed. User may aid to perform such an analysis by the usage of run time checks (which are also detected at compile time), or static declarations. For example: 

@code{clause(Obj) :- Obj:a_method(334).} 

O'Ciao may be not able to determine whenever a_method/1 is a valid method for instance Obj, unless some help is provided: 

@code{clause(Obj) :- Obj instance_of myclass,Obj:a_method(334).} 

In such case, O'Ciao will report any semantic error at compile-time. 
 
Most of the run-time errors are related to normal Ciao Prolog module system. Since objects are treated as normal Prolog modules at run time, there is no further documentation here about that stuff. 
 

@menu
* Error reporting at compile time (objects)::  
* Error reporting at run time (objects)::  
@end menu

@node Error reporting at compile time (objects), Error reporting at run time (objects), Other information (objects), Other information (objects)
@comment node-name, next,  previous,  up
@subsection Error reporting at compile time (objects) 
 


@itemize @bullet{} 


@item @strong{ERROR : invalid instance identifier @emph{ID}: must be an atom} 

There is a 
@glindex instance_of/2
@code{instance_of/2} or 
@glindex new/2
@code{new/2} declaration where first argument @emph{ID} must be an unique atom, but currently it is not. Statically declared instances needs an identifier to be provided by the user. 


@item @strong{ERROR : instance identifier @emph{ID} already in use} 

There are two or more 
@glindex instance_of/2
@code{instance_of/2} declarations with the same first argument @emph{ID}. Instance identifiers must be unique. 


@item @strong{ERROR : invalid use_class/1 declaration: @emph{SourceFile} is not a class} 

Those are the causes for this error: 


@itemize @bullet{} 


@item The given @emph{SourceFile} does not exist, or is not accesible. 


@item The given @emph{SourceFile} is not a Prolog source. 


@item The given @emph{SourceFile} is a valid Prolog source, but it does not declare a class. 


@end itemize  


@item @strong{ERROR : unknown class on @emph{ID} instance declaration} 

The class defined on the 
@glindex instance_of/2
@code{instance_of/2} declaration for @emph{ID} instance has not been loaded by a 
@glindex use_class/1
@code{use_class/1} declaration. 


@item @strong{ERROR : instance identifier @emph{ID} is an exisisting Prolog module} 

There is an statically declared instance whose identifier may cause interference with the Ciao Prolog module system. Use another instance identifier. 


@item @strong{ERROR : unknown constructor on @emph{ID} instance declaration} 

The given constructor on the 
@glindex instance_of/2
@code{instance_of/2} declaration for @emph{ID} has not been defined at the corresponding class. 


@item @strong{ERROR : constructor is needed on @emph{ID} instance declaration} 

No constructor was defined on the 
@glindex instance_of/2
@code{instance_of/2} declaration for @emph{ID} and default constructor is not allowed. You must provide a constructor. 


@item @strong{ERROR : static instance @emph{ID} was derived from a different constructor at @emph{AnotherModule}} 

@emph{ID} has been declared to be an static instance both on @emph{AnotherModule} and current source, but different constructors were used. The most probable causes for this error are: 


@itemize @bullet{} 


@item Occasionally, there is another module using the same instance identifier and it was not noticed by you. Another different identifier may be used instead. 


@item It was you intention to use the same object as declared by the other module. In this case, the same constructor must be used. 


@end itemize  


@item @strong{ERROR : invalid first argument in call to new(@emph{Arg},_)} 

There is a new/1 goal in your code where first argument is not a free variable. For example: 

@code{myobj new myclass} 

First argument must be a variable in order to receive a run-time generated object identifier. 


@item @strong{ERROR : unknown class in call to new(?,@emph{Constructor}) } 

The given @emph{Constructor} in call to new/2 does not correspond to any used class at current code. The most probable cause of this may be: 


@itemize @bullet{} 


@item You forgot to include a 
@glindex use_class/1
@code{use_class/1} declaration in your code. 


@item There is a spelling mistake in the constructor.For example: 

:- use_class(myclass). 

foo(X) :- X new mclass. 


@end itemize  


@item @strong{ERROR : can not create an instance from an interface: new(?,@emph{Constructor}) } 

Given @emph{Constructor} references an interface rather than a class. Instances can not be derived from interface-expanded code. 


@item @strong{ERROR : unknown constructor in call to new(?,@emph{Constructor}) } 

As the previous error, there is a mistake in the given @emph{Constructor}. This error is reported when you are trying to call a constructor which was not defined at the corresponding class. Check the class definition to find what is going on. 

Another cause for this error is the incorrect usage of the 
@glindex default constructor
default constructor. Whenever there are one or more constructors defined at the involved class, you are restricted to chose one of them. This seems that default constructor will be available, if and only if, there are no constructors defined at the involved class. 


@item @strong{ERROR : call to non-public @emph{ID:Goal}} 

You are trying to call a method which was not declared as public by the class specified in 
@glindex instance_of/2
@code{instance_of/2} declaration for @emph{ID}. 


@item @strong{ERROR : call to inaccessible predicate at instance @emph{ID:Goal}} 

There is a call to @emph{Goal} at statically declared instance @emph{ID} which is unknown or was not declared as public. 


@item @strong{ERROR : unknown instance @emph{ID} of class @emph{Class} at @emph{Goal}} 

There is a call to @emph{Goal} where involved statically declared instance @emph{ID} is unknown or is not derived from @emph{Class}. Check whether it was declared by a 
@glindex instance_of/2
@code{instance_of/2} declaration. 


@item @strong{ERROR : inaccessible attribute @emph{Fact} at instance @emph{ID}} 

There is an attempt to use @emph{ID:Fact} but it was not declared as public. 


@item @strong{ERROR : unknown attribute @emph{Fact} at instance @emph{ID}} 

There is an attempt to use @emph{ID:Fact} but it is unknown or it is not an attribute (may be a method). 


@item @strong{WARNING : invalid call to new(?,_)} 

There is a call to new/2 in you code where first argument variable has been determined to hold any other instance. For example: 

@code{foo :- X new myclass,X new otherclass.} 

or 

@code{foo(X) :- X instance_of myclass, X new myclass.} 

The related call to new/2 will allways fail. 


@item @strong{WARNING : called @emph{Goal} is not public at any used class} 

There is a call to @emph{Var}:@emph{Goal} where @emph{Var} has not been determined to be compatible with any class. However, @emph{Goal} is not public at any class specified by the 
@glindex use_class/1
@code{use_class/1} declaration. 

This is a warning (not an error) since @emph{Var}:@emph{Goal} may be not related to Object Oriented Programing. 


@end itemize  



@node Error reporting at run time (objects),  , Error reporting at compile time (objects), Other information (objects)
@comment node-name, next,  previous,  up
@subsection Error reporting at run time (objects) 
 
@itemize @bullet{} 


@item @strong{EXCEPTION : instantiation_error( '1st argument must be free variable')} 

Calling to new/1 requieres first argument to be a free variable. For example: 

@code{X = this_will_raise_an_exception,X new myclass.} 


@item @strong{EXCEPTION : instantiation_error('class not given')} 

You called new/2 using a free variable as second argument. 


@item @strong{EXCEPTION : instantiation_error(inaccesible_class(@emph{Class}), from(@emph{Module})) } 

@emph{Module} tried to create an instance of @emph{Class} by the ways of new/2, but there is no usage relationship between @emph{Module} and @emph{Class}. 


@item @strong{EXCEPTION : instantiation_error(invalid_constructor( @emph{Constructor})) } 

@emph{Constructor} was not defined by the corresponding class. 


@end itemize  



@c (component)


@node Run time usage of objects, *** PART VIII - Interfaces to other languages and systems, Compile-time usage of objects, Top
@comment node-name, next,  previous,  up
@chapter Run time usage of objects
@liindex objects_rt
@c -------------------------------------------------
@c WARNING: Do not edit this file (objects_rt.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/objects/objects_rt.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda, Angel Fernandez Pineda.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#4 (1999/11/29, 19:11:21 MET)

This library provides run-time support for 
@glindex object
object creation and manipulation. Objects are also called 
@glindex class instances
class instances, or simply 
@glindex instances
instances. 

Objects in Ciao are treated as normal modules. This is, an object is a run-time generated Prolog module, which may be identified by an unique term across the whole application. 

This is a very simple example of how to create an instance, and how to make calls to it: 


@smallexample 
            AnObj new myclass,
            AnObj:mymethod.
         @end smallexample  

In order to make any object accessible from code, an usage relationship must be established between the class (from which instances are derived) and the code itself. Refer to 
@glindex use_class/1
@code{use_class/1} predicate or 
@glindex use_class/1
@code{use_class/1} declaration in order to do so. 



@menu
* Usage and interface (objects_rt)::  
* Documentation on exports (objects_rt)::  
* Known bugs and planned improvements (objects_rt)::  
@end menu

@node Usage and interface (objects_rt), Documentation on exports (objects_rt), Run time usage of objects, Run time usage of objects
@comment node-name, next,  previous,  up
@section Usage and interface (@code{objects_rt})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

This library is automatically loaded when using the @emph{objects} package: 
@smallexample 
    :- module(@emph{ModuleName},@emph{Exports},[objects]).
@end smallexample  
Nothing special needs to be done. 

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex new/2
@code{new/2}, 
@glindex instance_of/2
@code{instance_of/2}, 
@glindex derived_from/2
@code{derived_from/2}, 
@glindex interface/2
@code{interface/2}, 
@glindex instance_codes/2
@code{instance_codes/2}, 
@glindex destroy/1
@code{destroy/1}, 
@glindex use_class/1
@code{use_class/1}.


@item @emph{Properties:}

@glindex constructor/1
@code{constructor/1}, 
@glindex class_name/1
@code{class_name/1}, 
@glindex interface_name/1
@code{interface_name/1}, 
@glindex instance_id/1
@code{instance_id/1}, 
@glindex class_source/1
@code{class_source/1}, 
@glindex interface_source/1
@code{interface_source/1}, 
@glindex method_spec/1
@code{method_spec/1}, 
@glindex virtual_method_spec/1
@code{virtual_method_spec/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex aggregates
@code{aggregates}, 
@glindex dynamic
@code{dynamic}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex iso_byte_char
@code{iso_byte_char}, 
@glindex iso_incomplete
@code{iso_incomplete}, 
@glindex operators
@code{operators}, 
@glindex read
@code{read}, 
@glindex write
@code{write}, 
@glindex dynmods
@code{dynmods}, 
@glindex prolog_sys
@code{prolog_sys}, 
@glindex system
@code{system}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (objects_rt), Known bugs and planned improvements (objects_rt), Usage and interface (objects_rt), Run time usage of objects
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{objects_rt})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{new/2 (pred)}}}
@temp
@end iftex
@pdindex new/2 
@glindex new/2 
@deffn PREDICATE new/2:



Dynamic instance creation takes place by the ways of this predicate. 

It takes a free variable as first argument which will be instantiated to an internal object identifier. 

Second argument must be instantiated to a 
@glindex class constructor
class constructor. Class constructors are designed to perform an initialization on the new created instance. Notice that instance initialization may involve some kind of computation, not only @emph{state initialization}. 

A class constructor is made by a functor, which must match the intended class name, and any number of parameters. For example: 


@smallexample 
            Obj new myclass(1500,'hello, world!!!')
         @end smallexample  

Those parameters depends (obviously) on the constructors defined at the class source. If no constructors where defined, no parameters are needed. This is called the 
@glindex default constructor
default constructor. An example: 


@smallexample 
            Obj new myclass
         @end smallexample  

The default constructor can not be called if there is any constructor available at the class source. 

Instantiation will raise an exception and fail whenever any of this conditions occur: 
@itemize @bullet{} 
@item First argument is not a free variable. 
@item Second argument functor is a class, but there is no usage relationship with it. 
@item Second argument functor is not a class. 
@item The given constructor is unknown. 
@item The given constructor fails (notice that default constructor never fails). 
@end itemize  

Objects may also be statically declared, refer to 
@glindex instance_of/2
@code{instance_of/2} declaration. 


@strong{Usage:} @code{new(InstanceVar,Constructor)}
@itemize @minus
@item @emph{Description:} Creates a new instance of the class specified by @code{Constructor} returning its identifier in @code{InstanceVar} 
@item @emph{The following properties should hold at call time:}


@code{InstanceVar} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{Constructor} is a term whose functor matches a class name.
@iftex
@hfill
@end iftex
 (@code{objects_rt:constructor/1})
@item @emph{The following properties should hold upon exit:}


@code{InstanceVar} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{instance_of/2 (pred)}}}
@temp
@end iftex
@pdindex instance_of/2 
@glindex instance_of/2 
@deffn PREDICATE instance_of/2:



This predicate is used to perform dynamic type checking. You may check whether a particular instance belongs to a particular class or related descendants. 

instance_of/2 is used to perform static 
@glindex semantic analisys
semantic analisys over object oriented code constructions. 

By the use of instance_of/2 you may help to perform such analisys. 


@strong{Usage 1:} @code{instance_of(Instance,Class)}
@itemize @minus
@item @emph{Description:} Test whether @code{Instance} was derived from any descendant of @code{Class}, or that class itself 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Class} is an atom denoting a class.
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_name/1})
@end itemize

@strong{Usage 2:} @code{instance_of(Instance,Class)}
@itemize @minus
@item @emph{Description:} Retrieves, on backtracking, the inheritance line of @code{Instance} commencing on the creation class (that specified on call to 
@glindex new/2
@code{new/2}) and continuing on the rest of ascendant classes, if any. 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Class} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Class} is an atom denoting a class.
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_name/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{derived_from/2 (pred)}}}
@temp
@end iftex
@pdindex derived_from/2 
@glindex derived_from/2 
@deffn PREDICATE derived_from/2:



Test whether an object identifier was derived directly from a class, by the usage of 
@glindex new/2
@code{new/2} or a static instance declaration (
@glindex instance_of/2
@code{instance_of/2}). 


@strong{Usage 1:} @code{derived_from(Instance,Class)}
@itemize @minus
@item @emph{Description:} Test derivation of @code{Instance} from @code{Class} 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Class} is an atom denoting a class.
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_name/1})
@end itemize

@strong{Usage 2:} @code{derived_from(Instance,Class)}
@itemize @minus
@item @emph{Description:} Retrieves the @code{Class} responsable of the derivation of @code{Instance}. 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Class} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Class} is an atom denoting a class.
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_name/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{interface/2 (pred)}}}
@temp
@end iftex
@pdindex interface/2 
@glindex interface/2 
@deffn PREDICATE interface/2:



This predicate is used to ensure a given interface to be implemented by a given instance. 


@strong{Usage 1:} @code{interface(Instance,Interface)}
@itemize @minus
@item @emph{Description:} Check whether @code{Instance} implements the given @code{Interface}. 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Interface} is an unique atom which identifies a public interface.
@iftex
@hfill
@end iftex
 (@code{objects_rt:interface_name/1})
@end itemize

@strong{Usage 2:} @code{interface(Instance,Interfaces)}
@itemize @minus
@item @emph{Description:} Retrieves on backtracking all the implemented @code{Interfaces} of @code{Instance}. 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{Interfaces} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{Interfaces} is an unique atom which identifies a public interface.
@iftex
@hfill
@end iftex
 (@code{objects_rt:interface_name/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{instance_codes/2 (pred)}}}
@temp
@end iftex
@pdindex instance_codes/2 
@glindex instance_codes/2 
@deffn PREDICATE instance_codes/2:



Retrieves a character string representation from an object identifier and vice-versa. 


@strong{Usage 1:} @code{instance_codes(Instance,String)}
@itemize @minus
@item @emph{Description:} Retrieves a @code{String} representation of given @code{Instance}. 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})

@code{String} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize

@strong{Usage 2:} @code{instance_codes(Instance,String)}
@itemize @minus
@item @emph{Description:} Reproduces an @code{Instance} from its @code{String} representation. Such an instance must be alive across the application: this predicate will fail whether the involved instance has been destroyed.  
@item @emph{The following properties should hold at call time:}


@code{Instance} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@item @emph{The following properties should hold upon exit:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{destroy/1 (pred)}}}
@temp
@end iftex
@pdindex destroy/1 
@glindex destroy/1 
@deffn PREDICATE destroy/1:



As well as instances are created, they must be destroyed when no longer needed in order to release system resources. 

Unfortunately, current O'Ciao implementation does not support automatic instance destruction, so user must manually call @emph{destroy/1} in order to do so. 

The programmer @strong{must ensure} that no other references to the involved object are left in memory when destroy/1 is called. If not, unexpected results may be obtained. 


@strong{Usage:} @code{destroy(Instance)}
@itemize @minus
@item @emph{Description:} Destroys the object identified by @code{Instance}. 
@item @emph{The following properties should hold at call time:}


@code{Instance} is an unique term which identifies an object.
@iftex
@hfill
@end iftex
 (@code{objects_rt:instance_id/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{use_class/1 (pred)}}}
@temp
@end iftex
@pdindex use_class/1 
@glindex use_class/1 
@deffn PREDICATE use_class/1:



The behaviour of this predicate is identical to that provided by the declaration of the same name 
@glindex use_class/1
@code{use_class/1}. It allows user programs to dynamically load classes. Whether the given source is not a class it will perform a 
@glindex use_module/1
@code{use_module/1} predicate call.


@strong{Usage:} @code{use_class(ClassSource)}
@itemize @minus
@item @emph{Description:} Dynamically loads the given @code{ClassSource} 
@item @emph{The following properties should hold at call time:}


@code{ClassSource} is a valid path to a prolog file containing a class declaration (without .pl extension).
@iftex
@hfill
@end iftex
 (@code{objects_rt:class_source/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{constructor/1 (prop)}}}
@temp
@end iftex
@prindex constructor/1 
@glindex constructor/1 
@deffn PROPERTY constructor/1:






@strong{Usage:} @code{constructor(Cons)}
@itemize @minus
@item @emph{Description:} @code{Cons} is a term whose functor matches a class name. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{class_name/1 (prop)}}}
@temp
@end iftex
@prindex class_name/1 
@glindex class_name/1 
@deffn PROPERTY class_name/1:






@strong{Usage:} @code{class_name(ClassName)}
@itemize @minus
@item @emph{Description:} @code{ClassName} is an atom denoting a class. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{interface_name/1 (prop)}}}
@temp
@end iftex
@prindex interface_name/1 
@glindex interface_name/1 
@deffn PROPERTY interface_name/1:






@strong{Usage:} @code{interface_name(Interface)}
@itemize @minus
@item @emph{Description:} @code{Interface} is an unique atom which identifies a public interface. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{instance_id/1 (prop)}}}
@temp
@end iftex
@prindex instance_id/1 
@glindex instance_id/1 
@deffn PROPERTY instance_id/1:






@strong{Usage:} @code{instance_id(ID)}
@itemize @minus
@item @emph{Description:} @code{ID} is an unique term which identifies an object. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{class_source/1 (prop)}}}
@temp
@end iftex
@prindex class_source/1 
@glindex class_source/1 
@deffn PROPERTY class_source/1:






@strong{Usage:} @code{class_source(Source)}
@itemize @minus
@item @emph{Description:} @code{Source} is a valid path to a prolog file containing a class declaration (without .pl extension). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{interface_source/1 (prop)}}}
@temp
@end iftex
@prindex interface_source/1 
@glindex interface_source/1 
@deffn PROPERTY interface_source/1:






@strong{Usage:} @code{interface_source(Source)}
@itemize @minus
@item @emph{Description:} @code{Source} is a valid path to a prolog file containing a class declaration or an interface declaration (without .pl extension). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{method_spec/1 (prop)}}}
@temp
@end iftex
@prindex method_spec/1 
@glindex method_spec/1 
@deffn PROPERTY method_spec/1:



There is no difference between method or attribute specifications, and habitual predicate specifications. It is just a Functor/Arity term. 


@strong{Usage:} @code{method_spec(Spec)}
@itemize @minus
@item @emph{Description:} @code{Spec} is a method or attribute specification. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{virtual_method_spec/1 (prop)}}}
@temp
@end iftex
@prindex virtual_method_spec/1 
@glindex virtual_method_spec/1 
@deffn PROPERTY virtual_method_spec/1:






@strong{Usage:} @code{virtual_method_spec(Spec)}
@itemize @minus
@item @emph{Description:} @code{Spec} is a method specification. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (objects_rt),  , Documentation on exports (objects_rt), Run time usage of objects
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{objects_rt})

@itemize @bullet{}

@item
Not really a bug: when loading code which declares static instances from the toplevel shell, predicate 
@glindex use_module/1
@code{use_module/1}) will not work properly: those instances may be not correctly created, and predicates will fail whenever they are not supposed to do. This may be avoided by reloading again the involved module, but make sure it is modified and saved to disk before doing so. 
@end itemize

@c (component)


@node *** PART VIII - Interfaces to other languages and systems, foreign_interface (library), Run time usage of objects, Top
@comment node-name, next,  previous,  up
@unnumbered PART VIII - Interfaces to other languages and systems
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (Interfaces.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/Interfaces.pl
@c -------------------------------------------------


The following interfaces to/from Ciao Prolog are documented in this part: 
@itemize @bullet{} 
@item 
@glindex External interface
External interface (e.g., to C). 
@item 
@glindex Socket interface
Socket interface. 
@item 
@glindex Tcl/tk interface
Tcl/tk interface. 
@item 
@glindex Web interface
Web interface (http, html, xml, etc.); 
@item 
@glindex Persistent predicate
Persistent predicate databases (interface between the Prolog internal database and the external file system). 
@item 
@glindex SQL-like database interface
SQL-like database interface (interface between the Prolog internal database and external SQL/ODBC systems). 
@item 
@glindex Java interface
Java interface. 
@item 
@glindex Calling emacs
Calling emacs from Prolog. 
@end itemize  


@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node foreign_interface (library), Utilities for on-demand compilation of foreign files, *** PART VIII - Interfaces to other languages and systems, Top
@comment node-name, next,  previous,  up
@chapter foreign_interface (library)
@liindex foreign_interface
@c -------------------------------------------------
@c WARNING: Do not edit this file (foreign_interface.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/foreign_interface/foreign_interface.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#137 (2000/5/10, 11:29:26 CEST)





@menu
* Usage and interface (foreign_interface)::  
* Documentation on exports (foreign_interface)::  
@end menu

@node Usage and interface (foreign_interface), Documentation on exports (foreign_interface), foreign_interface (library), foreign_interface (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{foreign_interface})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(foreign_interface).}

or

@code{:- module(...,...,[foreign_interface]).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Properties:}

@glindex size_of/3
@code{size_of/3}, 
@glindex do_not_free/2
@code{do_not_free/2}, 
@glindex returns/2
@code{returns/2}, 
@glindex foreign/1
@code{foreign/1}, 
@glindex foreign/2
@code{foreign/2}, 
@glindex native/1
@code{native/1}, 
@glindex native/2
@code{native/2}.


@item @emph{Regular Types:}

@glindex address/1
@code{address/1}, 
@glindex byte/1
@code{byte/1}, 
@glindex byte_list/1
@code{byte_list/1}, 
@glindex int_list/1
@code{int_list/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (foreign_interface),  , Usage and interface (foreign_interface), foreign_interface (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{foreign_interface})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{address/1 (regtype)}}}
@temp
@end iftex
@teindex address/1 
@glindex address/1 
@deffn REGTYPE address/1:






@strong{Usage:} @code{address(Address)}
@itemize @minus
@item @emph{Description:} @code{Address} is a valid memory address. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{byte/1 (regtype)}}}
@temp
@end iftex
@teindex byte/1 
@glindex byte/1 
@deffn REGTYPE byte/1:






@strong{Usage:} @code{byte(Byte)}
@itemize @minus
@item @emph{Description:} @code{Byte} is a byte 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{byte_list/1 (regtype)}}}
@temp
@end iftex
@teindex byte_list/1 
@glindex byte_list/1 
@deffn REGTYPE byte_list/1:






@strong{Usage:} @code{byte_list(List)}
@itemize @minus
@item @emph{Description:} @code{List} is a list of bytes. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{int_list/1 (regtype)}}}
@temp
@end iftex
@teindex int_list/1 
@glindex int_list/1 
@deffn REGTYPE int_list/1:






@strong{Usage:} @code{int_list(List)}
@itemize @minus
@item @emph{Description:} @code{List} is a list of integers. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{size_of/3 (prop)}}}
@temp
@end iftex
@prindex size_of/3 
@glindex size_of/3 
@deffn PROPERTY size_of/3:






@strong{Usage:} @code{size_of(Name,ListVar,SizeVar)}
@itemize @minus
@item @emph{Description:} For predicate @code{Name}, the size of the argument of type 
@glindex byte_list/1
@code{byte_list/1}, @code{ListVar}, is given by the argument of type integer @code{SizeVar}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{do_not_free/2 (prop)}}}
@temp
@end iftex
@prindex do_not_free/2 
@glindex do_not_free/2 
@deffn PROPERTY do_not_free/2:






@strong{Usage:} @code{do_not_free(Name,Var)}
@itemize @minus
@item @emph{Description:} For predicate @code{Name}, the C argument passed to (returned from) the foreign function will not be freed after calling the foreign function. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{returns/2 (prop)}}}
@temp
@end iftex
@prindex returns/2 
@glindex returns/2 
@deffn PROPERTY returns/2:






@strong{Usage:} @code{returns(Name,Var)}
@itemize @minus
@item @emph{Description:} The result of the foreign function that implements the Prolog predicate 
@glindex Name
@code{Name} is unified with the Prolog variable @code{Var}. Cannot be used without 
@glindex foreign/1
@code{foreign/1} or 
@glindex foreign/2
@code{foreign/2}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{foreign/1 (prop)}}}
@temp
@end iftex
@prindex foreign/1 
@glindex foreign/1 
@deffn PROPERTY foreign/1:






@strong{Usage:} @code{foreign(Name)}
@itemize @minus
@item @emph{Description:} The Prolog predicate 
@glindex Name
@code{Name} is implemented using the foreign function @code{Name}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{foreign/2 (prop)}}}
@temp
@end iftex
@prindex foreign/2 
@glindex foreign/2 
@deffn PROPERTY foreign/2:






@strong{Usage:} @code{foreign(PrologName,ForeignName)}
@itemize @minus
@item @emph{Description:} The Prolog predicate 
@glindex PrologName
@code{PrologName} is implemented using the foreign function @code{ForeignName}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{native/1 (prop)}}}
@temp
@end iftex
@prindex native/1 
@glindex native/1 
@deffn PROPERTY native/1:






@strong{Usage:} @code{native(Name)}
@itemize @minus
@item @emph{Description:} The Prolog predicate 
@glindex Name
@code{Name} is implemented using the native function @code{Name}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{native/2 (prop)}}}
@temp
@end iftex
@prindex native/2 
@glindex native/2 
@deffn PROPERTY native/2:






@strong{Usage:} @code{native(PrologName,ForeignName)}
@itemize @minus
@item @emph{Description:} The Prolog predicate 
@glindex PrologName
@code{PrologName} is implemented using the native function prolog_@code{ForeignName}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Utilities for on-demand compilation of foreign files, davinci (library), foreign_interface (library), Top
@comment node-name, next,  previous,  up
@chapter Utilities for on-demand compilation of foreign files
@liindex foreign_compilation
@c -------------------------------------------------
@c WARNING: Do not edit this file (foreign_compilation.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/foreign_compilation.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Jose Morales.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#36 (1999/7/20, 10:37:31 MEST)

This module provides two predicates which give the user information regarding how to compile external (C) files in order to link them with the Ciao Prolog engine at runtime. 

These predicates are not intended to be called directly by the end-user. Instead, a tool or module whose aim is generating dynamically loadable files from source files should use the predicates in this file in order to find out what are the proper compiler and linker to use, and which options must be passed to them in the current architecture.



@menu
* Usage and interface (foreign_compilation)::  
* Documentation on exports (foreign_compilation)::  
@end menu

@node Usage and interface (foreign_compilation), Documentation on exports (foreign_compilation), Utilities for on-demand compilation of foreign files, Utilities for on-demand compilation of foreign files
@comment node-name, next,  previous,  up
@section Usage and interface (@code{foreign_compilation})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(foreign_compilation)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex compiler_and_opts/2
@code{compiler_and_opts/2}, 
@glindex linker_and_opts/2
@code{linker_and_opts/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex system
@code{system}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (foreign_compilation),  , Usage and interface (foreign_compilation), Utilities for on-demand compilation of foreign files
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{foreign_compilation})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{compiler_and_opts/2 (pred)}}}
@temp
@end iftex
@pdindex compiler_and_opts/2 
@glindex compiler_and_opts/2 
@deffn PREDICATE compiler_and_opts/2:






@strong{Usage:} @code{compiler_and_opts(?Compiler,?Opts)}
@itemize @minus
@item @emph{Description:} If you want to compile a foreign language file for dynamic linking in the current operating system and architecture, you have to use the compiler @code{Compiler} and gite it the options @code{Opts}. A variable in @code{Opts} means that no special option is needed. 
@item @emph{The following properties should hold at call time:}


@code{?Compiler} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{?Opts} is a list of @code{atom}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{linker_and_opts/2 (pred)}}}
@temp
@end iftex
@pdindex linker_and_opts/2 
@glindex linker_and_opts/2 
@deffn PREDICATE linker_and_opts/2:






@strong{Usage:} @code{linker_and_opts(?Linker,?Options)}
@itemize @minus
@item @emph{Description:} If you want to link a foreign language file for dynamic linking in the current operating system and architecture, you have to use the linker @code{Compiler} and gite it the options @code{Opts}. A variable in @code{Opts} means that no special option is needed. 
@item @emph{The following properties should hold at call time:}


@code{?Linker} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{?Options} is a list of @code{atom}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node davinci (library), The Tcl/Tk interface, Utilities for on-demand compilation of foreign files, Top
@comment node-name, next,  previous,  up
@chapter davinci (library)
@liindex davinci
@c -------------------------------------------------
@c WARNING: Do not edit this file (davinci.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/davinci.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno.


This library allows connecting a Ciao Prolog application with daVinci V2.X. 

The communication is based on a two-way channel: after daVinci is started, messages are sent in to it and read in from it on demand by different Prolog predicates. Messages are sent via writing the term as text; messages are received by reading text and returning an atom. Commands sent and answers received are treated as terms from the Prolog side, since for daVinci they are text but have term syntax; the only difficulty lies in strings, for which special Prolog syntax is provided. 

See accompanying file @code{library('davinci/commands')} for examples on the use of this library. 

daVinci is developed by U. of Bremen, Germany.



@menu
* Usage and interface (davinci)::  
* Documentation on exports (davinci)::	
@end menu

@node Usage and interface (davinci), Documentation on exports (davinci), davinci (library), davinci (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{davinci})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(davinci)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex davinci/0
@code{davinci/0}, 
@glindex topd/0
@code{topd/0}, 
@glindex davinci_get/1
@code{davinci_get/1}, 
@glindex davinci_get_all/1
@code{davinci_get_all/1}, 
@glindex davinci_put/1
@code{davinci_put/1}, 
@glindex davinci_quit/0
@code{davinci_quit/0}, 
@glindex davinci_ugraph/1
@code{davinci_ugraph/1}, 
@glindex davinci_lgraph/1
@code{davinci_lgraph/1}, 
@glindex ugraph2term/2
@code{ugraph2term/2}, 
@glindex formatting/2
@code{formatting/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex aggregates
@code{aggregates}, 
@glindex prompt
@code{prompt}, 
@glindex errhandle
@code{errhandle}, 
@glindex format
@code{format}, 
@glindex read
@code{read}, 
@glindex graphs/ugraphs
@code{graphs/ugraphs}, 
@glindex write
@code{write}, 
@glindex system
@code{system}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (davinci),  , Usage and interface (davinci), davinci (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{davinci})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci/0 (pred)}}}
@temp
@end iftex
@pdindex davinci/0 
@glindex davinci/0 
@deffn PREDICATE davinci/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{topd/0 (pred)}}}
@temp
@end iftex
@pdindex topd/0 
@glindex topd/0 
@deffn PREDICATE topd/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci_get/1 (pred)}}}
@temp
@end iftex
@pdindex davinci_get/1 
@glindex davinci_get/1 
@deffn PREDICATE davinci_get/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci_get_all/1 (pred)}}}
@temp
@end iftex
@pdindex davinci_get_all/1 
@glindex davinci_get_all/1 
@deffn PREDICATE davinci_get_all/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci_put/1 (pred)}}}
@temp
@end iftex
@pdindex davinci_put/1 
@glindex davinci_put/1 
@deffn PREDICATE davinci_put/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci_quit/0 (pred)}}}
@temp
@end iftex
@pdindex davinci_quit/0 
@glindex davinci_quit/0 
@deffn PREDICATE davinci_quit/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci_ugraph/1 (pred)}}}
@temp
@end iftex
@pdindex davinci_ugraph/1 
@glindex davinci_ugraph/1 
@deffn PREDICATE davinci_ugraph/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{davinci_lgraph/1 (pred)}}}
@temp
@end iftex
@pdindex davinci_lgraph/1 
@glindex davinci_lgraph/1 
@deffn PREDICATE davinci_lgraph/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ugraph2term/2 (pred)}}}
@temp
@end iftex
@pdindex ugraph2term/2 
@glindex ugraph2term/2 
@deffn PREDICATE ugraph2term/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{formatting/2 (pred)}}}
@temp
@end iftex
@pdindex formatting/2 
@glindex formatting/2 
@deffn PREDICATE formatting/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node The Tcl/Tk interface, The PiLLoW Web Programming Library, davinci (library), Top
@comment node-name, next,  previous,  up
@chapter The Tcl/Tk interface
@liindex tcltk
@c -------------------------------------------------
@c WARNING: Do not edit this file (tcltk.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/tcltk/tcltk.pl
@c -------------------------------------------------

@strong{Author(s):} Montse Iglesias.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#16 (1999/12/14, 17:12:49 MET)

The 
@glindex tcltk
@code{tcltk} library package is a bidirectional interface to the @emph{Tcl} (pronounced Tickle) language and @emph{Tk} toolkit. Tcl is an interpreter scripting language with many extensions packages, in particular the graphical interface toolkit Tk



@menu
* Usage and interface (tcltk)::	 
* Documentation on exports (tcltk)::  
@end menu

@node Usage and interface (tcltk), Documentation on exports (tcltk), The Tcl/Tk interface, The Tcl/Tk interface
@comment node-name, next,  previous,  up
@section Usage and interface (@code{tcltk})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(tcltk)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex tcl_new/1
@code{tcl_new/1}, 
@glindex tcl_eval/3
@code{tcl_eval/3}, 
@glindex tcl_delete/1
@code{tcl_delete/1}, 
@glindex tcl_event/3
@code{tcl_event/3}, 
@glindex tk_event_loop/1
@code{tk_event_loop/1}, 
@glindex tk_loop/1
@code{tk_loop/1}, 
@glindex tk_new/2
@code{tk_new/2}, 
@glindex tk_new/4
@code{tk_new/4}, 
@glindex tk_next_event/2
@code{tk_next_event/2}.


@item @emph{Regular Types:}

@glindex tclInterpreter/1
@code{tclInterpreter/1}, 
@glindex tclCommand/1
@code{tclCommand/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex tcltk/tcltk_low_level
@code{tcltk/tcltk_low_level}, 
@glindex write
@code{write}, 
@glindex strings
@code{strings}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (tcltk),  , Usage and interface (tcltk), The Tcl/Tk interface
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{tcltk})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tclInterpreter/1 (regtype)}}}
@temp
@end iftex
@teindex tclInterpreter/1 
@glindex tclInterpreter/1 
@deffn REGTYPE tclInterpreter/1:



 To use Tcl, you must create a @emph{Tcl interpreter} object and send commands to it.


@strong{Usage:} @code{tclInterpreter(I)}
@itemize @minus
@item @emph{Description:} @code{I} is a reference to a @emph{Tcl} interpreter. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tclCommand/1 (regtype)}}}
@temp
@end iftex
@teindex tclCommand/1 
@glindex tclCommand/1 
@deffn REGTYPE tclCommand/1:



 A @emph{Tcl} command is specified as follows: 
@smallexample 
      Command         --> Atom  @{ other than [] @}
                        | Number
                        | chars(PrologString)
                        | write(Term)
                        | format(Fmt,Args)
                        | dq(Command)
                        | br(Command)
                        | sqb(Command)
                        | min(Command)
                        | ListOfCommands
      ListOfCommands  --> []
                        |[Command|ListOfCommands]
@end smallexample  

where: 


@table @asis 


@item Atom 


@item Number 
denote their printed representations. 


@item chars(PrologString) 
denotes the string represented by @emph{PrologString} (a list of character codes). 


@item write(Term) 
denotes the string that is printed by the corresponding built-in pridicate. 


@item format(Term) 
denotes the string that is printed by the corresponding built-in pridicate. 


@item dq(Command) 
denotes the string specified by @emph{Command}, enclosed in double quotes. 


@item br(Command) 
denotes the string specified by @emph{Command}, enclosed in braces. 


@item sqb(Command) 
denotes the string specified by @emph{Command}, enclosed in square brackets. 


@item min(Command) 
denotes the string specified by @emph{Command}, immediately preceded by a hyphen. 


@item ListOfCommands 
denotes the strings denoted by each element, separated by spaces. 


@end table  




@strong{Usage:} @code{tclCommand(C)}
@itemize @minus
@item @emph{Description:} @code{C} is a @emph{Tcl} command. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tcl_new/1 (pred)}}}
@temp
@end iftex
@pdindex tcl_new/1 
@glindex tcl_new/1 
@deffn PREDICATE tcl_new/1:






@strong{Usage:} @code{tcl_new(-TclInterpreter)}
@itemize @minus
@item @emph{Description:} Creates a new interpreter, initializes it, and returns a reference to it in @code{TclInterpreter}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{-TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tcl_eval/3 (pred)}}}
@temp
@end iftex
@pdindex tcl_eval/3 
@glindex tcl_eval/3 
@deffn PREDICATE tcl_eval/3:






@strong{Usage:} @code{tcl_eval(+TclInterpreter,+Command,-Result)}
@itemize @minus
@item @emph{Description:} Evaluates the commands given. The result will be stored as a string in @emph{Result}. If there is an error in the @emph{Command}, an exception is raised. The error messages will be @emph{Tcl Exception: }, if the error is in the syntax of the tcltk code or @emph{Prolog Exception: }, if the error is in the prolog term. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})

@code{+Command} is a @emph{Tcl} command.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclCommand/1})

@code{-Result} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tcl_delete/1 (pred)}}}
@temp
@end iftex
@pdindex tcl_delete/1 
@glindex tcl_delete/1 
@deffn PREDICATE tcl_delete/1:






@strong{Usage:} @code{tcl_delete(+TclInterpreter)}
@itemize @minus
@item @emph{Description:} Deletes the interpreter in @code{TclInterpreter} and the memory used by it 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tcl_event/3 (pred)}}}
@temp
@end iftex
@pdindex tcl_event/3 
@glindex tcl_event/3 
@deffn PREDICATE tcl_event/3:






@strong{Usage:} @code{tcl_event(+TclInterpreter,+Command,-Events)}
@itemize @minus
@item @emph{Description:} Lets @emph{TclInterpreter} interpret the command specified by @emph{Command}. @emph{Events} is a list of terms stored from Tcl by the @emph{prolog_event}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})

@code{+Command} is a @emph{Tcl} command.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclCommand/1})

@code{-Events} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tk_event_loop/1 (pred)}}}
@temp
@end iftex
@pdindex tk_event_loop/1 
@glindex tk_event_loop/1 
@deffn PREDICATE tk_event_loop/1:






@strong{Usage:} @code{tk_event_loop(+TclInterpreter)}
@itemize @minus
@item @emph{Description:} Waits an event and execute the term associated to it. Sends the unified term to obtain the value of the tcl array of @emph{prolog_variables}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tk_loop/1 (pred)}}}
@temp
@end iftex
@pdindex tk_loop/1 
@glindex tk_loop/1 
@deffn PREDICATE tk_loop/1:






@strong{Usage:} @code{tk_loop(+TclInterpreter)}
@itemize @minus
@item @emph{Description:} Passes control to Tk until all windows are gone. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tk_new/2 (pred)}}}
@temp
@end iftex
@pdindex tk_new/2 
@glindex tk_new/2 
@deffn PREDICATE tk_new/2:






@strong{Usage:} @code{tk_new(+Options,-TclInterpreter)}
@itemize @minus
@item @emph{Description:} Performs basic Tcl and Tk initialization and creates the main window of a Tk application.@emph{Options} is a list of optional elements according to : 


@table @asis 


@item name 
Sets the Tk application name. The application name will be displayed in the main window and is also used for communicating between applications in Tk. Default name is an empty string. 


@item display 
Gives the name of the screen on which to create the main window. Default is normally determined by the DISPLAY environment variable. 


@item file 
Open the sript file, commands will not be read from standard input and the execution returns back to Prolog only after all windows (and the interpreter) have been deleted. 


@end table  

 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Options} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{-TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tk_new/4 (pred)}}}
@temp
@end iftex
@pdindex tk_new/4 
@glindex tk_new/4 
@deffn PREDICATE tk_new/4:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tk_next_event/2 (pred)}}}
@temp
@end iftex
@pdindex tk_next_event/2 
@glindex tk_next_event/2 
@deffn PREDICATE tk_next_event/2:






@strong{Usage:} @code{tk_next_event(+TclInterpreter,-Event)}
@itemize @minus
@item @emph{Description:} Processes events until there is at least one Prolog event associated with @emph{TclInterpreter}. @emph{Event} is the term correspondig to the head of a queue of events stored from Tcl with the @emph{prolog_event} command. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+TclInterpreter} is a reference to a @emph{Tcl} interpreter.
@iftex
@hfill
@end iftex
 (@code{tcltk:tclInterpreter/1})

@code{-Event} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node The PiLLoW Web Programming Library, HTML/XML/CGI programming, The Tcl/Tk interface, Top
@comment node-name, next,  previous,  up
@chapter The PiLLoW Web Programming Library
@liindex pillow
@c -------------------------------------------------
@c WARNING: Do not edit this file (pillow_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/pillow/pillow_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo, @email{clip@@clip.dia.fi.upm.es}, @uref{http://www.clip.dia.fi.upm.es/}, The CLIP Group, School of Computer Science, Technical University of Madrid.



@coindex WWW, interfacing with
@glindex WWW, interfacing with 
@coindex XML
@glindex XML

@coindex CGI
@glindex CGI

@coindex HTML
@glindex HTML

@coindex HTTP
@glindex HTTP 
This package implements the PiLLoW library [CHV96a]. The following three chapters document, respectively, the predicates for HTML/XML/CGI programming, the predicate for HTTP conectivity, and the types used in the definition of the predicates (key for fully understanding the other predicates). You can find a paper and some additional information in the 
@glindex library/pillow/doc
@code{library/pillow/doc} directory of the distribution, and in the WWW at @uref{http://clip.dia.fi.upm.es/Software/pillow/pillow.html}. There is also a 
@coindex PiLLoW on-line tutorial
@glindex PiLLoW on-line tutorial
@emph{PiLLoW on-line tutorial} (slides) at @uref{http://clip.dia.fi.upm.es/logalg/slides/C_pillow/C_pillow.html} which illustrates the basic features and provides a number of examples of PiLLoW use. 



@menu
* Installing PiLLoW::		
* Usage and interface (pillow)::  
@end menu

@node Installing PiLLoW, Usage and interface (pillow), The PiLLoW Web Programming Library, The PiLLoW Web Programming Library
@comment node-name, next,  previous,  up
@section Installing PiLLoW 
 To correctly install PiLLoW, first, make sure you downloaded the right version of PiLLoW (there are different versions for different LP/CLP systems; the version that comes with Ciao is of course the right one for Ciao). Then, please follow these steps: 


@enumerate  


@item Copy the files in the @code{images} directory to a WWW accessible directory in your server. 


@item Edit the file 
@glindex icon_address.pl
@code{icon_address.pl} and change the fact to point to the URL to be used to access the images above. 


@item In the Ciao system the files are in the correct place, in other systems copy the files 
@glindex pillow.pl
@code{pillow.pl} and 
@glindex icon_address.pl
@code{icon_address.pl} to a suitable directory so that your Prolog system will find them. 


@end enumerate  






@node Usage and interface (pillow),  , Installing PiLLoW, The PiLLoW Web Programming Library
@comment node-name, next,  previous,  up
@section Usage and interface (@code{pillow})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_package(pillow).}

or

@code{:- module(...,...,[pillow]).}

@item @strong{New operators defined:}

@glindex $/2
@code{$/2} [150,xfx], 
@glindex $/1
@code{$/1} [150,fx].

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex pillow/http
@code{pillow/http}, 
@glindex pillow/html
@code{pillow/html}.


@end itemize

@end itemize
@end cartouche

@c (component)


@node HTML/XML/CGI programming, HTTP conectivity, The PiLLoW Web Programming Library, Top
@comment node-name, next,  previous,  up
@chapter HTML/XML/CGI programming
@liindex html
@c -------------------------------------------------
@c WARNING: Do not edit this file (html.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/pillow/html.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo, Sacha Varma.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#114 (2000/4/11, 20:23:43 CEST)

This module implements the predicates of the PiLLoW package related to 
@glindex HTML
HTML/
@glindex XML
XML generation and parsing, 
@glindex CGI
CGI and form handlers programming, and in general all the predicates which do not imply the use of the HTTP protocol.



@menu
* Usage and interface (html)::	
* Documentation on exports (html)::  
* Documentation on multifiles (html)::	
* Other information (html)::	
@end menu

@node Usage and interface (html), Documentation on exports (html), HTML/XML/CGI programming, HTML/XML/CGI programming
@comment node-name, next,  previous,  up
@section Usage and interface (@code{html})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(html)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex output_html/1
@code{output_html/1}, 
@glindex html2terms/2
@code{html2terms/2}, 
@glindex xml2terms/2
@code{xml2terms/2}, 
@glindex html_template/3
@code{html_template/3}, 
@glindex html_report_error/1
@code{html_report_error/1}, 
@glindex get_form_input/1
@code{get_form_input/1}, 
@glindex get_form_value/3
@code{get_form_value/3}, 
@glindex form_empty_value/1
@code{form_empty_value/1}, 
@glindex form_default/3
@code{form_default/3}, 
@glindex set_cookie/2
@code{set_cookie/2}, 
@glindex get_cookies/1
@code{get_cookies/1}, 
@glindex url_query/2
@code{url_query/2}, 
@glindex my_url/1
@code{my_url/1}, 
@glindex url_info/2
@code{url_info/2}, 
@glindex url_info_relative/3
@code{url_info_relative/3}, 
@glindex form_request_method/1
@code{form_request_method/1}, 
@glindex icon_address/2
@code{icon_address/2}, 
@glindex html_protect/1
@code{html_protect/1}, 
@glindex http_lines/3
@code{http_lines/3}.


@item @emph{Multifiles:}

@glindex html_expansion/2
@code{html_expansion/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex strings
@code{strings}, 
@glindex lists
@code{lists}, 
@glindex system
@code{system}, 
@glindex pillow/pillow_aux
@code{pillow/pillow_aux}, 
@glindex pillow/pillow_types
@code{pillow/pillow_types}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (html), Documentation on multifiles (html), Usage and interface (html), HTML/XML/CGI programming
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{html})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{output_html/1 (pred)}}}
@temp
@end iftex
@pdindex output_html/1 
@glindex output_html/1 
@deffn PREDICATE output_html/1:


@code{output_html(HTMLTerm)}


Outputs @code{HTMLTerm}, interpreted as an 
@glindex html_term/1
@code{html_term/1}, to current output stream.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{html2terms/2 (pred)}}}
@temp
@end iftex
@pdindex html2terms/2 
@glindex html2terms/2 
@deffn PREDICATE html2terms/2:


@code{html2terms(String,Terms)}


@code{String} is a character list containing HTML code and @code{Terms} is its prolog structured representation.


@strong{Usage 1:} @code{html2terms(-string,+html_term)}
@itemize @minus
@item @emph{Description:} Translates an HTML-term into the HTML code it represents. 
@end itemize

@strong{Usage 2:} @code{html2terms(+string,?canonic_html_term)}
@itemize @minus
@item @emph{Description:} Translates HTML code into a structured HTML-term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{xml2terms/2 (pred)}}}
@temp
@end iftex
@pdindex xml2terms/2 
@glindex xml2terms/2 
@deffn PREDICATE xml2terms/2:


@code{xml2terms(String,Terms)}


@code{String} is a character list containing XML code and @code{Terms} is its prolog structured representation.


@strong{Usage 1:} @code{xml2terms(-string,+html_term)}
@itemize @minus
@item @emph{Description:} Translates a XML-term into the XML code it represents. 
@end itemize

@strong{Usage 2:} @code{xml2terms(+string,?canonic_xml_term)}
@itemize @minus
@item @emph{Description:} Translates XML code into a structured XML-term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{html_template/3 (pred)}}}
@temp
@end iftex
@pdindex html_template/3 
@glindex html_template/3 
@deffn PREDICATE html_template/3:


@code{html_template(Chars,Terms,Dict)}


Interprets @code{Chars} as an HTML template returning in @code{Terms} the corresponding structured HTML-term, which includes variables, and unifying @code{Dict} with a dictionary of those variables (an incomplete list of @emph{name}@code{=}@emph{Var} pairs). An HTML template is standard HTML code, but in which ``slots'' can be defined and given an identifier. These slots represent parts of the HTML code in which other HTML code can be inserted, and are represented in the HTML-term as free variables. There are two kinds of variables in templates: 
@itemize @bullet{} 


@item Variables representing page contents. A variable with name @emph{name} is defined with the special tag @code{<V>}@emph{name}@code{</V>}. 


@item Variables representing tag attributes. They occur as an attribute or an attribute value starting with @code{_}, followed by its name, which must be formed by alphabetic characters. 


@end itemize  

As an example, suposse the following HTML template: 
@smallexample 
<html>
<body bgcolor=_bgcolor>
<v>content</v>
</body>
</html>

@end smallexample  
The following query in the Ciao toplevel shows how the template is parsed, and the dictionary returned: 
@smallexample 
?- file_to_string('template.html',_S), html_template(_S,Terms,Dict). 

Dict = [bgcolor=_A,content=_B|_],
Terms = [env(html,[],["
",env(body,[bgcolor=_A],["
",_B,"
"]),"
"]),"
"] ? 

yes
@end smallexample  
If a dictionary with values is supplied at call time, then variables are unified accordingly inside the template: 
@smallexample 
?- file_to_string('template.html',_S),
   html_template(_S,Terms,[content=b("hello world!"),bgcolor="white"]). 

Terms = [env(html,[],["
",env(body,[bgcolor="white"],["
",b("hello world!"),"
"]),"
"]),"
"] ? 

yes
@end smallexample  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{html_report_error/1 (pred)}}}
@temp
@end iftex
@pdindex html_report_error/1 
@glindex html_report_error/1 
@deffn PREDICATE html_report_error/1:






@strong{Usage:} @code{html_report_error(Error)}
@itemize @minus
@item @emph{Description:} Outputs error @code{Error} as a standard HTML page. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_form_input/1 (pred)}}}
@temp
@end iftex
@pdindex get_form_input/1 
@glindex get_form_input/1 
@deffn PREDICATE get_form_input/1:


@code{get_form_input(Dict)}


Translates input from the form (with either the POST or GET methods, and even with CONTENT_TYPE multipart/form-data) to a dictionary @code{Dict} of @emph{attribute}=@emph{value} pairs. It translates empty values (which indicate only the presence of an attribute) to the atom @code{'$empty'}, values with more than one line (from text areas or files) to a list of lines as strings, the rest to atoms or numbers (using 
@glindex name/2
@code{name/2}).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_form_value/3 (pred)}}}
@temp
@end iftex
@pdindex get_form_value/3 
@glindex get_form_value/3 
@deffn PREDICATE get_form_value/3:


@code{get_form_value(Dict,Var,Val)}


Unifies @code{Val} with the value for attribute @code{Var} in dictionary @code{Dict}. Does not fail: value is @code{''} if not found (this simplifies the programming of form handlers when they can be accessed directly).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{form_empty_value/1 (pred)}}}
@temp
@end iftex
@pdindex form_empty_value/1 
@glindex form_empty_value/1 
@deffn PREDICATE form_empty_value/1:






@strong{Usage:} @code{form_empty_value(Term)}
@itemize @minus
@item @emph{Description:} Checks that @code{Term}, a value comming from a text area is empty (can have spaces, newlines and linefeeds). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{form_default/3 (pred)}}}
@temp
@end iftex
@pdindex form_default/3 
@glindex form_default/3 
@deffn PREDICATE form_default/3:






@strong{Usage:} @code{form_default(+Val,+Default,-NewVal)}
@itemize @minus
@item @emph{Description:} Useful when a form is only partially filled, or when the executable can be invoked either by a link or by a form, to set form defaults. If the value of @code{Val} is empty then @code{NewVal}=@code{Default}, else @code{NewVal}=@code{Val}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{set_cookie/2 (pred)}}}
@temp
@end iftex
@pdindex set_cookie/2 
@glindex set_cookie/2 
@deffn PREDICATE set_cookie/2:


@code{set_cookie(Name,Value)}


Sets a cookie of name @code{Name} and value @code{Value}. Must be invoked before outputting any data, including the @code{cgi_reply} html-term.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_cookies/1 (pred)}}}
@temp
@end iftex
@pdindex get_cookies/1 
@glindex get_cookies/1 
@deffn PREDICATE get_cookies/1:


@code{get_cookies(Cookies)}


Unifies @code{Cookies} with a dictionary of @emph{attribute}=@emph{value} pairs of the active cookies for this URL.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{url_query/2 (pred)}}}
@temp
@end iftex
@pdindex url_query/2 
@glindex url_query/2 
@deffn PREDICATE url_query/2:


@code{url_query(Dict,URLArgs)}


Translates a dictionary @code{Dict} of parameter values into a string @code{URLArgs} for appending to a URL pointing to a form handler.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_url/1 (pred)}}}
@temp
@end iftex
@pdindex my_url/1 
@glindex my_url/1 
@deffn PREDICATE my_url/1:


@code{my_url(URL)}


Unifies @code{URL} with the Uniform Resource Locator (WWW address) of this cgi executable.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{url_info/2 (pred)}}}
@temp
@end iftex
@pdindex url_info/2 
@glindex url_info/2 
@deffn PREDICATE url_info/2:


@code{url_info(URL,URLTerm)}


Translates a URL @code{URL} to a Prolog structure @code{URLTerm} which details its various components, and vice-versa. For now non-HTTP URLs make the predicate fail.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{url_info_relative/3 (pred)}}}
@temp
@end iftex
@pdindex url_info_relative/3 
@glindex url_info_relative/3 
@deffn PREDICATE url_info_relative/3:


@code{url_info_relative(URL,BaseURLTerm,URLTerm)}


Translates a relative URL @code{URL} which appears in the HTML page refered to by @code{BaseURLTerm} into @code{URLTerm}, a Prolog structure containing its absolute parameters. Absolute URLs are translated as with 
@glindex url_info/2
@code{url_info/2}. E.g. 
@smallexample 
url_info_relative("dadu.html",
                  http('www.foo.com',80,"/bar/scoob.html"), Info)
@end smallexample  
gives @code{Info = http('www.foo.com',80,"/bar/dadu.html")}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{form_request_method/1 (pred)}}}
@temp
@end iftex
@pdindex form_request_method/1 
@glindex form_request_method/1 
@deffn PREDICATE form_request_method/1:






@strong{Usage:} @code{form_request_method(Method)}
@itemize @minus
@item @emph{Description:} Unifies @code{Method} with the method of invocation of the form handler (@code{GET} or @code{POST}). 
@item @emph{The following properties hold upon exit:}


@code{Method} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{icon_address/2 (pred)}}}
@temp
@end iftex
@pdindex icon_address/2 
@glindex icon_address/2 
@deffn PREDICATE icon_address/2:


@code{icon_address(Img,IAddress)}


The PiLLoW image @code{Img} has URL @code{IAddress}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{html_protect/1 (pred)}}}
@temp
@end iftex
@pdindex html_protect/1 
@glindex html_protect/1 
@deffn PREDICATE html_protect/1:


@code{html_protect(Goal)}


Calls @code{Goal}. If an error occurs during its execution, or it fails, an HTML page is output informing about the incident. Normaly the whole execution of a CGI is protected thus.


@emph{Meta-predicate} with arguments: @code{html_protect(goal)}.


@strong{Usage:} 
@itemize @minus
@item @emph{Calls should, and exit will be compatible with:}


@code{Goal} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{http_lines/3 (pred)}}}
@temp
@end iftex
@pdindex http_lines/3 
@glindex http_lines/3 
@deffn PREDICATE http_lines/3:






@strong{Usage:} @code{http_lines(Lines,String,Tail)}
@itemize @minus
@item @emph{Description:} @code{Lines} is a list of the lines with occur in @code{String} until @code{Tail}. The lines may end UNIX-style or DOS-style in @code{String}, in @code{Lines} they have not end of line characters. Suitable to be used in DCGs. 
@item @emph{Calls should, and exit will be compatible with:}


@code{Lines} is a list of @code{string}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})

@code{Tail} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (html), Other information (html), Documentation on exports (html), HTML/XML/CGI programming
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{html})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{html_expansion/2 (pred)}}}
@temp
@end iftex
@pdindex html_expansion/2 
@glindex html_expansion/2 
@deffn PREDICATE html_expansion/2:






The predicate is @emph{multifile}.


@strong{Usage:} @code{html_expansion(Term,Expansion)}
@itemize @minus
@item @emph{Description:} Hook predicate to define macros. Expand occurrences of @code{Term} into @code{Expansion}, in 
@glindex output_html/1
@code{output_html/1}. Take care to not transform something into itself! 
@end itemize
@end deffn
@sp 1



@node Other information (html),  , Documentation on multifiles (html), HTML/XML/CGI programming
@comment node-name, next,  previous,  up
@section Other information (@code{html})

The code uses input from from L. Naish's forms and F. Bueno's previous Chat interface. Other people who have contributed is (please inform us if we leave out anybody): Markus Fromherz, Samir Genaim.


@c (component)


@node HTTP conectivity, PiLLoW types, HTML/XML/CGI programming, Top
@comment node-name, next,  previous,  up
@chapter HTTP conectivity
@liindex http
@c -------------------------------------------------
@c WARNING: Do not edit this file (http.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/pillow/http.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#114 (1999/11/24, 0:57:16 MET)

This module implements the 
@glindex HTTP
HTTP protocol, which allows retrieving data from HTTP servers.



@menu
* Usage and interface (http)::	
* Documentation on exports (http)::  
@end menu

@node Usage and interface (http), Documentation on exports (http), HTTP conectivity, HTTP conectivity
@comment node-name, next,  previous,  up
@section Usage and interface (@code{http})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(http)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex fetch_url/3
@code{fetch_url/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex strings
@code{strings}, 
@glindex lists
@code{lists}, 
@glindex pillow/pillow_aux
@code{pillow/pillow_aux}, 
@glindex pillow/pillow_types
@code{pillow/pillow_types}, 
@glindex pillow/http_ll
@code{pillow/http_ll}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (http),  , Usage and interface (http), HTTP conectivity
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{http})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{fetch_url/3 (pred)}}}
@temp
@end iftex
@pdindex fetch_url/3 
@glindex fetch_url/3 
@deffn PREDICATE fetch_url/3:


@code{fetch_url(URL,Request,Response)}


Fetches the document pointed to by @code{URL} from Internet, using request parameters @code{Request}, and unifies @code{Response} with the parameters of the response. Fails on timeout. Note that redirections are not handled automatically, that is, if @code{Response} contains terms of the form @code{status(redirection,301,_)} and @code{location(NewURL)}, the program should in most cases access location @code{NewURL}.


@strong{Usage:} @code{fetch_url(URL,Request,Response)}
@itemize @minus
@item @emph{The following properties should hold at call time:}


@code{URL} specifies a URL.
@iftex
@hfill
@end iftex
 (@code{pillow_types:url_term/1})

@code{Request} is a list of @code{http_request_param}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@item @emph{The following properties hold upon exit:}


@code{Response} is a list of @code{http_response_param}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1


@c (component)


@node PiLLoW types, Persistent predicate database, HTTP conectivity, Top
@comment node-name, next,  previous,  up
@chapter PiLLoW types
@liindex pillow_types
@c -------------------------------------------------
@c WARNING: Do not edit this file (pillow_types.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/pillow/pillow_types.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.


Here are defined the regular types used in the documentation of the predicates of the PiLLoW package.



@menu
* Usage and interface (pillow_types)::	
* Documentation on exports (pillow_types)::  
@end menu

@node Usage and interface (pillow_types), Documentation on exports (pillow_types), PiLLoW types, PiLLoW types
@comment node-name, next,  previous,  up
@section Usage and interface (@code{pillow_types})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(pillow_types)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Regular Types:}

@glindex canonic_html_term/1
@code{canonic_html_term/1}, 
@glindex canonic_xml_term/1
@code{canonic_xml_term/1}, 
@glindex html_term/1
@code{html_term/1}, 
@glindex form_dict/1
@code{form_dict/1}, 
@glindex form_assignment/1
@code{form_assignment/1}, 
@glindex form_value/1
@code{form_value/1}, 
@glindex value_dict/1
@code{value_dict/1}, 
@glindex url_term/1
@code{url_term/1}, 
@glindex http_request_param/1
@code{http_request_param/1}, 
@glindex http_response_param/1
@code{http_response_param/1}, 
@glindex http_date/1
@code{http_date/1}, 
@glindex weekday/1
@code{weekday/1}, 
@glindex month/1
@code{month/1}, 
@glindex hms_time/1
@code{hms_time/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (pillow_types),  , Usage and interface (pillow_types), PiLLoW types
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{pillow_types})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{canonic_html_term/1 (regtype)}}}
@temp
@end iftex
@teindex canonic_html_term/1 
@glindex canonic_html_term/1 
@deffn REGTYPE canonic_html_term/1:



A term representing HTML code in canonical, structured way. It is a list of terms defined by the following predicate: 
@smallexample 
canonic_html_item(comment(S)) :-
        string(S).
canonic_html_item(declare(S)) :-
        string(S).
canonic_html_item(env(Tag,Atts,Terms)) :-
        atm(Tag),
        list(Atts,tag_attrib),
        canonic_html_term(Terms).
canonic_html_item($(Tag,Atts)) :-
        atm(Tag),
        list(Atts,tag_attrib).
canonic_html_item(S) :-
        string(S).
@end smallexample  

@smallexample 
tag_attrib(Att) :-
        atm(Att).
tag_attrib(Att=Val) :-
        atm(Att),
        string(Val).
@end smallexample  
Each structure represents one HTML construction: 
@table @asis 


@item @strong{env(}@emph{tag}@strong{,}@emph{attribs}@strong{,}@emph{terms}@strong{)} 
An HTML environment, with name @emph{tag}, list of attributes @emph{attribs} and contents @emph{terms}. 


@item @strong{$(}@emph{tag}@strong{,}@emph{attribs}@strong{)} 
An HTML element of name @emph{tag} and list of attributes @emph{attribs}. @code{($)/2} is defined by the pillow package as an infix, binary operator. 


@item @strong{comment(}@emph{string}@strong{)} 
An HTML comment (translates to/from @code{<!--}@emph{string}@code{-->}). 


@item @strong{declare(}@emph{string}@strong{)} 
An HTML declaration, they are used only in the header (translates to/from @code{<!}@emph{string}@code{>}). 


@item @emph{string} 
Normal text is represented as a list of character codes. 


@end table  

For example, the term 
@smallexample 
env(a,[href="www.therainforestsite.com"],
      ["Visit ",img$[src="TRFS.gif"]])
   @end smallexample  
is output to (or parsed from): 
@smallexample 
<a href="www.therainforestsite.com">Visit <img src="TRFS.gif"></a>
   @end smallexample 



@strong{Usage:} @code{canonic_html_term(HTMLTerm)}
@itemize @minus
@item @emph{Description:} @code{HTMLTerm} is a term representing HTML code in canonical form. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{canonic_xml_term/1 (regtype)}}}
@temp
@end iftex
@teindex canonic_xml_term/1 
@glindex canonic_xml_term/1 
@deffn REGTYPE canonic_xml_term/1:



A term representing XML code in canonical, structured way. It is a list of terms defined by the following predicate (see 
@glindex tag_attrib/1
@code{tag_attrib/1} definition in 
@glindex canonic_html_term/1
@code{canonic_html_term/1}): 
@smallexample 
canonic_xml_item(Term) :-
        canonic_html_item(Term).
canonic_xml_item(xmldecl(Atts)) :-
        list(Atts,tag_attrib).
canonic_xml_item(env(Tag,Atts,Terms)) :-
        atm(Tag),
        list(Atts,tag_attrib),
        canonic_xml_term(Terms).
canonic_xml_item(elem(Tag,Atts)) :-
        atm(Tag),
        list(Atts,tag_attrib).
@end smallexample  
In addition to the structures defined by 
@glindex canonic_html_term/1
@code{canonic_html_term/1} (the @code{($)/2} structure appears only in malformed XML code), the following structures can be used: 
@table @asis 


@item @strong{elem(}@emph{tag}@strong{,}@emph{atts}@strong{)} 
Specifies an XML empty element of name @emph{tag} and list of attributes @emph{atts}. For example, the term 
@smallexample 
elem(arc,[weigh="3",begin="n1",end="n2"])
   @end smallexample  
is output to (or parsed from): 
@smallexample 
<arc weigh="3" begin="n1" end="n2"/>
   @end smallexample  


@item @strong{xmldecl(}@emph{atts}@strong{)} 
Specifies an XML declaration with attributes @emph{atts} (translates to/from @code{<?xml }@emph{atts}@code{?>}) 


@end table 



@strong{Usage:} @code{canonic_xml_term(XMLTerm)}
@itemize @minus
@item @emph{Description:} @code{XMLTerm} is a term representing XML code in canonical form. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{html_term/1 (regtype)}}}
@temp
@end iftex
@teindex html_term/1 
@glindex html_term/1 
@deffn REGTYPE html_term/1:



A term which represents HTML or XML code in a structured way. In addition to the structures defined by 
@glindex canonic_html_term/1
@code{canonic_html_term/1} or 
@glindex canonic_xml_term/1
@code{canonic_xml_term/1}, the following structures can be used: 
@table @asis 


@item @strong{begin(}@emph{tag}@strong{,}@emph{atts}@strong{)} 
It translates to the start of an HTML environment of name @emph{tag} and attributes @emph{atts}. There exists also a @strong{begin(@emph{tag})} structure. Useful, in conjunction with the next structure, when including in a document output generated by an existing piece of code (e.g. @emph{tag} = @code{pre}). Its use is otherwise discouraged. 


@item @strong{end(}@emph{tag}@strong{)} 
Translates to the end of an HTML environment of name @emph{tag}. 


@item @strong{start} 
Used at the beginning of a document (translates to @code{<html>}). 


@item @strong{end} 
Used at the end of a document (translates to @code{</html>}). 


@item @code{--} 
Produces a horizontal rule (translates to @code{<hr>}). 


@item @strong{\\} 
Produces a line break (translates to @code{<br>}). 


@item @strong{$} 
Produces a paragraph break (translates to @code{<p>}). 


@item @strong{image(}@emph{address}@strong{)} 
Used to include an image of address (URL) @emph{address} (equivalent to @code{img$[src=}@emph{address}@code{]}). 


@item @strong{image(}@emph{address}@strong{,}@emph{atts}@strong{)} 
As above with the list of attributes @emph{atts}. 


@item @strong{ref(}@emph{address}@strong{,}@emph{text}@strong{)} 
Produces a hypertext link, @emph{address} is the URL of the referenced resource, @emph{text} is the text of the reference (equivalent to @code{a([href=}@emph{address}@code{],}@emph{text}@code{)}). 


@item @strong{label(}@emph{name}@strong{,}@emph{text}@strong{)} 
Labels @emph{text} as a target destination with label @emph{name} (equivalent to @code{a([name=}@emph{name}@code{],}@emph{text}@code{)}). 


@item @strong{heading(}@emph{n}@strong{,}@emph{text}@strong{)} 
Produces a heading of level @emph{n} (between 1 and 6), @emph{text} is the text to be used as heading. Useful when one wants a heading level relative to another heading (equivalent to @code{h}@emph{n}@code{(}@emph{text}@code{)}). 


@item @strong{itemize(}@emph{items}@strong{)} 
Produces a list of bulleted items, @emph{items} is a list of corresponding HTML terms (translates to a @code{<ul>} environment). 


@item @strong{enumerate(}@emph{items}@strong{)} 
Produces a list of numbered items, @emph{items} is a list of corresponding HTML terms (translates to a @code{<ol>} environment). 


@item @strong{description(}@emph{defs}@strong{)} 
Produces a list of defined items, @emph{defs} is a list whose elements are definitions, each of them being a Prolog sequence (composed by @code{','/2} operators). The last element of the sequence is the definition, the other (if any) are the defined terms (translates to a @code{<dl>} environment). 


@item @strong{nice_itemize(}@emph{img}@strong{,}@emph{items}@strong{)} 
Produces a list of bulleted items, using the image @emph{img} as bullet. The predicate 
@glindex icon_address/2
@code{icon_address/2} provides a colored bullet. 


@item @strong{preformatted(}@emph{text}@strong{)} 
Used to include preformatted text, @emph{text} is a list of HTML terms, each element of the list being a line of the resulting document (translates to a @code{<pre>} environment). 


@item @strong{verbatim(}@emph{text}@strong{)} 
Used to include text verbatim, special HTML characters (@code{<,>,&,"} and space) are translated into its quoted HTML equivalent. 


@item @strong{prolog_term(}@emph{term}@strong{)} 
Includes any prolog term @emph{term}, represented in functional notation. Variables are output as @code{_}. 


@item @strong{nl} 
Used to include a newline in the HTML source (just to improve human readability). 


@item @strong{entity(}@emph{name}@strong{)} 
Includes the entity of name @emph{name} (ISO-8859-1 special character). 


@item @strong{start_form(}@emph{addr}@strong{,}@emph{atts}@strong{)} 
Specifies the beginning of a form. @emph{addr} is the address (URL) of the program that will handle the form, and @emph{atts} other attributes of the form, as the method used to invoke it. If @emph{atts} is not present (there is only one argument) the method defaults to POST. 


@item @strong{start_form} 
Specifies the beginning of a form without assigning address to the handler, so that the form handler will be the cgi-bin executable producing the form. 


@item @strong{end_form} 
Specifies the end of a form. 


@item @strong{checkbox(}@emph{name}@strong{,}@emph{state}@strong{)} 
Specifies an input of type @code{checkbox} with name @emph{name}, @emph{state} is @code{on} if the checkbox is initially checked. 


@item @strong{radio(}@emph{name}@strong{,}@emph{value}@strong{,}@emph{selected}@strong{)} 
Specifies an input of type @code{radio} with name @emph{name} (several radio buttons which are interlocked must share their name), @emph{value} is the the value returned by the button, if @emph{selected}=@emph{value} the button is initially checked. 


@item @strong{input(}@emph{type}@strong{,}@emph{atts}@strong{)} 
Specifies an input of type @emph{type} with a list of attributes @emph{atts}. Possible values of @emph{type} are @code{text}, @code{hidden}, @code{submit}, @code{reset}, ldots 


@item @strong{textinput(}@emph{name}@strong{,}@emph{atts}@strong{,}@emph{text}@strong{)} 
Specifies an input text area of name @emph{name}. @emph{text} provides the default text to be shown in the area, @emph{atts} a list of attributes. 


@item @strong{option(}@emph{name}@strong{,}@emph{val}@strong{,}@emph{options}@strong{)} 
Specifies a simple option selector of name @emph{name}, @emph{options} is the list of available options and @emph{val} is the initial selected option (if @emph{val} is not in @emph{options} the first item is selected by default) (translates to a @code{<select>} environment). 


@item @strong{menu(}@emph{name}@strong{,}@emph{atts}@strong{,}@emph{items}@strong{)} 
Specifies a menu of name @emph{name}, list of attributes @emph{atts} and list of options @emph{items}. The elements of the list @emph{items} are marked with the prefix operator @code{$} to indicate that they are selected (translates to a @code{<select>} environment). 


@item @strong{form_reply} 
@item @strong{cgi_reply} 
This two are equivalent, they do not generate HTML, rather, the CGI protocol requires this content descriptor to be used at the beginning by CGI executables (including form handlers) when replying (translates to @code{Content-type: text/html}). 


@item @strong{pr} 
Includes in the page a graphical logo with the message ``Developed using the PiLLoW Web programming library'', which points to the manual and library source. 


@item @emph{name}@strong{(}@emph{text}@strong{)} 
A term with functor @emph{name}/1, different from the special functors defined herein, represents an HTML environment of name @emph{name} and included text @emph{text}. For example, the term 
@smallexample 
   address('clip@@clip.dia.fi.upm.es')
   @end smallexample  
is translated into the HTML source 
@smallexample 
   <address>clip@@clip.dia.fi.upm.es</address>
   @end smallexample  


@item @emph{name}@strong{(}@emph{atts}@strong{,}@emph{text}@strong{)} 
A term with functor @emph{name}/2, different from the special functors defined herein, represents an HTML environment of name @emph{name}, attributes @emph{atts} and included text @emph{text}. For example, the term 
@smallexample 

   a([href='http://www.clip.dia.fi.upm.es/'],"Clip home")
   @end smallexample  
represents the HTML source 
@smallexample 
   <a href="http://www.clip.dia.fi.upm.es/">Clip home</a>
   @end smallexample  


@end table  



@strong{Usage:} @code{html_term(HTMLTerm)}
@itemize @minus
@item @emph{Description:} @code{HTMLTerm} is a term representing HTML code. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{form_dict/1 (regtype)}}}
@temp
@end iftex
@teindex form_dict/1 
@glindex form_dict/1 
@deffn REGTYPE form_dict/1:






@strong{Usage:} @code{form_dict(Dict)}
@itemize @minus
@item @emph{Description:} @code{Dict} is a dictionary of values of the attributes of a form. It is a list of @code{form_assignment} 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{form_assignment/1 (regtype)}}}
@temp
@end iftex
@teindex form_assignment/1 
@glindex form_assignment/1 
@deffn REGTYPE form_assignment/1:






@strong{Usage:} @code{form_assignment(Eq)}
@itemize @minus
@item @emph{Description:} @code{Eq} is an assignment of value of an attribute of a form. It is defined by: 
@smallexample 
form_assignment(A=V) :-
        atm(A),
        form_value(V).
@end smallexample  

@smallexample 
form_value(A) :-
        atm(A).
form_value(N) :-
        num(N).
form_value(L) :-
        list(L,string).
@end smallexample 
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{form_value/1 (regtype)}}}
@temp
@end iftex
@teindex form_value/1 
@glindex form_value/1 
@deffn REGTYPE form_value/1:






@strong{Usage:} @code{form_value(V)}
@itemize @minus
@item @emph{Description:} @code{V} is a value of an attribute of a form. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{value_dict/1 (regtype)}}}
@temp
@end iftex
@teindex value_dict/1 
@glindex value_dict/1 
@deffn REGTYPE value_dict/1:






@strong{Usage:} @code{value_dict(Dict)}
@itemize @minus
@item @emph{Description:} @code{Dict} is a dictionary of values. It is a list of pairs @emph{atom}=@emph{constant}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{url_term/1 (regtype)}}}
@temp
@end iftex
@teindex url_term/1 
@glindex url_term/1 
@deffn REGTYPE url_term/1:



A term specifying an Internet Uniform Resource Locator. Currently only HTTP URLs are supported. Example: @code{http('www.clip.dia.fi.upm.es',80,"/Software/Ciao/")}. Defined as 
@smallexample 
url_term(http(Host,Port,Document)) :-
        atm(Host),
        int(Port),
        string(Document).
@end smallexample 



@strong{Usage:} @code{url_term(URL)}
@itemize @minus
@item @emph{Description:} @code{URL} specifies a URL. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{http_request_param/1 (regtype)}}}
@temp
@end iftex
@teindex http_request_param/1 
@glindex http_request_param/1 
@deffn REGTYPE http_request_param/1:



A parameter of an HTTP request: 
@itemize @bullet{} 
@item @strong{head:} Specify that the document content is not wanted. 


@item @strong{timeout(}@emph{T}@strong{):} @emph{T} specifies the time in seconds to wait for the response. Default is 300 seconds. 


@item @strong{if_modified_since(}@emph{Date}@strong{):} Get document only if newer than @emph{Date}. @emph{Date} has the format defined by 
@glindex http_date/1
@code{http_date/1}. 


@item @strong{user_agent(}@emph{Agent}@strong{):} Provides a user-agent field, @emph{Agent} is an atom. The string @code{"PiLLoW/1.1"} (or whatever version of PiLLoW is used) is appended. 


@item @strong{authorization(}@emph{Scheme},@emph{Params}@strong{):} To provide credentials. See RFC 1945 for details. 


@item @strong{@emph{option}(}@emph{Value}@strong{):} Any unary term, being @emph{Value} an atom, can be used to provide another valid option (e.g. @code{from('user@@machine')}). 
@end itemize  



@strong{Usage:} @code{http_request_param(Request)}
@itemize @minus
@item @emph{Description:} @code{Request} is a parameter of an HTTP request. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{http_response_param/1 (regtype)}}}
@temp
@end iftex
@teindex http_response_param/1 
@glindex http_response_param/1 
@deffn REGTYPE http_response_param/1:



A parameter of an HTTP response: 
@itemize @bullet{} 


@item @strong{content(}@emph{String}@strong{):} @emph{String} is the document content (list of bytes). If the @code{head} parameter of the HTTP request is used, an empty list is get here. 


@item @strong{status(}@emph{Type,Code,Reason}@strong{):} @emph{Type} is an atom denoting the response type, @emph{Code} is the status code (an integer), and @emph{Reason} is a string holding the reason phrase. 


@item @strong{message_date(}@emph{Date}@strong{):} @emph{Date} is the date of the response, with format defined by 
@glindex http_date/1
@code{http_date/1}. 


@item @strong{location(}@emph{Loc}@strong{):} This parameter appears when the document has moved, @emph{Loc} is an atom holding the new location. 


@item @strong{http_server(}@emph{Server}@strong{):} @emph{Server} is the server responding, as a string. 


@item @strong{authenticate(}@emph{Params}@strong{):} Returned if document is protected, @emph{Params} is a list of chagenges. See RFC 1945 for details. 


@item @strong{allow(}@emph{Methods}@strong{):} @emph{Methods} are the methods allowed by the server, as a list of atoms. 


@item @strong{content_encoding(}@emph{Encoding}@strong{):} @emph{Encoding} is an atom defining the encoding. 


@item @strong{content_length(}@emph{Length}@strong{):} @emph{Length} is the length of the document (an integer). 


@item @strong{content_type(}@emph{Type,Subtype,Params}@strong{):} Specifies the document content type, @emph{Type} and @emph{Subtype} are atoms, @emph{Params} a list of parameters (e.g. @code{content_type(text,html,[])}). 


@item @strong{expires(}@emph{Date}@strong{):} @emph{Date} is the date after which the entity should be considered stale. Format defined by 
@glindex http_date/1
@code{http_date/1}. 


@item @strong{last_modified(}@emph{Date}@strong{):} @emph{Date} is the date at which the sender believes the resource was last modified. Format defined by 
@glindex http_date/1
@code{http_date/1}. 


@item @strong{pragma(}@emph{String}@strong{):} Miscellaneous data. 


@item @strong{@emph{header}(}@emph{String}@strong{):} Any other functor @emph{header}/1 is an extension header. 
@end itemize  



@strong{Usage:} @code{http_response_param(Response)}
@itemize @minus
@item @emph{Description:} @code{Response} is a parameter of an HTTP response. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{http_date/1 (regtype)}}}
@temp
@end iftex
@teindex http_date/1 
@glindex http_date/1 
@deffn REGTYPE http_date/1:


@code{http_date(Date)}


@code{Date} is a term defined as 
@smallexample 
http_date(date(WeekDay,Day,Month,Year,Time)) :-
        weekday(WeekDay),
        int(Day),
        month(Month),
        int(Year),
        hms_time(Time).
@end smallexample 
.


@strong{Usage:} @code{http_date(Date)}
@itemize @minus
@item @emph{Description:} @code{Date} is a term denoting a date. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{weekday/1 (regtype)}}}
@temp
@end iftex
@teindex weekday/1 
@glindex weekday/1 
@deffn REGTYPE weekday/1:



A regular type, defined as follows:
@smallexample 
@smallexample 
weekday('Monday').
weekday('Tuesday').
weekday('Wednesday').
weekday('Thursday').
weekday('Friday').
weekday('Saturday').
weekday('Sunday').
@end smallexample 
@end smallexample 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{month/1 (regtype)}}}
@temp
@end iftex
@teindex month/1 
@glindex month/1 
@deffn REGTYPE month/1:



A regular type, defined as follows:
@smallexample 
@smallexample 
month('January').
month('February').
month('March').
month('April').
month('May').
month('June').
month('July').
month('August').
month('September').
month('October').
month('November').
month('December').
@end smallexample 
@end smallexample 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{hms_time/1 (regtype)}}}
@temp
@end iftex
@teindex hms_time/1 
@glindex hms_time/1 
@deffn REGTYPE hms_time/1:






@strong{Usage:} @code{hms_time(Time)}
@itemize @minus
@item @emph{Description:} @code{Time} is an atom of the form @code{hh:mm:ss} 
@end itemize
@end deffn
@sp 1


@c (component)


@node Persistent predicate database, Using the persdb library, PiLLoW types, Top
@comment node-name, next,  previous,  up
@chapter Persistent predicate database
@liindex persdbrt
@c -------------------------------------------------
@c WARNING: Do not edit this file (persdbrt.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/persdb/persdbrt.pl
@c -------------------------------------------------

@strong{Author(s):} J.M. Gomez, D. Cabeza, and M. Hermenegildo, @code{clip@@dia.fi.upm.es}, @code{http://www.clip.dia.fi.upm.es/}, The CLIP Group, Facultad de Inform@'atica, Universidad Polit@'ecnica de Madrid.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.8#31 (1998/12/27, 19:17:20 MET)

 



@menu
* Introduction to persistent predicates::  
* Persistent predicates::	
* Using file-based persistent predicates::  
* Implementation Issues::	
* Using persistent predicates from the top level::  
* Usage and interface (persdbrt)::  
* Documentation on exports (persdbrt)::	 
* Documentation on multifiles (persdbrt)::  
* Documentation on internals (persdbrt)::  
* Known bugs and planned improvements (persdbrt)::  
@end menu

@node Introduction to persistent predicates, Persistent predicates, Persistent predicate database, Persistent predicate database
@comment node-name, next,  previous,  up
@section Introduction to persistent predicates 

This library implements a @emph{generic persistent predicate database}. The basic notion implemented by the library is that of a 
@glindex persistent predicate
persistent predicate. The persistent predicate concept provides a simple, yet powerful generic persistent data access method [CHGT98,Par97]. A persistent predicate is a special kind of dynamic, data predicate that ``resides'' in some persistent medium (such as a set of files, a database, etc.) that is typically external to the program using such predicates. The main effect is that any changes made to to a persistent predicate from a program ``survive'' across executions. I.e., if the program is halted and restarted the predicate that the new process sees is in precisely the same state as it was when the old process was halted (provided no change was made in the meantime to the storage by other processes or the user). 

Persistent predicates appear to a program as ordinary predicates, and calls to these predicates can appear in clause bodies in the usual way. However, the definitions of these predicates do not appear in the program. Instead, the library maintains automatically the definitions of predicates which have been declared as persistent in the persistent storage. 


@glindex Updates to persistent predicates
Updates to persistent predicates can be made by calling predicates similar to 
@glindex assertz_fact/1
@code{assertz_fact/1} and 
@glindex retract_fact/1
@code{retract_fact/1}. The library makes sure that each update is a 
@glindex transactional update
transactional update, in the sense that if the update terminates, then the permanent storage has definitely been modified. For example, if the program making the updates is halted just after the update and then restarted, then the updated state of the predicate will be seen. This provides security against possible data loss due to, for example, a system crash. Also, due to the atomicity of the transactions, persistent predicates allow 
@glindex concurrent updates
concurrent updates from several programs. 



@node Persistent predicates, Using file-based persistent predicates, Introduction to persistent predicates, Persistent predicate database
@comment node-name, next,  previous,  up
@section Persistent predicates, files, and relational databases 

The concept of persistent predicates provided by this library essentially implements a light-weight, simple, and at the same time powerful form of relational database (a 
@glindex deductive database
deductive database), and which is standalone, in the sense that it does not require external support, other than the file management capabilities provided by the operating system. This is due to the fact that the persistent predicates are in fact stored in one or more auxiliary files in a given directory. 

This type of database is specially useful when building small to medium-sized standalone applications in Prolog which require persistent storage. In many cases it provides a much easier way of implementing such storage than using files under direct program control. For example, interactive applications can use persistent predicates to represent their internal state in a way that is close to the application. The persistence of such predicates then allows automatically restoring the state to that at the end of a previous session. Using persistent predicates amounts to simply declaring some predicates as such and eliminates having to worry about opening files, closing them, recovering from system crashes, etc. 

In other cases, however, it may be convenient to use a relational database as persistent storage. This may be the case, for example, when the data already resides in such a database (where it is perhaps accessed also by other applications) or the volume of data is very large. 
@glindex persdb_sql
@code{persdb_sql} [CCG98] is a companion library which implements the same notion of persistent predicates used herein, but keeping the storage in a relational database. This provides a very natural and transparent way to access SQL database relations from a Prolog program. In that library, facilities are also provided for reflecting more complex @emph{views} of the database relations as predicates. Such views can be constructed as conjunctions, disjunctions, projections, etc. of database relations, and may include SQL-like aggregation operations. 

A nice characteristic of the notion of persistent predicates used in both of these libraries is that it abstracts away how the predicate is actually stored. Thus, a program can use persistent predicates stored in files or in external relational databases interchangeably, and the type of storage used for a given predicate can be changed without having to modify the program (except for replacing the corresponding 
@glindex persistent/2
@code{persistent/2} declarations). 

An example application of the 
@glindex persdb
@code{persdb} and 
@glindex persdb_sql
@code{persdb_sql} libraries (and also the 
@glindex pillow
@code{pillow} library [CH97]), is 
@glindex WebDB
@code{WebDB} [GCH98]. 
@glindex WebDB
@code{WebDB} is a generic, highly customizable @emph{deductive database engine} with an @emph{html interface}. 
@glindex WebDB
@code{WebDB} allows creating and maintaining Prolog-based databases as well as relational databases (residing in conventional relational database engines) using any standard WWW browser. 



@node Using file-based persistent predicates, Implementation Issues, Persistent predicates, Persistent predicate database
@comment node-name, next,  previous,  up
@section Using file-based persistent predicates 

Persistent predicates can be declared statically, using 
@glindex persistent/2
@code{persistent/2} declarations (which is the preferred method, when possible), or dynamically via calls to 
@glindex make_persistent/2
@code{make_persistent/2}. Currently, persistent predicates may only contain facts, i.e., they are @emph{dynamic} predicates of type 
@glindex data/1
@code{data/1}, and @emph{should be declared as such}. 

Predicates declared as persistent are linked to a directory, and the persistent state of the predicate will be kept in several files in that directory. The files in which the persistent predicates are stored are in readable, plain ASCII format, and in Prolog syntax. One advantage of this approach is that such files can also be created or edited by hand, in a text editor, or even by other applications. 

An example definition of a persistent predicate implemented by files follows: 


@smallexample 
:- persistent(p/3,dbdir).

:- multifile persistent_dir/2.
:- data persistent_dir/2.

persistent_dir(dbdir, '/home/clip/public_html/db').
@end smallexample  

The first line declares the predicate @code{p/3} persistent. The argument @code{dbdir} is a key used to index into a fact of the relation 
@glindex persistent_dir/2
@code{persistent_dir/2}, which specifies the directory where the corresponding files will be kept. The effect of the declaration, together with the 
@glindex persistent_dir/2
@code{persistent_dir/2} fact, is that, although the predicate is handled in the same way as a normal data predicate, in addition the system will create and maintain efficiently a persistent version of @code{p/3} via files in the directory @code{/home/clip/public_html/db}. 

The level of indirection provided by the @code{dbdir} argument makes it easy to place the storage of several persistent predicates in a common directory, by specifying the same key for all of them. It also allows changing the directory for several such persistent predicates by modifying only one fact in the program. Furthermore, the 
@glindex persistent_dir/2
@code{persistent_dir/2} predicate can even be dynamic and specified at run-time. 



@node Implementation Issues, Using persistent predicates from the top level, Using file-based persistent predicates, Persistent predicate database
@comment node-name, next,  previous,  up
@section Implementation Issues 

We outline the current implementation approach. This implementation attempts to provide at the same time efficiency and security. To this end, up to three files are used for each predicate (the 
@glindex persistence set
persistence set): the 
@glindex data file
data file, the 
@glindex operations file
operations file, and the 
@glindex backup file
backup file. In the 
@glindex updated state
updated state the facts (tuples) that define the predicate are stored in the data file and the operations file is empty (the backup file, which contains a security copy of the data file, may or may not exist). 

While a program using a persistent predicate is running, any insertion (assert) or deletion (retract) operations on the predicate are performed on both the program memory and on the persistence set. However, in order to incurr only a small overhead in the execution, rather than changing the data file directly, a record of each of the insertion and deletion operations is @emph{appended} to the operations file. The predicate is then in a 
@glindex transient state
transient state, in that the contents of the data file do not reflect exactly the current state of the corresponding predicate. However, the complete persistence set does. 

When a program starts, when it is halted, or, periodically, when it is idle for some time, all pending operations in the operations file are performed on the data file. A backup of the data file is created first to prevent data loss if the system crashes during this operation. The order in which this updating of files is done ensures that, if at any point the process dies, on restart data will be completely recovered. This process of updating the persistence set can also be triggered at any point in the execution of a program by calling 
@glindex update_files/2
@code{update_files/2}. 



@node Using persistent predicates from the top level, Usage and interface (persdbrt), Implementation Issues, Persistent predicate database
@comment node-name, next,  previous,  up
@section Using persistent predicates from the top level 

Special care must be taken when using persistent predicates from the top level. This includes not only defining persistent predicates on the fly from de top level (which is not really very useful in practice) but also the more frequent case of loading into the top level modules or user files which use persistent predicates. As mentioned before, the persistence set is updated automatically each time a program using the corresponding persistent predicates is run or halted. However, since the top level itself is also a standard program, persistent predicates would only be updated whenever the top level is started, when they are typically still not loaded. 

If a program launched from a top level needs to update the persistence sets of any persistent predicate it must be done by calling the 
@glindex update_files/2
@code{update_files/2} method explicitly. 







@node Usage and interface (persdbrt), Documentation on exports (persdbrt), Using persistent predicates from the top level, Persistent predicate database
@comment node-name, next,  previous,  up
@section Usage and interface (@code{persdbrt})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

Typically, this library is used including the 'persdb' package into the syntax list of the module, or using the 
@glindex syntax/1
@code{syntax/1} declaration: 
@table @asis 
@item In a module: 
@smallexample 
        :- module(bar, [main/1], [persdb]).
@end smallexample  
or 
@smallexample 
        :- module(bar, [main/1]).
        :- include(library(persdb)).
@end smallexample  
@item In a @emph{user} file: 
@smallexample 
        :- syntax([persdb]).
@end smallexample  
or 
@smallexample 
        :- include(library(persdb)).
@end smallexample  
@end table  
This syntax file loads the run-time and compile-time versions of the library (@code{persdbtr.pl} and @code{persdbrt.pl}) and includes some needed declarations.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex passertz_fact/1
@code{passertz_fact/1}, 
@glindex pretract_fact/1
@code{pretract_fact/1}, 
@glindex pcurrent_fact/1
@code{pcurrent_fact/1}, 
@glindex init_persdb/0
@code{init_persdb/0}, 
@glindex initialize_db/0
@code{initialize_db/0}, 
@glindex make_persistent/2
@code{make_persistent/2}, 
@glindex update_files/2
@code{update_files/2}.


@item @emph{Multifiles:}

@glindex persistent_dir/2
@code{persistent_dir/2}, 
@glindex $is_persistent/2
@code{$is_persistent/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex lists
@code{lists}, 
@glindex streams
@code{streams}, 
@glindex read
@code{read}, 
@glindex system
@code{system}, 
@glindex file_locks/file_locks
@code{file_locks/file_locks}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (persdbrt), Documentation on multifiles (persdbrt), Usage and interface (persdbrt), Persistent predicate database
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{persdbrt})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{passertz_fact/1 (pred)}}}
@temp
@end iftex
@pdindex passertz_fact/1 
@glindex passertz_fact/1 
@deffn PREDICATE passertz_fact/1:






@emph{Meta-predicate} with arguments: @code{passertz_fact(fact)}.


@strong{Usage:} @code{passertz_fact(Fact)}
@itemize @minus
@item @emph{Description:} Persistent version of 
@glindex assertz_fact/1
@code{assertz_fact/1}: the current instance of @code{Fact} is interpreted as a fact (i.e., a relation tuple) and is added at the end of the definition of the corresponding predicate. The predicate concerned must be declared 
@glindex persistent
@code{persistent}. Any uninstantiated variables in the @code{Fact} will be replaced by new, private variables. 
@item @emph{The following properties should hold at call time:}


@code{Fact} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pretract_fact/1 (pred)}}}
@temp
@end iftex
@pdindex pretract_fact/1 
@glindex pretract_fact/1 
@deffn PREDICATE pretract_fact/1:






@emph{Meta-predicate} with arguments: @code{pretract_fact(fact)}.


@strong{Usage:} @code{pretract_fact(Fact)}
@itemize @minus
@item @emph{Description:} Persistent version of 
@glindex retract_fact/1
@code{retract_fact/1}: deletes on backtracking all the facts which unify with @code{Fact}. The predicate concerned must be declared 
@glindex persistent
@code{persistent}. 
@item @emph{The following properties should hold at call time:}


@code{Fact} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pcurrent_fact/1 (pred)}}}
@temp
@end iftex
@pdindex pcurrent_fact/1 
@glindex pcurrent_fact/1 
@deffn PREDICATE pcurrent_fact/1:






@emph{Meta-predicate} with arguments: @code{pcurrent_fact(fact)}.


@strong{Usage:} @code{pcurrent_fact(Fact)}
@itemize @minus
@item @emph{Description:} Persistent version of 
@glindex current_fact/1
@code{current_fact/1}: the fact @code{Fact} exists in the current database. The predicate concerned must be declared 
@glindex persistent
@code{persistent}. Provides on backtracking all the facts (tuples) which unify with @code{Fact}. 
@item @emph{The following properties should hold at call time:}


@code{Fact} is a term which represents a goal, i.e., an atom or a structure.
@iftex
@hfill
@end iftex
 (@code{basic_props:callable/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{init_persdb/0 (pred)}}}
@temp
@end iftex
@pdindex init_persdb/0 
@glindex init_persdb/0 
@deffn PREDICATE init_persdb/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Executes 
@glindex initialize_db/0
@code{initialize_db/0} if no initialization has been done yet. Needed when accesing persistent predicates before doing any of 
@glindex passertz_fact/1
@code{passertz_fact/1}, 
@glindex pretract_fact/1
@code{pretract_fact/1}, or 
@glindex pcurrent_fact/1
@code{pcurrent_fact/1}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{initialize_db/0 (pred)}}}
@temp
@end iftex
@pdindex initialize_db/0 
@glindex initialize_db/0 
@deffn PREDICATE initialize_db/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} 
@coindex database initialization
@glindex database initialization 
Initializes the whole database, updating the state of the declared persistent predicates. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{make_persistent/2 (pred)}}}
@temp
@end iftex
@pdindex make_persistent/2 
@glindex make_persistent/2 
@deffn PREDICATE make_persistent/2:






@emph{Meta-predicate} with arguments: @code{make_persistent(spec,?)}.


@strong{Usage:} @code{make_persistent(PredDesc,Keyword)}
@itemize @minus
@item @emph{Description:} Dynamic version of the 
@glindex persistent
@code{persistent} declaration. 
@item @emph{The following properties should hold at call time:}


@code{PredDesc} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 

@iftex
@hfill
@end iftex
 (@code{basic_props:predname/1})

@code{Keyword} is an atom corresponding to a directory identifier.
@iftex
@hfill
@end iftex
 (@code{persdbrt:keyword/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{update_files/2 (pred)}}}
@temp
@end iftex
@pdindex update_files/2 
@glindex update_files/2 
@deffn PREDICATE update_files/2:






@strong{Usage:} @code{update_files(PredDesc,Arity)}
@itemize @minus
@item @emph{Description:} Updates the state of the given persistent predicate and its corresponding persistence set. 
@item @emph{The following properties should hold upon exit:}


@code{PredDesc} is a Name/Arity structure denoting a predicate name: 
@smallexample 
predname(P/A) :-
        atm(P),
        int(A).
@end smallexample 

@iftex
@hfill
@end iftex
 (@code{basic_props:predname/1})

@code{Arity} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@end itemize
@end deffn
@sp 1



@node Documentation on multifiles (persdbrt), Documentation on internals (persdbrt), Documentation on exports (persdbrt), Persistent predicate database
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{persdbrt})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{persistent_dir/2 (pred)}}}
@temp
@end iftex
@pdindex persistent_dir/2 
@glindex persistent_dir/2 
@deffn PREDICATE persistent_dir/2:






The predicate is @emph{multifile}.


The predicate is of type @emph{data}.


@strong{Usage:} @code{persistent_dir(Keyword,Location_Path)}
@itemize @minus
@item @emph{Description:} Relates identifiers of locations (the @code{Keyword}s) with descriptions of such locations (@code{Location_Path}s). @code{Location_Path} is @strong{a directory} and it means that the definition for the persistent predicates associated with @code{Keyword} is kept in files in that directory. These files, in the updated state, contain the actual definition of the predicate in Prolog syntax (but with module names resolved). 
@item @emph{The following properties should hold at call time:}


@code{Keyword} is an atom corresponding to a directory identifier.
@iftex
@hfill
@end iftex
 (@code{persdbrt:keyword/1})

@code{Location_Path} is an atom which is the name of a directory.
@iftex
@hfill
@end iftex
 (@code{persdbrt:directoryname/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{$is_persistent/2 (pred)}}}
@temp
@end iftex
@pdindex $is_persistent/2 
@glindex $is_persistent/2 
@deffn PREDICATE $is_persistent/2:



No further documentation available for this predicate.


The predicate is @emph{multifile}.

@end deffn
@sp 1



@node Documentation on internals (persdbrt), Known bugs and planned improvements (persdbrt), Documentation on multifiles (persdbrt), Persistent predicate database
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{persdbrt})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{keyword/1 (regtype)}}}
@temp
@end iftex
@teindex keyword/1 
@glindex keyword/1 
@deffn REGTYPE keyword/1:



An atom which identifies a fact of the 
@glindex persistent_dir/2
@code{persistent_dir/2} relation. This fact relates this atom to a directory in which the persistent storage for one or more persistent predicates is kept.


@strong{Usage:} @code{keyword(X)}
@itemize @minus
@item @emph{Description:} @code{X} is an atom corresponding to a directory identifier. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{directoryname/1 (regtype)}}}
@temp
@end iftex
@teindex directoryname/1 
@glindex directoryname/1 
@deffn REGTYPE directoryname/1:






@strong{Usage:} @code{directoryname(X)}
@itemize @minus
@item @emph{Description:} @code{X} is an atom which is the name of a directory. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (persdbrt),  , Documentation on internals (persdbrt), Persistent predicate database
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{persdbrt})

@itemize @bullet{}

@item
Shouldn't the declarations for persistent_dir/2 be inside persdb.pl? (would save a lot of writing).

@item
make_persistent/2 should really be persistent/2 (since it doesn't really make a predicate persistent but rather declares it as such, i.e., we do not use make_data/1, we use data/1) ?

@item
having to use pcurrent_fact is not so nice

@item
passert, pretract, etc. should really be overloaded versions of assert, retract etc., i.e., it should be possible to use assertz_fact directly

@item
we need also asserta_fact, right? Otherwise isn't it difficult to do many things?
@end itemize

@c (component)


@node Using the persdb library, SQL persistent database interface, Persistent predicate database, Top
@comment node-name, next,  previous,  up
@chapter Using the persdb library
@c -------------------------------------------------
@c WARNING: Do not edit this file (Examples.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/persdb/Examples.pl
@c -------------------------------------------------


Through the following examples we will try to illustrate the two mains ways of declaring and using persistent predicates: statically (the preferred method) and dynamically (necessary when the new persistent predicates have to be defined at run-time). The final example is a small application implementing a simple persistent queue. 





@menu
* An example of persistent predicates (static version)::  
* An example of persistent predicates (dynamic version)::  
* A simple application / a persistent queue::  
@end menu

@node An example of persistent predicates (static version), An example of persistent predicates (dynamic version), Using the persdb library, Using the persdb library
@comment node-name, next,  previous,  up
@section An example of persistent predicates (static version) 


@smallexample 
:- include(library(persdb)).

%% Required declarations for persistent_dir/2.
:- multifile persistent_dir/2.
:- data persistent_dir/2.

%% Declare the directory associated to the key "db" where the
%% persistence sets of the persistent predicates are stored:
persistent_dir(db,'./').

%% Declare a persistent predicate:
:- persistent(bar/1, db).

%% Read a term, storing it in a new fact of the persistent predicate
%% and list all the current facts of that predicate
main:-
     read(X),
     passertz_fact(bar(X)),
     findall(Y,bar(Y),L),
     write(L).

@end smallexample  



@node An example of persistent predicates (dynamic version), A simple application / a persistent queue, An example of persistent predicates (static version), Using the persdb library
@comment node-name, next,  previous,  up
@section An example of persistent predicates (dynamic version) 


@smallexample 
:- include(library(persdb)).

%% Required declarations for persistent_dir/2.
:- multifile persistent_dir/2.
:- data persistent_dir/2.

main([X]):-
%%   Declare the directory associated to the key "db" 
     asserta_fact(persistent_dir(db,'./')),
%%   Declare the predicate bar/1 as dynamic (and data) at run-time  
     data(bar/1),
%%   Declare the predicate bar/1 as persistent at run-time  
     make_persistent(bar/1, db),
     passertz_fact(bar(X)),
     findall(Y, bar(Y), L),
     write(L).    

@end smallexample  



@node A simple application / a persistent queue,  , An example of persistent predicates (dynamic version), Using the persdb library
@comment node-name, next,  previous,  up
@section A simple application / a persistent queue 
@smallexample 
:- module(queue, [main/0],[]).

:- use_module(library(read)).
:- use_module(library(write)).
:- use_module(library(aggregates)).

:- include(library(persdb)).

:- multifile persistent_dir/2.
:- data persistent_dir/2.

:- persistent(queue/1, queue_dir).

persistent_dir(queue_dir,'./pers').

main:-
     write('Action ( in(Term). | out. | list. | halt. ): '),
     read(A),
     (  handle_action(A)
     -> true
     ;  write('Unknown command.'), nl ),
     main.

handle_action(halt) :-
     halt.
handle_action(in(Term)) :-
     passertz_fact(queue(Term)),
     main.
handle_action(out) :-
     (  pretract_fact(queue(Term))
     -> write('Out '), write(Term)
     ;  write('FIFO empty.') ),
     nl,
     main.
handle_action(list) :-
     findall(Term,pcurrent_fact(queue(Term)),Terms),
     write('Contents: '), write(Terms), nl,
     main.
     


@end smallexample  




@c (component)


@node SQL persistent database interface, Prolog to SQL translator, Using the persdb library, Top
@comment node-name, next,  previous,  up
@chapter SQL persistent database interface
@liindex persdbrtsql
@c -------------------------------------------------
@c WARNING: Do not edit this file (persdbrtsql.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/persdb_sql/persdbrtsql.pl
@c -------------------------------------------------

@strong{Author(s):} I. Caballero, D. Cabeza, J.M. G@'omez, and M. Hermenegildo, @code{clip@@dia.fi.upm.es}, @code{http://www.clip.dia.fi.upm.es/}, The CLIP Group, Facultad de Inform@'atica, Universidad Polit@'ecnica de Madrid.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#105 (2000/4/3, 14:21:58 CEST)

The purpose of this library is to implement an instance of the generic concept of 
@glindex persistent predicates
persistent predicates, where external 
@glindex relational databases
relational databases are used for storage (see the documentation of the 
@glindex persdb
@code{persdb} library and [CHGT98,Par97] for details). To this end, this library exports SQL persistent versions of the 
@glindex assertz_fact/1
@code{assertz_fact/1}, 
@glindex retract_fact/1
@code{retract_fact/1} and 
@glindex retractall_fact/1
@code{retractall_fact/1} builtin predicates. Persistent predicates also allow 
@glindex concurrent updates
concurrent updates from several programs, since each update is atomic. 

The notion of persistence provides a very natural and transparent way to access database relations from a Prolog program. Stub definitions are provided for such predicates which access the database when the predicate is called (using the 
@glindex db_client
@code{db_client} library). A 
@glindex Prolog to SQL translator
Prolog to SQL translator is used to generate the required 
@glindex SQL
SQL code dynamically (see library 
@glindex pl2sql
@code{pl2sql}). 

This library also provides facilities for reflecting more complex 
@glindex views
views of the database relations as Prolog predicates. Such views can be constructed as conjunctions, disjunctions, projections, etc. of database relations. Also, 
@glindex SQL
SQL-like 
@glindex aggregation operations
aggregation operations are supported. 



@menu
* Implementation of the Database Interface::  
* Example(s)::			
* Usage and interface (persdbrtsql)::  
* Documentation on exports (persdbrtsql)::  
* Documentation on multifiles (persdbrtsql)::  
* Documentation on internals (persdbrtsql)::  
* Known bugs and planned improvements (persdbrtsql)::  
@end menu

@node Implementation of the Database Interface, Example(s), SQL persistent database interface, SQL persistent database interface
@comment node-name, next,  previous,  up
@section Implementation of the Database Interface 

The architecture of the low-level implementation of the database interface was defined with two goals in mind: 


@itemize @bullet{} 
@item to simplify the communication between the Prolog system and the relational database engines as much as possible, and 


@item to give as much flexibility as possible to the overall system. This includes simultaneous access to several databases, allowing both the databases and clients to reside on the same physical machine or different machines, and allowing the clients to reside in Win95/NT or Unix machines. 
@end itemize  
 
In order to allow the flexibility mentioned above, a client-sever architecture was chosen. The following figure depicts the overall architecture of the system: 

@image{autofigarchitecture} 

At the server side, a ``database mediator server'' connects on one side to the databases using the ODBC interface (this interface is available for the databases of the RadioWeb project, as well as for the majority of the databases running in the Win95/NT operating systems) and on the other it is connected to the network by TCP/IP using a fixed socket number / service (currently fixed to socket number 2020). 

The mediator server must run on the Windows (NT/95) operating system, on the machine where the databases are also running. The (Prolog) clients which connect to it can be run locally at the server machine. In addition, remote clients running on different machines can also connect to the mediator server by connecting to its socket number (service). Such clients can run on either Unix or Windows systems. 

After the connection is established a client can send commands to the mediator server which will pass them to the corresponding database server, and then the data will traverse in the opposite direction. These messages include logging on and off from the database, sending SQL queries, and receiving the responses. 

The low level implementation of the current library is accomplished by providing several abstraction levels over the socket interface library of the Prolog engine. These layers of abstraction implement the persistent predicate view, build the appropriate commands for the database using a translator of Prolog goals to SQL commands, issue such commands using the mediator send/receive procedures, parse the responses, and present such responses to the Prolog engine via backtracking. 



@node Example(s), Usage and interface (persdbrtsql), Implementation of the Database Interface, SQL persistent database interface
@comment node-name, next,  previous,  up
@section Example(s) 


@smallexample 
:- include(library('persdb_sql/persdb_sql')).
:- use_module(library(format)).

%% ------------------------------------------------- %%
%% First sample database : 'SA 6.0 Sample' %%
%% ------------------------------------------------- %%

%% Declare product/4 a persistent predicate, storage in 'radiowebdb':
:- sql_persistent(product( int,    int, string, string ),
              product( quantity,   id,      name,   size   ),
              sampledb).
sql_persistent_location(sampledb, %% The 'sampledb' descriptor:
         db('ASA 6.0 Sample','dba', 'sql','r2d5.dia.fi.upm.es':2020)).

main0 :-
%% Prints the contents of the relation 'product/4' by backtracking over it:
         format("Printing table:\n",[]),
         product(Quantity, Id, Name, Size), 
         format("Tuple: ~w \t ~w \t ~w \t ~w \n",
                [Quantity, Id, Name, Size]),
         fail.
main0 :-
         format("Done.\n",[]).

%% Generalizing table printing:
%% Prints the contents of Pred by backtracking over it
print_predicate(Pred):- 
        format("Printing relation:\n",[]),
        Pred, %% predicate call
        Pred=..[_|Args],
        format("\t Tuple: ~w \n",[Args]),
        fail.
print_predicate(_Pred):-
        format("Done.~n",[]).

main1 :- %% similar to main0:
%% Prints the contents of the relation 'product/4' by backtracking over it:
        print_predicate(product(_Quantity,_Id,_Name,_Size)).

main2 :- %% Issues a complex query inside a db_findall:
         dbfindall(sampledb,
                   foo(Quantity, Id, Name, Size, Bar),
                   ( product(Quantity, Id, Name, Size),
                     I^N^S^(Bar is avg(Q,product(Q, I, N, S)))
                   ),
                   Results),
         format("Results = ~w~n",[Results]).
main21 :- %% Using db_call
         dbcall(sampledb,
             (product(Quantity, Id, Name, Size),
              product(Quantity, Id1, _Name1, _Size1),Id1>Id)),
%%       product(Quantity, Id, Name, Size),
%%          product(Quantity, Id1, Name1, Size1),
%%          Id1>Id,
         format("Tuple: ~w \t ~w \t ~w \t ~w \n",
                [Quantity, Id, Name, Size]).

main22 :-  % get the set of tables from a database
        sql_get_tables(sampledb,TablesList),
        display(TablesList).

main23 :- % get table attributes and its types 
        sql_table_types(sampledb, 'Customer', AttList),
        display(AttList).
        
%% ------------------------------------------------- %%
%% Second sample database : 'Literature'             %%
%% ------------------------------------------------- %%

:- sql_persistent(authors(string,string,int),
               authors(firstName,lastName,id), %% 'id' is the primary key
               literature_db).
sql_persistent_location(literature_db,
        db('Literature','dba','sql','r2d5.dia.fi.upm.es':2020)).

main3:- %% Prints the contents of authors
         print_predicate(authors(_FirstName,_LastName,_Id)) .

main4:- %% assert a persistent fact
         dbassertz_fact(authors('Pedro','Calderon de la Barca',17)).

main6:- %% retract a persistent fact
         dbretract_fact(authors('Pedro','Calderon de la Barca',17)).


main9:- %% checking if a persistent fact is a current fact
        dbcurrent_fact(authors(_X,_Y,_Z)).


@end smallexample  




@node Usage and interface (persdbrtsql), Documentation on exports (persdbrtsql), Example(s), SQL persistent database interface
@comment node-name, next,  previous,  up
@section Usage and interface (@code{persdbrtsql})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

Typically, this library is used including the 'persdb_sql' package into the package list of the module, or using the 
@glindex use_package/1
@code{use_package/1} declaration: 
@table @asis 
@item In a module: 
@smallexample 
	:- module(bar, [main/1], [persdb_sql]).
@end smallexample  
or 
@smallexample 
        :- module(bar, [main/1]).
        :- include(library(persdb_sql)).
@end smallexample  
@item In a @emph{user} file: 
@smallexample 
	:- use_package([persdb_sql]).
@end smallexample  
or 
@smallexample 
        :- include(library(persdb_sql)).
@end smallexample  
@end table  
This loads the run-time and compile-time versions of the library (@code{persdbtr_sql.pl} and @code{persdbrt_sql.pl}) and includes some needed declarations.

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex init_sql_persdb/0
@code{init_sql_persdb/0}, 
@glindex dbassertz_fact/1
@code{dbassertz_fact/1}, 
@glindex dbretract_fact/1
@code{dbretract_fact/1}, 
@glindex dbcurrent_fact/1
@code{dbcurrent_fact/1}, 
@glindex dbretractall_fact/1
@code{dbretractall_fact/1}, 
@glindex make_sql_persistent/3
@code{make_sql_persistent/3}, 
@glindex dbfindall/4
@code{dbfindall/4}, 
@glindex dbcall/2
@code{dbcall/2}, 
@glindex sql_query/3
@code{sql_query/3}, 
@glindex sql_get_tables/2
@code{sql_get_tables/2}, 
@glindex sql_table_types/3
@code{sql_table_types/3}.


@item @emph{Multifiles:}

@glindex sql_persistent_location/2
@code{sql_persistent_location/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex persdb_sql/db_client
@code{persdb_sql/db_client}, 
@glindex persdb_sql/pl2sql
@code{persdb_sql/pl2sql}, 
@glindex persdb_sql/sqltypes
@code{persdb_sql/sqltypes}, 
@glindex dynamic
@code{dynamic}, 
@glindex terms
@code{terms}, 
@glindex metaterms
@code{metaterms}, 
@glindex messages
@code{messages}, 
@glindex lists
@code{lists}, 
@glindex aggregates
@code{aggregates}, 
@glindex persdb_sql/insert_compiler/pl2sqlinsert
@code{persdb_sql/insert_compiler/pl2sqlinsert}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (persdbrtsql), Documentation on multifiles (persdbrtsql), Usage and interface (persdbrtsql), SQL persistent database interface
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{persdbrtsql})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{init_sql_persdb/0 (pred)}}}
@temp
@end iftex
@pdindex init_sql_persdb/0 
@glindex init_sql_persdb/0 
@deffn PREDICATE init_sql_persdb/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Internal predicate, used to transform predicates statically declared as persistent (see 
@glindex sql_persistent/3
@code{sql_persistent/3}) into real persistent predicates.  
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sql_persistent/3 (pred)}}}
@temp
@end iftex
@pdindex sql_persistent/3 
@glindex sql_persistent/3 
@deffn PREDICATE sql_persistent/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbassertz_fact/1 (pred)}}}
@temp
@end iftex
@pdindex dbassertz_fact/1 
@glindex dbassertz_fact/1 
@deffn PREDICATE dbassertz_fact/1:






@strong{Usage:} @code{dbassertz_fact(+Fact)}
@itemize @minus
@item @emph{Description:} Persistent extension of 
@glindex assertz_fact/1
@code{assertz_fact/1}: the current instance of @code{Fact} is interpreted as a fact (i.e., a relation tuple) and is added to the end of the definition of the corresponding predicate. If any integrity constraint violation is done (database stored predicates), an error will be displayed. The predicate concerned must be statically (
@glindex sql_persistent/3
@code{sql_persistent/3}) or dinamically (
@glindex make_sql_persistent/3
@code{make_sql_persistent/3}) declared. Any uninstantiated variables in the @code{Fact} will be replaced by new, private variables. @strong{Note:} @emph{assertion of facts with uninstantiated variables not implemented at this time.} 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Fact} is a fact (a term whose main functor is not @code{':-'/2}).
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:fact/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbretract_fact/1 (pred)}}}
@temp
@end iftex
@pdindex dbretract_fact/1 
@glindex dbretract_fact/1 
@deffn PREDICATE dbretract_fact/1:






@strong{Usage:} @code{dbretract_fact(+Fact)}
@itemize @minus
@item @emph{Description:} Persistent extension of 
@glindex retract_fact/1
@code{retract_fact/1}: deletes on backtracking all the facts which unify with @code{Fact}. The predicate concerned must be statically (
@glindex sql_persistent/3
@code{sql_persistent/3}) or dinamically (
@glindex make_sql_persistent/3
@code{make_sql_persistent/3}) declared. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Fact} is a fact (a term whose main functor is not @code{':-'/2}).
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:fact/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbcurrent_fact/1 (pred)}}}
@temp
@end iftex
@pdindex dbcurrent_fact/1 
@glindex dbcurrent_fact/1 
@deffn PREDICATE dbcurrent_fact/1:






@strong{Usage:} @code{dbcurrent_fact(+Fact)}
@itemize @minus
@item @emph{Description:} Persistent extension of 
@glindex current_fact/1
@code{current_fact/1}: the fact @code{Fact} exists in the current database. The predicate concerned must be declared 
@glindex sql_persistent/3
@code{sql_persistent/3}. Provides on backtracking all the facts (tuples) which unify with @code{Fact}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Fact} is a fact (a term whose main functor is not @code{':-'/2}).
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:fact/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbretractall_fact/1 (pred)}}}
@temp
@end iftex
@pdindex dbretractall_fact/1 
@glindex dbretractall_fact/1 
@deffn PREDICATE dbretractall_fact/1:






@strong{Usage:} @code{dbretractall_fact(+Fact)}
@itemize @minus
@item @emph{Description:} Persistent extension of 
@glindex retractall_fact/1
@code{retractall_fact/1}: when called deletes all the facts which unify with @code{Fact}. The predicate concerned must be statically (
@glindex sql_persistent/3
@code{sql_persistent/3}) or dinamically (
@glindex make_sql_persistent/3
@code{make_sql_persistent/3}) declared. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Fact} is a fact (a term whose main functor is not @code{':-'/2}).
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:fact/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{make_sql_persistent/3 (pred)}}}
@temp
@end iftex
@pdindex make_sql_persistent/3 
@glindex make_sql_persistent/3 
@deffn PREDICATE make_sql_persistent/3:






@emph{Meta-predicate} with arguments: @code{make_sql_persistent(addmodule,?,?)}.


@strong{Usage:} @code{make_sql_persistent(PrologPredTypes,TableAttributes,Keyword)}
@itemize @minus
@item @emph{Description:} Dynamic version of the 
@glindex sql_persistent/3
@code{sql_persistent/3} declaration. 
@item @emph{The following properties should hold upon exit:}


@code{PrologPredTypes} is a structure describing a Prolog predicate name with its types.
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:prologPredTypes/1})

@code{TableAttributes} is a structure describing a table name and some attributes.
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:tableAttributes/1})

@code{Keyword} is the name of a persistent storage location.
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:persLocId/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbfindall/4 (pred)}}}
@temp
@end iftex
@pdindex dbfindall/4 
@glindex dbfindall/4 
@deffn PREDICATE dbfindall/4:






@strong{Usage:} @code{dbfindall(+DBId,+Pattern,+ComplexGoal,-Results)}
@itemize @minus
@item @emph{Description:} Similar to 
@glindex findall/3
@code{findall/3}, but @code{Goal} is executed in database @code{DBId}. Certain restrictions and extensions apply to both @code{Pattern} and @code{ComplexGoal} stemming from the Prolog to SQL translation involved (see the corresponding type definitions for details). 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DBId} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+Pattern} is a database projection term.
@iftex
@hfill
@end iftex
 (@code{pl2sql:projterm/1})

@code{+ComplexGoal} is a database query goal.
@iftex
@hfill
@end iftex
 (@code{pl2sql:querybody/1})

@code{-Results} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbcall/2 (pred)}}}
@temp
@end iftex
@pdindex dbcall/2 
@glindex dbcall/2 
@deffn PREDICATE dbcall/2:






@strong{Usage:} @code{dbcall(+DBId,+ComplexGoal)}
@itemize @minus
@item @emph{Description:} Internal predicate, used by the transformed versions of the persistent predicates. Not meant to be called directly by users. It is exported by the library so that it can be used by the transformed versions of the persistent predicates in the modules in which they reside. Sends @code{ComplexGoal} to database @code{DBId} for evaluation. @code{ComplexGoal} must be a call to a persistent predicate which resides in database @code{DBId}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DBId} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+ComplexGoal} is a database query goal.
@iftex
@hfill
@end iftex
 (@code{pl2sql:querybody/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sql_query/3 (pred)}}}
@temp
@end iftex
@pdindex sql_query/3 
@glindex sql_query/3 
@deffn PREDICATE sql_query/3:






@strong{Usage:} @code{sql_query(+DBId,+SQLString,AnswerTableTerm)}
@itemize @minus
@item @emph{Description:} @code{ResultTerm} is the response from database @code{DBId} to the 
@glindex SQL query
SQL query in @code{SQLString} to database @code{DBId}. @code{AnswerTableTerm} can express a set of tuples, an error answer or a 'ok' response (see 
@glindex answertableterm/1
@code{answertableterm/1} for details). At the moment, 
@glindex sql_query/3
@code{sql_query/3} log in and out for each query. This should be changed to log in only the first time and log out on exit and/or via a timer in the standard way. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DBId} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+SQLString} is a string containing SQL code.
@iftex
@hfill
@end iftex
 (@code{pl2sql:sqlstring/1})

@code{AnswerTableTerm} is a response from the ODBC database interface.
@iftex
@hfill
@end iftex
 (@code{db_client:answertableterm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sql_get_tables/2 (pred)}}}
@temp
@end iftex
@pdindex sql_get_tables/2 
@glindex sql_get_tables/2 
@deffn PREDICATE sql_get_tables/2:






@strong{Usage 1:} @code{sql_get_tables(+Location,-Tables)}
@itemize @minus
@item @emph{Description:} @code{Tables} contains the tables available in @code{Location}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{persdbrtsql:persLocation(+Location)}
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:persLocation/1})

@code{-Tables} is a list of @code{atm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize

@strong{Usage 2:} @code{sql_get_tables(+DbConnection,-Tables)}
@itemize @minus
@item @emph{Description:} @code{Tables} contains the tables available in @code{DbConnection}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{-Tables} is a list of @code{atm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sql_table_types/3 (pred)}}}
@temp
@end iftex
@pdindex sql_table_types/3 
@glindex sql_table_types/3 
@deffn PREDICATE sql_table_types/3:






@strong{Usage 1:} @code{sql_table_types(+Location,+Table,-AttrTypes)}
@itemize @minus
@item @emph{Description:} @code{AttrTypes} are the attributes and types of @code{Table} in @code{Location}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{persdbrtsql:persLocation(+Location)}
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:persLocation/1})

@code{+Table} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{-AttrTypes} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize

@strong{Usage 2:} @code{sql_table_types(+DbConnection,+Table,-AttrTypes)}
@itemize @minus
@item @emph{Description:} @code{AttrTypes} are the attributes and types of @code{Table} in @code{DbConnection}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+Table} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{-AttrTypes} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socketname/1 (regtype)}}}
@temp
@end iftex
@teindex socketname/1 
@glindex socketname/1 
@deffn REGTYPE socketname/1:






@strong{Usage:} @code{socketname(IPP)}
@itemize @minus
@item @emph{Description:} @code{IPP} is a structure describing a complete TCP/IP port address. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbname/1 (regtype)}}}
@temp
@end iftex
@teindex dbname/1 
@glindex dbname/1 
@deffn REGTYPE dbname/1:






@strong{Usage:} @code{dbname(DBId)}
@itemize @minus
@item @emph{Description:} @code{DBId} is the identifier of an ODBC database. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{user/1 (regtype)}}}
@temp
@end iftex
@teindex user/1 
@glindex user/1 
@deffn REGTYPE user/1:






@strong{Usage:} @code{user(User)}
@itemize @minus
@item @emph{Description:} @code{User} is a user name in the ODBC database. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{passwd/1 (regtype)}}}
@temp
@end iftex
@teindex passwd/1 
@glindex passwd/1 
@deffn REGTYPE passwd/1:






@strong{Usage:} @code{passwd(Passwd)}
@itemize @minus
@item @emph{Description:} @code{Passwd} is the password for the user name in the ODBC database. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{projterm/1 (regtype)}}}
@temp
@end iftex
@teindex projterm/1 
@glindex projterm/1 
@deffn REGTYPE projterm/1:






@strong{Usage:} @code{projterm(DBProjTerm)}
@itemize @minus
@item @emph{Description:} @code{DBProjTerm} is a database projection term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{querybody/1 (regtype)}}}
@temp
@end iftex
@teindex querybody/1 
@glindex querybody/1 
@deffn REGTYPE querybody/1:






@strong{Usage:} @code{querybody(DBGoal)}
@itemize @minus
@item @emph{Description:} @code{DBGoal} is a database query goal. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sqltype/1 (udreexp)}}}
@temp
@end iftex
@glindex sqltype/1 
@deffn (UNDOC_REEXPORT) sqltype/1:



 Imported from 
@glindex sqltypes
@code{sqltypes} (see the corresponding documentation for details).

@end deffn
@sp 1



@node Documentation on multifiles (persdbrtsql), Documentation on internals (persdbrtsql), Documentation on exports (persdbrtsql), SQL persistent database interface
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{persdbrtsql})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sql_persistent_location/2 (pred)}}}
@temp
@end iftex
@pdindex sql_persistent_location/2 
@glindex sql_persistent_location/2 
@deffn PREDICATE sql_persistent_location/2:



Relates names of locations (the @code{Keyword}s) with descriptions of such locations (@code{Location}s).


The predicate is @emph{multifile}.


The predicate is of type @emph{data}.


@strong{Usage 1:} @code{sql_persistent_location(Keyword,Location)}
@itemize @minus
@item @emph{Description:} @code{Keyword} is an identifier for the persistent data location @code{Location}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Keyword} is the name of a persistent storage location.
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:persLocId/1})

@code{persdbrtsql:persLocation(Location)}
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:persLocation/1})
@end itemize

@strong{Usage 2:} @code{sql_persistent_location(Keyword,DBLocation)}
@itemize @minus
@item @emph{Description:} In this usage, @code{DBLocation} is a @emph{relational database}, in which case the predicate is stored as tuples in the database. 
@item @emph{The following properties should hold upon exit:}


@code{Keyword} is the name of a persistent storage location.
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:persLocId/1})

@code{DBLocation} is a structure describing a database.
@iftex
@hfill
@end iftex
 (@code{persdbrtsql:database_desc/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (persdbrtsql), Known bugs and planned improvements (persdbrtsql), Documentation on multifiles (persdbrtsql), SQL persistent database interface
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{persdbrtsql})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_query/4 (pred)}}}
@temp
@end iftex
@pdindex db_query/4 
@glindex db_query/4 
@deffn PREDICATE db_query/4:






@strong{Usage:} @code{db_query(+DBId,+ProjTerm,+Goal,ResultTerm)}
@itemize @minus
@item @emph{Description:} @code{ResultTerm} contains all the 
@glindex tuples
tuples which are the response from database @code{DBId} to the Prolog query @code{Goal}, projected onto @code{ProjTerm}. Uses 
@glindex pl2sqlstring/3
@code{pl2sqlstring/3} for the 
@glindex Prolog to SQL translation
Prolog to SQL translation and 
@glindex sql_query/3
@code{sql_query/3} for posing the actual query. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DBId} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+ProjTerm} is a database projection term.
@iftex
@hfill
@end iftex
 (@code{pl2sql:projterm/1})

@code{+Goal} is a database query goal.
@iftex
@hfill
@end iftex
 (@code{pl2sql:querybody/1})

@code{ResultTerm} is a tuple of values from the ODBC database interface.
@iftex
@hfill
@end iftex
 (@code{db_client:tuple/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_query_one_tuple/4 (pred)}}}
@temp
@end iftex
@pdindex db_query_one_tuple/4 
@glindex db_query_one_tuple/4 
@deffn PREDICATE db_query_one_tuple/4:






@strong{Usage:} @code{db_query_one_tuple(+DBId,+ProjTerm,+Goal,ResultTerm)}
@itemize @minus
@item @emph{Description:} @code{ResultTerm} is one of the 
@glindex tuples
tuples which are the response from database @code{DBId} to the Prolog query @code{Goal}, projected onto @code{ProjTerm}. Uses 
@glindex pl2sqlstring/3
@code{pl2sqlstring/3} for the 
@glindex Prolog to SQL translation
Prolog to SQL translation and 
@glindex sql_query_one_tuple/3
@code{sql_query_one_tuple/3} for posing the actual query. After last tuple has been reached, a null tuple is unified with ResultTerm, and the connection to the database finishes. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DBId} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+ProjTerm} is a database projection term.
@iftex
@hfill
@end iftex
 (@code{pl2sql:projterm/1})

@code{+Goal} is a database query goal.
@iftex
@hfill
@end iftex
 (@code{pl2sql:querybody/1})

@code{ResultTerm} is a predicate containing a tuple.
@iftex
@hfill
@end iftex
 (@code{db_client:answertupleterm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sql_query_one_tuple/3 (pred)}}}
@temp
@end iftex
@pdindex sql_query_one_tuple/3 
@glindex sql_query_one_tuple/3 
@deffn PREDICATE sql_query_one_tuple/3:






@strong{Usage:} @code{sql_query_one_tuple(+DBId,+SQLString,ResultTuple)}
@itemize @minus
@item @emph{Description:} @code{ResultTuple} contains an element from the set of tuples which represents the response in @code{DBId} to the 
@glindex SQL query
SQL query @code{SQLString}. If the connection is kept, succesive calls return consecutive tuples, until the last tuple is reached. Then a null tuple is unified with @code{ResultTuple} and the connection is finished (calls to 
@glindex db_logoff/1
@code{db_logoff/1} and 
@glindex odbc_disconnect/1
@code{odbc_disconnect/1}). 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DBId} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+SQLString} is a string containing SQL code.
@iftex
@hfill
@end iftex
 (@code{pl2sql:sqlstring/1})

@code{ResultTuple} is a tuple of values from the ODBC database interface.
@iftex
@hfill
@end iftex
 (@code{db_client:tuple/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbconnection/1 (regtype)}}}
@temp
@end iftex
@teindex dbconnection/1 
@glindex dbconnection/1 
@deffn REGTYPE dbconnection/1:






@strong{Usage:} @code{dbconnection(H)}
@itemize @minus
@item @emph{Description:} @code{H} a unique identifier of a database session connection. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tuple/1 (regtype)}}}
@temp
@end iftex
@teindex tuple/1 
@glindex tuple/1 
@deffn REGTYPE tuple/1:






@strong{Usage:} @code{tuple(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a tuple of values from the ODBC database interface. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (persdbrtsql),  , Documentation on internals (persdbrtsql), SQL persistent database interface
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{persdbrtsql})

@itemize @bullet{}

@item
At least in the shell, reloading a file after changing the definition of a persistent predicate does not eliminate the old definition...

@item
Functionality missing: some questions need to be debugged.

@item
Warning: still using kludgey string2term and still using some non-uniquified temp files.

@item
Needs to be unified with the file-based library.
@end itemize

@c (component)


@node Prolog to SQL translator, Low-level socket interface to SQL/ODBC databases, SQL persistent database interface, Top
@comment node-name, next,  previous,  up
@chapter Prolog to SQL translator
@liindex pl2sql
@c -------------------------------------------------
@c WARNING: Do not edit this file (pl2sql.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/persdb_sql/pl2sql.pl
@c -------------------------------------------------

@strong{Author(s):} C. Draxler. Adapted by M. Hermenegildo and I. Caballero.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#96 (1999/5/21, 19:53:48 MEST)

This library performs translation of Prolog queries into 
@glindex SQL
SQL. The code is an adaptation for Ciao of the 
@glindex Prolog to SQL compiler
Prolog to SQL compiler written by Christoph Draxler, CIS Centre for Information and Speech Processing, Ludwig-Maximilians-University Munich, @code{draxler@@cis.uni-muenchen.de}, Version 1.1. Many thanks to Christoph for allowing us to include this adaptation of his code with Ciao. 

The translator needs to know the correspondence between Prolog predicates and the 
@glindex SQL tables
SQL tables in the database. To this end this module exports two multifile predicates, 
@glindex relation/3
@code{relation/3} and 
@glindex attribute/4
@code{attribute/4}. See the description of these predicates for details on how such correspondance is specified. 

The main entry points to the translator are 
@glindex pl2sqlstring/3
@code{pl2sqlstring/3} and 
@glindex pl2sqlterm/3
@code{pl2sqlterm/3}. Details on the types of queries allowed can be found in the description of these predicates. 

@strong{Example:} the following program would print out a term representing the SQL query corresponding to the given Prolog query: 


@smallexample 
:- use_module(library('persdb_sql/pl2sql')).
:- use_module(library(strings)).

:- multifile [relation/3,attribute/4].
:- data [relation/3,attribute/4].

relation(product,3,'PRODUCT').
attribute(1,'PRODUCT','ID',int).
attribute(2,'PRODUCT','QUANTITY',int).
attribute(3,'PRODUCT','NAME',string).

main :- 
     pl2sqlstring( f(L,K), 
          ((product(L,N,a); product(L,N,b)),
           \+ product(2,3,b), 
           L + 2 > avg(Y, Z^product(Z,Y,a)),
           K is N + max(X, product(X,2,b))
           ), T),
     write_string(T).
     
%%     printqueries(T).

@end smallexample  

@strong{Note:} while the translator can be used directly in programs, it is more convenient to use a higher-level abstraction: 
@glindex persistent predicates
persistent predicates (implemented in the 
@glindex persdb
@code{persdb} library). The notion of persistent predicates provides a completely transparent interface between Prolog and relational databases. When using this library, the Prolog to SQL translation is called automatically as needed. 





@menu
* Usage and interface (pl2sql)::  
* Documentation on exports (pl2sql)::  
* Documentation on multifiles (pl2sql)::  
* Documentation on internals (pl2sql)::	 
* Known bugs and planned improvements (pl2sql)::  
@end menu

@node Usage and interface (pl2sql), Documentation on exports (pl2sql), Prolog to SQL translator, Prolog to SQL translator
@comment node-name, next,  previous,  up
@section Usage and interface (@code{pl2sql})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(pl2sql)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex pl2sqlstring/3
@code{pl2sqlstring/3}, 
@glindex pl2sqlterm/3
@code{pl2sqlterm/3}, 
@glindex printqueries/1
@code{printqueries/1}, 
@glindex sqlterm2string/2
@code{sqlterm2string/2}.


@item @emph{Regular Types:}

@glindex querybody/1
@code{querybody/1}, 
@glindex projterm/1
@code{projterm/1}, 
@glindex sqlstring/1
@code{sqlstring/1}.


@item @emph{Multifiles:}

@glindex relation/3
@code{relation/3}, 
@glindex attribute/4
@code{attribute/4}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex persdb_sql/sqltypes
@code{persdb_sql/sqltypes}, 
@glindex write
@code{write}, 
@glindex read
@code{read}, 
@glindex dec10_io
@code{dec10_io}, 
@glindex system
@code{system}, 
@glindex iso_misc
@code{iso_misc}, 
@glindex lists
@code{lists}, 
@glindex aggregates
@code{aggregates}, 
@glindex messages
@code{messages}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (pl2sql), Documentation on multifiles (pl2sql), Usage and interface (pl2sql), Prolog to SQL translator
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{pl2sql})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pl2sqlstring/3 (pred)}}}
@temp
@end iftex
@pdindex pl2sqlstring/3 
@glindex pl2sqlstring/3 
@deffn PREDICATE pl2sqlstring/3:






@strong{Usage:} @code{pl2sqlstring(+ProjectionTerm,+DatabaseGoal,-SQLQueryString)}
@itemize @minus
@item @emph{Description:} This is the top level predicate which translates complex Prolog goals into the corresponding SQL code. 

The query code is prepared in such a way that the result is projected onto the term @code{ProjectionTerm} (also in a similar way to the first argument of 
@glindex setof/3
@code{setof/3})). See the predicate 
@glindex translate_projection/3
@code{translate_projection/3} for restrictions on this term. 

@code{SQLQueryString} contains the code of the 
@glindex SQL query
SQL query, ready to be sent to an 
@glindex SQL server
SQL server. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+ProjectionTerm} is a database projection term.
@iftex
@hfill
@end iftex
 (@code{pl2sql:projterm/1})

@code{+DatabaseGoal} is a database query goal.
@iftex
@hfill
@end iftex
 (@code{pl2sql:querybody/1})

@code{-SQLQueryString} is a string containing SQL code.
@iftex
@hfill
@end iftex
 (@code{pl2sql:sqlstring/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{querybody/1 (regtype)}}}
@temp
@end iftex
@teindex querybody/1 
@glindex querybody/1 
@deffn REGTYPE querybody/1:



@code{DBGoal} is a goal meant to be executed in the external database. It can be a complex term containing 
@glindex conjunctions
conjunctions, 
@glindex disjunctions
disjunctions, and 
@glindex negations
negations, of: 


@itemize @bullet{} 


@item 
@glindex Atomic goals
Atomic goals, which must have been defined via 
@glindex relation/3
@code{relation/3} and 
@glindex attribute/4
@code{attribute/4} and reside in the (same) database. Their arguments must be either ground or free variables. If they are ground, they must be bound to constants of the type declared for that argument. If an argument is a free variable, it may @emph{share} with (i.e., be the same variable as) other free variables in other goal arguments. 


@item 
@glindex Database comparison goals
Database comparison goals, whose main functor must be a 
@glindex database comparison operator
database comparison operator (see 
@glindex pl2sql
@code{pl2sql}:
@glindex comparison/2
@code{comparison/2}) and whose arguments must be @emph{database arithmetic expressions}. 


@item 
@glindex Database calls to is/2
Database calls to is/2. The left side of such a call may be either unbound, in which case it is bound to the result of evaluating the right side, or bound in which case an equality condition is tested. The right side must be a @emph{database arithmetic expression}. 


@end itemize  

The binding of variables follows Prolog rules: 


@itemize @bullet{} 


@item variables are bound by positive base goals and on the left side of the 
@glindex is/2
@code{is/2} predicate. 


@item Comparison operations, negated goals, and right sides of the 
@glindex is/2
@code{is/2} predicate do not return variable bindings and may even require all arguments to be bound for a safe evaluation. 


@end itemize  


@glindex Database arithmetic expressions
Database arithmetic expressions may contain: 


@itemize @bullet{} 


@item Numeric constants (i.e., integers, reals, etc.). 


@item Bound variables, i.e., variables which will be bound during execution through occurrence within a positive database goal, or by a preceding arithmetic function. 


@item 
@glindex Database arithmetic functions
Database arithmetic functions, which are a subset of those typically accepted within 
@glindex is/2
@code{is/2} (see 
@glindex pl2sql
@code{pl2sql}:
@glindex arithmetic_functor/2
@code{arithmetic_functor/2}). 


@item 
@glindex Database aggregation functions
Database aggregation functions, each of which has two arguments: a variable indicating the argument over which the function is to be computed, and a goal argument which must contain in at least one argument position the variable (e.g. @code{avg(Seats,plane(Type,Seats))}). The goal argument may only be a conjunction of (positive or negative) base goals. See 
@glindex pl2sql
@code{pl2sql}:
@glindex aggregate_functor/2
@code{aggregate_functor/2} for the admissible aggregate functions. 


@end itemize  

In addition, variables 
@coindex existential quantification
@glindex existential quantification 
can be existentially quantified using 
@glindex ^/2
@code{^/2} (in a similar way to how it is done in 
@glindex setof/3
@code{setof/3}). 

Note that it is assumed that the arithmetic operators in Prolog and SQL are the same, i.e., @code{+} is addition in Prolog and in SQL, etc. 




@strong{Usage:} @code{querybody(DBGoal)}
@itemize @minus
@item @emph{Description:} @code{DBGoal} is a database query goal. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{projterm/1 (regtype)}}}
@temp
@end iftex
@teindex projterm/1 
@glindex projterm/1 
@deffn REGTYPE projterm/1:



@code{DBProjTerm} is a term onto which the result of a database query code is (in a similar way to the first argument of 
@glindex setof/3
@code{setof/3})). 

A @code{ProjectionTerm} must meet the following restrictions: 


@itemize @bullet{} 


@item The functor of @code{ProjectionTerm} may not be one of the built-in predicates, i.e. ',', ';', etc. are not allowed. 


@item Only variables and constants are allowed as arguments, i.e., no structured terms may appear. 


@end itemize 



@strong{Usage:} @code{projterm(DBProjTerm)}
@itemize @minus
@item @emph{Description:} @code{DBProjTerm} is a database projection term. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sqlstring/1 (regtype)}}}
@temp
@end iftex
@teindex sqlstring/1 
@glindex sqlstring/1 
@deffn REGTYPE sqlstring/1:




@smallexample 
sqlstring(S) :-
        string(S).
@end smallexample 



@strong{Usage:} @code{sqlstring(S)}
@itemize @minus
@item @emph{Description:} @code{S} is a string containing SQL code. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pl2sqlterm/3 (pred)}}}
@temp
@end iftex
@pdindex pl2sqlterm/3 
@glindex pl2sqlterm/3 
@deffn PREDICATE pl2sqlterm/3:






@strong{Usage:} @code{pl2sqlterm(+ProjectionTerm,+DatabaseGoal,-SQLQueryTerm)}
@itemize @minus
@item @emph{Description:} Similar to 
@glindex pl2sqlstring/3
@code{pl2sqlstring/3} except that @code{SQLQueryTerm} is a representation of the SQL query as a Prolog term. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+ProjectionTerm} is a database projection term.
@iftex
@hfill
@end iftex
 (@code{pl2sql:projterm/1})

@code{+DatabaseGoal} is a database query goal.
@iftex
@hfill
@end iftex
 (@code{pl2sql:querybody/1})

@code{-SQLQueryTerm} is a list of @code{sqlterm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{printqueries/1 (pred)}}}
@temp
@end iftex
@pdindex printqueries/1 
@glindex printqueries/1 
@deffn PREDICATE printqueries/1:






@strong{Usage:} @code{printqueries(SQLTermList)}
@itemize @minus
@item @emph{Description:} Print to standard output in SQL the list of SQL term @code{SQLTermList}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{SQLTermList} is a list of @code{sqlterm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sqlterm2string/2 (pred)}}}
@temp
@end iftex
@pdindex sqlterm2string/2 
@glindex sqlterm2string/2 
@deffn PREDICATE sqlterm2string/2:






@strong{Usage:} @code{sqlterm2string(+Queries,-QueryString)}
@itemize @minus
@item @emph{Description:} @code{QueryString} is a string representation of the list of queries in Prolog-term format in @code{Queries}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Queries} is a list of @code{sqlterm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{-QueryString} is a string containing SQL code.
@iftex
@hfill
@end iftex
 (@code{pl2sql:sqlstring/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sqltype/1 (udreexp)}}}
@temp
@end iftex
@glindex sqltype/1 
@deffn (UNDOC_REEXPORT) sqltype/1:



 Imported from 
@glindex sqltypes
@code{sqltypes} (see the corresponding documentation for details).

@end deffn
@sp 1



@node Documentation on multifiles (pl2sql), Documentation on internals (pl2sql), Documentation on exports (pl2sql), Prolog to SQL translator
@comment node-name, next,  previous,  up
@section Documentation on multifiles (@code{pl2sql})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{relation/3 (pred)}}}
@temp
@end iftex
@pdindex relation/3 
@glindex relation/3 
@deffn PREDICATE relation/3:






The predicate is @emph{multifile}.


The predicate is of type @emph{data}.


@strong{Usage:} @code{relation(PredName,Arity,TableName)}
@itemize @minus
@item @emph{Description:} This predicate, together with 
@glindex attribute/4
@code{attribute/4}, defines the correspondence between Prolog predicates and the 
@glindex SQL tables
SQL tables in the database. These two relations constitute an extensible meta-database which maps 
@glindex Prolog predicate names
Prolog predicate names to 
@glindex SQL table names
SQL table names, and 
@glindex Prolog predicate argument positions
Prolog predicate argument positions to 
@glindex SQL attributes
SQL attributes. 

@code{PredName} is the chosen Prolog name for an SQL table. @code{Arity} is the number of arguments of the predicate. @code{TableName} is the name of the SQL table in the Database Management System. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{PredName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{Arity} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{TableName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{attribute/4 (pred)}}}
@temp
@end iftex
@pdindex attribute/4 
@glindex attribute/4 
@deffn PREDICATE attribute/4:






The predicate is @emph{multifile}.


The predicate is of type @emph{data}.


@strong{Usage:} @code{attribute(ANumber,TblName,AName,AType)}
@itemize @minus
@item @emph{Description:} This predicate maps the argument positions of a Prolog predicate to the SQL attributes of its corresponding table. The types of the arguments need to be specified, and this information is used for consistency checking during the translation and for output formatting. A minimal type system is provided to this end. The allowable types are given by 
@glindex sqltype/1
@code{sqltype/1}. 

@code{ANumber} is the argument number in the Prolog relation. @code{TblName} is the name of the SQL table in the Database Management System. @code{AName} is the name of the corresponding attribute in the table. @code{AType} is the (translator) data type of the attribute. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{ANumber} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{TblName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{AName} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{AType} is an SQL data type supported by the translator.
@iftex
@hfill
@end iftex
 (@code{sqltypes:sqltype/1})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (pl2sql), Known bugs and planned improvements (pl2sql), Documentation on multifiles (pl2sql), Prolog to SQL translator
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{pl2sql})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{query_generation/3 (pred)}}}
@temp
@end iftex
@pdindex query_generation/3 
@glindex query_generation/3 
@deffn PREDICATE query_generation/3:






@strong{Usage:} @code{query_generation(+ListOfConjunctions,+ProjectionTerm,-ListOfQueries)}
@itemize @minus
@item @emph{Description:} For each Conjunction in @code{ListOfConjunctions}, translate the pair @code{(ProjectionTerm,Conjunction)} to an SQL query and connect each such query through a 
@glindex UNION-operator
UNION-operator to result in the @code{ListOfQueries}. 

A Conjunction consists of positive or negative subgoals. Each subgoal is translated as follows: 


@itemize @bullet{} 


@item the 
@glindex functor of a goal
functor of a goal that is not a comparison operation is translated to a 
@glindex relation name
relation name with a 
@glindex range variable
range variable, 


@item 
@glindex negated goals
negated goals are translated to 
@glindex NOT EXISTS-subqueries
NOT EXISTS-subqueries with 
@glindex * projection
* projection, 


@item 
@glindex comparison operations
comparison operations are translated to comparison operations in the 
@glindex WHERE-clause
WHERE-clause, 


@item 
@glindex aggregate function terms
aggregate function terms are translated to 
@glindex aggregate function (sub)queries
aggregate function (sub)queries. 


@end itemize  

The arguments of a goal are translated as follows: 


@itemize @bullet{} 


@item @code{variables of a goal} are translated to 
@glindex qualified attributes
qualified attributes, 


@item 
@glindex variables occurring in several goals
variables occurring in several goals are translated to equality comparisons (equi join) in the WHERE-clause, 
@coindex equi join in the WHERE-clause
@glindex equi join in the WHERE-clause 


@item 
@glindex constant arguments
constant arguments are translated to 
@glindex equality comparisons in the WHERE-clause
equality comparisons in the WHERE-clause. 


@end itemize  

Arithmetic functions are treated specially (
@glindex translate_arithmetic_function/5
@code{translate_arithmetic_function/5}). See also 
@glindex querybody/1
@code{querybody/1} for details on the syntax accepted and restrictions. 

 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{translate_conjunction/5 (pred)}}}
@temp
@end iftex
@pdindex translate_conjunction/5 
@glindex translate_conjunction/5 
@deffn PREDICATE translate_conjunction/5:






@strong{Usage:} @code{translate_conjunction(Conjunction,SQLFrom,SQLWhere,Dict,NewDict)}
@itemize @minus
@item @emph{Description:} Translates a conjunction of goals (represented as a list of goals preceeded by existentially quantified variables) to 
@glindex FROM-clauses
FROM-clauses and 
@glindex WHERE-clauses
WHERE-clauses of an SQL query. A dictionary containing the associated SQL table and attribute names is built up as an accumulator pair (arguments @code{Dict} and @code{NewDict}). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{translate_goal/5 (pred)}}}
@temp
@end iftex
@pdindex translate_goal/5 
@glindex translate_goal/5 
@deffn PREDICATE translate_goal/5:






@strong{Usage:} @code{translate_goal(Goal,SQLFrom,SQLWhere,Dict,NewDict)}
@itemize @minus
@item @emph{Description:} Translates: 


@itemize @bullet{} 


@item a 
@glindex positive database goal
positive database goal to the associated FROM- and WHERE clause of an SQL query, 


@item a 
@glindex negated database goal
negated database goal to a negated existential subquery, 


@item an 
@glindex arithmetic goal
arithmetic goal to an arithmetic expression or an aggregate function query, 


@item a 
@glindex comparison goal
comparison goal to a comparison expression, and 


@item a 
@glindex negated comparison goal
negated comparison goal to a comparison expression with the opposite comparison operator. 


@end itemize  
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{translate_arithmetic_function/5 (pred)}}}
@temp
@end iftex
@pdindex translate_arithmetic_function/5 
@glindex translate_arithmetic_function/5 
@deffn PREDICATE translate_arithmetic_function/5:






@strong{Usage:} @code{translate_arithmetic_function(Result,Expression,SQLWhere,Dict,NewDict)}
@itemize @minus
@item @emph{Description:} Arithmetic functions (left side of is/2 operator is bound to value of expression on right side) may be called with either: 


@itemize @bullet{} 
@item @code{Result} unbound: then @code{Result} is bound to the value of the evaluation of @code{Expression}, 


@item @code{Result} bound: then an equality condition is returned between the value of @code{Result} and the value of the evaluation of @code{Expression}. 

Only the equality test shows up in the WHERE clause of an SQLquery. 
@end itemize  
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{translate_comparison/5 (pred)}}}
@temp
@end iftex
@pdindex translate_comparison/5 
@glindex translate_comparison/5 
@deffn PREDICATE translate_comparison/5:






@strong{Usage:} @code{translate_comparison(LeftArg,RightArg,CompOp,Dict,SQLComparison)}
@itemize @minus
@item @emph{Description:} Translates the left and right arguments of a comparison term into the appropriate comparison operation in SQL. The result type of each argument expression is checked for type compatibility. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{aggregate_function/3 (pred)}}}
@temp
@end iftex
@pdindex aggregate_function/3 
@glindex aggregate_function/3 
@deffn PREDICATE aggregate_function/3:






@strong{Usage:} @code{aggregate_function(AggregateFunctionTerm,Dict,AggregateFunctionQuery)}
@itemize @minus
@item @emph{Description:} Supports the Prolog aggregate function terms listed in 
@glindex aggregate_functor/2
@code{aggregate_functor/2} within arithmetic expressions. Aggregate functions are translated to the corresponding SQL built-in aggregate functions. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{comparison/2 (pred)}}}
@temp
@end iftex
@pdindex comparison/2 
@glindex comparison/2 
@deffn PREDICATE comparison/2:






@strong{Usage:} @code{comparison(PrologOperator,SQLOperator)}
@itemize @minus
@item @emph{Description:} Defines the mapping between Prolog operators and SQL operators: 
@smallexample 
comparison(=,=).
comparison(<,<).
comparison(>,>).
comparison(@@<,<).
comparison(@@>,>).
@end smallexample 
 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{PrologOperator} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{SQLOperator} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{negated_comparison/2 (pred)}}}
@temp
@end iftex
@pdindex negated_comparison/2 
@glindex negated_comparison/2 
@deffn PREDICATE negated_comparison/2:






@strong{Usage:} @code{negated_comparison(PrologOperator,SQLOperator)}
@itemize @minus
@item @emph{Description:} Defines the mapping between Prolog operators and the complementary SQL operators: 
@smallexample 
negated_comparison(=,<>).
negated_comparison(\==,=).
negated_comparison(>,=<).
negated_comparison(=<,>).
negated_comparison(<,>=).
negated_comparison(>=,<).
@end smallexample 
 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{PrologOperator} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{SQLOperator} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{arithmetic_functor/2 (pred)}}}
@temp
@end iftex
@pdindex arithmetic_functor/2 
@glindex arithmetic_functor/2 
@deffn PREDICATE arithmetic_functor/2:






@strong{Usage:} @code{arithmetic_functor(PrologFunctor,SQLFunction)}
@itemize @minus
@item @emph{Description:} Defines the admissible arithmetic functions on the Prolog side and their correspondence on the SQL side: 
@smallexample 
arithmetic_functor(+,+).
arithmetic_functor(-,-).
arithmetic_functor(*,*).
arithmetic_functor(/,/).
@end smallexample 
 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{PrologFunctor} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{SQLFunction} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{aggregate_functor/2 (pred)}}}
@temp
@end iftex
@pdindex aggregate_functor/2 
@glindex aggregate_functor/2 
@deffn PREDICATE aggregate_functor/2:






@strong{Usage:} @code{aggregate_functor(PrologFunctor,SQLFunction)}
@itemize @minus
@item @emph{Description:} Defines the admissible aggregate functions on the Prolog side and their correspondence on the SQL side: 
@smallexample 
aggregate_functor(avg,'AVG').
aggregate_functor(min,'MIN').
aggregate_functor(max,'MAX').
aggregate_functor(sum,'SUM').
aggregate_functor(count,'COUNT').
@end smallexample 
 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{PrologFunctor} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{SQLFunction} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (pl2sql),  , Documentation on internals (pl2sql), Prolog to SQL translator
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{pl2sql})

@itemize @bullet{}

@item
Need to separate db predicate names by module.

@item
Warning: using kludgy SQL term to string conversion because of bugs in sqlterm2string/2.
@end itemize

@c (component)


@node Low-level socket interface to SQL/ODBC databases, Low-level Prolog to Java interface, Prolog to SQL translator, Top
@comment node-name, next,  previous,  up
@chapter Low-level socket interface to SQL/ODBC databases
@liindex db_client
@c -------------------------------------------------
@c WARNING: Do not edit this file (db_client.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/persdb_sql/db_client.pl
@c -------------------------------------------------

@strong{Author(s):} D. Cabeza, M. Carro, I. Caballero, and M. Hermenegildo..

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#53 (1999/9/15, 23:37:55 MEST)

This library provides a socket-based interface to 
@glindex SQL Databases
SQL Databases, using the 
@glindex database mediator server
database mediator server ODBC interface developed by C. Taboch and I. Caballero. The interface currently works for databases running in 
@glindex Win95/NT machine
Win95/NT machines via 
@glindex ODBC
ODBC. This low-level interface was defined with two goals in mind: 


@itemize @bullet{} 


@item To simplify the communication between the Prolog system and the relational database engines as much as possible. 


@item To give as much flexibility to the overall system. This includes supporting simultaneous access to several databases, and also allowing both the databases and clients to reside on the same or different physical Win95/NT machines. The clients can reside also in 
@glindex Unix/Linux machine
Unix/Linux machines. It is also possible to access database selections in either 
@glindex tuple at a time
tuple at a time or 
@glindex set at a time
set at a time fashion, as needed. 


@end itemize  

In order to allow the flexibility mentioned above, a socket (TCP/IP) client-server architecture was chosen. The interface has two main components: 


@itemize @bullet{} 


@item At the server side, a @emph{database mediator server} connects on one side to the databases using the ODBC interface and on the other to a fixed port number (service), on which the mediator server listens for requests. The source code (and executables) for this server (slightly modified versions of C. Taboch original code) are in the same directory as this library. This executable must be running on the Windows (NT/95) machine where the databas(es) is(are) also running.@footnote{The server can be downloaded from the same site(s) as the Ciao system. The downloaded package contains complete installation instructions for the server. Before trying to run the Ciao Prolog side of things, make sure that the server is correctly installed and running, and that it can be accessed from the small sample client that comes with the server distribution. Once this is achieved, connection from Ciao should not pose problems.} 


@item At the client side a Prolog client can connect to the database by loading this library and calling the appropriate predicates. The Prolog client can run on either Windows or Unix/Linux systems, locally at the server machine or remotely in different machines. The mediator server port number (service) used is currently fixed to 2020. After the connection is established a client can send commands to the mediator server which will pass them to the corresponding database server, and then the response data will return in the opposite direction. These messages include login on and off from the database, sending 
@glindex SQL queries
SQL queries, and receiving the responses. 


@end itemize  

@strong{Example:} 
@smallexample 
:- use_module(library('persdb_sql/db_client')).
:- use_module(library(format)).
:- use_module(library(lists)).

:- multifile issue_debug_messages/1.
:- data issue_debug_messages/1.
issue_debug_messages('db_client').

main0:- %% getting the tables existing in a database
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'DaletDemo',dalet_admin,dalet_admin,
%%        db_login(Stream,'ASA 6.0 Sample',dba,sql,
                 dbconnection(Stream,DbHandle)),
%%        db_get_tables(dbconnection(Stream,DbHandle),TablesList),
        db_table_types(dbconnection(Stream,DbHandle),'Titles',AttList),
        db_logoff(dbconnection(Stream,DbHandle)),
        odbc_disconnect(Stream),
        format("Results: ~w \n",AttList).


main1 :- %% accessing the whole table in one go
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream), 
        db_login(Stream,'ASA 6.0 Sample',dba,sql,Conn),
        db_eval_sql(Conn,"SELECT fname,lname,address from ""DBA"".customer 
                   WHERE ((Id>100) AND (Id<105))",Term), 
        write(Term), nl,nl,nl,nl,nl,nl,nl,nl,nl,nl,nl,nl,nl,nl,nl,
        functor(Term,X,_Y),
        write(X),nl,
        Term=..[_|L],
        write('That is L'),nl,        
        write(L),nl,L=[M],length(M,N),write(N),
%        db_eval_sql(Conn,"SELECT id,name,description,color from 
%                    ""DBA"".product WHERE size='One size fits all' 
%                    OR size='Large'",Term2), 
%        write(Term2), nl,
        db_logoff(Conn),
        odbc_disconnect(Stream).

main2:- %% accessing tuples one by one
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'ASA 6.0 Sample',dba,sql,Conn),
        db_stmt_handle(Conn,
              "SELECT fname,lname,address from ""DBA"".customer 
               WHERE ((Id>100) AND (Id<105))",QueryConn),
        db_one_tuple(QueryConn,Answer),
        format("First Tuple: ~w \n",Answer),
        db_one_tuple(QueryConn,Answer2),
        format("Second Tuple: ~w \n",Answer2),
        db_logoff(Conn),
        odbc_disconnect(Stream).
        
main3:- %% bringing tuples (one to one) from Literature Database
        %% TO SEE : check it
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'Literature',dba,sql,Conn),
        db_stmt_handle(Conn,"SELECT * FROM AUTHORS ORDER BY ID",QueryConn),
        print_all_one_by_one(QueryConn),
        db_logoff(Conn),
        odbc_disconnect(Stream).

print_all_one_by_one(QueryConn):-
        db_one_tuple(QueryConn,Answer), 
        Answer\=[],
        !,
        format(" ~w \n",Answer),
        print_all_one_by_one(QueryConn).
print_all_one_by_one(_QueryConn):-
        write(' Finished fetching query statement.'),
        nl.

main4:- %% inserting a tuple into the Literature database
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'Literature',dba,sql,Conn),
        db_stmt_handle(Conn, 
               "INSERT INTO AUTHORS values ('Martin Gaite',
                'Carmen',10,'1910-7-10 00:00:00:000')",_QueryConn),
        db_logoff(Conn),
        odbc_disconnect(Stream).
        
main5:- %% creating a view
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'Literature',dba,sql,Conn),
        db_stmt_handle(Conn,
               "CREATE VIEW AntoniosDateOfBirth AS SELECT 
                LastName,Date_of_birth FROM 
                AUTHORS where FirstName='Antonio';",_QueryConn),
        db_logoff(Conn),
        odbc_disconnect(Stream).        

main6:- %% printing the view
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'Literature',dba,sql,Conn),
        db_eval_sql(Conn,"select * from AntoniosDateOfBirth",Term),
        write(Term),
        db_logoff(Conn),
        odbc_disconnect(Stream).

main7:- %% dropping a view
        odbc_connect('r2d5.dia.fi.upm.es':2020,Stream),
        db_login(Stream,'Literature',dba,sql,Conn),
        db_eval_sql(Conn,"DROP VIEW AntoniosDateOfBirth",Term),
        write(Term),
        db_logoff(Conn),
        odbc_disconnect(Stream).










@end smallexample  




@menu
* Usage and interface (db_client)::  
* Documentation on exports (db_client)::  
* Documentation on internals (db_client)::  
* Known bugs and planned improvements (db_client)::  
@end menu

@node Usage and interface (db_client), Documentation on exports (db_client), Low-level socket interface to SQL/ODBC databases, Low-level socket interface to SQL/ODBC databases
@comment node-name, next,  previous,  up
@section Usage and interface (@code{db_client})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(db_client)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex odbc_connect/2
@code{odbc_connect/2}, 
@glindex db_login/5
@code{db_login/5}, 
@glindex db_eval_sql/3
@code{db_eval_sql/3}, 
@glindex db_stmt_handle/3
@code{db_stmt_handle/3}, 
@glindex db_one_tuple/2
@code{db_one_tuple/2}, 
@glindex db_get_tables/2
@code{db_get_tables/2}, 
@glindex db_table_types/3
@code{db_table_types/3}, 
@glindex db_logoff/1
@code{db_logoff/1}, 
@glindex odbc_disconnect/1
@code{odbc_disconnect/1}, 
@glindex match_string/3
@code{match_string/3}.


@item @emph{Regular Types:}

@glindex socketname/1
@code{socketname/1}, 
@glindex dbname/1
@code{dbname/1}, 
@glindex user/1
@code{user/1}, 
@glindex passwd/1
@code{passwd/1}, 
@glindex dbconnection/1
@code{dbconnection/1}, 
@glindex answertableterm/1
@code{answertableterm/1}, 
@glindex tuple/1
@code{tuple/1}, 
@glindex dbqueryconnection/1
@code{dbqueryconnection/1}, 
@glindex answertupleterm/1
@code{answertupleterm/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sockets/sockets
@code{sockets/sockets}, 
@glindex write
@code{write}, 
@glindex strings
@code{strings}, 
@glindex lists
@code{lists}, 
@glindex persdb_sql/string2term
@code{persdb_sql/string2term}, 
@glindex messages
@code{messages}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (db_client), Documentation on internals (db_client), Usage and interface (db_client), Low-level socket interface to SQL/ODBC databases
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{db_client})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{odbc_connect/2 (pred)}}}
@temp
@end iftex
@pdindex odbc_connect/2 
@glindex odbc_connect/2 
@deffn PREDICATE odbc_connect/2:






@strong{Usage:} @code{odbc_connect(+DbAddress,-Stream)}
@itemize @minus
@item @emph{Description:} Opens a socket connection to port @code{DbAddress}, which should be the address of a 
@glindex database mediator server
database mediator server. @code{Stream} is the identifier of the corresponding Prolog stream. It is simply a call to 
@glindex connect_to_socket/3
@code{connect_to_socket/3} 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbAddress} is a structure describing a complete TCP/IP port address.
@iftex
@hfill
@end iftex
 (@code{db_client:socketname/1})

@code{-Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_login/5 (pred)}}}
@temp
@end iftex
@pdindex db_login/5 
@glindex db_login/5 
@deffn PREDICATE db_login/5:






@strong{Usage:} @code{db_login(+Stream,+DbName,+User,+Passwd,-DbConnection)}
@itemize @minus
@item @emph{Description:} Logs on to the database @code{DbName} with user @code{User} and password @code{Passwd} via connection @code{Stream}. @code{DbConnection} contains the identifier of the session, to be used in the calls to other predicates defining the interface. It fails and display an error message if the login is not succesfully completed. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})

@code{+DbName} is the identifier of an ODBC database.
@iftex
@hfill
@end iftex
 (@code{db_client:dbname/1})

@code{+User} is a user name in the ODBC database.
@iftex
@hfill
@end iftex
 (@code{db_client:user/1})

@code{+Passwd} is the password for the user name in the ODBC database.
@iftex
@hfill
@end iftex
 (@code{db_client:passwd/1})

@code{-DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socketname/1 (regtype)}}}
@temp
@end iftex
@teindex socketname/1 
@glindex socketname/1 
@deffn REGTYPE socketname/1:




@smallexample 
socketname(IPAddress:PortNumber) :-
        atm(IPAddress),
        int(PortNumber).
@end smallexample 



@strong{Usage:} @code{socketname(IPP)}
@itemize @minus
@item @emph{Description:} @code{IPP} is a structure describing a complete TCP/IP port address. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbname/1 (regtype)}}}
@temp
@end iftex
@teindex dbname/1 
@glindex dbname/1 
@deffn REGTYPE dbname/1:




@smallexample 
dbname(DBId) :-
        atm(DBId).
@end smallexample 



@strong{Usage:} @code{dbname(DBId)}
@itemize @minus
@item @emph{Description:} @code{DBId} is the identifier of an ODBC database. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{user/1 (regtype)}}}
@temp
@end iftex
@teindex user/1 
@glindex user/1 
@deffn REGTYPE user/1:




@smallexample 
user(User) :-
        atm(User).
@end smallexample 



@strong{Usage:} @code{user(User)}
@itemize @minus
@item @emph{Description:} @code{User} is a user name in the ODBC database. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{passwd/1 (regtype)}}}
@temp
@end iftex
@teindex passwd/1 
@glindex passwd/1 
@deffn REGTYPE passwd/1:




@smallexample 
passwd(Passwd) :-
        atm(Passwd).
@end smallexample 



@strong{Usage:} @code{passwd(Passwd)}
@itemize @minus
@item @emph{Description:} @code{Passwd} is the password for the user name in the ODBC database. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbconnection/1 (regtype)}}}
@temp
@end iftex
@teindex dbconnection/1 
@glindex dbconnection/1 
@deffn REGTYPE dbconnection/1:




@smallexample 
dbconnection(dbconnection(DbStream,DbHandle)) :-
        stream(DbStream),
        dbhandle(DbHandle).
@end smallexample 



@strong{Usage:} @code{dbconnection(H)}
@itemize @minus
@item @emph{Description:} @code{H} a unique identifier of a database session connection. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_eval_sql/3 (pred)}}}
@temp
@end iftex
@pdindex db_eval_sql/3 
@glindex db_eval_sql/3 
@deffn PREDICATE db_eval_sql/3:






@strong{Usage:} @code{db_eval_sql(+DbConnection,+Sentence,-AnswerTableTerm)}
@itemize @minus
@item @emph{Description:} Evaluates the SQL code in @code{Sentence} in database session @code{DbConnection}. @code{AnswerTableTerm} is the response. If a wrong answer is obtained, @code{AnswerTableTerm} will indicate the error (see 
@glindex answertableterm
@code{answertableterm} for details). 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+Sentence} is a string of SQL code.
@iftex
@hfill
@end iftex
 (@code{db_client:sqlstring/1})

@code{-AnswerTableTerm} is a response from the ODBC database interface.
@iftex
@hfill
@end iftex
 (@code{db_client:answertableterm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{answertableterm/1 (regtype)}}}
@temp
@end iftex
@teindex answertableterm/1 
@glindex answertableterm/1 
@deffn REGTYPE answertableterm/1:



Represents the types of responses that will be returned from the ODBC database interface. These can be a set of answer tuples, or the atom @code{ok} in case of a successful addition or deletion.


@strong{Usage:} @code{answertableterm(AT)}
@itemize @minus
@item @emph{Description:} @code{AT} is a response from the ODBC database interface. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tuple/1 (regtype)}}}
@temp
@end iftex
@teindex tuple/1 
@glindex tuple/1 
@deffn REGTYPE tuple/1:




@smallexample 
tuple(T) :-
        list(T,atm).
@end smallexample 



@strong{Usage:} @code{tuple(T)}
@itemize @minus
@item @emph{Description:} @code{T} is a tuple of values from the ODBC database interface. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_stmt_handle/3 (pred)}}}
@temp
@end iftex
@pdindex db_stmt_handle/3 
@glindex db_stmt_handle/3 
@deffn PREDICATE db_stmt_handle/3:






@strong{Usage:} @code{db_stmt_handle(+DbConnection,+Sentence,-DbQueryConnection)}
@itemize @minus
@item @emph{Description:} Evaluates the SQL code in @code{Sentence} in database session @code{DbConnection}. If @code{Sentence} is a succesfull selection, @code{DbQueryConnection} is a @emph{handle} to the set of tuples produced by this selection. The individual members of this set can then be accessed via @code{DbQueryConnection} using the 
@glindex db_one_tuple/2
@code{db_one_tuple/2} predicate. If @code{Sentence} is not succesfull or is not a selection, @code{DbQueryConnection} will contain the answer received. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+Sentence} is a string of SQL code.
@iftex
@hfill
@end iftex
 (@code{db_client:sqlstring/1})

@code{-DbQueryConnection} is a unique identifier of a query answer in a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbqueryconnection/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbqueryconnection/1 (regtype)}}}
@temp
@end iftex
@teindex dbqueryconnection/1 
@glindex dbqueryconnection/1 
@deffn REGTYPE dbqueryconnection/1:




@smallexample 
dbqueryconnection(dbqueryconnection(DbStream,DbHandle,StmtHandle)) :-
        stream(DbStream),
        dbhandle(DbHandle),
        stmthandle(StmtHandle).
@end smallexample 



@strong{Usage:} @code{dbqueryconnection(H)}
@itemize @minus
@item @emph{Description:} @code{H} is a unique identifier of a query answer in a database session connection. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_one_tuple/2 (pred)}}}
@temp
@end iftex
@pdindex db_one_tuple/2 
@glindex db_one_tuple/2 
@deffn PREDICATE db_one_tuple/2:






@strong{Usage:} @code{db_one_tuple(+DbQueryConnection,-TupleTerm)}
@itemize @minus
@item @emph{Description:} @code{TupleTerm} represents the last tuple read from handle @code{DbQueryConnection}. Will be an empty list if all the answers have already been read. It displays an error if any unformatted string is fetched. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbQueryConnection} is a unique identifier of a query answer in a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbqueryconnection/1})

@code{-TupleTerm} is a predicate containing a tuple.
@iftex
@hfill
@end iftex
 (@code{db_client:answertupleterm/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{answertupleterm/1 (regtype)}}}
@temp
@end iftex
@teindex answertupleterm/1 
@glindex answertupleterm/1 
@deffn REGTYPE answertupleterm/1:




@smallexample 
answertupleterm([]).
answertupleterm(tup(T)) :-
        tuple(T).
@end smallexample 



@strong{Usage:} @code{answertupleterm(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a predicate containing a tuple. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_get_tables/2 (pred)}}}
@temp
@end iftex
@pdindex db_get_tables/2 
@glindex db_get_tables/2 
@deffn PREDICATE db_get_tables/2:






@strong{Usage:} @code{db_get_tables(+DbConnection,-Tables)}
@itemize @minus
@item @emph{Description:} @code{Tables} contains the tables available in @code{DbConnection}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{-Tables} is a list of @code{atm}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_table_types/3 (pred)}}}
@temp
@end iftex
@pdindex db_table_types/3 
@glindex db_table_types/3 
@deffn PREDICATE db_table_types/3:






@strong{Usage:} @code{db_table_types(+DbConnection,+Table,-AttrTypes)}
@itemize @minus
@item @emph{Description:} @code{AttrTypes} are the attributes and types of @code{Table} in @code{DbConnection}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})

@code{+Table} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{-AttrTypes} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{db_logoff/1 (pred)}}}
@temp
@end iftex
@pdindex db_logoff/1 
@glindex db_logoff/1 
@deffn PREDICATE db_logoff/1:






@strong{Usage:} @code{db_logoff(+DbConnection)}
@itemize @minus
@item @emph{Description:} Logs off from the database identified by @code{DbConnection}. It fails and display an error message if the login is not succesfully completed. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+DbConnection} a unique identifier of a database session connection.
@iftex
@hfill
@end iftex
 (@code{db_client:dbconnection/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{odbc_disconnect/1 (pred)}}}
@temp
@end iftex
@pdindex odbc_disconnect/1 
@glindex odbc_disconnect/1 
@deffn PREDICATE odbc_disconnect/1:






@strong{Usage:} @code{odbc_disconnect(+Stream)}
@itemize @minus
@item @emph{Description:} Closes the socket connection to @code{Stream}. It is simply a call to 
@glindex close/1
@code{close/1}. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{match_string/3 (pred)}}}
@temp
@end iftex
@pdindex match_string/3 
@glindex match_string/3 
@deffn PREDICATE match_string/3:



No further documentation available for this predicate.

@end deffn
@sp 1



@node Documentation on internals (db_client), Known bugs and planned improvements (db_client), Documentation on exports (db_client), Low-level socket interface to SQL/ODBC databases
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{db_client})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dbhandle/1 (regtype)}}}
@temp
@end iftex
@teindex dbhandle/1 
@glindex dbhandle/1 
@deffn REGTYPE dbhandle/1:




@smallexample 
dbhandle(H) :-
        string(H).
@end smallexample 



@strong{Usage:} @code{dbhandle(H)}
@itemize @minus
@item @emph{Description:} @code{H} is the internal database identifier (handle) of a database session. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stmthandle/1 (regtype)}}}
@temp
@end iftex
@teindex stmthandle/1 
@glindex stmthandle/1 
@deffn REGTYPE stmthandle/1:




@smallexample 
stmthandle(H) :-
        string(H).
@end smallexample 



@strong{Usage:} @code{stmthandle(H)}
@itemize @minus
@item @emph{Description:} @code{H} is the internal statement identifier (handle) of a query answer in a database session connection. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (db_client),  , Documentation on internals (db_client), Low-level socket interface to SQL/ODBC databases
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{db_client})

@itemize @bullet{}

@item
Need to fix the problem with parametric types being meta_predicates ... list(_,tuple/1).
@end itemize

@c (component)


@node Low-level Prolog to Java interface, Low-level Java to Prolog interface, Low-level socket interface to SQL/ODBC databases, Top
@comment node-name, next,  previous,  up
@chapter Low-level Prolog to Java interface
@liindex javart
@c -------------------------------------------------
@c WARNING: Do not edit this file (javart.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/javall/javart.pl
@c -------------------------------------------------

@strong{Author(s):} Jes@'us Correas.


 

This module defines the low level Prolog to Java interface. This interface allows a Prolog program to start a Java process, and create Java objects, invoke methods, set/get attributes (fields), and handle Java events. 

Although the Java side interface is explained in Javadoc format, the general interface structure is detailed here. 



@menu
* Low-Level Prolog to Java Interface Structure::  
* Java event handling from Prolog::  
* Java exception handling from Prolog::	 
* Usage and interface (javart)::  
* Documentation on exports (javart)::  
@end menu

@node Low-Level Prolog to Java Interface Structure, Java event handling from Prolog, Low-level Prolog to Java interface, Low-level Prolog to Java interface
@comment node-name, next,  previous,  up
@section Low-Level Prolog to Java Interface Structure 
@coindex Low-Level Prolog to Java Interface Structure
@glindex Low-Level Prolog to Java Interface Structure 
This low-level prolog to java interface is made up of two parts: a Prolog part and a Java part. The Prolog part receives requests from a Prolog program and sends them to the Java part through a socket. The Java part receives requests from the socket and performs the actions included in the requests. 

If an event is thrown in the java side, an asynchronous message must be sent away to the prolog side, in order to launch a prolog goal to handle the event. This asynchronous communication is made by the means of a second socket. The nature of this communication needs the use of threads both in java and prolog: one thread to deal with the 'sequential program flow,' and other thread (may be several) to do the job of event handling. 

In the java side the threads are automatically created by the context of the objects we use: adding an event listener implies automatically that there will be a thread ready to launch it when the event raises. The prolog side is different: there must be a thread in the low-level interface that listens to the asynchronous socket to launch the goals requested. 



@menu
* Prolog side::			
* Java side::			
@end menu

@node Prolog side, Java side, Low-Level Prolog to Java Interface Structure, Low-Level Prolog to Java Interface Structure
@comment node-name, next,  previous,  up
@subsection Prolog side 
@coindex Low-Level Prolog to Java Interface Structure. Prolog side
@glindex Low-Level Prolog to Java Interface Structure. Prolog side 
The prolog side receives the actions to do in the java side from the user program, and sends them to the java side through the socket connection. When the action is done in the java side, the result is returned to the user program, or the action fails if any problem in the java side is found. 

In order to send and receive prolog terms and java object references using a socket, this layer must transform this elements in a serialized representation, just like the java serialization package does. This transformation is done in our implementation using the @code{fast_read/1} and @code{fast_write/1} predicates included in Ciao, so any prolog element can be translated to and from a list of bytes. 

Prolog data representation of java elements is very simple in this low-level interface. Java primitive types such as integers and characters are translated into Prolog terms, and even some Java objects are translated that way (e. g. Java strings). Java objects are represented in Prolog as compound terms with a reference to identify the corresponding Java object. Data conversion is made automatically when the interface is used, so the Prolog user programs do not have to deal with the complexity of this tasks. 



@node Java side,  , Prolog side, Low-Level Prolog to Java Interface Structure
@comment node-name, next,  previous,  up
@subsection Java side 
@coindex Low-Level Prolog to Java Interface Structure. Java side
@glindex Low-Level Prolog to Java Interface Structure. Java side 
The java side of this layer is more complex than the prolog side. The tasks this part have to deal to are the following: 


@itemize @bullet{} 


@item Wait for requests from the prolog side. 


@item Translate the prolog terms received in a 'serialized' form in a more useful java representation. 


@item Interpret the requests received from the prolog side. 


@item Handle the set of objects created by or derived from the requests received from de prolog side. 


@item Handle the events raised in the java side, and launch the listeners added in the prolog side. 


@item Handle the exceptions raised in the java side, and send to the prolog side. 


@end itemize  

In the implementation of the java side, two items must be carefully designed: the handling of java objects, and the representation of prolog data structures. The last item is specially important because all the interactions between prolog and java are made using prolog structures, an easy way to standardize the different data management of both languages. Even the requests themselves are encapsulated using prolog structures. The overload of this encapsulation is not significant in terms of socket traffic, due to the optimal implementation of the prolog serialized term. 

The java side must handle the objects created from the prolog side dinamically, and these objects must be accessed as fast as possible from the set of objects. The java API provides a powerful implementation of Hash tables that achieves all the requirements of our implementation. 

On the other hand, the java representation of prolog terms is made using the inheritance of java classes. In the java side exists a representation of a generic prolog term, implemented as an abstract class in java. Variables, atoms, compound terms, lists, and numeric terms are classes in the java side which inherit from the term class. Java objects can be seen also under the prolog representation as compound terms, where the single argument corresponds to the Hash key of the actual java object in the Hash table referred to before. This behaviour makes the handling of mixed java and prolog elements easy. Prolog goals are represented in the java side as objects which contain a prolog compound term with the term representing the goal. This case will be seen more in depth next, when the java to prolog is explained. 



@node Java event handling from Prolog, Java exception handling from Prolog, Low-Level Prolog to Java Interface Structure, Low-level Prolog to Java interface
@comment node-name, next,  previous,  up
@section Java event handling from Prolog 
@coindex Java event handling from Prolog
@glindex Java event handling from Prolog 
Java event handling is based on a delegation model since version 1.1.x. This approach to event handling is very powerful and elegant, but a user program cannot handle all the events that can raise on a given object: for each kind of event, a listener must be implemented and added specifically. However, the Java 2 API includes a special listener (@code{AWTEventListener}) that can manage the internal java event queue. 

The prolog to java interface has been designed to emulate the java event handler, and is also based on event objects and listeners. The low level prolog to java interface implements its own event manager, to handle those events that have prolog listeners associated to the object that raises the event. From the prolog side can be added listeners to objects for specific events. The java side includes a list of goals to launch from the object and event type. 

Due to the events nature, the event handler must work in a separate thread to manage the events asynchronously. The java side has its own mechanisms to work this way. The prolog side must be implemented specially for event handling using threads. The communication between java and prolog is also asynchronous, and a additional socket stream is used to avoid interferences with the main socket stream. The event stream will work in this implementation only in one way: from java to prolog. If an event handler needs to send back requests to java, it will use the main socket stream, just like the requests sent directly from a prolog program. 

The internal process of register a Prolog event handler to a Java event is shown in the next figure: 

@image{autofigip2jbn-events-pl-reg} 

When an event raises, the low-level Prolog to Java interface have to send to the Prolog user program the goal to evaluate. Graphically, the complete process takes the tasks involved in the following figure: 

@image{autofigip2jbn-events-pl-fire} 
 

@node Java exception handling from Prolog, Usage and interface (javart), Java event handling from Prolog, Low-level Prolog to Java interface
@comment node-name, next,  previous,  up
@section Java exception handling from Prolog 
@coindex Java exception handling from Prolog
@glindex Java exception handling from Prolog 
Java exception handling is very similar to the peer prolog handling: it includes some specific statements to trap exceptions from user code. In the java side, the exceptions can be originated from an incorrect request, or can be originated in the code called from the request. Both exception types will be sent to prolog using the main socket stream, leaving the prolog program manage the exception. However, the first kind of exceptions are prefixed, so the user program can distinguish from the second type of exceptions. 

In order to handle exceptions properly using the prolog to java and java to prolog interfaces simultaneously, in both sides of the interface will be filtered those exceptions coming from their own side: this avoids an endless loop of exceptions bouncing from one side to another. 





@node Usage and interface (javart), Documentation on exports (javart), Java exception handling from Prolog, Low-level Prolog to Java interface
@comment node-name, next,  previous,  up
@section Usage and interface (@code{javart})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(javart)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex java_create_object/2
@code{java_create_object/2}, 
@glindex java_delete_object/1
@code{java_delete_object/1}, 
@glindex java_invoke_method/2
@code{java_invoke_method/2}, 
@glindex java_get_value/2
@code{java_get_value/2}, 
@glindex java_set_value/2
@code{java_set_value/2}, 
@glindex java_connection/0
@code{java_connection/0}, 
@glindex java_remote_connection/1
@code{java_remote_connection/1}, 
@glindex java_disconnection/0
@code{java_disconnection/0}, 
@glindex java_add_listener/3
@code{java_add_listener/3}, 
@glindex java_remove_listener/3
@code{java_remove_listener/3}.


@item @emph{Regular Types:}

@glindex machine_name/1
@code{machine_name/1}, 
@glindex java_constructor/1
@code{java_constructor/1}, 
@glindex java_object/1
@code{java_object/1}, 
@glindex java_method/1
@code{java_method/1}, 
@glindex java_field/1
@code{java_field/1}, 
@glindex java_event/1
@code{java_event/1}, 
@glindex prolog_goal/1
@code{prolog_goal/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex concurrency/concurrency
@code{concurrency/concurrency}, 
@glindex format
@code{format}, 
@glindex lists
@code{lists}, 
@glindex read
@code{read}, 
@glindex write
@code{write}, 
@glindex javall/javasock
@code{javall/javasock}, 
@glindex system
@code{system}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (javart),  , Usage and interface (javart), Low-level Prolog to Java interface
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{javart})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_create_object/2 (pred)}}}
@temp
@end iftex
@pdindex java_create_object/2 
@glindex java_create_object/2 
@deffn PREDICATE java_create_object/2:






@strong{Usage:} @code{java_create_object(+java_constructor,-java_object)}
@itemize @minus
@item @emph{Description:} New java object creation. The constructor must be a compound term as defined by its type, with the full class name as functor (e.g., 'java.lang.String'), and the parameters passed to the constructor as arguments of the structure. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_constructor} is a java constructor (structure with functor as constructor full name, and arguments as constructor arguments).
@iftex
@hfill
@end iftex
 (@code{javart:java_constructor/1})

@code{-java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{machine_name/1 (regtype)}}}
@temp
@end iftex
@teindex machine_name/1 
@glindex machine_name/1 
@deffn REGTYPE machine_name/1:






@strong{Usage:} @code{machine_name(X)}
@itemize @minus
@item @emph{Description:} @code{X} is the network name of a machine. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_constructor/1 (regtype)}}}
@temp
@end iftex
@teindex java_constructor/1 
@glindex java_constructor/1 
@deffn REGTYPE java_constructor/1:






@strong{Usage:} @code{java_constructor(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a java constructor (structure with functor as constructor full name, and arguments as constructor arguments). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_object/1 (regtype)}}}
@temp
@end iftex
@teindex java_object/1 
@glindex java_object/1 
@deffn REGTYPE java_object/1:






@strong{Usage:} @code{java_object(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a java object (a structure with functor '$java_object', and argument an integer given by the java side). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_delete_object/1 (pred)}}}
@temp
@end iftex
@pdindex java_delete_object/1 
@glindex java_delete_object/1 
@deffn PREDICATE java_delete_object/1:






@strong{Usage:} @code{java_delete_object(+java_object)}
@itemize @minus
@item @emph{Description:} Java object deletion. It removes the object given as argument from the Java object table. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_invoke_method/2 (pred)}}}
@temp
@end iftex
@pdindex java_invoke_method/2 
@glindex java_invoke_method/2 
@deffn PREDICATE java_invoke_method/2:






@strong{Usage:} @code{java_invoke_method(+java_object,+java_method)}
@itemize @minus
@item @emph{Description:} Invokes a java method on an object. Given a Java object reference, invokes the method represented with the second argument.  
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})

@code{+java_method} is a java method (structure with functor as method name, and arguments as method ones, plus a result argument. This result argument is unified with the atom 'Yes' if the java method returns void).
@iftex
@hfill
@end iftex
 (@code{javart:java_method/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_method/1 (regtype)}}}
@temp
@end iftex
@teindex java_method/1 
@glindex java_method/1 
@deffn REGTYPE java_method/1:






@strong{Usage:} @code{java_method(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a java method (structure with functor as method name, and arguments as method ones, plus a result argument. This result argument is unified with the atom 'Yes' if the java method returns void). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_get_value/2 (pred)}}}
@temp
@end iftex
@pdindex java_get_value/2 
@glindex java_get_value/2 
@deffn PREDICATE java_get_value/2:






@strong{Usage:} @code{java_get_value(+java_object,+java_field)}
@itemize @minus
@item @emph{Description:} Gets the value of a field. Given a Java object as first argument, it instantiates the variable given as second argument. This field must be uninstantiated in the java_field functor, or this predicate will fail. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})

@code{+java_field} is a java field (structure on which the functor name is the field name, and the single argument is the field value).
@iftex
@hfill
@end iftex
 (@code{javart:java_field/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_set_value/2 (pred)}}}
@temp
@end iftex
@pdindex java_set_value/2 
@glindex java_set_value/2 
@deffn PREDICATE java_set_value/2:






@strong{Usage:} @code{java_set_value(+java_object,+java_field)}
@itemize @minus
@item @emph{Description:} Sets the value of a Java object field. Given a Java object reference, it assigns the value included in the java_field compound term. The field value in the java_field structure must be instantiated. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})

@code{+java_field} is a java field (structure on which the functor name is the field name, and the single argument is the field value).
@iftex
@hfill
@end iftex
 (@code{javart:java_field/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_field/1 (regtype)}}}
@temp
@end iftex
@teindex java_field/1 
@glindex java_field/1 
@deffn REGTYPE java_field/1:






@strong{Usage:} @code{java_field(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a java field (structure on which the functor name is the field name, and the single argument is the field value). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_connection/0 (pred)}}}
@temp
@end iftex
@pdindex java_connection/0 
@glindex java_connection/0 
@deffn PREDICATE java_connection/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Starts the Java server on the local machine, connects it through the data and event sockets, and starts the event handling thread. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_remote_connection/1 (pred)}}}
@temp
@end iftex
@pdindex java_remote_connection/1 
@glindex java_remote_connection/1 
@deffn PREDICATE java_remote_connection/1:






@strong{Usage:} @code{java_remote_connection(+machine_name)}
@itemize @minus
@item @emph{Description:} Starts the Java server in machine_name, connects it through the data and event sockets, and starts the event handling thread. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_disconnection/0 (pred)}}}
@temp
@end iftex
@pdindex java_disconnection/0 
@glindex java_disconnection/0 
@deffn PREDICATE java_disconnection/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Closes the connection with the java process. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_add_listener/3 (pred)}}}
@temp
@end iftex
@pdindex java_add_listener/3 
@glindex java_add_listener/3 
@deffn PREDICATE java_add_listener/3:






@emph{Meta-predicate} with arguments: @code{java_add_listener(?,?,goal)}.


@strong{Usage:} @code{java_add_listener(+java_object,+java_event,+prolog_goal)}
@itemize @minus
@item @emph{Description:} Adds a listener to an event on an object. Given a Java object reference, it registers the goal received as third argument to be launched when the Java event raises. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})

@code{+java_event} is a java event represented as an atom with the full event constructor name (e.g., 'java.awt.event.ActionListener').
@iftex
@hfill
@end iftex
 (@code{javart:java_event/1})

@code{+prolog_goal} is a prolog predicate. Prolog term that represents the goal that must be invoked when the event raises on the object. The predicate arguments can be java objects, or even the result of java methods. These java objects will be evaluated when the event raises (instead of when the listener is added). The arguments that represent java objects must be instantiated to already created objects. The variables will be kept uninstantiated when the event raises and the predicate is called.
@iftex
@hfill
@end iftex
 (@code{javart:prolog_goal/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_event/1 (regtype)}}}
@temp
@end iftex
@teindex java_event/1 
@glindex java_event/1 
@deffn REGTYPE java_event/1:






@strong{Usage:} @code{java_event(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a java event represented as an atom with the full event constructor name (e.g., 'java.awt.event.ActionListener'). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_goal/1 (regtype)}}}
@temp
@end iftex
@teindex prolog_goal/1 
@glindex prolog_goal/1 
@deffn REGTYPE prolog_goal/1:






@strong{Usage:} @code{prolog_goal(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a prolog predicate. Prolog term that represents the goal that must be invoked when the event raises on the object. The predicate arguments can be java objects, or even the result of java methods. These java objects will be evaluated when the event raises (instead of when the listener is added). The arguments that represent java objects must be instantiated to already created objects. The variables will be kept uninstantiated when the event raises and the predicate is called. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_remove_listener/3 (pred)}}}
@temp
@end iftex
@pdindex java_remove_listener/3 
@glindex java_remove_listener/3 
@deffn PREDICATE java_remove_listener/3:






@strong{Usage:} @code{java_remove_listener(+java_object,+java_event,+prolog_goal)}
@itemize @minus
@item @emph{Description:} It removes a listener from an object event queue. Given a Java object reference, goal registered for the given event is removed. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+java_object} is a java object (a structure with functor '$java_object', and argument an integer given by the java side).
@iftex
@hfill
@end iftex
 (@code{javart:java_object/1})

@code{+java_event} is a java event represented as an atom with the full event constructor name (e.g., 'java.awt.event.ActionListener').
@iftex
@hfill
@end iftex
 (@code{javart:java_event/1})

@code{+prolog_goal} is a prolog predicate. Prolog term that represents the goal that must be invoked when the event raises on the object. The predicate arguments can be java objects, or even the result of java methods. These java objects will be evaluated when the event raises (instead of when the listener is added). The arguments that represent java objects must be instantiated to already created objects. The variables will be kept uninstantiated when the event raises and the predicate is called.
@iftex
@hfill
@end iftex
 (@code{javart:prolog_goal/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Low-level Java to Prolog interface, Low-level Prolog to Java socket connection, Low-level Prolog to Java interface, Top
@comment node-name, next,  previous,  up
@chapter Low-level Java to Prolog interface
@liindex jtopl
@c -------------------------------------------------
@c WARNING: Do not edit this file (jtopl.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/javall/jtopl.pl
@c -------------------------------------------------

@strong{Author(s):} Jes@'us Correas.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#40 (2000/2/8, 16:32:42 CET)

 
@coindex Low level Java to Prolog interface
@glindex Low level Java to Prolog interface 
This module defines a low level Java to Prolog interface. This Prolog side of the Java to Prolog interface only has one public predicate: a server that listens at the socket connection with Java, and executes the commands received from the Java side. 

In order to evaluate the goals received from the Java side, this module can work in two ways: executing them in the same engine, or starting a thread for each goal. The easiest way is to launch them in the same engine, but the goals must be evaluated sequentially: once a goal provides the first solution, all the subsequent goals must be finished before this goal can backtrack to provide another solution. The Prolog side of this interface works as a top-level, and the goals partially evaluated are not independent. 

The solution of this goal dependence is to evaluate the goals in a different prolog engine. Although Ciao includes a mechanism to evaluate goals in different engines, the approach used in this interface is to launch each goal in a different thread. 

The decision of what kind of goal evaluation is selected is done by the Java side. Each evaluation type has its own command terms, so the Java side can choose the type it needs. 

A Prolog server starts by calling the @code{prolog_server/0} predicate. The user predicates and libraries to be called from Java must be included in the executable file, or be accesible using the built-in predicates dealing with code loading. 





@menu
* Usage and interface (jtopl)::	 
* Documentation on exports (jtopl)::  
* Documentation on internals (jtopl)::	
@end menu

@node Usage and interface (jtopl), Documentation on exports (jtopl), Low-level Java to Prolog interface, Low-level Java to Prolog interface
@comment node-name, next,  previous,  up
@section Usage and interface (@code{jtopl})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(jtopl)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex prolog_server/0
@code{prolog_server/0}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex concurrency/concurrency
@code{concurrency/concurrency}, 
@glindex system
@code{system}, 
@glindex read
@code{read}, 
@glindex write
@code{write}, 
@glindex dynamic
@code{dynamic}, 
@glindex lists
@code{lists}, 
@glindex format
@code{format}, 
@glindex dynmods
@code{dynmods}, 
@glindex atom2term
@code{atom2term}, 
@glindex javall/javasock
@code{javall/javasock}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (jtopl), Documentation on internals (jtopl), Usage and interface (jtopl), Low-level Java to Prolog interface
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{jtopl})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_server/0 (pred)}}}
@temp
@end iftex
@pdindex prolog_server/0 
@glindex prolog_server/0 
@deffn PREDICATE prolog_server/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Prolog server entry point. Reads from the standard input the node name and port number where the java client resides, and starts the prolog server listening at the data socket. This predicate acts as a server: it includes an endless read-process loop until the @code{prolog_exit} command is received. 
@coindex Prolog server
@glindex Prolog server 
 
@end itemize
@end deffn
@sp 1



@node Documentation on internals (jtopl),  , Documentation on exports (jtopl), Low-level Java to Prolog interface
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{jtopl})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{command/1 (regtype)}}}
@temp
@end iftex
@teindex command/1 
@glindex command/1 
@deffn REGTYPE command/1:






@strong{Usage:} @code{command(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a command received from the java client, to be executed by the Prolog process. The command is represented as an atom or a functor with arity 1. The command to be executed must be one of the following types: 
@coindex Java commands
@glindex Java commands 
@itemize @bullet{} 


@item @code{prolog_launch_query(Q)} Compound term to create a new query, received as single argument of this structure. A reference to the new query is returned to Java. 


@item @code{prolog_launch_query_on_thread(Q)} Compound term to evaluate a new query using a separate thread. A reference to the new query is returned to Java. 


@item @code{prolog_next_solution(ID)} Compound term to get the next solution of a goal identified by the single argument of the structure. A term representing the goal instantiated with the next solution is returned to Java. 


@item @code{prolog_terminate_query(ID)} Compound term to terminate the goal identified by the argument. If the thread option is disabled, a cut is made in the goal search tree, and the goal is removed from the goal table; if the thread option is enabled, the thread evaluating the goal is terminated. 


@item @code{prolog_exit} Atom to terminate the current Prolog process. 


@end itemize  
 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{answer/1 (regtype)}}}
@temp
@end iftex
@teindex answer/1 
@glindex answer/1 
@deffn REGTYPE answer/1:






@strong{Usage:} @code{answer(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a response sent from the prolog server. Is represented as an atom or a functor with arity 1 or 2, depending on the functor name. 
@coindex Prolog answers
@glindex Prolog answers 

 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_query/1 (regtype)}}}
@temp
@end iftex
@teindex prolog_query/1 
@glindex prolog_query/1 
@deffn REGTYPE prolog_query/1:






@strong{Usage:} @code{prolog_query(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a query to be launched from the prolog server. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{shell_s/0 (pred)}}}
@temp
@end iftex
@pdindex shell_s/0 
@glindex shell_s/0 
@deffn PREDICATE shell_s/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} Command execution loop. This predicate is called when the connection to Java is established, and performs an endless loop dealing with the following tasks: 


@itemize @bullet{} 


@item reads a command from the socket. All the commands are explained in the @code{command} type description, 


@item processes the command using the @code{process_first_command/1} and @code{process_next_command/1} predicates, and 


@item returns the results of the command execution. 


@end itemize  

 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{process_first_command/1 (pred)}}}
@temp
@end iftex
@pdindex process_first_command/1 
@glindex process_first_command/1 
@deffn PREDICATE process_first_command/1:






@strong{Usage:} @code{process_first_command(+Command)}
@itemize @minus
@item @emph{Description:} Processes the first command of a query. Using the threads option, it processes all the commands received from the prolog server. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Command} is a command received from the java client, to be executed by the Prolog process. The command is represented as an atom or a functor with arity 1. The command to be executed must be one of the following types: 
@coindex Java commands
@glindex Java commands 
@itemize @bullet{} 


@item @code{prolog_launch_query(Q)} Compound term to create a new query, received as single argument of this structure. A reference to the new query is returned to Java. 


@item @code{prolog_launch_query_on_thread(Q)} Compound term to evaluate a new query using a separate thread. A reference to the new query is returned to Java. 


@item @code{prolog_next_solution(ID)} Compound term to get the next solution of a goal identified by the single argument of the structure. A term representing the goal instantiated with the next solution is returned to Java. 


@item @code{prolog_terminate_query(ID)} Compound term to terminate the goal identified by the argument. If the thread option is disabled, a cut is made in the goal search tree, and the goal is removed from the goal table; if the thread option is enabled, the thread evaluating the goal is terminated. 


@item @code{prolog_exit} Atom to terminate the current Prolog process. 


@end itemize  

@iftex
@hfill
@end iftex
 (@code{jtopl:command/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{process_next_command/2 (pred)}}}
@temp
@end iftex
@pdindex process_next_command/2 
@glindex process_next_command/2 
@deffn PREDICATE process_next_command/2:






@strong{Usage:} @code{process_next_command(+Id,+Command)}
@itemize @minus
@item @emph{Description:} Process the commands received from the prolog server when a query is being handled. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{undefined:prolog_query_id(+Id)}
@iftex
@hfill
@end iftex
 (undefined property)

@code{+Command} is a command received from the java client, to be executed by the Prolog process. The command is represented as an atom or a functor with arity 1. The command to be executed must be one of the following types: 
@coindex Java commands
@glindex Java commands 
@itemize @bullet{} 


@item @code{prolog_launch_query(Q)} Compound term to create a new query, received as single argument of this structure. A reference to the new query is returned to Java. 


@item @code{prolog_launch_query_on_thread(Q)} Compound term to evaluate a new query using a separate thread. A reference to the new query is returned to Java. 


@item @code{prolog_next_solution(ID)} Compound term to get the next solution of a goal identified by the single argument of the structure. A term representing the goal instantiated with the next solution is returned to Java. 


@item @code{prolog_terminate_query(ID)} Compound term to terminate the goal identified by the argument. If the thread option is disabled, a cut is made in the goal search tree, and the goal is removed from the goal table; if the thread option is enabled, the thread evaluating the goal is terminated. 


@item @code{prolog_exit} Atom to terminate the current Prolog process. 


@end itemize  

@iftex
@hfill
@end iftex
 (@code{jtopl:command/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{solve/1 (pred)}}}
@temp
@end iftex
@pdindex solve/1 
@glindex solve/1 
@deffn PREDICATE solve/1:






@strong{Usage:} @code{solve(+Query)}
@itemize @minus
@item @emph{Description:} Runs the query processing the commands received from the java side, and handles query nesting. It is used only with the thread option disabled. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Query} is a query to be launched from the prolog server.
@iftex
@hfill
@end iftex
 (@code{jtopl:prolog_query/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{solve_on_thread/1 (pred)}}}
@temp
@end iftex
@pdindex solve_on_thread/1 
@glindex solve_on_thread/1 
@deffn PREDICATE solve_on_thread/1:






@strong{Usage:} @code{solve_on_thread(+Query)}
@itemize @minus
@item @emph{Description:} Runs the query on a separate thread and stores the solutions on the @code{query_solutions/2} data predicate. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Query} is a query to be launched from the prolog server.
@iftex
@hfill
@end iftex
 (@code{jtopl:prolog_query/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_query_id/1 (pred)}}}
@temp
@end iftex
@pdindex get_query_id/1 
@glindex get_query_id/1 
@deffn PREDICATE get_query_id/1:






@strong{Usage:} @code{get_query_id(-Id)}
@itemize @minus
@item @emph{Description:} Produces the query id for the next query, when is invoked the threads option disabled. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{undefined:prolog_query_id(-Id)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_parse/2 (pred)}}}
@temp
@end iftex
@pdindex prolog_parse/2 
@glindex prolog_parse/2 
@deffn PREDICATE prolog_parse/2:






@strong{Usage:} @code{prolog_parse(+String,-Term)}
@itemize @minus
@item @emph{Description:} Parses the string received as first argument and returns the prolog term as second argument. @strong{Important:} This is a private predicate but could be called from java side, to parse strings to Prolog terms. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})

@code{-Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{read_command/1 (pred)}}}
@temp
@end iftex
@pdindex read_command/1 
@glindex read_command/1 
@deffn PREDICATE read_command/1:






@strong{Usage:} @code{read_command(-Command)}
@itemize @minus
@item @emph{Description:} Reads from the input stream a new prolog server command. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{-Command} is a command received from the java client, to be executed by the Prolog process. The command is represented as an atom or a functor with arity 1. The command to be executed must be one of the following types: 
@coindex Java commands
@glindex Java commands 
@itemize @bullet{} 


@item @code{prolog_launch_query(Q)} Compound term to create a new query, received as single argument of this structure. A reference to the new query is returned to Java. 


@item @code{prolog_launch_query_on_thread(Q)} Compound term to evaluate a new query using a separate thread. A reference to the new query is returned to Java. 


@item @code{prolog_next_solution(ID)} Compound term to get the next solution of a goal identified by the single argument of the structure. A term representing the goal instantiated with the next solution is returned to Java. 


@item @code{prolog_terminate_query(ID)} Compound term to terminate the goal identified by the argument. If the thread option is disabled, a cut is made in the goal search tree, and the goal is removed from the goal table; if the thread option is enabled, the thread evaluating the goal is terminated. 


@item @code{prolog_exit} Atom to terminate the current Prolog process. 


@end itemize  

@iftex
@hfill
@end iftex
 (@code{jtopl:command/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{write_answer/1 (pred)}}}
@temp
@end iftex
@pdindex write_answer/1 
@glindex write_answer/1 
@deffn PREDICATE write_answer/1:






@strong{Usage:} @code{write_answer(+Answer)}
@itemize @minus
@item @emph{Description:} writes to the output socket stream the given answer. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Answer} is a response sent from the prolog server. Is represented as an atom or a functor with arity 1 or 2, depending on the functor name. 
@coindex Prolog answers
@glindex Prolog answers 


@iftex
@hfill
@end iftex
 (@code{jtopl:answer/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Low-level Prolog to Java socket connection, Calling emacs from Prolog, Low-level Java to Prolog interface, Top
@comment node-name, next,  previous,  up
@chapter Low-level Prolog to Java socket connection
@liindex javasock
@c -------------------------------------------------
@c WARNING: Do not edit this file (javasock.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/javall/javasock.pl
@c -------------------------------------------------

@strong{Author(s):} Jes@'us Correas.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#152 (2000/5/26, 13:36:48 CEST)

 
@coindex Socket implementation
@glindex Socket implementation 
This module defines a low level socket interface, to be used by javart and jtopl. Includes all the code related directly to the handling of sockets. This library should not be used by any user program, because is a very low-level connection to Java. Use 
@glindex javart
@code{javart} (Prolog to Java low-level interface) or 
@glindex jtopl
@code{jtopl} (Java to Prolog interface) libraries instead. 





@menu
* Usage and interface (javasock)::  
* Documentation on exports (javasock)::	 
@end menu

@node Usage and interface (javasock), Documentation on exports (javasock), Low-level Prolog to Java socket connection, Low-level Prolog to Java socket connection
@comment node-name, next,  previous,  up
@section Usage and interface (@code{javasock})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(javasock)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex socket_connection/2
@code{socket_connection/2}, 
@glindex socket_disconnection/0
@code{socket_disconnection/0}, 
@glindex java_fast_read/2
@code{java_fast_read/2}, 
@glindex java_fast_write/2
@code{java_fast_write/2}, 
@glindex java_stream/3
@code{java_stream/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex fastrw
@code{fastrw}, 
@glindex read
@code{read}, 
@glindex sockets/sockets
@code{sockets/sockets}, 
@glindex dynamic
@code{dynamic}, 
@glindex format
@code{format}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (javasock),  , Usage and interface (javasock), Low-level Prolog to Java socket connection
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{javasock})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_connection/2 (pred)}}}
@temp
@end iftex
@pdindex socket_connection/2 
@glindex socket_connection/2 
@deffn PREDICATE socket_connection/2:






@strong{Usage:} @code{socket_connection(+Node,+Stream)}
@itemize @minus
@item @emph{Description:} Given a stream connected to a node, it gets the socket port from the given stream and creates the sockets to connect to the java process. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Node} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{+Stream} is an open stream.
@iftex
@hfill
@end iftex
 (@code{streams_basic:stream/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{socket_disconnection/0 (pred)}}}
@temp
@end iftex
@pdindex socket_disconnection/0 
@glindex socket_disconnection/0 
@deffn PREDICATE socket_disconnection/0:






@strong{Usage:} 
@itemize @minus
@item @emph{Description:} It closes the sockets to disconnect from the java process. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_fast_read/2 (pred)}}}
@temp
@end iftex
@pdindex java_fast_read/2 
@glindex java_fast_read/2 
@deffn PREDICATE java_fast_read/2:






@strong{Usage:} @code{java_fast_read(+Type,-Term)}
@itemize @minus
@item @emph{Description:} It reads from the given stream type one term and unifies it with the term received as second argument. This is the basic predicate used to receive data from the Java side. The first argument reflects the socket type: event or data. The second argument is unified with the data received from the socket. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Type} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{-Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_fast_write/2 (pred)}}}
@temp
@end iftex
@pdindex java_fast_write/2 
@glindex java_fast_write/2 
@deffn PREDICATE java_fast_write/2:






@strong{Usage:} @code{java_fast_write(+Type,+Term)}
@itemize @minus
@item @emph{Description:}  It writes on the given stream type the term received as second argument. This is the basic predicate used to send data to the Java side. The first argument reflects the socket type: event or data. The second argument is the term to be sent to the Java side. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{+Type} is currently instantiated to an atom.
@iftex
@hfill
@end iftex
 (@code{term_typing:atom/1})

@code{+Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_stream/3 (pred)}}}
@temp
@end iftex
@pdindex java_stream/3 
@glindex java_stream/3 
@deffn PREDICATE java_stream/3:






The predicate is of type @emph{dynamic}.


@strong{Usage:} @code{java_stream(DataStream,EventStream,Address)}
@itemize @minus
@item @emph{Description:} Stores the identifiers of the streams used. A fact is asserted when the connection to the Java process is established. It Contains the data and event streams, and the network address where the Java process is running. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{DataStream} is an atom.
@iftex
@hfill
@end iftex
 (@code{basic_props:atm/1})

@code{EventStream} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})

@code{Address} is a valid host name.
@iftex
@hfill
@end iftex
 (@code{javasock:machine_name/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Calling emacs from Prolog, linda (library), Low-level Prolog to Java socket connection, Top
@comment node-name, next,  previous,  up
@chapter Calling emacs from Prolog
@liindex emacs
@c -------------------------------------------------
@c WARNING: Do not edit this file (emacs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/emacs/emacs.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#54 (2000/2/10, 21:32:23 CET)

This library provides a 
@coindex prolog-emacs interface
@glindex prolog-emacs interface
@emph{prolog-emacs interface}. This interface is complementary to (and independent from) the 
@glindex emacs mode
emacs mode, which is used to develop programs from within the 
@glindex emacs
@code{emacs} editor/environment. Instead, this library allows calling 
@glindex emacs
@code{emacs} from a running Prolog program. This facilitates the use of 
@glindex emacs
@code{emacs} as a ``user interface'' for a Prolog program. Emacs can be made to: 


@itemize @bullet{} 


@item Visit a file, which can then be edited. 


@item Execute arbitrary 
@coindex emacs lisp
@glindex emacs lisp
@emph{emacs lisp} code, sent from Prolog. 


@end itemize  


@noindent
In order for this library to work correctly, the following is needed: 


@itemize @bullet{} 


@item You should be running the 
@glindex emacs
@code{emacs} editor on the same machine where the executable calling this library is executing. 


@item This 
@glindex emacs
@code{emacs} should be running the 
@coindex emacs server
@glindex emacs server
@emph{emacs server}. This can be done by including the following line in your 
@glindex .emacs
@code{.emacs} file: 


@smallexample    
;; Start a server that emacsclient can connect to.
(server-start)
@end smallexample  


@noindent
Or typing @code{M-x server-start} within 
@glindex emacs
@code{emacs}. 


@end itemize  


@noindent
This suffices for using 
@glindex emacs
@code{emacs} to edit files. For running arbitrary code the following also needs to be added to the 
@glindex .emacs
@code{.emacs} file: 


@table @asis 


@item @code{(setq enable-local-eval t)} 
Allows executing lisp code without asking. 


@item @code{(setq enable-local-eval nil)} 
Does not allow executing lisp code without asking. 


@item @code{(setq enable-local-eval 'maybe)} 
Allows executing lisp code only if user agrees after asking (asks interactively for every invocation). 


@end table  


@noindent
@strong{Examples:} 


@noindent
Assuming that a @code{.pl} file loads this library, then: 


@table @asis 


@item @code{..., emacs_edit('foo'), ...} 
Opens file @code{foo} for editing in 
@glindex emacs
@code{emacs}. 


@item @code{..., emacs_eval_nowait("(run-ciao-toplevel)"), ...} 
Starts execution of a Ciao top-level within 
@glindex emacs
@code{emacs}. 


@end table  





@menu
* Usage and interface (emacs)::	 
* Documentation on exports (emacs)::  
@end menu

@node Usage and interface (emacs), Documentation on exports (emacs), Calling emacs from Prolog, Calling emacs from Prolog
@comment node-name, next,  previous,  up
@section Usage and interface (@code{emacs})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(emacs)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex emacs_edit/1
@code{emacs_edit/1}, 
@glindex emacs_edit_nowait/1
@code{emacs_edit_nowait/1}, 
@glindex emacs_eval/1
@code{emacs_eval/1}, 
@glindex emacs_eval_nowait/1
@code{emacs_eval_nowait/1}.


@item @emph{Regular Types:}

@glindex elisp_string/1
@code{elisp_string/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex metaterms
@code{metaterms}, 
@glindex lists
@code{lists}, 
@glindex terms
@code{terms}, 
@glindex system
@code{system}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (emacs),  , Usage and interface (emacs), Calling emacs from Prolog
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{emacs})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{emacs_edit/1 (pred)}}}
@temp
@end iftex
@pdindex emacs_edit/1 
@glindex emacs_edit/1 
@deffn PREDICATE emacs_edit/1:






@strong{Usage:} @code{emacs_edit(+filename)}
@itemize @minus
@item @emph{Description:} Opens the given file for editing in 
@glindex emacs
@code{emacs}. Waits for editing to finish before continuing. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{emacs_edit_nowait/1 (pred)}}}
@temp
@end iftex
@pdindex emacs_edit_nowait/1 
@glindex emacs_edit_nowait/1 
@deffn PREDICATE emacs_edit_nowait/1:






@strong{Usage:} @code{emacs_edit_nowait(+filename)}
@itemize @minus
@item @emph{Description:} Opens the given file for editing in 
@glindex emacs
@code{emacs} and continues without waiting for editing to finish. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{emacs_eval/1 (pred)}}}
@temp
@end iftex
@pdindex emacs_eval/1 
@glindex emacs_eval/1 
@deffn PREDICATE emacs_eval/1:






@strong{Usage:} @code{emacs_eval(+elisp_string)}
@itemize @minus
@item @emph{Description:} Executes in emacs the lisp code given as argument. Waits for the command to finish before continuing. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{emacs_eval_nowait/1 (pred)}}}
@temp
@end iftex
@pdindex emacs_eval_nowait/1 
@glindex emacs_eval_nowait/1 
@deffn PREDICATE emacs_eval_nowait/1:






@strong{Usage:} @code{emacs_eval_nowait(+elisp_string)}
@itemize @minus
@item @emph{Description:} Executes in emacs the lisp code given as argument and continues without waiting for it to finish. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{elisp_string/1 (regtype)}}}
@temp
@end iftex
@teindex elisp_string/1 
@glindex elisp_string/1 
@deffn REGTYPE elisp_string/1:






@strong{Usage:} @code{elisp_string(L)}
@itemize @minus
@item @emph{Description:} @code{L} is a string containing 
@glindex emacs
@code{emacs} lisp code. 
@end itemize
@end deffn
@sp 1


@c (component)


@node linda (library), *** PART IX - Abstract data types, Calling emacs from Prolog, Top
@comment node-name, next,  previous,  up
@chapter linda (library)
@liindex linda
@c -------------------------------------------------
@c WARNING: Do not edit this file (linda.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/linda.pl
@c -------------------------------------------------

@strong{Version:} 0.9#66 (1999/4/29, 12:28:0 MEST)

This is a SICStus-like linda package. Note that this is essentially quite obsolete, and provided mostly in case it is needed for compatibility, since Ciao now supports all Linda functionality (and more) through the concurrent fact database.



@menu
* Usage and interface (linda)::	 
* Documentation on exports (linda)::  
@end menu

@node Usage and interface (linda), Documentation on exports (linda), linda (library), linda (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{linda})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(linda)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex linda_client/1
@code{linda_client/1}, 
@glindex close_client/0
@code{close_client/0}, 
@glindex in/1
@code{in/1}, 
@glindex in/2
@code{in/2}, 
@glindex in_noblock/1
@code{in_noblock/1}, 
@glindex out/1
@code{out/1}, 
@glindex rd/1
@code{rd/1}, 
@glindex rd/2
@code{rd/2}, 
@glindex rd_noblock/1
@code{rd_noblock/1}, 
@glindex rd_findall/3
@code{rd_findall/3}, 
@glindex linda_timeout/2
@code{linda_timeout/2}, 
@glindex halt_server/0
@code{halt_server/0}, 
@glindex open_client/2
@code{open_client/2}, 
@glindex in_stream/2
@code{in_stream/2}, 
@glindex out_stream/2
@code{out_stream/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex read
@code{read}, 
@glindex fastrw
@code{fastrw}, 
@glindex sockets/sockets
@code{sockets/sockets}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (linda),  , Usage and interface (linda), linda (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{linda})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{linda_client/1 (pred)}}}
@temp
@end iftex
@pdindex linda_client/1 
@glindex linda_client/1 
@deffn PREDICATE linda_client/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{close_client/0 (pred)}}}
@temp
@end iftex
@pdindex close_client/0 
@glindex close_client/0 
@deffn PREDICATE close_client/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{in/1 (pred)}}}
@temp
@end iftex
@pdindex in/1 
@glindex in/1 
@deffn PREDICATE in/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{in/2 (pred)}}}
@temp
@end iftex
@pdindex in/2 
@glindex in/2 
@deffn PREDICATE in/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{in_noblock/1 (pred)}}}
@temp
@end iftex
@pdindex in_noblock/1 
@glindex in_noblock/1 
@deffn PREDICATE in_noblock/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{out/1 (pred)}}}
@temp
@end iftex
@pdindex out/1 
@glindex out/1 
@deffn PREDICATE out/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{rd/1 (pred)}}}
@temp
@end iftex
@pdindex rd/1 
@glindex rd/1 
@deffn PREDICATE rd/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{rd/2 (pred)}}}
@temp
@end iftex
@pdindex rd/2 
@glindex rd/2 
@deffn PREDICATE rd/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{rd_noblock/1 (pred)}}}
@temp
@end iftex
@pdindex rd_noblock/1 
@glindex rd_noblock/1 
@deffn PREDICATE rd_noblock/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{rd_findall/3 (pred)}}}
@temp
@end iftex
@pdindex rd_findall/3 
@glindex rd_findall/3 
@deffn PREDICATE rd_findall/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{linda_timeout/2 (pred)}}}
@temp
@end iftex
@pdindex linda_timeout/2 
@glindex linda_timeout/2 
@deffn PREDICATE linda_timeout/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{halt_server/0 (pred)}}}
@temp
@end iftex
@pdindex halt_server/0 
@glindex halt_server/0 
@deffn PREDICATE halt_server/0:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{open_client/2 (pred)}}}
@temp
@end iftex
@pdindex open_client/2 
@glindex open_client/2 
@deffn PREDICATE open_client/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{in_stream/2 (pred)}}}
@temp
@end iftex
@pdindex in_stream/2 
@glindex in_stream/2 
@deffn PREDICATE in_stream/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{out_stream/2 (pred)}}}
@temp
@end iftex
@pdindex out_stream/2 
@glindex out_stream/2 
@deffn PREDICATE out_stream/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node *** PART IX - Abstract data types, counters (library), linda (library), Top
@comment node-name, next,  previous,  up
@unnumbered PART IX - Abstract data types
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (ADTs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/ADTs.pl
@c -------------------------------------------------


This part includes libraries which implement some generic data structures (abstract data types) that are used frequently in programs or in the Ciao system itself. 

@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node counters (library), Identity lists, *** PART IX - Abstract data types, Top
@comment node-name, next,  previous,  up
@chapter counters (library)
@liindex counters
@c -------------------------------------------------
@c WARNING: Do not edit this file (counters.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/counters.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (counters)::  
* Documentation on exports (counters)::	 
@end menu

@node Usage and interface (counters), Documentation on exports (counters), counters (library), counters (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{counters})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(counters)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex setcounter/2
@code{setcounter/2}, 
@glindex getcounter/2
@code{getcounter/2}, 
@glindex inccounter/2
@code{inccounter/2}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (counters),  , Usage and interface (counters), counters (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{counters})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{setcounter/2 (pred)}}}
@temp
@end iftex
@pdindex setcounter/2 
@glindex setcounter/2 
@deffn PREDICATE setcounter/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{getcounter/2 (pred)}}}
@temp
@end iftex
@pdindex getcounter/2 
@glindex getcounter/2 
@deffn PREDICATE getcounter/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{inccounter/2 (pred)}}}
@temp
@end iftex
@pdindex inccounter/2 
@glindex inccounter/2 
@deffn PREDICATE inccounter/2:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Identity lists, Term manipulation, counters (library), Top
@comment node-name, next,  previous,  up
@chapter Identity lists
@liindex idlists
@c -------------------------------------------------
@c WARNING: Do not edit this file (idlists.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/idlists.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno.

@strong{Version:} 0.4#5 (1998/2/24)

The operations in this module handle lists by performing equality checks via identity instead of unification.



@menu
* Usage and interface (idlists)::  
* Documentation on exports (idlists)::	
@end menu

@node Usage and interface (idlists), Documentation on exports (idlists), Identity lists, Identity lists
@comment node-name, next,  previous,  up
@section Usage and interface (@code{idlists})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(idlists)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex member_0/2
@code{member_0/2}, 
@glindex memberchk/2
@code{memberchk/2}, 
@glindex list_insert/2
@code{list_insert/2}, 
@glindex add_after/4
@code{add_after/4}, 
@glindex add_before/4
@code{add_before/4}, 
@glindex delete/3
@code{delete/3}, 
@glindex subtract/3
@code{subtract/3}, 
@glindex union_idlists/3
@code{union_idlists/3}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (idlists),  , Usage and interface (idlists), Identity lists
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{idlists})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{member_0/2 (pred)}}}
@temp
@end iftex
@pdindex member_0/2 
@glindex member_0/2 
@deffn PREDICATE member_0/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{memberchk/2 (pred)}}}
@temp
@end iftex
@pdindex memberchk/2 
@glindex memberchk/2 
@deffn PREDICATE memberchk/2:


@code{memberchk(X,Xs)}


Checks that @code{X} is an element of (list) @code{Xs}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{list_insert/2 (pred)}}}
@temp
@end iftex
@pdindex list_insert/2 
@glindex list_insert/2 
@deffn PREDICATE list_insert/2:






@strong{Usage:} @code{list_insert(-List,+Term)}
@itemize @minus
@item @emph{Description:} Adds @code{Term} to the end of (tail-opened) @code{List} if there is not an element in @code{List} identical to @code{Term}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_after/4 (pred)}}}
@temp
@end iftex
@pdindex add_after/4 
@glindex add_after/4 
@deffn PREDICATE add_after/4:






@strong{Usage:} @code{add_after(+L0,+E0,+E,-L)}
@itemize @minus
@item @emph{Description:} Adds element @code{E} after the first element identical to @code{E0} (or at end) of list @code{L0}, returning in @code{L} the new list. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_before/4 (pred)}}}
@temp
@end iftex
@pdindex add_before/4 
@glindex add_before/4 
@deffn PREDICATE add_before/4:






@strong{Usage:} @code{add_before(+L0,+E0,+E,-L)}
@itemize @minus
@item @emph{Description:} Adds element @code{E} before the first element identical to @code{E0} (or at start) of list @code{L0}, returning in @code{L} the new list. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{delete/3 (pred)}}}
@temp
@end iftex
@pdindex delete/3 
@glindex delete/3 
@deffn PREDICATE delete/3:






@strong{Usage:} @code{delete(+List,+Element,-Rest)}
@itemize @minus
@item @emph{Description:} @code{Rest} has the same elements of @code{List} except for all the occurrences of elements identical to @code{Element}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{subtract/3 (pred)}}}
@temp
@end iftex
@pdindex subtract/3 
@glindex subtract/3 
@deffn PREDICATE subtract/3:






@strong{Usage:} @code{subtract(+Set,+Set0,-Difference)}
@itemize @minus
@item @emph{Description:} @code{Difference} has the same elements of @code{Set} except those which have an identical occurrence in @code{Set0}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{union_idlists/3 (pred)}}}
@temp
@end iftex
@pdindex union_idlists/3 
@glindex union_idlists/3 
@deffn PREDICATE union_idlists/3:






@strong{Usage:} @code{union_idlists(+List1,+List2,-List)}
@itemize @minus
@item @emph{Description:} @code{List} has the elements which are in @code{List1} but are not identical to an element in @code{List2} followed by the elements in @code{List2}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Term manipulation, Lists of numbers, Identity lists, Top
@comment node-name, next,  previous,  up
@chapter Term manipulation
@liindex metaterms
@c -------------------------------------------------
@c WARNING: Do not edit this file (metaterms.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/metaterms.pl
@c -------------------------------------------------

@strong{Version:} 1.5#43 (2000/2/4, 19:53:51 CET)





@menu
* Usage and interface (metaterms)::  
* Documentation on exports (metaterms)::  
@end menu

@node Usage and interface (metaterms), Documentation on exports (metaterms), Term manipulation, Term manipulation
@comment node-name, next,  previous,  up
@section Usage and interface (@code{metaterms})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(metaterms)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex varset/2
@code{varset/2}, 
@glindex varsbag/3
@code{varsbag/3}, 
@glindex ask/2
@code{ask/2}, 
@glindex instance/2
@code{instance/2}, 
@glindex variant/2
@code{variant/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex lists
@code{lists}, 
@glindex idlists
@code{idlists}, 
@glindex sort
@code{sort}, 
@glindex write
@code{write}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (metaterms),  , Usage and interface (metaterms), Term manipulation
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{metaterms})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{varset/2 (pred)}}}
@temp
@end iftex
@pdindex varset/2 
@glindex varset/2 
@deffn PREDICATE varset/2:


@code{varset(Term,Xs)}


@code{Xs} is the sorted list of all the variables in @code{Term}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{varsbag/3 (pred)}}}
@temp
@end iftex
@pdindex varsbag/3 
@glindex varsbag/3 
@deffn PREDICATE varsbag/3:


@code{varsbag(Term,Vs,Xs)}


@code{Vs} is the list of all the variables in @code{Term} ordered as they appear in @code{Term} left-to-right depth-first (including duplicates) plus @code{Xs}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ask/2 (pred)}}}
@temp
@end iftex
@pdindex ask/2 
@glindex ask/2 
@deffn PREDICATE ask/2:


@code{ask(Term1,Term2)}


@code{Term1} and @code{Term2} unify without producing bindings for the variables of @code{Term1}. I.e., @code{instance(@code{Term1},@code{Term2})} holds.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{instance/2 (pred)}}}
@temp
@end iftex
@pdindex instance/2 
@glindex instance/2 
@deffn PREDICATE instance/2:


@code{instance(Term1,Term2)}


@code{Term1} is an instance of @code{Term2}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{variant/2 (pred)}}}
@temp
@end iftex
@pdindex variant/2 
@glindex variant/2 
@deffn PREDICATE variant/2:


@code{variant(Term1,Term2)}


@code{Term1} and @code{Term2} are identical up to renaming.

@end deffn
@sp 1


@c (component)


@node Lists of numbers, Pattern (regular expression) matching, Term manipulation, Top
@comment node-name, next,  previous,  up
@chapter Lists of numbers
@liindex numlists
@c -------------------------------------------------
@c WARNING: Do not edit this file (numlists.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/numlists.pl
@c -------------------------------------------------

@strong{Version:} 0.9#99 (1999/5/26, 11:33:15 MEST)





@menu
* Usage and interface (numlists)::  
* Documentation on exports (numlists)::	 
@end menu

@node Usage and interface (numlists), Documentation on exports (numlists), Lists of numbers, Lists of numbers
@comment node-name, next,  previous,  up
@section Usage and interface (@code{numlists})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(numlists)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex get_primes/2
@code{get_primes/2}, 
@glindex sum_list/2
@code{sum_list/2}, 
@glindex sum_list/3
@code{sum_list/3}, 
@glindex sum_list_of_lists/2
@code{sum_list_of_lists/2}, 
@glindex sum_list_of_lists/3
@code{sum_list_of_lists/3}.


@item @emph{Regular Types:}

@glindex intlist/1
@code{intlist/1}, 
@glindex numlist/1
@code{numlist/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (numlists),  , Usage and interface (numlists), Lists of numbers
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{numlists})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get_primes/2 (pred)}}}
@temp
@end iftex
@pdindex get_primes/2 
@glindex get_primes/2 
@deffn PREDICATE get_primes/2:






@strong{Usage:} @code{get_primes(N,Primes)}
@itemize @minus
@item @emph{Description:} Computes the @code{N}th first prime numbers in ascending order. 
@item @emph{The following properties should hold at call time:}


@code{N} is an integer.
@iftex
@hfill
@end iftex
 (@code{basic_props:int/1})
@item @emph{The following properties should hold upon exit:}


@code{Primes} is a list of integers.
@iftex
@hfill
@end iftex
 (@code{numlists:intlist/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{intlist/1 (regtype)}}}
@temp
@end iftex
@teindex intlist/1 
@glindex intlist/1 
@deffn REGTYPE intlist/1:






@strong{Usage:} @code{intlist(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a list of integers. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{numlist/1 (regtype)}}}
@temp
@end iftex
@teindex numlist/1 
@glindex numlist/1 
@deffn REGTYPE numlist/1:






@strong{Usage:} @code{numlist(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a list of numbers. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sum_list/2 (pred)}}}
@temp
@end iftex
@pdindex sum_list/2 
@glindex sum_list/2 
@deffn PREDICATE sum_list/2:






@strong{Usage:} @code{sum_list(List,N)}
@itemize @minus
@item @emph{Description:} @code{N} is the total sum of the elements of @code{List}. 
@item @emph{The following properties should hold at call time:}


@code{List} is a list of numbers.
@iftex
@hfill
@end iftex
 (@code{numlists:numlist/1})
@item @emph{The following properties should hold upon exit:}


@code{N} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sum_list/3 (pred)}}}
@temp
@end iftex
@pdindex sum_list/3 
@glindex sum_list/3 
@deffn PREDICATE sum_list/3:






@strong{Usage:} @code{sum_list(List,N0,N)}
@itemize @minus
@item @emph{Description:} @code{N} is the total sum of the elements of @code{List} plus @code{N0}. 
@item @emph{The following properties should hold at call time:}


@code{List} is a list of numbers.
@iftex
@hfill
@end iftex
 (@code{numlists:numlist/1})

@code{N0} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@item @emph{The following properties should hold upon exit:}


@code{N} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sum_list_of_lists/2 (pred)}}}
@temp
@end iftex
@pdindex sum_list_of_lists/2 
@glindex sum_list_of_lists/2 
@deffn PREDICATE sum_list_of_lists/2:






@strong{Usage:} @code{sum_list_of_lists(Lists,N)}
@itemize @minus
@item @emph{Description:} @code{N} is the total sum of the elements of the lists of @code{Lists}. 
@item @emph{The following properties should hold at call time:}


@code{List} is a list of @code{numlist}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})
@item @emph{The following properties should hold upon exit:}


@code{N} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{sum_list_of_lists/3 (pred)}}}
@temp
@end iftex
@pdindex sum_list_of_lists/3 
@glindex sum_list_of_lists/3 
@deffn PREDICATE sum_list_of_lists/3:






@strong{Usage:} @code{sum_list_of_lists(Lists,N0,N)}
@itemize @minus
@item @emph{Description:} @code{N} is the total sum of the elements of the lists of @code{Lists} plus @code{N0}. 
@item @emph{The following properties should hold at call time:}


@code{List} is a list of @code{numlist}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{N0} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@item @emph{The following properties should hold upon exit:}


@code{N} is a number.
@iftex
@hfill
@end iftex
 (@code{basic_props:num/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node Pattern (regular expression) matching, Graphs, Lists of numbers, Top
@comment node-name, next,  previous,  up
@chapter Pattern (regular expression) matching
@liindex patterns
@c -------------------------------------------------
@c WARNING: Do not edit this file (patterns.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/patterns.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.3#49 (1999/9/8, 21:8:9 MEST)

This library provides facilities for matching strings and terms against 
@coindex patterns
@glindex patterns
@emph{patterns} (i.e., 
@coindex regular expressions
@glindex regular expressions
@emph{regular expressions}).



@menu
* Usage and interface (patterns)::  
* Documentation on exports (patterns)::	 
@end menu

@node Usage and interface (patterns), Documentation on exports (patterns), Pattern (regular expression) matching, Pattern (regular expression) matching
@comment node-name, next,  previous,  up
@section Usage and interface (@code{patterns})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(patterns)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex match_pattern/2
@code{match_pattern/2}, 
@glindex match_pattern/3
@code{match_pattern/3}, 
@glindex case_insensitive_match/2
@code{case_insensitive_match/2}, 
@glindex letter_match/2
@code{letter_match/2}, 
@glindex match_pattern_pred/2
@code{match_pattern_pred/2}.


@item @emph{Regular Types:}

@glindex pattern/1
@code{pattern/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (patterns),  , Usage and interface (patterns), Pattern (regular expression) matching
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{patterns})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{match_pattern/2 (pred)}}}
@temp
@end iftex
@pdindex match_pattern/2 
@glindex match_pattern/2 
@deffn PREDICATE match_pattern/2:






@strong{Usage:} @code{match_pattern(Pattern,String)}
@itemize @minus
@item @emph{Description:} Matches @code{String} against @code{Pattern}. For example, @code{match_pattern("*.pl","foo.pl")} succeeds. 
@item @emph{The following properties should hold at call time:}


@code{Pattern} is a pattern to match against.
@iftex
@hfill
@end iftex
 (@code{patterns:pattern/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{match_pattern/3 (pred)}}}
@temp
@end iftex
@pdindex match_pattern/3 
@glindex match_pattern/3 
@deffn PREDICATE match_pattern/3:






@strong{Usage:} @code{match_pattern(Pattern,String,Tail)}
@itemize @minus
@item @emph{Description:} Matches @code{String} against @code{Pattern}. @code{Tail} is the remainder of the string after the match. For example, @code{match_pattern("??*","foo.pl",Tail)} succeeds, instantiating @code{Tail} to @code{"o.pl"}. 
@item @emph{The following properties should hold at call time:}


@code{Pattern} is a pattern to match against.
@iftex
@hfill
@end iftex
 (@code{patterns:pattern/1})

@code{String} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})

@code{Tail} is a string (a list of character codes).
@iftex
@hfill
@end iftex
 (@code{basic_props:string/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{case_insensitive_match/2 (pred)}}}
@temp
@end iftex
@pdindex case_insensitive_match/2 
@glindex case_insensitive_match/2 
@deffn PREDICATE case_insensitive_match/2:






@strong{Usage:} @code{case_insensitive_match(Pred1,Pred2)}
@itemize @minus
@item @emph{Description:} Tests if two predicates @code{Pred1} and @code{Pred2} match in a case-insensitive way. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{letter_match/2 (pred)}}}
@temp
@end iftex
@pdindex letter_match/2 
@glindex letter_match/2 
@deffn PREDICATE letter_match/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pattern/1 (regtype)}}}
@temp
@end iftex
@teindex pattern/1 
@glindex pattern/1 
@deffn REGTYPE pattern/1:



Special characters for @code{Pattern} are: 
@table @asis 
@item * 
Matches any string, including the null string. 
@item ? 
Matches any single character. 
@item [...] 
Matches any one of the enclosed characters. A pair of characters separated by a minus sign denotes a range; any character lexically between those two characters, inclusive, is matched. If the first character following the [ is a ^ then any character not enclosed is matched. No other character is special inside this construct. To include a ] in a character set, you must make it the first character. To include a `-', you must use it in a context where it cannot possibly indicate a range: that is, as the first character, or immediately after a range. 
@item | 
specifies an alternative. Two regular expressions A and B with | in between form an expression that matches anything that either A or B will match. 
@item @{...@} 
groups alternatives inside larger patterns. 
@item \ 
Quotes a special character (including itself). 
@end table 



@strong{Usage:} @code{pattern(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a pattern to match against. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{match_pattern_pred/2 (pred)}}}
@temp
@end iftex
@pdindex match_pattern_pred/2 
@glindex match_pattern_pred/2 
@deffn PREDICATE match_pattern_pred/2:






@strong{Usage:} @code{match_pattern_pred(Pred1,Pred2)}
@itemize @minus
@item @emph{Description:} Tests if two predicates @code{Pred1} and @code{Pred2} match using regular expressions. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Graphs, Unweighted graph-processing utilities, Pattern (regular expression) matching, Top
@comment node-name, next,  previous,  up
@chapter Graphs
@liindex graphs
@c -------------------------------------------------
@c WARNING: Do not edit this file (graphs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/graphs/graphs.pl
@c -------------------------------------------------

@strong{Author(s):} F. Bueno.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#83 (2000/3/23, 19:23:58 CET)





@menu
* Usage and interface (graphs)::  
* Documentation on exports (graphs)::  
* Documentation on internals (graphs)::	 
@end menu

@node Usage and interface (graphs), Documentation on exports (graphs), Graphs, Graphs
@comment node-name, next,  previous,  up
@section Usage and interface (@code{graphs})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(graphs)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex dgraph_to_ugraph/2
@code{dgraph_to_ugraph/2}, 
@glindex dlgraph_to_lgraph/2
@code{dlgraph_to_lgraph/2}, 
@glindex edges_to_ugraph/2
@code{edges_to_ugraph/2}, 
@glindex edges_to_lgraph/2
@code{edges_to_lgraph/2}.


@item @emph{Regular Types:}

@glindex dgraph/1
@code{dgraph/1}, 
@glindex dlgraph/1
@code{dlgraph/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sort
@code{sort}, 
@glindex graphs/ugraphs
@code{graphs/ugraphs}, 
@glindex graphs/lgraphs
@code{graphs/lgraphs}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (graphs), Documentation on internals (graphs), Usage and interface (graphs), Graphs
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{graphs})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dgraph/1 (regtype)}}}
@temp
@end iftex
@teindex dgraph/1 
@glindex dgraph/1 
@deffn REGTYPE dgraph/1:


@code{dgraph(Graph)}


A directed graph is a term @code{graph(V,E)} where @code{V} is a list of vertices and @code{E} is a list of edges (none necessarily sorted). Edges are pairs of vertices which are directed, i.e., @code{(a,b)} represents @code{a->b}. Two vertices @code{a} and @code{b} are equal only if @code{a==b}.


@strong{Usage:} @code{dgraph(Graph)}
@itemize @minus
@item @emph{Description:} @code{Graph} is a directed graph. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dlgraph/1 (regtype)}}}
@temp
@end iftex
@teindex dlgraph/1 
@glindex dlgraph/1 
@deffn REGTYPE dlgraph/1:


@code{dlgraph(Graph)}


A labeled directed graph is a directed graph where edges are triples of the form @code{(a,l,b)} where @code{l} is the label of the edge @code{(a,b)}.


@strong{Usage:} @code{dlgraph(Graph)}
@itemize @minus
@item @emph{Description:} @code{Graph} is a directed labeled graph. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dgraph_to_ugraph/2 (pred)}}}
@temp
@end iftex
@pdindex dgraph_to_ugraph/2 
@glindex dgraph_to_ugraph/2 
@deffn PREDICATE dgraph_to_ugraph/2:






@strong{Usage:} @code{dgraph_to_ugraph(+Graph,-UGraph)}
@itemize @minus
@item @emph{Description:} Converts @code{Graph} to @code{UGraph}. 
@item @emph{The following properties should hold at call time:}


@code{+Graph} is a directed graph.
@iftex
@hfill
@end iftex
 (@code{graphs:dgraph/1})

@code{-UGraph} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{+Graph} is a directed graph.
@iftex
@hfill
@end iftex
 (@code{graphs:dgraph/1})

@code{-UGraph} is an ugraph.
@iftex
@hfill
@end iftex
 (@code{ugraphs:ugraph/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dlgraph_to_lgraph/2 (pred)}}}
@temp
@end iftex
@pdindex dlgraph_to_lgraph/2 
@glindex dlgraph_to_lgraph/2 
@deffn PREDICATE dlgraph_to_lgraph/2:






@strong{Usage:} @code{dlgraph_to_lgraph(+Graph,-LGraph)}
@itemize @minus
@item @emph{Description:} Converts @code{Edges} to @code{LGraph}. 
@item @emph{The following properties should hold at call time:}


@code{+Graph} is a directed labeled graph.
@iftex
@hfill
@end iftex
 (@code{graphs:dlgraph/1})

@code{-LGraph} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{+Graph} is a directed labeled graph.
@iftex
@hfill
@end iftex
 (@code{graphs:dlgraph/1})

@code{-LGraph} is a labeled graph of @code{term} terms.
@iftex
@hfill
@end iftex
 (@code{lgraphs:lgraph/2})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{edges_to_ugraph/2 (pred)}}}
@temp
@end iftex
@pdindex edges_to_ugraph/2 
@glindex edges_to_ugraph/2 
@deffn PREDICATE edges_to_ugraph/2:






@strong{Usage:} @code{edges_to_ugraph(+Edges,-UGraph)}
@itemize @minus
@item @emph{Description:} Converts @code{Graph} to @code{UGraph}. 
@item @emph{The following properties should hold at call time:}


@code{+Edges} is a list of @code{pair}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{-UGraph} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{+Edges} is a list of @code{pair}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{-UGraph} is an ugraph.
@iftex
@hfill
@end iftex
 (@code{ugraphs:ugraph/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{edges_to_lgraph/2 (pred)}}}
@temp
@end iftex
@pdindex edges_to_lgraph/2 
@glindex edges_to_lgraph/2 
@deffn PREDICATE edges_to_lgraph/2:






@strong{Usage:} @code{edges_to_lgraph(+Edges,-LGraph)}
@itemize @minus
@item @emph{Description:} Converts @code{Edges} to @code{LGraph}. 
@item @emph{The following properties should hold at call time:}


@code{+Edges} is a list of @code{triple}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{-LGraph} is a free variable.
@iftex
@hfill
@end iftex
 (@code{term_typing:var/1})
@item @emph{The following properties should hold upon exit:}


@code{+Edges} is a list of @code{triple}s.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/2})

@code{-LGraph} is a labeled graph of @code{term} terms.
@iftex
@hfill
@end iftex
 (@code{lgraphs:lgraph/2})
@end itemize
@end deffn
@sp 1



@node Documentation on internals (graphs),  , Documentation on exports (graphs), Graphs
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{graphs})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pair/1 (regtype)}}}
@temp
@end iftex
@teindex pair/1 
@glindex pair/1 
@deffn REGTYPE pair/1:






@strong{Usage:} @code{pair(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a pair @code{(_,_)}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{triple/1 (regtype)}}}
@temp
@end iftex
@teindex triple/1 
@glindex triple/1 
@deffn REGTYPE triple/1:






@strong{Usage:} @code{triple(P)}
@itemize @minus
@item @emph{Description:} @code{P} is a triple @code{(_,_,_)}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Unweighted graph-processing utilities, wgraphs (library), Graphs, Top
@comment node-name, next,  previous,  up
@chapter Unweighted graph-processing utilities
@liindex ugraphs
@c -------------------------------------------------
@c WARNING: Do not edit this file (ugraphs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/graphs/ugraphs.pl
@c -------------------------------------------------

@strong{Author(s):} M. Carlsson, adapted from shared code written by Richard A O'Keefe. Mods by F.Bueno and M.Carro..

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#105 (1999/6/4, 12:24:49 MEST)

An unweighted directed graph (ugraph) is represented as a list of (vertex-neighbors) pairs, where the pairs are in standard order (as produced by keysort with unique keys) and the neighbors of each vertex are also in standard order (as produced by sort), and every neighbor appears as a vertex even if it has no neighbors itself. 

An undirected graph is represented as a directed graph where for each edge @code{(U,V)} there is a symmetric edge @code{(V,U)}. 

An edge @code{(U,V)} is represented as the term @code{U-V}. 

A vertex can be any term. Two vertices are distinct iff they are not identical (
@glindex ==/2
@code{==/2}). 

A path is represented as a list of vertices. No vertex can appear twice in a path. 





@menu
* Usage and interface (ugraphs)::  
* Documentation on exports (ugraphs)::	
@end menu

@node Usage and interface (ugraphs), Documentation on exports (ugraphs), Unweighted graph-processing utilities, Unweighted graph-processing utilities
@comment node-name, next,  previous,  up
@section Usage and interface (@code{ugraphs})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(ugraphs)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex vertices_edges_to_ugraph/3
@code{vertices_edges_to_ugraph/3}, 
@glindex neighbors/3
@code{neighbors/3}, 
@glindex edges/2
@code{edges/2}, 
@glindex del_vertices/3
@code{del_vertices/3}, 
@glindex vertices/2
@code{vertices/2}, 
@glindex add_vertices/3
@code{add_vertices/3}, 
@glindex add_edges/3
@code{add_edges/3}, 
@glindex transpose/2
@code{transpose/2}, 
@glindex point_to/3
@code{point_to/3}.


@item @emph{Regular Types:}

@glindex ugraph/1
@code{ugraph/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sets
@code{sets}, 
@glindex sort
@code{sort}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (ugraphs),  , Usage and interface (ugraphs), Unweighted graph-processing utilities
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{ugraphs})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vertices_edges_to_ugraph/3 (pred)}}}
@temp
@end iftex
@pdindex vertices_edges_to_ugraph/3 
@glindex vertices_edges_to_ugraph/3 
@deffn PREDICATE vertices_edges_to_ugraph/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{neighbors/3 (pred)}}}
@temp
@end iftex
@pdindex neighbors/3 
@glindex neighbors/3 
@deffn PREDICATE neighbors/3:






@strong{Usage:} @code{neighbors(+Vertex,+Graph,-Neighbors)}
@itemize @minus
@item @emph{Description:} Is true if @code{Vertex} is a vertex in @code{Graph} and @code{Neighbors} are its neighbors. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{edges/2 (pred)}}}
@temp
@end iftex
@pdindex edges/2 
@glindex edges/2 
@deffn PREDICATE edges/2:






@strong{Usage:} @code{edges(+Graph,-Edges)}
@itemize @minus
@item @emph{Description:} Unifies @code{Edges} with the edges in @code{Graph}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{del_vertices/3 (pred)}}}
@temp
@end iftex
@pdindex del_vertices/3 
@glindex del_vertices/3 
@deffn PREDICATE del_vertices/3:






@strong{Usage:} @code{del_vertices(+Graph1,+Vertices,-Graph2)}
@itemize @minus
@item @emph{Description:} Is true if @code{Graph2} is @code{Graph1} with @code{Vertices} and all edges to and from @code{Vertices} removed from it. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vertices/2 (pred)}}}
@temp
@end iftex
@pdindex vertices/2 
@glindex vertices/2 
@deffn PREDICATE vertices/2:






@strong{Usage:} @code{vertices(+Graph,-Vertices)}
@itemize @minus
@item @emph{Description:} Unifies @code{Vertices} with the vertices in @code{Graph}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_vertices/3 (pred)}}}
@temp
@end iftex
@pdindex add_vertices/3 
@glindex add_vertices/3 
@deffn PREDICATE add_vertices/3:






@strong{Usage:} @code{add_vertices(+Graph1,+Vertices,-Graph2)}
@itemize @minus
@item @emph{Description:} Is true if @code{Graph2} is @code{Graph1} with @code{Vertices} added to it. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{add_edges/3 (pred)}}}
@temp
@end iftex
@pdindex add_edges/3 
@glindex add_edges/3 
@deffn PREDICATE add_edges/3:






@strong{Usage:} @code{add_edges(+Graph1,+Edges,-Graph2)}
@itemize @minus
@item @emph{Description:} Is true if @code{Graph2} is @code{Graph1} with @code{Edges} and their 'to' and 'from' vertices added to it. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{transpose/2 (pred)}}}
@temp
@end iftex
@pdindex transpose/2 
@glindex transpose/2 
@deffn PREDICATE transpose/2:






@strong{Usage:} @code{transpose(+Graph,-Transpose)}
@itemize @minus
@item @emph{Description:} Is true if @code{Transpose} is the graph computed by replacing each edge @code{(u,v)} in @code{Graph} by its symmetric edge @code{(v,u)}. It can only be used one way around. The cost is O(N^2). 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{point_to/3 (pred)}}}
@temp
@end iftex
@pdindex point_to/3 
@glindex point_to/3 
@deffn PREDICATE point_to/3:






@strong{Usage:} @code{point_to(+Vertex,+Graph,-Point_to)}
@itemize @minus
@item @emph{Description:} Is true if @code{Point_to} is the list of nodes which go directly to @code{Vertex} in @code{Graph}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ugraph/1 (regtype)}}}
@temp
@end iftex
@teindex ugraph/1 
@glindex ugraph/1 
@deffn REGTYPE ugraph/1:






@strong{Usage:} @code{ugraph(Graph)}
@itemize @minus
@item @emph{Description:} @code{Graph} is an ugraph. 
@end itemize
@end deffn
@sp 1


@c (component)


@node wgraphs (library), Labeled graph-processing utilities, Unweighted graph-processing utilities, Top
@comment node-name, next,  previous,  up
@chapter wgraphs (library)
@liindex wgraphs
@c -------------------------------------------------
@c WARNING: Do not edit this file (wgraphs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/graphs/wgraphs.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (wgraphs)::  
* Documentation on exports (wgraphs)::	
@end menu

@node Usage and interface (wgraphs), Documentation on exports (wgraphs), wgraphs (library), wgraphs (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{wgraphs})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(wgraphs)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex vertices_edges_to_wgraph/3
@code{vertices_edges_to_wgraph/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sets
@code{sets}, 
@glindex sort
@code{sort}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (wgraphs),  , Usage and interface (wgraphs), wgraphs (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{wgraphs})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vertices_edges_to_wgraph/3 (pred)}}}
@temp
@end iftex
@pdindex vertices_edges_to_wgraph/3 
@glindex vertices_edges_to_wgraph/3 
@deffn PREDICATE vertices_edges_to_wgraph/3:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Labeled graph-processing utilities, queues (library), wgraphs (library), Top
@comment node-name, next,  previous,  up
@chapter Labeled graph-processing utilities
@liindex lgraphs
@c -------------------------------------------------
@c WARNING: Do not edit this file (lgraphs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/graphs/lgraphs.pl
@c -------------------------------------------------

@strong{Author(s):} F. Bueno.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


See the comments for the 
@glindex ugraphs
@code{ugraphs} library.



@menu
* Usage and interface (lgraphs)::  
* Documentation on exports (lgraphs)::	
@end menu

@node Usage and interface (lgraphs), Documentation on exports (lgraphs), Labeled graph-processing utilities, Labeled graph-processing utilities
@comment node-name, next,  previous,  up
@section Usage and interface (@code{lgraphs})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(lgraphs)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex vertices_edges_to_lgraph/3
@code{vertices_edges_to_lgraph/3}.


@item @emph{Regular Types:}

@glindex lgraph/2
@code{lgraph/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sort
@code{sort}, 
@glindex sets
@code{sets}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (lgraphs),  , Usage and interface (lgraphs), Labeled graph-processing utilities
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{lgraphs})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{lgraph/2 (regtype)}}}
@temp
@end iftex
@teindex lgraph/2 
@glindex lgraph/2 
@deffn REGTYPE lgraph/2:






@strong{Usage:} @code{lgraph(Graph,Type)}
@itemize @minus
@item @emph{Description:} @code{Graph} is a labeled graph of @code{Type} terms. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vertices_edges_to_lgraph/3 (pred)}}}
@temp
@end iftex
@pdindex vertices_edges_to_lgraph/3 
@glindex vertices_edges_to_lgraph/3 
@deffn PREDICATE vertices_edges_to_lgraph/3:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node queues (library), Random numbers, Labeled graph-processing utilities, Top
@comment node-name, next,  previous,  up
@chapter queues (library)
@liindex queues
@c -------------------------------------------------
@c WARNING: Do not edit this file (queues.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/queues.pl
@c -------------------------------------------------

@strong{Version:} 0.4#5 (1998/2/24)





@menu
* Usage and interface (queues)::  
* Documentation on exports (queues)::  
@end menu

@node Usage and interface (queues), Documentation on exports (queues), queues (library), queues (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{queues})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(queues)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex q_empty/1
@code{q_empty/1}, 
@glindex q_insert/3
@code{q_insert/3}, 
@glindex q_member/2
@code{q_member/2}, 
@glindex q_delete/3
@code{q_delete/3}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (queues),  , Usage and interface (queues), queues (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{queues})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{q_empty/1 (pred)}}}
@temp
@end iftex
@pdindex q_empty/1 
@glindex q_empty/1 
@deffn PREDICATE q_empty/1:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{q_insert/3 (pred)}}}
@temp
@end iftex
@pdindex q_insert/3 
@glindex q_insert/3 
@deffn PREDICATE q_insert/3:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{q_member/2 (pred)}}}
@temp
@end iftex
@pdindex q_member/2 
@glindex q_member/2 
@deffn PREDICATE q_member/2:



No further documentation available for this predicate.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{q_delete/3 (pred)}}}
@temp
@end iftex
@pdindex q_delete/3 
@glindex q_delete/3 
@deffn PREDICATE q_delete/3:



No further documentation available for this predicate.

@end deffn
@sp 1


@c (component)


@node Random numbers, sets (library), queues (library), Top
@comment node-name, next,  previous,  up
@chapter Random numbers
@liindex random
@c -------------------------------------------------
@c WARNING: Do not edit this file (random.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/random/random.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#150 (2000/5/24, 20:0:38 CEST)

This module provides predicates for generating pseudo-random numbers



@menu
* Usage and interface (random)::  
* Documentation on exports (random)::  
@end menu

@node Usage and interface (random), Documentation on exports (random), Random numbers, Random numbers
@comment node-name, next,  previous,  up
@section Usage and interface (@code{random})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(random)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex random/1
@code{random/1}, 
@glindex random/3
@code{random/3}, 
@glindex srandom/1
@code{srandom/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (random),  , Usage and interface (random), Random numbers
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{random})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{random/1 (pred)}}}
@temp
@end iftex
@pdindex random/1 
@glindex random/1 
@deffn PREDICATE random/1:


@code{random(Number)}


@code{Number} is a (pseudo-) random number in the range [0.0,1.0]

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{random/3 (pred)}}}
@temp
@end iftex
@pdindex random/3 
@glindex random/3 
@deffn PREDICATE random/3:


@code{random(Low,Up,Number)}


@code{Number} is a (pseudo-) random number in the range [@code{Low}, @code{Up}]


@strong{Usage 1:} @code{random(+int,+int,-int)}
@itemize @minus
@item @emph{Description:} If @code{Low} and @code{Up} are integers, @code{Number} is an integer. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{srandom/1 (pred)}}}
@temp
@end iftex
@pdindex srandom/1 
@glindex srandom/1 
@deffn PREDICATE srandom/1:


@code{srandom(Seed)}


Changes the sequence of pseudo-random numbers according to @code{Seed}. The stating sequence of numbers generated can be duplicated by calling the predicate with @code{Seed} unbound (the sequence depends on the OS).

@end deffn
@sp 1


@c (component)


@node sets (library), Variable name dictionaries, Random numbers, Top
@comment node-name, next,  previous,  up
@chapter sets (library)
@liindex sets
@c -------------------------------------------------
@c WARNING: Do not edit this file (sets.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/lib/sets.pl
@c -------------------------------------------------

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.9#17 (1999/3/23, 20:57:20 MET)

This module implements set operations. Sets are just ordered lists.



@menu
* Usage and interface (sets)::	
* Documentation on exports (sets)::  
@end menu

@node Usage and interface (sets), Documentation on exports (sets), sets (library), sets (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{sets})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(sets)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex insert/3
@code{insert/3}, 
@glindex ord_delete/3
@code{ord_delete/3}, 
@glindex ord_member/2
@code{ord_member/2}, 
@glindex ord_test_member/3
@code{ord_test_member/3}, 
@glindex ord_subtract/3
@code{ord_subtract/3}, 
@glindex ord_intersection/3
@code{ord_intersection/3}, 
@glindex ord_intersection_diff/4
@code{ord_intersection_diff/4}, 
@glindex ord_intersect/2
@code{ord_intersect/2}, 
@glindex ord_subset/2
@code{ord_subset/2}, 
@glindex ord_subset_diff/3
@code{ord_subset_diff/3}, 
@glindex ord_union/3
@code{ord_union/3}, 
@glindex ord_union_diff/4
@code{ord_union_diff/4}, 
@glindex ord_union_symdiff/4
@code{ord_union_symdiff/4}, 
@glindex ord_union_change/3
@code{ord_union_change/3}, 
@glindex merge/3
@code{merge/3}, 
@glindex ord_disjoint/2
@code{ord_disjoint/2}, 
@glindex setproduct/3
@code{setproduct/3}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sort
@code{sort}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (sets),  , Usage and interface (sets), sets (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{sets})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{insert/3 (pred)}}}
@temp
@end iftex
@pdindex insert/3 
@glindex insert/3 
@deffn PREDICATE insert/3:






@strong{Usage:} @code{insert(+Set1,+Element,-Set2)}
@itemize @minus
@item @emph{Description:} It is true when @code{Set2} is @code{Set1} with @code{Element} inserted in it, preserving the order. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_delete/3 (pred)}}}
@temp
@end iftex
@pdindex ord_delete/3 
@glindex ord_delete/3 
@deffn PREDICATE ord_delete/3:






@strong{Usage:} @code{ord_delete(+Set0,+X,-Set)}
@itemize @minus
@item @emph{Description:} It succeeds if @code{Set} is @code{Set0} without element @code{X}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_member/2 (pred)}}}
@temp
@end iftex
@pdindex ord_member/2 
@glindex ord_member/2 
@deffn PREDICATE ord_member/2:






@strong{Usage:} @code{ord_member(+X,+Set)}
@itemize @minus
@item @emph{Description:} It succeeds if @code{X} is member of @code{Set}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_test_member/3 (pred)}}}
@temp
@end iftex
@pdindex ord_test_member/3 
@glindex ord_test_member/3 
@deffn PREDICATE ord_test_member/3:






@strong{Usage:} @code{ord_test_member(+Set,+X,-Result)}
@itemize @minus
@item @emph{Description:} If @code{X} is member of @code{Set} then @code{Result}=@code{yes}. Otherwise @code{Result}=@code{no}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_subtract/3 (pred)}}}
@temp
@end iftex
@pdindex ord_subtract/3 
@glindex ord_subtract/3 
@deffn PREDICATE ord_subtract/3:






@strong{Usage:} @code{ord_subtract(+Set1,+Set2,?(Difference))}
@itemize @minus
@item @emph{Description:} It is true when @code{Difference} contains all and only the elements of @code{Set1} which are not also in @code{Set2}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_intersection/3 (pred)}}}
@temp
@end iftex
@pdindex ord_intersection/3 
@glindex ord_intersection/3 
@deffn PREDICATE ord_intersection/3:






@strong{Usage:} @code{ord_intersection(+Set1,+Set2,?(Intersection))}
@itemize @minus
@item @emph{Description:} It is true when @code{Intersection} is the ordered representation of @code{Set1} and @code{Set2}, provided that @code{Set1} and @code{Set2} are ordered lists. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_intersection_diff/4 (pred)}}}
@temp
@end iftex
@pdindex ord_intersection_diff/4 
@glindex ord_intersection_diff/4 
@deffn PREDICATE ord_intersection_diff/4:






@strong{Usage:} @code{ord_intersection_diff(+Set1,+Set2,-Intersect,-NotIntersect)}
@itemize @minus
@item @emph{Description:} @code{Intersect} contains those elements which are both in @code{Set1} and @code{Set2}, and @code{NotIntersect} those which are in @code{Set1} but not in @code{Set2}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_intersect/2 (pred)}}}
@temp
@end iftex
@pdindex ord_intersect/2 
@glindex ord_intersect/2 
@deffn PREDICATE ord_intersect/2:






@strong{Usage:} @code{ord_intersect(+Xs,+Ys)}
@itemize @minus
@item @emph{Description:} Succeeds when the two ordered lists have at least one element in common. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_subset/2 (pred)}}}
@temp
@end iftex
@pdindex ord_subset/2 
@glindex ord_subset/2 
@deffn PREDICATE ord_subset/2:






@strong{Usage:} @code{ord_subset(+Xs,+Ys)}
@itemize @minus
@item @emph{Description:} Succeeds when every element of @code{Xs} appears in @code{Ys}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_subset_diff/3 (pred)}}}
@temp
@end iftex
@pdindex ord_subset_diff/3 
@glindex ord_subset_diff/3 
@deffn PREDICATE ord_subset_diff/3:






@strong{Usage:} @code{ord_subset_diff(+Set1,+Set2,-Difference)}
@itemize @minus
@item @emph{Description:} It succeeds when every element of @code{Set1} appears in @code{Set2} and @code{Difference} has the elements of @code{Set2} which are not in @code{Set1}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_union/3 (pred)}}}
@temp
@end iftex
@pdindex ord_union/3 
@glindex ord_union/3 
@deffn PREDICATE ord_union/3:






@strong{Usage:} @code{ord_union(+Set1,+Set2,?(Union))}
@itemize @minus
@item @emph{Description:} It is true when @code{Union} is the union of @code{Set1} and @code{Set2}. When some element occurs in both sets, @code{Union} retains only one copy. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_union_diff/4 (pred)}}}
@temp
@end iftex
@pdindex ord_union_diff/4 
@glindex ord_union_diff/4 
@deffn PREDICATE ord_union_diff/4:






@strong{Usage:} @code{ord_union_diff(+Set1,+Set2,-Union,-Difference)}
@itemize @minus
@item @emph{Description:} It succeeds when @code{Union} is the union of @code{Set1} and @code{Set2}, and @code{Difference} is @code{Set2} set-minus @code{Set1}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_union_symdiff/4 (pred)}}}
@temp
@end iftex
@pdindex ord_union_symdiff/4 
@glindex ord_union_symdiff/4 
@deffn PREDICATE ord_union_symdiff/4:






@strong{Usage:} @code{ord_union_symdiff(+Set1,+Set2,-Union,-Diff)}
@itemize @minus
@item @emph{Description:} It is true when Diff is the symmetric difference of Set1 and Set2, and Union is the union of Set1 and Set2. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_union_change/3 (pred)}}}
@temp
@end iftex
@pdindex ord_union_change/3 
@glindex ord_union_change/3 
@deffn PREDICATE ord_union_change/3:






@strong{Usage:} @code{ord_union_change(+Set1,+Set2,-Union)}
@itemize @minus
@item @emph{Description:} @code{Union} is the union of @code{Set1} and @code{Set2} and @code{Union} is different from @code{Set2}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{merge/3 (pred)}}}
@temp
@end iftex
@pdindex merge/3 
@glindex merge/3 
@deffn PREDICATE merge/3:






@strong{Usage:} @code{merge(+Set1,+Set2,?(Union))}
@itemize @minus
@item @emph{Description:} See @code{ord_union/3}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ord_disjoint/2 (pred)}}}
@temp
@end iftex
@pdindex ord_disjoint/2 
@glindex ord_disjoint/2 
@deffn PREDICATE ord_disjoint/2:






@strong{Usage:} @code{ord_disjoint(+Set1,+Set2)}
@itemize @minus
@item @emph{Description:} @code{Set1} and @code{Set2} have no element in common. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{setproduct/3 (pred)}}}
@temp
@end iftex
@pdindex setproduct/3 
@glindex setproduct/3 
@deffn PREDICATE setproduct/3:






@strong{Usage:} @code{setproduct(+Set1,+Set2,-Product)}
@itemize @minus
@item @emph{Description:} @code{Product} has all two element sets such that one element is in @code{Set1} and the other in @code{set2}, except that if the same element belongs to both, then the corresponding one element set is in @code{Product}. 
@end itemize
@end deffn
@sp 1


@c (component)


@node Variable name dictionaries, *** PART X - Miscellaneous standalone utilities, sets (library), Top
@comment node-name, next,  previous,  up
@chapter Variable name dictionaries
@liindex vndict
@c -------------------------------------------------
@c WARNING: Do not edit this file (vndict.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/vndict.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 0.8#19 (1998/12/3, 12:53:16 MET)





@menu
* Usage and interface (vndict)::  
* Documentation on exports (vndict)::  
@end menu

@node Usage and interface (vndict), Documentation on exports (vndict), Variable name dictionaries, Variable name dictionaries
@comment node-name, next,  previous,  up
@section Usage and interface (@code{vndict})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(vndict)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex create_dict/2
@code{create_dict/2}, 
@glindex complete_dict/3
@code{complete_dict/3}, 
@glindex complete_vars_dict/3
@code{complete_vars_dict/3}, 
@glindex prune_dict/3
@code{prune_dict/3}, 
@glindex dict2varnamesl/2
@code{dict2varnamesl/2}, 
@glindex varnamesl2dict/2
@code{varnamesl2dict/2}, 
@glindex find_name/4
@code{find_name/4}, 
@glindex rename/2
@code{rename/2}, 
@glindex vars_names_dict/3
@code{vars_names_dict/3}.


@item @emph{Regular Types:}

@glindex null_dict/1
@code{null_dict/1}, 
@glindex varname/1
@code{varname/1}, 
@glindex varnamesl/1
@code{varnamesl/1}, 
@glindex varnamedict/1
@code{varnamedict/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex idlists
@code{idlists}, 
@glindex metaterms
@code{metaterms}, 
@glindex sets
@code{sets}, 
@glindex sort
@code{sort}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (vndict),  , Usage and interface (vndict), Variable name dictionaries
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{vndict})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{null_dict/1 (regtype)}}}
@temp
@end iftex
@teindex null_dict/1 
@glindex null_dict/1 
@deffn REGTYPE null_dict/1:






@strong{Usage:} @code{null_dict(D)}
@itemize @minus
@item @emph{Description:} @code{D} is an empty dictionary. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{create_dict/2 (pred)}}}
@temp
@end iftex
@pdindex create_dict/2 
@glindex create_dict/2 
@deffn PREDICATE create_dict/2:






@strong{Usage:} @code{create_dict(Term,Dict)}
@itemize @minus
@item @emph{Description:} @code{Dict} has names for all variables in @code{Term}. 
@item @emph{The following properties should hold at call time:}


@code{Term} is any term.
@iftex
@hfill
@end iftex
 (@code{basic_props:term/1})
@item @emph{The following properties should hold upon exit:}


@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamedict/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{complete_dict/3 (pred)}}}
@temp
@end iftex
@pdindex complete_dict/3 
@glindex complete_dict/3 
@deffn PREDICATE complete_dict/3:






@strong{Usage:} @code{complete_dict(+Dict,+Term,-NewDict)}
@itemize @minus
@item @emph{Description:} @code{NewDict} is @code{Dict} augmented with the variables of @code{Term} not yet in @code{Dict}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{complete_vars_dict/3 (pred)}}}
@temp
@end iftex
@pdindex complete_vars_dict/3 
@glindex complete_vars_dict/3 
@deffn PREDICATE complete_vars_dict/3:






@strong{Usage:} @code{complete_vars_dict(+Dict,+Vars,-NewDict)}
@itemize @minus
@item @emph{Description:} @code{NewDict} is @code{Dict} augmented with the variables of the list @code{Vars} not yet in @code{Dict}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prune_dict/3 (pred)}}}
@temp
@end iftex
@pdindex prune_dict/3 
@glindex prune_dict/3 
@deffn PREDICATE prune_dict/3:






@strong{Usage:} @code{prune_dict(+Term,+Dict,-NewDict)}
@itemize @minus
@item @emph{Description:} @code{NewDict} is @code{Dict} reduced to just the variables of @code{Term}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{dict2varnamesl/2 (pred)}}}
@temp
@end iftex
@pdindex dict2varnamesl/2 
@glindex dict2varnamesl/2 
@deffn PREDICATE dict2varnamesl/2:






@strong{Usage:} @code{dict2varnamesl(Dict,VNs)}
@itemize @minus
@item @emph{Description:} Translates @code{Dict} to @code{VNs}. 
@item @emph{The following properties should hold at call time:}


@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamedict/1})
@item @emph{The following properties should hold upon exit:}


@code{VNs} is a list of @code{Name=Var}, for a variable @code{Var} and its name @code{Name}.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamesl/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{varnamesl2dict/2 (pred)}}}
@temp
@end iftex
@pdindex varnamesl2dict/2 
@glindex varnamesl2dict/2 
@deffn PREDICATE varnamesl2dict/2:






@strong{Usage:} @code{varnamesl2dict(VNs,Dict)}
@itemize @minus
@item @emph{Description:} Translates @code{VNs} to @code{Dict}. 
@item @emph{The following properties should hold at call time:}


@code{VNs} is a list of @code{Name=Var}, for a variable @code{Var} and its name @code{Name}.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamesl/1})
@item @emph{The following properties should hold upon exit:}


@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamedict/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{find_name/4 (pred)}}}
@temp
@end iftex
@pdindex find_name/4 
@glindex find_name/4 
@deffn PREDICATE find_name/4:


@code{find_name(Vars,Names,V,Name)}


Given that @code{vars_names_dict(Dict,Vars,Names)} holds, it acts as @code{rename(X,Dict)}, but the name of @code{X} is given as @code{Name} instead of unified with it.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{rename/2 (pred)}}}
@temp
@end iftex
@pdindex rename/2 
@glindex rename/2 
@deffn PREDICATE rename/2:






@strong{Usage:} @code{rename(Term,Dict)}
@itemize @minus
@item @emph{Description:} Unifies each variable in @code{Term} with its name in @code{Dict}. If no name is found, a new name is created. 
@item @emph{The following properties should hold at call time:}


@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamedict/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{varname/1 (regtype)}}}
@temp
@end iftex
@teindex varname/1 
@glindex varname/1 
@deffn REGTYPE varname/1:






@strong{Usage:} @code{varname(N)}
@itemize @minus
@item @emph{Description:} @code{N} is term representing a variable name. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{varnamesl/1 (regtype)}}}
@temp
@end iftex
@teindex varnamesl/1 
@glindex varnamesl/1 
@deffn REGTYPE varnamesl/1:






@strong{Usage:} @code{varnamesl(D)}
@itemize @minus
@item @emph{Description:} @code{D} is a list of @code{Name=Var}, for a variable @code{Var} and its name @code{Name}. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{varnamedict/1 (regtype)}}}
@temp
@end iftex
@teindex varnamedict/1 
@glindex varnamedict/1 
@deffn REGTYPE varnamedict/1:






@strong{Usage:} @code{varnamedict(D)}
@itemize @minus
@item @emph{Description:} @code{D} is a dictionary of variable names. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vars_names_dict/3 (pred)}}}
@temp
@end iftex
@pdindex vars_names_dict/3 
@glindex vars_names_dict/3 
@deffn PREDICATE vars_names_dict/3:






@strong{Usage:} @code{vars_names_dict(Dict,Vars,Names)}
@itemize @minus
@item @emph{Description:} @code{Varss} is a sorted list of variables, and @code{Names} is a list of their names, which correspond in the same order. 
@item @emph{Call and exit should be @emph{compatible} with:}


@code{Dict} is a dictionary of variable names.
@iftex
@hfill
@end iftex
 (@code{vndict:varnamedict/1})

@code{Vars} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})

@code{Names} is a list.
@iftex
@hfill
@end iftex
 (@code{basic_props:list/1})
@end itemize
@end deffn
@sp 1


@c (component)


@node *** PART X - Miscellaneous standalone utilities, A Program to Help Cleaning your Directories , Variable name dictionaries, Top
@comment node-name, next,  previous,  up
@unnumbered PART X - Miscellaneous standalone utilities
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (ciao-utilities.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/ciao-utilities.pl
@c -------------------------------------------------

@strong{Author(s):} @email{clip@@clip.dia.fi.upm.es}, @uref{http://www.clip.dia.fi.upm.es/}, The CLIP Group, School of Computer Science, Technical University of Madrid.


This is the documentation for a set of miscellaneous 
@glindex standalone utilities
standalone utilities contained in the @code{etc} directory of the Ciao distribution. 



@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node A Program to Help Cleaning your Directories , Printing the declarations and code in a file, *** PART X - Miscellaneous standalone utilities, Top
@comment node-name, next,  previous,  up
@chapter A Program to Help Cleaning your Directories 
@c -------------------------------------------------
@c WARNING: Do not edit this file (cleandirs.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/cleandirs.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro.

@strong{Version:} 0.1#2 (2000/6/1, 17:57:19 CEST)

A simple program for traversing a directory tree and deciding which files may be deleted in order to save space and not to loose information. 



@menu
* Usage (cleandirs)::		
* Known bugs and planned improvements (cleandirs)::  
@end menu

@node Usage (cleandirs), Known bugs and planned improvements (cleandirs), A Program to Help Cleaning your Directories , A Program to Help Cleaning your Directories
@comment node-name, next,  previous,  up
@section Usage (cleandirs) 


@smallexample 
   
cleandirs: <initial_dir> <delete_options> <backup_options>
cleandirs explores <initial_dir> (which should be an absolute path)
and looks for backup files and files which can be generated from other
files, using a plausible heuristic aimed at retaining the same amount
of information while recovering some disk space.  The heuristic is
based on the extension of the filename.

Delete options is one of:
   --list: just list the files/directories which are amenable to be deleted,
           but do not delete them. SAFE.
    --ask: list the files/directories and ask for deletion. UNSAFE if you
           make a mistake.
 --delete: just delete the files/directories without asking.  I envy your
           brave soul if you choose this option.

Backup options is one of:
 --includebackups: include backup files in the list of files to check.
 --excludebackups: do not include backup files in the list of files to check.
    --onlybackups: include only backup files in the list of files to check.

Symbolic links are not traversed.  Special files are not checked.


   @end smallexample  
 
Invoking the program with no arguments will return an up-to-date information on the options.



@node Known bugs and planned improvements (cleandirs),  , Usage (cleandirs), A Program to Help Cleaning your Directories
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{cleandirs})

@itemize @bullet{}

@item
Recursive removal of subdirectories relies on the existence of a recursive /bin/rm command in your system.
@end itemize

@c (component)


@node Printing the declarations and code in a file, Printing the contents of a bytecode file, A Program to Help Cleaning your Directories , Top
@comment node-name, next,  previous,  up
@chapter Printing the declarations and code in a file
@c -------------------------------------------------
@c WARNING: Do not edit this file (fileinfo.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/fileinfo.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo.

@strong{Version:} 0.5#6 (1999/4/15, 20:33:6 MEST)

A simple program for 
@glindex printing assertion information
printing assertion information (
@glindex predicate declarations
predicate declarations, 
@glindex property declarations
property declarations, 
@glindex type declarations
type declarations, etc.) and 
@glindex printing code-related information
printing code-related information (
@glindex imports
imports, 
@glindex exports
exports, 
@glindex libraries used
libraries used, etc.) on a file. The file should be a single CIAO or Prolog source file. It uses the CIAO compiler's pass one to do it. This program is specially useful for example to check what the compiler is actually seeing after syntactic expansions, as well as for checking what assertions the 
@glindex assertion normalizer
assertion normalizer is producing from the original assertions in the file. 



@menu
* Usage (fileinfo)::		
* More detailed explanation of options (fileinfo)::  
@end menu

@node Usage (fileinfo), More detailed explanation of options (fileinfo), Printing the declarations and code in a file, Printing the declarations and code in a file
@comment node-name, next,  previous,  up
@section Usage (fileinfo) 


@smallexample 
   
    fileinfo -asr <filename.asr> 
       : pretty prints the contents of <filename.asr> 

    fileinfo [-v] [-m] <-a|-c|-e> <filename> [libdir1] ... [libdirN]
    -v : verbose output (e.g., lists all files read)
    -m : restrict info to current module
    -a : print assertions 
    -c : print code and interface (imports/exports, etc.)
    -e : print only errors - useful to check syntax of assertions in file

    fileinfo -h
       : print this information

   @end smallexample  



@node More detailed explanation of options (fileinfo),  , Usage (fileinfo), Printing the declarations and code in a file
@comment node-name, next,  previous,  up
@section More detailed explanation of options (fileinfo) 

 
@itemize @bullet{} 


@item If the @code{-a} option is selected, @code{fileinfo} prints the assertions (only code-oriented assertions -- not comment-oriented assertions) in the file @emph{after normalization}. If the @code{-c} option is selected @code{fileinfo} prints the file interface, the declarations contained in the file, and the actual code. If the @code{-e} option is selected @code{fileinfo} prints only any sintactic and import-export errors found in the file, including the assertions. 


@item @code{filename} must be the name of a Prolog or CIAO source file. 


@item This filename can be followed by other arguments which will be taken to be library directory paths in which to look for files used by the file being analyzed. 


@item If the @code{-m} option is selected, only the information related to the current module is printed. 


@item The @code{-v} option produces verbose output. This is very useful for debugging, since all the files accessed during assertion normalization are listed. 


@item In the @code{-asr} usage, 
@glindex fileinfo
@code{fileinfo} can be used to print the contents of a @code{.asr} file in human-readable form. 


@end itemize  



@c (component)


@node Printing the contents of a bytecode file, Crossed-references of a program, Printing the declarations and code in a file, Top
@comment node-name, next,  previous,  up
@chapter Printing the contents of a bytecode file
@c -------------------------------------------------
@c WARNING: Do not edit this file (viewpo.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/viewpo.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza.

@strong{Version:} 0.5#2 (1999/11/11, 19:20:50 MET)

This simple program takes as an argument a bytecode (.po) file and prints out in symbolic form the information contained in the file. It uses compiler and engine builtins to do so, so that it keeps track with changes in bytecode format. 



@menu
* Usage (viewpo)::		
@end menu

@node Usage (viewpo),  , Printing the contents of a bytecode file, Printing the contents of a bytecode file
@comment node-name, next,  previous,  up
@section Usage (viewpo) 


@smallexample 
   
	viewpo <file1>.po
	   : print .po contents in symbolic form

	viewpo -h
	   : print this information

   @end smallexample  




@c (component)


@node Crossed-references of a program, Gathering the dependent files for a file, Printing the contents of a bytecode file, Top
@comment node-name, next,  previous,  up
@chapter Crossed-references of a program
@c -------------------------------------------------
@c WARNING: Do not edit this file (xrefs_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/library/xrefs/doc/xrefs_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno.


The @code{xrefs} crossed-references Ciao library includes several modules which allow displaying crossed-references of the code in a program. Crossed-references identify modules which import code from other modules, or files (be them modules or not) which use code in other files. Crossed-references can be obtained as a term representing a graph, displayed graphically (using daVinci, a graph displayer developed by U. of Bremen, Germany), or printed as a list. 

The libraries involved are as follows: 
@itemize @bullet{} 
@item 
@glindex etc(xmrefs)
@code{etc(xmrefs)} displays a graph of crossed-references between modules using daVinci, 
@item 
@glindex etc(xfrefs)
@code{etc(xfrefs)} displays a graph of crossed-references between files using daVinci, 
@item 
@glindex library(xrefs)
@code{library(xrefs)} obtains a graph of crossed-references between files, 
@item 
@glindex library('xrefs/mrefs')
@code{library('xrefs/mrefs')} obtains a graph of crossed-references between modules, 
@item 
@glindex library('xrefs/pxrefs')
@code{library('xrefs/pxrefs')} prints a list of crossed-references between files. 
@end itemize  
The first two are intended to be used by loading in 
@glindex ciaosh
@code{ciaosh}. The other three are intended to be used as modules within an application. 

The following is an example graph of the library modules involved in the crossed-references application. It has been obtained with: 
@smallexample 
[ciao/etc]> ciaosh
Ciao-Prolog 1.5 #24: Tue Dec 28 14:12:11 CET 1999
?- use_module(xmrefs).

yes
?- set_flag(X).

X = 3 ? 

yes
?- set_files([xfrefs, xmrefs,
              library(xrefs),
              library('xrefs/mrefs'),
              library('xrefs/pxrefs'),
              library('xrefs/xrefs2graph'),
              library('xrefs/xrefsbuild'),
              library('xrefs/xrefsread')
	     ]).

yes
?- xmrefs.

        @end smallexample  
@noindent
so that it is displayed by daVinci as: 

@image{autofigxmgraph} 

The following is an example graph of the same module files, where crossed-references have been obtained with @code{xfrefs:xfrefs(whodefs)} instead of @code{xmrefs:xmrefs}: 

@image{autofigxfgraph} 

For more information refer to the xrefs documentation (@code{xrefs_doc.dvi}) in the source library of the Ciao distribution.


@c (component)


@node Gathering the dependent files for a file, Finding differences between two Prolog files, Crossed-references of a program, Top
@comment node-name, next,  previous,  up
@chapter Gathering the dependent files for a file
@c -------------------------------------------------
@c WARNING: Do not edit this file (get_deps.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/get_deps.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.0#6 (1998/11/5, 13:56:58 MET)

This simple program takes a single Ciao or Prolog source filename (which is typically the main file of an application). It prints out the list of all the 
@glindex dependent files
dependent files, i.e., all files needed in order to build the application, including those which reside in libraries. This is particularly useful in Makefiles, for 
@glindex building standalone distributions
building standalone distributions (e.g., 
@glindex .tar files
.tar files) automatically. 

The filename should be followed by other arguments which will be taken to be library directory paths in which to look for files used by the file being analyzed. 



@menu
* Usage (get_deps)::		
@end menu

@node Usage (get_deps),  , Gathering the dependent files for a file, Gathering the dependent files for a file
@comment node-name, next,  previous,  up
@section Usage (get_deps) 


@smallexample 
   
	get_deps [-u <filename>] <filename> [lib_dir1] ... [lib_dirN]
           : return dependent files for <filename> 
             found in [lib_dir1] ... [lib_dirN]

	get_deps -h
           : print this information

   @end smallexample  




@c (component)


@node Finding differences between two Prolog files, The Ciao lpmake scripting facility, Gathering the dependent files for a file, Top
@comment node-name, next,  previous,  up
@chapter Finding differences between two Prolog files
@c -------------------------------------------------
@c WARNING: Do not edit this file (pldiff.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/pldiff.pl
@c -------------------------------------------------

@strong{Author(s):} Francisco Bueno.


This simple program works like the good old diff but for files that contain Prolog code. It prints out the clauses that it finds are different in the files. Its use avoids textual differences such as different variable names and different formatting of the code in the files. 



@menu
* Usage (pldiff)::		
* Known bugs and planned improvements (pldiff)::  
@end menu

@node Usage (pldiff), Known bugs and planned improvements (pldiff), Finding differences between two Prolog files, Finding differences between two Prolog files
@comment node-name, next,  previous,  up
@section Usage (pldiff) 


@smallexample 
   
	pldiff <file1> <file2>
	   : find differences 

	pldiff -h
	   : print this information

   @end smallexample  

but you can also use the program as a library and invoke the predicate: 


@smallexample 
   pldiff( <filename> , <filename> )
   @end smallexample  




@node Known bugs and planned improvements (pldiff),  , Usage (pldiff), Finding differences between two Prolog files
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{pldiff})

@itemize @bullet{}

@item
Currently uses variant/2 to compare clauses. This is useful, but there should be an option to select the way clauses are compared, e.g., some form of equivalence defined by the user.
@end itemize

@c (component)


@node The Ciao lpmake scripting facility, Find out which architecture we are running on, Finding differences between two Prolog files, Top
@comment node-name, next,  previous,  up
@chapter The Ciao lpmake scripting facility
@c -------------------------------------------------
@c WARNING: Do not edit this file (lpmake.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/lpmake.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo.


 

@strong{Note:} 
@glindex lpmake
@code{lpmake} and the 
@glindex make
@code{make} library are still under active development, and they may change substantially in future releases. 


@glindex lpmake
@code{lpmake} is a Ciao application which uses the Ciao 
@glindex make
@code{make} library to implement a dependency-driven scripts in a similar way to the Unix 
@glindex make
@code{make} facility. 

The original purpose of the Unix 
@glindex make
@code{make} utility was to determine automatically which pieces of a large program needed to be recompiled, and issue the commands to recompile them. In fact, 
@glindex make
@code{make} is often used for many other purposes: it can be used to describe any task where some files must be updated automatically from others whenever the others change. 

To prepare to use 
@glindex lpmake
@code{lpmake}, you must write a file (typically called 
@glindex Makefile.pl
@code{Makefile.pl}) that describes the relationships among files in your program or application, and states the commands for updating each file. In a program, typically the executable file is updated from object files, which are in turn made by compiling source files. 

Once a suitable makefile exists, each time you change some source files, simply typing @code{lpmake} suffices to perform all necessary recompilations. The 
@glindex make
@code{make} program uses the makefile data base and the last modification times of the files to decide which of the files need to be updated. For each of those files, it issues the commands recorded in the data base. 


@glindex lpmake
@code{lpmake} executes commands in the 
@glindex Makefile.pl
@code{Makefile.pl} to update one or more target @emph{names}, where @emph{name} is typically a program, but can also be a file to be generated or even a ``virtual'' target. If no @code{-l} or @code{-m} options are present, 
@glindex lpmake
@code{lpmake} will look for the makefile 
@glindex Makefile.pl
@code{Makefile.pl}. 


@glindex lpmake
@code{lpmake} updates a target if it depends on prerequisite files that have been modified since the target was last modified, or if the target does not exist. 

You can provide command line arguments to 
@glindex lpmake
@code{lpmake} to control which files should be regenerated, or how. 

@strong{Note:} if you use 
@glindex make
@code{make} and 
@glindex functions
@code{functions}, then 
@glindex make
@code{make} should appear before 
@glindex functions
@code{functions} in the list of packages. 




@c (component)


@node Find out which architecture we are running on, *** PART XI - Contributed libraries, The Ciao lpmake scripting facility, Top
@comment node-name, next,  previous,  up
@chapter Find out which architecture we are running on
@c -------------------------------------------------
@c WARNING: Do not edit this file (ciao_get_arch_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/etc/ciao_get_arch_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Robert Manchek.

@strong{Version:} 0.0#1 (2000/5/8, 20:27:7 CEST)

The architecure and operating system the engine is compiled for determines whether we can use or not certain libraries. This script, taken from a PVM distribution, uses a heuristic (which may need to be tuned from time to time) to find out the platform. It returns a string which is used throughout the engine (in #ifdefs) to enable/disable certain characteristics. 



@menu
* Usage (ciao_get_arch)::	
* More details::		
@end menu

@node Usage (ciao_get_arch), More details, Find out which architecture we are running on, Find out which architecture we are running on
@comment node-name, next,  previous,  up
@section Usage (ciao_get_arch) 


@smallexample 
   Usage: ciao_get_arch
   @end smallexample  



@node More details,  , Usage (ciao_get_arch), Find out which architecture we are running on
@comment node-name, next,  previous,  up
@section More details 

Look at the script itself... 




@c (component)


@node *** PART XI - Contributed libraries, Programming MYCIN rules, Find out which architecture we are running on, Top
@comment node-name, next,  previous,  up
@unnumbered PART XI - Contributed libraries
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (Contrib.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/Contrib.pl
@c -------------------------------------------------



@coindex contributed libraries
@glindex contributed libraries 
This part includes a number of libraries which have contributed by users of the Ciao system. Over time, some of these libraries are moved to the main library directories of the system. 

@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node Programming MYCIN rules, A Chart Library, *** PART XI - Contributed libraries, Top
@comment node-name, next,  previous,  up
@chapter Programming MYCIN rules
@liindex mycin
@c -------------------------------------------------
@c WARNING: Do not edit this file (mycin_doc.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/mycin/mycin_doc.pl
@c -------------------------------------------------

@strong{Author(s):} Angel Fernandez Pineda.

@strong{Version:} 1.5#172 (2000/7/12, 16:45:31 CEST)

@strong{Version of last change:} 1.5#59 (2000/2/29, 14:51:54 CET)

MYCIN databases are declared as Prolog modules containing mycin rules. Those rules are given a 
@coindex certainty factor
@glindex certainty factor
@emph{certainty factor} (@emph{CF}) which denotates an expert's credibility on that rule: 
@itemize @bullet{} 


@item A value of -1 stands for @emph{surely not}. 


@item A value of 1 stands for @emph{certainly}. 


@item A value of 0 stands for @emph{I don't know}. 


@end itemize  

Intermediate values are allowed. 

Mycin rules work on a different way as Prolog clauses: a rule will never fail (in the Prolog sense), it will return a certainty value instead. As a consequence @strong{all} mycin rules will be explored during inference, so the order in which rules are written is not significant. For this reason, the usage of the Prolog @emph{cut} (!) is discouraged. 



@menu
* Usage and interface (mycin)::	 
* Documentation on new declarations (mycin)::  
* Known bugs and planned improvements (mycin)::	 
@end menu

@node Usage and interface (mycin), Documentation on new declarations (mycin), Programming MYCIN rules, Programming MYCIN rules
@comment node-name, next,  previous,  up
@section Usage and interface (@code{mycin})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

In order to declare a mycin database you must include the following declaration as the first one in your file: 
@smallexample  
           :- mycin(MycinDataBaseName).
@end smallexample  


@item @strong{New declarations defined:}

@glindex export/1
@code{export/1}.

@end itemize
@end cartouche


@node Documentation on new declarations (mycin), Known bugs and planned improvements (mycin), Usage and interface (mycin), Programming MYCIN rules
@comment node-name, next,  previous,  up
@section Documentation on new declarations (@code{mycin})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{export/1 (decl)}}}
@temp
@end iftex
@deindex export/1 
@glindex export/1 
@deffn DECLARATION export/1:



This directive allows a given mycin predicate to be called from Prolog programs. The way in which mycin rules are called departs from Prolog ones. For instance, the followin mycin predicate: 
@smallexample 
:- export p/1.
@end smallexample  

must be called from Prolog Programs as: @code{mycin(p(X),CF)}, where CF will be binded to the resulting 
@glindex certainty factor
certainty factor. Obviously, the variables on @emph{P/1} may be instantiated as you wish. Since the Prolog predicate @emph{mycin/2} may be imported from several mycin databases, it is recommended to fully qualify those predicate goals. For example : @code{mydatabase:mycin(p(X),CF)}. 


@strong{Usage:} :- @code{export(Spec)}.
@itemize @minus
@item @emph{Description:} @code{Spec} will be a callable mycin predicate. 
@end itemize
@end deffn
@sp 1



@node Known bugs and planned improvements (mycin),  , Documentation on new declarations (mycin), Programming MYCIN rules
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{mycin})

@itemize @bullet{}

@item
Not fully implemented.

@item
Dynamic mycin predicates not implemented: open question.

@item
Importation of user-defined mycin predicates requires further design. This includes importation of mycin databases from another mycin database.
@end itemize

@c (component)


@node A Chart Library, Low level Interface between Prolog and blt, Programming MYCIN rules, Top
@comment node-name, next,  previous,  up
@chapter A Chart Library
@liindex chartlib
@c -------------------------------------------------
@c WARNING: Do not edit this file (chartlib.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/chartlib.pl
@c -------------------------------------------------

@strong{Author(s):} Isabel Mart@'{@dotless{i}}n Garc@'{@dotless{i}}a.


This library is intended to eaose the task of displaying some graphical results. This library allows the programmer to visualize different graphs and tables without knowing anything about specific graphical packages. 

You need to install the BLT package in your computer. BLT is an extension to the Tk toolkit and it does not require any patching of the Tcl or Tk source files. You can find it in @uref{http://www.tcltk.com/blt/index.html} 

Basically, when the user invokes a predicate, the library (internally) creates a bltwish interpreter and passes the information through a socket to display the required widget. The interpreter parses the received commands and executes them. 

The predicates exported by this library can be classified in four main groups, according to the types of representation they provide. 


@itemize @bullet{} 


@item bar charts 


@item line graphs 


@item scatter graphs 


@item tables 
@end itemize  

To represent graphs, the Cartesian coordinate system is used. I have tried to show simple samples for every library exported predicate in order to indicate how to call them. 



@menu
* Bar charts::			
* Line graphs::			
* Scatter graphs::		
* Tables::			
* Overview of widgets::		
* Usage and interface (chartlib)::  
* Documentation on exports (chartlib)::	 
@end menu

@node Bar charts, Line graphs, A Chart Library, A Chart Library
@comment node-name, next,  previous,  up
@section Bar charts 

In this section we shall introduce the general issues about the set of barchart predicates. By calling the predicates that pertain to this group a bar chart for plotting two-dimensional data (X-Y coordinates) can be created. A bar chart is a graphic means of comparing numbers by displaying bars of lengths proportional to the y-coordinates they represented. The barchart widget has many configurable options such as title, header text, legend and so on. You can configure the appearance of the bars as well. The bar chart widget has the following components: 


@table @asis 


@item Header text 

The text displayed at the top of the window. If it is @code{''} no text will be displayed. 


@item Save button 
The button placed below the header text. Pops up a dialog box for the user to select a file to save the graphic in PostScript format.@footnote{Limitation: Some printers can have problems if the PostScript file is too complex (i.e. too many points/lines appear in the picture).} 


@item Bar chart title 
The title of the graph. It is displayed at the top of the bar chart graph. If text is @code{''} no title will be displayed. 


@item X axis title 
X axis title. If text is @code{''} no x axis title will be displayed. 


@item Y axis title 
Y axis title. If text is @code{''} no y axis title will be displayed. 


@item X axis 
X coordinate axis. The x axis is drawn at the bottom margin of the bar chart graph. The x axis consists of the axis line, ticks and tick labels. Tick labels can be numbers or plain text. If the labels are numbers, they could be displayed at uniform intervals (the numbers are treated as normal text) or depending on its x-coodinate value. You can also set limits (maximum and minimum) for the x axis, but only if the tick labels are numeric. 


@item Y axis 
Y coordinate axis. You can set limits (maximum and minimum) for the y axis. The y axis is drawn at the right margin of the bar chart graph.The y axis consists of the axis line, ticks and tick labels. The tick labels are numeric values determined from the data and are drawn at uniform intervals. 


@item Bar chart graph 
This is the plotting area, placed in the center of the window and surrounded by the axes, the axis titles and the legend (if any). The range of the axes controls what region of the data is plotted. By default, the minimum and maximum limits are determined from the data, but you can set them (as mentioned before). Data points outside the minimum and maximum value of the axes are not plotted. 


@item Legend 
The legend displays the name and symbol of each bar. The legend is placed in the right margin of the Bar chart graph. 


@item Footer text 
Text displayed at the lower part of the window. If text is @code{''} no header text will be displayed. 


@item Quit button 
Button placed below the footer text. Click it to close the window. 


@end table  

All of them are arranged in a window. However you can, for example, show a bar chart window without legend or header text. Other configuration options will be explained later. 

In addition to the window appearance there is another important issue about the bar chart window, namely its behaviour in response to user actions. The association user actions to response is called @emph{bindings}. The main bindings currently specified are the following: 


@table @asis 


@item Default bindings 
Those are well known by most users. They are related to the frame displayed around the window. As you know, you can interactively move, resize, close, iconify, deiconify, send to another desktop etc. a window. 


@item Bindings related to bar chart graph and its legend 
Clicking the left mouse key over a legend element, the corresponding bar turns out into red. After clicking again, the bar toggles to its original look. In addition, you can do zoom-in by pressing the left mouse key over the bar chart graph and dragging to select an area. To zoom out simply press the right mouse button. 

When the pointer passes over the plotting area the cross hairs are drawn. The cross hairs consists of two intersecting lines (one vertical and one horizontal). Besides, if the pointer is over a legend element, its background changes. 


@item Bindings related to buttons 
There are two buttons in the main widget. Clicking the mouse on the Save button a "Save as" dialog box is popped up. The user can select a file to save the graph. If the user choose a file that already exists, the dialog box prompts the user for confirmation on whether the existing file should be overwritten or not. Furthermore, you can close the widget by clicking on the Quit button. 

When the pointer passes over a button the button color changes. 


@end table  

The predicates that belong to this group are those whose names begin with @strong{barchart} and @strong{genmultibar}. If you take a look at the predicate names that pertain to this group, you will notice that they are not self-explanatory. It would have been better to name the predicates in a way that allows the user to identify the predicate features by its name, but it would bring about very long names (i.e barchart_WithoutLegend_BarsAtUniformIntervals_RandomBarsColors). For this reason I decided to simply add a number after barchart to name them. 



@node Line graphs, Scatter graphs, Bar charts, A Chart Library
@comment node-name, next,  previous,  up
@section Line graphs 

It is frequently the case that several datasets need to be displayed on the same plot. If so, you may wish to distinguish the points in different datasets by joining them by lines of different color, or by plotting with symbols of different types. This set of predicates allows the programmer to represent two-dimensional data (X-Y coordinates). Each dataset contains x and y vectors containing the coordinates of the data. You can configure the appearance of the points and the lines which the points are connected with. The configurable line graph components are: 


@table @asis 


@item line graph 
This is the plotting area, placed in the center of the window and surrounded by the axes, the axes titles and the legend (if any). The range of the axes controls what region of the data is plotted. By default, the minimum and maximum limits are determined from the data, but you can set them. Data points outside the minimum and maximum value of the axes are not plotted. You can specify how connecting line segments joining successive datapoints are drawn by setting the @code{Smooth} argument. Smooth can be either linear, step, natural and quadratic. Furthermore, you can select the appearance of the points and lines. 


@item Legend 
The legend displays the name and symbol of each line. The legend is placed in the right margin of the graph. 
 
@end table  

The elements header, footer, quit and save buttons, the titles and the axes are quite similar to those in barchart graphs, except in that the tick labels will be numbers. All of them are arranged in a window by the geometry manager. However you can, as we mentioned in the above paragraphs, show a line graph window without any titles or footer text. Other configuration options will be explained later in this section or in the corresponding modules. 

Related to the behaviour of the widgets in response to user actions (bindings) we will remark the following features: 


@table @asis 


@item Bindings related to line graph and its legend 
Clicking the left mouse key over a legend element, the corresponding line turns out into blue. Repeating the action reverts the line to its original color. Moreover, you can do zoom-in by clicking the left mouse key over the bar chart graph and dragging a rectangle defining the area you want to zoom in. To zoom out simply press the right mouse button. 

When the pointer passes over the plotting area the cross hairs are drawn. The cross hairs consists of two intersecting lines (one vertical and one horizontal). Besides, if the pointer is over a legend element, its background changes. 


@item Other bindings
The default bindings and the bindings related to the save and quit buttons are similar to those in the bar chart graphs. 
 
@end table  

The predicates that belong to this group are those whose names begin with @strong{graph_}. 
 



@node Scatter graphs, Tables, Line graphs, A Chart Library
@comment node-name, next,  previous,  up
@section Scatter graphs 

The challenge of this section is to introduce some general aspects about the scatter graph predicates group. By invoking the scatter graph predicates the user can represent two-dimensional point datasets. Often you need to display one or several point datasets on the same plot. If so, you may wish to distinguish the points that pertain to different datasets by using plotting symbols of different types, or by displaying them in different colors. This set of predicates allows you to represent two-dimensional data (X-Y coordinates). Each dataset contains x and y vectors containing the coordinates of the data. You can configure the appearance of the points. The configurable scatter graph components are: 


@table @asis 


@item scatter graph 
This is the plotting area, placed in the center of the window and surrounded by the axes, the axes titles and the legend (if any). The range of the axes controls what region of the data is plotted. By default, the minimum and maximum limits are determined from the data, but you can set them (as we mentioned before). Data points outside the minimum and maximum value of the axes are not plotted. The user can select the appearance of the points. 


@item Legend 
The legend displays the name and symbol of each point dataset. The legend is drawn in the right margin of the graph. 
 
@end table  

The elements header, footer, quit and save buttons, the titles and the axes are similar to those in barchart graphs except for that, as in line graphs, the tick labels will be numbers. All of them are arranged in a window by the geometry manager. However you can, for example, show a scatter graph window without titles or footer text, as we mentioned before. Other configuration options will be explained later, in the corresponding modules. 

Related to the behaviour of the widgets in response to user actions (bindings) the following features are: 


@table @asis 
 
@item Bindings related to scatter graph and its legend 
Clicking the left mouse key over a legend element, the points which belong to the corresponding dataset turn out into blue. Repeating the action toggles the point dataset to its original color. Moreover, you can do zoom-in by clicking the left mouse key over the bar chart graph and dragging a rectangle defining the area you want to zoom-in on. To do zoom-out simply press the right mouse button. 

When the pointer passes over the plotting area the cross hairs are drawn. The cross hairs consists of two intersecting lines (one vertical and one horizontal). Besides, if the pointer is over a legend element, its background changes. 


@item Other bindings 
The default bindings and the bindings related to the save and quit buttons are similar to those in the bar chart graphs. 


@end table  
 
The predicates that belong to this group are those whose names began with @strong{scattergraph_}. 



@node Tables, Overview of widgets, Scatter graphs, A Chart Library
@comment node-name, next,  previous,  up
@section Tables 

The purpose of this section is to allow the user to display results in a table. A table is a regular structure in which: 


@itemize @bullet{} 


@item Every row has the same number of columns, or 


@item Every column has the same number of rows. 


@end itemize  

The widget configurable components are as follows: 


@table @asis 


@item Title 

Title of the widget, it is displayed centered at the top of the canvas. If text is @code{''} no title will be displayed. 


@item Header text 

Left centered text displayed bellow the title. If text is @code{''} no header text will be displayed. 


@item Table 

Is placed in the center of the window. The table is composed by cells ordered in rows and columns. The cell values can be either any kind of text or numbers and they can be empty as well (see the type definition in the corresponding chapter module). A table is a list of lists. Each sublist is a row, so every sublist in the table must contain the same number of alements. 


@item Footer text 

Left centered text displayed at the lower part of the window. If text is @code{''} no header text will be displayed. 


@item Quit button 

Button placed below the footer text. You can click it to close the window. 


@end table  

If the arguments are not in a correct format an exception will be thrown. Moreover, these widgets have the default bindings and the binding related to the quit button: 
 
The set of predicates that belongs to this group are those which names begin with @strong{table_widget}. 
 

@node Overview of widgets, Usage and interface (chartlib), Tables, A Chart Library
@comment node-name, next,  previous,  up
@section Overview of widgets 
 
Although you don't have to worry about how to arrange the widgets, here is an overview of how Tcl-tk, the underlying graphical system currently used by chartlib, performs this task. Quoting from the book @emph{Tcl and Tk toolkit}, John K. Ousterhout. 

The X Window System provides many facilities for manipulating windows in displays. The root window may have any number of child windows, each of wich is called a top-level window. Top-level windows may have children of their own, wich may have also children, and so on. The descendants of top-level windows are called internal windows. Internal windows are usedfor individual controls such as buttons, text entries, and for grouping controls together. An X-application tipically manages several top-level windows. Tk uses X to implement a set of controls with the Motif look and feel. These controls are called widgets. Each widget is implemented using one X window, and the terms "window" and "widget" will be used interchangeably in this document. As with windows, widgets are nested in hierarchical structures. In this library top-level widgets (nonleaf or main) are just containers for organizing and arranging the leaf widgets (components). Thereby, the barchart widget is a top-level window wich contains some widget components. 

Probably the most painstaking aspect of building a graphical application is getting the placement and size of the widgets just right. It usually takes many iterations to align widgets and adjust their spacing. That's because managing the geometry of widgets is simply not a packing problem, but also graphical design problem. Attributes such as alignment, symmetry, and balance are more important than minimizing the amount of space used for packing. Tk is similar to other X toolkits in that it does not allow widgets to determine their own geometries. A widget will not even appeared unless it is managed by a geometry manager. This separation of geometry management from internal widget behaviour allows multiple geometry managers to exist simultaneously and permits any widget to be used with any geometry manager. A geometry manager's job is to arrange one or more @emph{slave} widgets relative to a @emph{master} widgets. There are some geometry managers in Tk such as pack, place and canvas widget. We will use another one call table.



The table geometry manager arranges widgets in a table. It's easy to align widgets (horizontally and vertically) or to create empty space to balance the arrangement of the widgets. Widgets (called slaves in the Tk parlance) are arranged inside a containing widget (called the master). Widgets are positioned at row,column locations and may span any number of rows or columns. More than one widget can occupy a single location. The placement of widget windows determines both the size and arrangement of the table. The table queries the requested size of each widget. The requested size of a widget is the natural size of the widget (before the widget is shrunk or expanded). The height of each row and the width of each column is the largest widget spanning that row or column. The size of the table is in turn the sum of the row and column sizes. This is the table's normal size. The total number of rows and columns in a table is determined from the indices specified. The table grows dynamically as windows are added at larger indices. 



@node Usage and interface (chartlib), Documentation on exports (chartlib), Overview of widgets, A Chart Library
@comment node-name, next,  previous,  up
@section Usage and interface (@code{chartlib})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(chartlib)).}

@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/genbar2
@code{chartlib/genbar2}, 
@glindex chartlib/genbar3
@code{chartlib/genbar3}, 
@glindex chartlib/genbar4
@code{chartlib/genbar4}, 
@glindex chartlib/genmultibar
@code{chartlib/genmultibar}, 
@glindex chartlib/table_widget1
@code{chartlib/table_widget1}, 
@glindex chartlib/table_widget2
@code{chartlib/table_widget2}, 
@glindex chartlib/table_widget3
@code{chartlib/table_widget3}, 
@glindex chartlib/table_widget4
@code{chartlib/table_widget4}, 
@glindex chartlib/gengraph1
@code{chartlib/gengraph1}, 
@glindex chartlib/gengraph2
@code{chartlib/gengraph2}, 
@glindex chartlib/chartlib_errhandle
@code{chartlib/chartlib_errhandle}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (chartlib),  , Usage and interface (chartlib), A Chart Library
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{chartlib})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart1/7 (udreexp)}}}
@temp
@end iftex
@glindex barchart1/7 
@deffn (UNDOC_REEXPORT) barchart1/7:



 Imported from 
@glindex genbar1
@code{genbar1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart1/9 (udreexp)}}}
@temp
@end iftex
@glindex barchart1/9 
@deffn (UNDOC_REEXPORT) barchart1/9:



 Imported from 
@glindex genbar1
@code{genbar1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart1/7 (udreexp)}}}
@temp
@end iftex
@glindex percentbarchart1/7 
@deffn (UNDOC_REEXPORT) percentbarchart1/7:



 Imported from 
@glindex genbar1
@code{genbar1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart2/7 (udreexp)}}}
@temp
@end iftex
@glindex barchart2/7 
@deffn (UNDOC_REEXPORT) barchart2/7:



 Imported from 
@glindex genbar2
@code{genbar2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart2/11 (udreexp)}}}
@temp
@end iftex
@glindex barchart2/11 
@deffn (UNDOC_REEXPORT) barchart2/11:



 Imported from 
@glindex genbar2
@code{genbar2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart2/7 (udreexp)}}}
@temp
@end iftex
@glindex percentbarchart2/7 
@deffn (UNDOC_REEXPORT) percentbarchart2/7:



 Imported from 
@glindex genbar2
@code{genbar2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart3/7 (udreexp)}}}
@temp
@end iftex
@glindex barchart3/7 
@deffn (UNDOC_REEXPORT) barchart3/7:



 Imported from 
@glindex genbar3
@code{genbar3} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart3/9 (udreexp)}}}
@temp
@end iftex
@glindex barchart3/9 
@deffn (UNDOC_REEXPORT) barchart3/9:



 Imported from 
@glindex genbar3
@code{genbar3} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart3/7 (udreexp)}}}
@temp
@end iftex
@glindex percentbarchart3/7 
@deffn (UNDOC_REEXPORT) percentbarchart3/7:



 Imported from 
@glindex genbar3
@code{genbar3} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart4/7 (udreexp)}}}
@temp
@end iftex
@glindex barchart4/7 
@deffn (UNDOC_REEXPORT) barchart4/7:



 Imported from 
@glindex genbar4
@code{genbar4} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart4/11 (udreexp)}}}
@temp
@end iftex
@glindex barchart4/11 
@deffn (UNDOC_REEXPORT) barchart4/11:



 Imported from 
@glindex genbar4
@code{genbar4} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart4/7 (udreexp)}}}
@temp
@end iftex
@glindex percentbarchart4/7 
@deffn (UNDOC_REEXPORT) percentbarchart4/7:



 Imported from 
@glindex genbar4
@code{genbar4} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{multibarchart/8 (udreexp)}}}
@temp
@end iftex
@glindex multibarchart/8 
@deffn (UNDOC_REEXPORT) multibarchart/8:



 Imported from 
@glindex genmultibar
@code{genmultibar} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{multibarchart/10 (udreexp)}}}
@temp
@end iftex
@glindex multibarchart/10 
@deffn (UNDOC_REEXPORT) multibarchart/10:



 Imported from 
@glindex genmultibar
@code{genmultibar} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget1/4 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget1/4 
@deffn (UNDOC_REEXPORT) tablewidget1/4:



 Imported from 
@glindex table_widget1
@code{table_widget1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget1/5 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget1/5 
@deffn (UNDOC_REEXPORT) tablewidget1/5:



 Imported from 
@glindex table_widget1
@code{table_widget1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget2/4 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget2/4 
@deffn (UNDOC_REEXPORT) tablewidget2/4:



 Imported from 
@glindex table_widget2
@code{table_widget2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget2/5 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget2/5 
@deffn (UNDOC_REEXPORT) tablewidget2/5:



 Imported from 
@glindex table_widget2
@code{table_widget2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget3/4 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget3/4 
@deffn (UNDOC_REEXPORT) tablewidget3/4:



 Imported from 
@glindex table_widget3
@code{table_widget3} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget3/5 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget3/5 
@deffn (UNDOC_REEXPORT) tablewidget3/5:



 Imported from 
@glindex table_widget3
@code{table_widget3} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget4/4 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget4/4 
@deffn (UNDOC_REEXPORT) tablewidget4/4:



 Imported from 
@glindex table_widget4
@code{table_widget4} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget4/5 (udreexp)}}}
@temp
@end iftex
@glindex tablewidget4/5 
@deffn (UNDOC_REEXPORT) tablewidget4/5:



 Imported from 
@glindex table_widget4
@code{table_widget4} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b1/9 (udreexp)}}}
@temp
@end iftex
@glindex graph_b1/9 
@deffn (UNDOC_REEXPORT) graph_b1/9:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b1/13 (udreexp)}}}
@temp
@end iftex
@glindex graph_b1/13 
@deffn (UNDOC_REEXPORT) graph_b1/13:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w1/9 (udreexp)}}}
@temp
@end iftex
@glindex graph_w1/9 
@deffn (UNDOC_REEXPORT) graph_w1/9:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w1/13 (udreexp)}}}
@temp
@end iftex
@glindex graph_w1/13 
@deffn (UNDOC_REEXPORT) graph_w1/13:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b1/8 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_b1/8 
@deffn (UNDOC_REEXPORT) scattergraph_b1/8:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b1/12 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_b1/12 
@deffn (UNDOC_REEXPORT) scattergraph_b1/12:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w1/8 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_w1/8 
@deffn (UNDOC_REEXPORT) scattergraph_w1/8:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w1/12 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_w1/12 
@deffn (UNDOC_REEXPORT) scattergraph_w1/12:



 Imported from 
@glindex gengraph1
@code{gengraph1} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b2/9 (udreexp)}}}
@temp
@end iftex
@glindex graph_b2/9 
@deffn (UNDOC_REEXPORT) graph_b2/9:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b2/13 (udreexp)}}}
@temp
@end iftex
@glindex graph_b2/13 
@deffn (UNDOC_REEXPORT) graph_b2/13:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w2/9 (udreexp)}}}
@temp
@end iftex
@glindex graph_w2/9 
@deffn (UNDOC_REEXPORT) graph_w2/9:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w2/13 (udreexp)}}}
@temp
@end iftex
@glindex graph_w2/13 
@deffn (UNDOC_REEXPORT) graph_w2/13:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b2/8 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_b2/8 
@deffn (UNDOC_REEXPORT) scattergraph_b2/8:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b2/12 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_b2/12 
@deffn (UNDOC_REEXPORT) scattergraph_b2/12:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w2/8 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_w2/8 
@deffn (UNDOC_REEXPORT) scattergraph_w2/8:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w2/12 (udreexp)}}}
@temp
@end iftex
@glindex scattergraph_w2/12 
@deffn (UNDOC_REEXPORT) scattergraph_w2/12:



 Imported from 
@glindex gengraph2
@code{gengraph2} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{chartlib_text_error_protect/1 (udreexp)}}}
@temp
@end iftex
@glindex chartlib_text_error_protect/1 
@deffn (UNDOC_REEXPORT) chartlib_text_error_protect/1:



 Imported from 
@glindex chartlib_errhandle
@code{chartlib_errhandle} (see the corresponding documentation for details).

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{chartlib_visual_error_protect/1 (udreexp)}}}
@temp
@end iftex
@glindex chartlib_visual_error_protect/1 
@deffn (UNDOC_REEXPORT) chartlib_visual_error_protect/1:



 Imported from 
@glindex chartlib_errhandle
@code{chartlib_errhandle} (see the corresponding documentation for details).

@end deffn
@sp 1


@c (component)


@node Low level Interface between Prolog and blt, chartlib_errhandle (library), A Chart Library, Top
@comment node-name, next,  previous,  up
@chapter Low level Interface between Prolog and blt
@liindex bltclass
@c -------------------------------------------------
@c WARNING: Do not edit this file (bltclass.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/bltclass.pl
@c -------------------------------------------------


This module exports some predicates to interact with Tcl-tk, particularly with the bltwish program. Bltwish is a windowing shell consisting of the Tcl command languaje, the Tk toolkit plus the additional commands that comes with the BLT library and a main program that reads commands. It creates a main window and then processes Tcl commands. 





@menu
* Usage and interface (bltclass)::  
* Documentation on exports (bltclass)::	 
@end menu

@node Usage and interface (bltclass), Documentation on exports (bltclass), Low level Interface between Prolog and blt, Low level Interface between Prolog and blt
@comment node-name, next,  previous,  up
@section Usage and interface (@code{bltclass})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(bltclass)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex new_interp/1
@code{new_interp/1}, 
@glindex tcltk_raw_code/2
@code{tcltk_raw_code/2}, 
@glindex interp_file/2
@code{interp_file/2}.


@item @emph{Regular Types:}

@glindex bltwish_interp/1
@code{bltwish_interp/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex sockets/sockets
@code{sockets/sockets}, 
@glindex system
@code{system}, 
@glindex write
@code{write}, 
@glindex read
@code{read}, 
@glindex strings
@code{strings}, 
@glindex format
@code{format}, 
@glindex terms
@code{terms}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (bltclass),  , Usage and interface (bltclass), Low level Interface between Prolog and blt
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{bltclass})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{new_interp/1 (pred)}}}
@temp
@end iftex
@pdindex new_interp/1 
@glindex new_interp/1 
@deffn PREDICATE new_interp/1:


@code{new_interp(Interp)}


Creates a bltwish interprter and returns a socket. The socket allows the comunication between Prolog and Tcl-tk. Thus, bltwish receives the commands through the socket. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tcltk_raw_code/2 (pred)}}}
@temp
@end iftex
@pdindex tcltk_raw_code/2 
@glindex tcltk_raw_code/2 
@deffn PREDICATE tcltk_raw_code/2:


@code{tcltk_raw_code(Command_Line,Interp)}


Sends a command line to the interpreter. Tcl-tk parses and executes it. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{bltwish_interp/1 (regtype)}}}
@temp
@end iftex
@teindex bltwish_interp/1 
@glindex bltwish_interp/1 
@deffn REGTYPE bltwish_interp/1:


@code{bltwish_interp(Interp)}


This type defines a bltwish interpreter. In fact, the bltwish interpreter receives the commands through the socket created. 
@smallexample 
bltwish_interp(Interp) :-
        stream(Interp).
@end smallexample  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{interp_file/2 (pred)}}}
@temp
@end iftex
@pdindex interp_file/2 
@glindex interp_file/2 
@deffn PREDICATE interp_file/2:


@code{interp_file(File,Interp)}


Sends the script file (File) to the interpreter through the socket. A script file is a file that contains commands that Tcl-tk can execute. 



@end deffn
@sp 1


@c (component)


@node chartlib_errhandle (library), Color and Pattern Library, Low level Interface between Prolog and blt, Top
@comment node-name, next,  previous,  up
@chapter chartlib_errhandle (library)
@liindex chartlib_errhandle
@c -------------------------------------------------
@c WARNING: Do not edit this file (chartlib_errhandle.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/chartlib_errhandle.pl
@c -------------------------------------------------


This module is an error handler. If the format of the arguments is not correct in a call to a chartlib predicate an exception will be thrown . You can wrap the chartlib predicates with the predicates exported by this module to handle automatically the errors if any. 





@menu
* Usage and interface (chartlib_errhandle)::  
* Documentation on exports (chartlib_errhandle)::  
* Documentation on internals (chartlib_errhandle)::  
@end menu

@node Usage and interface (chartlib_errhandle), Documentation on exports (chartlib_errhandle), chartlib_errhandle (library), chartlib_errhandle (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{chartlib_errhandle})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(chartlib_errhandle)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex chartlib_text_error_protect/1
@code{chartlib_text_error_protect/1}, 
@glindex chartlib_visual_error_protect/1
@code{chartlib_visual_error_protect/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (chartlib_errhandle), Documentation on internals (chartlib_errhandle), Usage and interface (chartlib_errhandle), chartlib_errhandle (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{chartlib_errhandle})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{chartlib_text_error_protect/1 (pred)}}}
@temp
@end iftex
@pdindex chartlib_text_error_protect/1 
@glindex chartlib_text_error_protect/1 
@deffn PREDICATE chartlib_text_error_protect/1:


@code{chartlib_text_error_protect(G)}


This predicate catches the thrown exception and sends it to the appropiate handler. The handler will show the error message in the standard output. 




@emph{Meta-predicate} with arguments: @code{chartlib_text_error_protect(goal)}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{chartlib_visual_error_protect/1 (pred)}}}
@temp
@end iftex
@pdindex chartlib_visual_error_protect/1 
@glindex chartlib_visual_error_protect/1 
@deffn PREDICATE chartlib_visual_error_protect/1:


@code{chartlib_visual_error_protect(G)}


This predicate catches the thrown exception and sends it to the appropiate handler. The handler will pop up a message box. 




@emph{Meta-predicate} with arguments: @code{chartlib_visual_error_protect(goal)}.

@end deffn
@sp 1



@node Documentation on internals (chartlib_errhandle),  , Documentation on exports (chartlib_errhandle), chartlib_errhandle (library)
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{chartlib_errhandle})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{handler_type/1 (regtype)}}}
@temp
@end iftex
@teindex handler_type/1 
@glindex handler_type/1 
@deffn REGTYPE handler_type/1:


@code{handler_type(X)}


The library chartlib includes two error handlers already programmed. 
@smallexample 
handler_type(text).
handler_type(visual).
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error_message/2 (pred)}}}
@temp
@end iftex
@pdindex error_message/2 
@glindex error_message/2 
@deffn PREDICATE error_message/2:


@code{error_message(ErrorCode,ErrorMessage)}


Binds the error code with its corresponding text message. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{error_file/2 (pred)}}}
@temp
@end iftex
@pdindex error_file/2 
@glindex error_file/2 
@deffn PREDICATE error_file/2:


@code{error_file(ErrorCode,ErrorFile)}


Binds the error code with its corresponding script error file. 



@end deffn
@sp 1


@c (component)


@node Color and Pattern Library, genbar1 (library), chartlib_errhandle (library), Top
@comment node-name, next,  previous,  up
@chapter Color and Pattern Library
@liindex color_pattern
@c -------------------------------------------------
@c WARNING: Do not edit this file (color_pattern.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/color_pattern.pl
@c -------------------------------------------------


This module contains predicates to access and check conformance to the available colors and patterns.



@menu
* Usage and interface (color_pattern)::	 
* Documentation on exports (color_pattern)::  
@end menu

@node Usage and interface (color_pattern), Documentation on exports (color_pattern), Color and Pattern Library, Color and Pattern Library
@comment node-name, next,  previous,  up
@section Usage and interface (@code{color_pattern})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(color_pattern)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex color/2
@code{color/2}, 
@glindex pattern/2
@code{pattern/2}, 
@glindex random_color/1
@code{random_color/1}, 
@glindex random_lightcolor/1
@code{random_lightcolor/1}, 
@glindex random_darkcolor/1
@code{random_darkcolor/1}, 
@glindex random_pattern/1
@code{random_pattern/1}.


@item @emph{Regular Types:}

@glindex color/1
@code{color/1}, 
@glindex pattern/1
@code{pattern/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (color_pattern),  , Usage and interface (color_pattern), Color and Pattern Library
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{color_pattern})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{color/1 (regtype)}}}
@temp
@end iftex
@teindex color/1 
@glindex color/1 
@deffn REGTYPE color/1:


@code{color(Color)}



@smallexample 
color('GreenYellow').
color('Yellow').
color('White').
color('Wheat').
color('BlueViolet').
color('Violet').
color('MediumTurquoise').
color('DarkTurquoise').
color('Turquoise').
color('Thistle').
color('Tan').
color('Sienna').
color('Salmon').
color('VioletRed').
color('OrangeRed').
color('MediumVioletRed').
color('IndianRed').
color('Red').
color('Plum').
color('Pink').
color('MediumOrchid').
color('DarkOrchid').
color('Orchid').
color('Orange').
color('Maroon').
color('Magenta').
color('Khaki').
color('Grey').
color('LightGray').
color('DimGray').
color('DarkSlateGray').
color('YellowGreen').
color('SpringGreen').
color('SeaGreen').
color('PaleGreen').
color('MediumSpringGreen').
color('MediumSeaGreen').
color('LimeGreen').
color('ForestGreen').
color('DarkOliveGreen').
color('DarkGreen').
color('Green').
color('Goldenrod').
color('Gold').
color('Brown').
color('Firebrick').
color('Cyan').
color('Coral').
color('SteelBlue').
color('SlateBlue').
color('SkyBlue').
color('Navy').
color('MidnightBlue').
color('MediumSlateBlue').
color('MediumBlue').
color('LightSteelBlue').
color('LightBlue').
color('DarkSlateBlue').
color('CornflowerBlue').
color('CadetBlue').
color('Blue').
color('Black').
color('MediumAquamarine').
color('Aquamarine').
@end smallexample 
Defines available colors for elements such as points, lines or bars. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{color/2 (pred)}}}
@temp
@end iftex
@pdindex color/2 
@glindex color/2 
@deffn PREDICATE color/2:






@strong{Usage:} @code{color(C1,C2)}
@itemize @minus
@item @emph{Description:} Test whether the color @code{C1} is a valid color or not. If @code{C1} is a variable the predicate will choose a valid color randomly. If @code{C1} is a ground term that is not a valid color an exception (error9) will be thrown 
@item @emph{The following properties should hold at call time:}


@code{color_pattern:color(C1)}
@iftex
@hfill
@end iftex
 (@code{color_pattern:color/1})
@item @emph{The following properties should hold upon exit:}


@code{color_pattern:color(C2)}
@iftex
@hfill
@end iftex
 (@code{color_pattern:color/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pattern/1 (regtype)}}}
@temp
@end iftex
@teindex pattern/1 
@glindex pattern/1 
@deffn REGTYPE pattern/1:


@code{pattern(Pattern)}



@smallexample 
pattern(pattern1).
pattern(pattern2).
pattern(pattern3).
pattern(pattern4).
pattern(pattern5).
pattern(pattern6).
pattern(pattern7).
pattern(pattern8).
pattern(pattern9).
@end smallexample 
Defines valid patterns used in the stipple style bar attribute. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{pattern/2 (pred)}}}
@temp
@end iftex
@pdindex pattern/2 
@glindex pattern/2 
@deffn PREDICATE pattern/2:






@strong{Usage:} @code{pattern(P1,P2)}
@itemize @minus
@item @emph{Description:} Test whether the pattern @code{P1} is a valid pattern or not. If @code{P1} is a variable the predicate will choose a valid pattern randomly. If @code{P1} is a ground term that is not a valid pattern an exception (error10) will be thrown. 
@item @emph{The following properties should hold at call time:}


@code{color_pattern:pattern(P1)}
@iftex
@hfill
@end iftex
 (@code{color_pattern:pattern/1})
@item @emph{The following properties should hold upon exit:}


@code{color_pattern:pattern(P2)}
@iftex
@hfill
@end iftex
 (@code{color_pattern:pattern/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{random_color/1 (pred)}}}
@temp
@end iftex
@pdindex random_color/1 
@glindex random_color/1 
@deffn PREDICATE random_color/1:


@code{random_color(Color)}


This predicate choose a valid color among the availables randomly. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{random_lightcolor/1 (pred)}}}
@temp
@end iftex
@pdindex random_lightcolor/1 
@glindex random_lightcolor/1 
@deffn PREDICATE random_lightcolor/1:


@code{random_lightcolor(Color)}


This predicate choose a valid light color among the availables randomly. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{random_darkcolor/1 (pred)}}}
@temp
@end iftex
@pdindex random_darkcolor/1 
@glindex random_darkcolor/1 
@deffn PREDICATE random_darkcolor/1:


@code{random_darkcolor(Color)}


This predicate choose a valid dark color among the availables randomly. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{random_pattern/1 (pred)}}}
@temp
@end iftex
@pdindex random_pattern/1 
@glindex random_pattern/1 
@deffn PREDICATE random_pattern/1:


@code{random_pattern(Pattern)}


This predicate choose a valid pattern among the availables randomly. 



@end deffn
@sp 1


@c (component)


@node genbar1 (library), genbar2 (library), Color and Pattern Library, Top
@comment node-name, next,  previous,  up
@chapter genbar1 (library)
@liindex genbar1
@c -------------------------------------------------
@c WARNING: Do not edit this file (genbar1.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/genbar1.pl
@c -------------------------------------------------


This module defines predicates to show barchart widgets. The three predicates exported by this module plot two-variable data as regular bars in a window. They all share the following features: 


@itemize @bullet{} 


@item No numeric values for the @code{x} axis are needed because they will be interpreted as labels. See 
@glindex xbarelement1/1
@code{xbarelement1/1} definition type. 


@item The bars will be displayed at uniform intervals. 


@item The user can either select the appearance of the bars (background color, foreground color and stipple style) or not. See the 
@glindex xbarelement1
@code{xbarelement1} type definition. Thus, the user can call each predicate in two ways. 


@item The bar chart has a legend. One entry (symbol and label) per bar. 


@item If you don't want to display text in the elements header, barchart title, x axis title, y axis title or footer, simply type @code{''} as the value of the argument. 


@item The predicates test whether the format of the arguments is correct. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contains elements but are not correct, the exception @code{error1} or @code{error3} will be thrown, depending on the error type. @code{error1} means that @code{XVector} and @code{YVector} do not contain the same number of elements and @code{error3} indicates that not all the @code{XVector} elements contain a correct number of attributes . 


@end itemize  


@noindent
Particular features will be pointed out in the corresponding predicate. 





@menu
* Usage and interface (genbar1)::  
* Documentation on exports (genbar1)::	
* Documentation on internals (genbar1)::  
@end menu

@node Usage and interface (genbar1), Documentation on exports (genbar1), genbar1 (library), genbar1 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{genbar1})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(genbar1)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex barchart1/7
@code{barchart1/7}, 
@glindex barchart1/9
@code{barchart1/9}, 
@glindex percentbarchart1/7
@code{percentbarchart1/7}.


@item @emph{Regular Types:}

@glindex yelement/1
@code{yelement/1}, 
@glindex axis_limit/1
@code{axis_limit/1}, 
@glindex header/1
@code{header/1}, 
@glindex title/1
@code{title/1}, 
@glindex footer/1
@code{footer/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (genbar1), Documentation on internals (genbar1), Usage and interface (genbar1), genbar1 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{genbar1})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart1/7 (pred)}}}
@temp
@end iftex
@pdindex barchart1/7 
@glindex barchart1/7 
@deffn PREDICATE barchart1/7:


@code{barchart1(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)}


The @code{y} axis range is determined from the limits of the data. Two examples are given to demonstrate clearly how to call the predicates. In the first example the user sets the bar appearance, in the second one the appearance features will be chosen by the system and the colors that have been assigned to the variables Color1, Color2 and Pattern will be shown also. 

Example 1: 


@smallexample 
barchart1('This is the header text',
  'Barchart title',
  'xaxistitle',
  [ ['bar1','legend_element1','Blue','Yellow','pattern1'],
           ['bar2','legend_element2','Plum','SeaGreen','pattern2'],
           ['bar3','legend_element3','Turquoise','Yellow','pattern5'] ],
  'yaxixtitle',
  [20,10,59],
  'footer').
@end smallexample  

Example 2: 


@smallexample 
barchart1('This is the header text',
  'Barchart title',
  'xaxistitle',
  [ ['element1','legend_element1',Color1,Color2,Pattern],
            ['element2','legend_element2'],
            ['element3','legend_element3'] ],
  'yaxixtitle',
  [20,10,59],
  'footer').
@end smallexample  
 
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart1/9 (pred)}}}
@temp
@end iftex
@pdindex barchart1/9 
@glindex barchart1/9 
@deffn PREDICATE barchart1/9:


@code{barchart1(Header,BTitle,XTitle,XVector,YTitle,YVector,YMax,YMin,Footer)}


You can set the minimum and maximum limits of the @code{y} axis. Data outside the limits will not be plotted. Each limit, as you can check by looking at the 
@glindex axis_limit/1
@code{axis_limit/1} definition, is a number. If the argument is a variable the limit will be calculated from the data (i.e., if @code{YMax} value is YValueMax the maximum y axis limit will calculated using the largest data value). 

Example: 


@smallexample 
barchart1('This is the header text',
  'Barchart title',
  'xaxistitle',
  [ ['element1','e1','Blue','Yellow','pattern1'],
      ['element2','e2','Turquoise','Plum','pattern5'],
      ['element3','e3','Turquoise','Green','pattern5'] ],
  'yaxixtitle',
  [20,10,59],
  70,
  _,
  'footer').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart1/7 (pred)}}}
@temp
@end iftex
@pdindex percentbarchart1/7 
@glindex percentbarchart1/7 
@deffn PREDICATE percentbarchart1/7:


@code{percentbarchart1(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)}


The y axis maximum coordinate value is 100. The @code{x} axis limits are automatically worked out. 

Example: 


@smallexample 
percentbarchart1('This is a special barchart to represent percentages',
  'Barchart with legend',
  'My xaxistitle',
  [ [1,'bar1','Blue','Yellow','pattern1'],
       [8,'bar2','MediumTurquoise','Plum','pattern5'] ],
  'My yaxixtitle',
  [80,10],
  'This is the footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{yelement/1 (regtype)}}}
@temp
@end iftex
@teindex yelement/1 
@glindex yelement/1 
@deffn REGTYPE yelement/1:



 


@smallexample 
yelement(Y) :-
        number(Y).
@end smallexample  

Y is the bar lenght, so it must be a numeric value. 

Both Prolog and Tcl-Tk support integers and floats. Integers are usually specified in decimal, but if the first character is 0 the number is read in octal (base 8), and if the first two characters are 0x, the number is read in hexadecimal (base16). Float numbers may be specified using most of the forms defined for ANSI C, including the following examples: 


@itemize @bullet{} 
@item 9.56 


@item 5.88e-2 


@item 5.1E2 
@end itemize  

Note: Be careful when using floats. While 8. or 7.e4 is interpreted by Tcl-tk as 8.0 and 7.0e4, Prolog will not read them as float numbers. Example: 
@smallexample 
        ?- number(8.e+5).
        @{SYNTAX ERROR: (lns 130-130) , or ) expected in arguments
        number ( 8 
        ** here **
        . e + 5 ) . 
        @}

        no
        ?- number(8.).
        @{SYNTAX ERROR: (lns 138-138) , or ) expected in arguments
        number ( 8 
        ** here **
        . ) . 
        @}

        no

        ?- number(8.0e+5).

        yes
        ?- number(8.0).

        yes
        @end smallexample  

Precision: Tcl-tk internally represents integers with the C type @code{int}, which provides at least 32 bits of precision on most machines. Since Prolog integers can (in some implementations) exceed 32 bits but the precision in Tcl-tk depends on the machine, it is up to the progammer to ensure that the values fit into the maximum precision of the machine for integers. Real numbers are represented with the C type @code{double}, which is usually represented with 64-bit values (about 15 decimal digits of precision) using the IEEE Floating Point Standard. 

Conversion: If the list is composed by integers and floats, Tcl-tk will convert integers to floats. 
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{axis_limit/1 (regtype)}}}
@temp
@end iftex
@teindex axis_limit/1 
@glindex axis_limit/1 
@deffn REGTYPE axis_limit/1:




@smallexample 
axis_limit(X) :-
        number(X).
axis_limit(_1).
@end smallexample  

This type is defined in order to set the minimum and maximum limits of the axes. Data outside the limits will not be plotted. Each limit, is a number or a variable. If the argument is not a number the limit will be calculated from the data (i.e., if YMax value is @code{Var} the maximum y axis limit will be calculated using the largest data value). 
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{header/1 (regtype)}}}
@temp
@end iftex
@teindex header/1 
@glindex header/1 
@deffn REGTYPE header/1:






@strong{Usage:} @code{header(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a text (an atom) describing the header of the graph. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{title/1 (regtype)}}}
@temp
@end iftex
@teindex title/1 
@glindex title/1 
@deffn REGTYPE title/1:






@strong{Usage:} @code{title(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a text (an atom) to be used as label, usually not very long. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{footer/1 (regtype)}}}
@temp
@end iftex
@teindex footer/1 
@glindex footer/1 
@deffn REGTYPE footer/1:






@strong{Usage:} @code{footer(X)}
@itemize @minus
@item @emph{Description:} @code{X} is a text (an atom) describing the footer of the graph. 
@end itemize
@end deffn
@sp 1



@node Documentation on internals (genbar1),  , Documentation on exports (genbar1), genbar1 (library)
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{genbar1})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{xbarelement1/1 (regtype)}}}
@temp
@end iftex
@teindex xbarelement1/1 
@glindex xbarelement1/1 
@deffn REGTYPE xbarelement1/1:




@smallexample 
xbarelement1([XValue,LegendElement]) :-
        atomic(XValue),
        atomic(LegendElement).
xbarelement1([XValue,LegendElement,ForegColor,BackgColor,SPattern]) :-
        atomic(XValue),
        atomic(LegendElement),
        color(ForegColor),
        color(BackgColor),
        pattern(SPattern).
@end smallexample  

Defines the attributes of the bar. 
@table @asis 


@item @code{XValue} 
bar label. Although @code{XValue} values may be numbers, the will be treated as labels. Different elements with the same label will produce different bars. 


@item @code{LegendElement} 
Legend element name. It may be a number or an atom and equal or different to the XValue. Every @code{LegendElement} value of the list must be unique. 


@item @code{ForegColor} 
It sets the Foreground color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{BackgColor} 
It sets the Background color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{SPattern} 
It sets the stipple of the bar. Its value must be a valid pattern, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a pattern chosen by the library. 


@end table  
 


@end deffn
@sp 1


@c (component)


@node genbar2 (library), genbar3 (library), genbar1 (library), Top
@comment node-name, next,  previous,  up
@chapter genbar2 (library)
@liindex genbar2
@c -------------------------------------------------
@c WARNING: Do not edit this file (genbar2.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/genbar2.pl
@c -------------------------------------------------


This module defines predicates which show barchart widgets. The three predicates exported by this module plot two-variable data as regular bars in a window. They all share the following features: 


@itemize @bullet{} 


@item Numeric values for the x axis are needed, otherwise it does not work properly. See 
@glindex xbarelement2/1
@code{xbarelement2/1} definition type. 


@item The bar position is proportional to the x-coordinate value. 


@item The user can either select the appearance of the bars (background color, foreground color and stipple style) or not. See the 
@glindex xbarelement2/1
@code{xbarelement2/1} type definition. Thus, the user can call each predicate in two ways. 


@item The bar chart has a legend and one entry (symbol and label) per bar. 


@item If you do not want to display text in the elements header, barchart title, x axis title, y axis title or footer, simply type @code{''} as the value of the argument. 


@item The predicates test whether the format of the arguments is correct. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contain elements but are not correct, the exception @code{error1} or @code{error3} will be thrown, depending on the error type. @code{error1} means that @code{XVector} and @code{YVector} does not contain the same number of elements and @code{error3} indicates that not all the @code{XVector} elements contain a correct number of attributes . 


@end itemize  

Particular features will be pointed out in the corresponding predicate. 





@menu
* Usage and interface (genbar2)::  
* Documentation on exports (genbar2)::	
@end menu

@node Usage and interface (genbar2), Documentation on exports (genbar2), genbar2 (library), genbar2 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{genbar2})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(genbar2)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex barchart2/7
@code{barchart2/7}, 
@glindex barchart2/11
@code{barchart2/11}, 
@glindex percentbarchart2/7
@code{percentbarchart2/7}.


@item @emph{Regular Types:}

@glindex xbarelement2/1
@code{xbarelement2/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (genbar2),  , Usage and interface (genbar2), genbar2 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{genbar2})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart2/7 (pred)}}}
@temp
@end iftex
@pdindex barchart2/7 
@glindex barchart2/7 
@deffn PREDICATE barchart2/7:


@code{barchart2(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)}


The maximum and minimum limits for axes are determined from the data. 

Example: 


@smallexample 
barchart2('This is the header text',
  'Barchart with legend',
  'My xaxistitle',
  [ [1,'bar1','Blue','Yellow','pattern1'],
       [2,'bar2','MediumTurquoise','Plum','pattern5'] ],
  'My yaxixtitle',
  [20,10],
  'This is the footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart2/11 (pred)}}}
@temp
@end iftex
@pdindex barchart2/11 
@glindex barchart2/11 
@deffn PREDICATE barchart2/11:


@code{barchart2(Header,BT,XT,XVector,XMax,XMin,YT,YVector,YMax,YMin,Footer)}


You can set the minimum and maximum limits of the axes. Data outside the limits will not be plotted. Each limit, as you can check looking at the 
@glindex axis_limit/1
@code{axis_limit/1} definition, is a number. If the argument is a variable the limit will be calculated from the data (i.e., if @code{YMax} value is YValueMax the maximum y axis limit will calculated using the largest data value). 
 
Example: 


@smallexample 
barchart2('This is the header text',
  'Barchart with legend',
  'My xaxistitle',
  [ [1,'bar1',Color1,Color2,Pattern1],
         [2,'bar2',Color3,Color4,Pattern2] ],
  10,
  -10,
  'My yaxixtitle',
  [20,10],
  100,
  -10,
  'The limits for the axes are set by the user').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart2/7 (pred)}}}
@temp
@end iftex
@pdindex percentbarchart2/7 
@glindex percentbarchart2/7 
@deffn PREDICATE percentbarchart2/7:


@code{percentbarchart2(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)}


The y axis maximum coordinate value is 100. The x axis limits are autoarrange. 

Example: 


@smallexample 
percentbarchart2('This is a special barchart to represent percentages',
  'Barchart with legend',
  'My xaxistitle',
  [ [1,'bar1','Blue','Yellow','pattern1'],
          [2,'bar2','MediumTurquoise','Plum','pattern5'] ],
  'My yaxixtitle',
  [80,10],
  'This is the footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{xbarelement2/1 (regtype)}}}
@temp
@end iftex
@teindex xbarelement2/1 
@glindex xbarelement2/1 
@deffn REGTYPE xbarelement2/1:




@smallexample 
xbarelement2([XValue,LegendElement]) :-
        number(XValue),
        atomic(LegendElement).
xbarelement2([XValue,LegendElement,ForegColor,BackgColor,SPattern]) :-
        number(XValue),
        atomic(LegendElement),
        color(ForegColor),
        color(BackgColor),
        pattern(SPattern).
@end smallexample  
Defines the attributes of the bar. 


@table @asis 


@item @code{XValue} 
x-coordinate position of the bar. Different elements with the same abscissas will produce overlapped bars. 


@item @code{LegendElement} 
Element legend name. It may be a number or an atom and equal or different to the XValue. Every @code{LegendElement} value of the list must be unique. 


@item @code{ForegColor} 
Is the Foreground color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{BackgColor} 
Is the Background color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{SPattern} 
Is the stipple of the bar. Its value must be a valid pattern, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a pattern chosen by the library. 


@end table  



@end deffn
@sp 1


@c (component)


@node genbar3 (library), genbar4 (library), genbar2 (library), Top
@comment node-name, next,  previous,  up
@chapter genbar3 (library)
@liindex genbar3
@c -------------------------------------------------
@c WARNING: Do not edit this file (genbar3.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/genbar3.pl
@c -------------------------------------------------


This module defines predicates which depict barchart widgets. The three predicates exported by this module plot two-variable data as regular bars in a window and are similar to those exported in the genbar1 module except in that these defined in this module do not display a legend. Thus, not all the argument types are equal. 

The predicates test whether the format of the arguments is correct. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contain elements but are not correct, the exception @code{error1} or @code{error3} will be thrown, depending on the error type. @code{error1} means that @code{XVector} and @code{YVector} do not contain the same number of elements and @code{error3} indicates that not all the @code{XVector} elements contain a correct number of attributes . 





@menu
* Usage and interface (genbar3)::  
* Documentation on exports (genbar3)::	
* Documentation on internals (genbar3)::  
@end menu

@node Usage and interface (genbar3), Documentation on exports (genbar3), genbar3 (library), genbar3 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{genbar3})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(genbar3)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex barchart3/7
@code{barchart3/7}, 
@glindex barchart3/9
@code{barchart3/9}, 
@glindex percentbarchart3/7
@code{percentbarchart3/7}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (genbar3), Documentation on internals (genbar3), Usage and interface (genbar3), genbar3 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{genbar3})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart3/7 (pred)}}}
@temp
@end iftex
@pdindex barchart3/7 
@glindex barchart3/7 
@deffn PREDICATE barchart3/7:


@code{barchart3(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)}


As we mentioned in the above paragraph, this predicate is comparable to 
@glindex barchart1/8
@code{barchart1/8} except in the @code{XVector} argument type. 

Example: 
@smallexample 
barchart3('This is the header text',
  'Barchart without legend',
  'My xaxistitle',
  [['bar1'],['bar2']],
  'My yaxixtitle',
  [20,10],
  'This is the footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart3/9 (pred)}}}
@temp
@end iftex
@pdindex barchart3/9 
@glindex barchart3/9 
@deffn PREDICATE barchart3/9:


@code{barchart3(Header,BTitle,XTitle,XVector,YTitle,YVector,YMax,YMin,Footer)}


As we mentioned, this predicate is quite similar to the 
@glindex barchart1/10
@code{barchart1/10} except in the @code{XVector} argument type, because the yielded bar chart lacks of legend. 

Example: 
@smallexample 
barchart3('This is the header text',
  'Barchart without legend',
  'My xaxistitle',
  [['bar1'],['bar2']],
  'My yaxixtitle',
  30,
  5,
  [20,10],
  'This is the footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart3/7 (pred)}}}
@temp
@end iftex
@pdindex percentbarchart3/7 
@glindex percentbarchart3/7 
@deffn PREDICATE percentbarchart3/7:


@code{percentbarchart3(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)}


The @code{y} axis maximum coordinate value is 100. The x axis limits are autoarrange. 

Example: 


@smallexample 
percentbarchart3('This is a special barchart to represent percentages',
          'Barchart without legend',
          'My xaxistitle',
          [ ['pr1','Blue','Yellow','pattern1'],
            ['pr2','MediumTurquoise','Plum','pattern5'] ],
          'My yaxixtitle',
          [80,10],
          'This is the footer text').
@end smallexample  



@end deffn
@sp 1



@node Documentation on internals (genbar3),  , Documentation on exports (genbar3), genbar3 (library)
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{genbar3})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{xbarelement3/1 (regtype)}}}
@temp
@end iftex
@teindex xbarelement3/1 
@glindex xbarelement3/1 
@deffn REGTYPE xbarelement3/1:




@smallexample 
xbarelement3([XValue]) :-
        atomic(XValue).
xbarelement3([XValue,ForegColor,BackgColor,StipplePattern]) :-
        atomic(XValue),
        color(ForegColor),
        color(BackgColor),
        pattern(StipplePattern).
@end smallexample  

Defines the attributes of the bar. 
@table @asis 


@item @code{XValue} 
bar label. Although @code{XValue} values may be numbers, the will be treated as labels. Different elements with the same label will produce different bars. 


@item @code{ForegColor} 
It sets the Foreground color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{BackgColor} 
It sets the Background color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{SPattern} 
It sets the stipple of the bar. Its value must be a valid pattern, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a pattern chosen by the library. 


@end table  
 


@end deffn
@sp 1


@c (component)


@node genbar4 (library), gengraph1 (library), genbar3 (library), Top
@comment node-name, next,  previous,  up
@chapter genbar4 (library)
@liindex genbar4
@c -------------------------------------------------
@c WARNING: Do not edit this file (genbar4.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/genbar4.pl
@c -------------------------------------------------


This module defines predicates which depict barchart widgets. The three predicates exported by this module plot two-variable data as regular bars in a window and are similar to those exported in genbar2 module except in that those defined in this module doesn't display a legend. Thus, the user does not have to define legend element names. 

The predicates test whether the format of the arguments is correct. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contains elements but are not correct, the exception @code{error1} or @code{error3} will be thrown, depending on the error type. @code{error1} means that @code{XVector} and @code{YVector} do not contain the same number of elements and @code{error3} indicates that not all the @code{XVector} elements contain a correct number of attributes . 





@menu
* Usage and interface (genbar4)::  
* Documentation on exports (genbar4)::	
* Documentation on internals (genbar4)::  
@end menu

@node Usage and interface (genbar4), Documentation on exports (genbar4), genbar4 (library), genbar4 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{genbar4})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(genbar4)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex barchart4/7
@code{barchart4/7}, 
@glindex barchart4/11
@code{barchart4/11}, 
@glindex percentbarchart4/7
@code{percentbarchart4/7}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (genbar4), Documentation on internals (genbar4), Usage and interface (genbar4), genbar4 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{genbar4})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart4/7 (pred)}}}
@temp
@end iftex
@pdindex barchart4/7 
@glindex barchart4/7 
@deffn PREDICATE barchart4/7:


@code{barchart4(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)}


As we mentioned in the above paragraph, this predicate is comparable to 
@glindex barchart2/8
@code{barchart2/8} except in the @code{XVector} argument type. 

Example: 
@smallexample 
barchart4('This is the header text',
  'Barchart without legend',
  'My xaxistitle',
  [[2],[5],[6]],
  'My yaxixtitle',
  [20,10,59],
  'Numeric values in the xaxis').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{barchart4/11 (pred)}}}
@temp
@end iftex
@pdindex barchart4/11 
@glindex barchart4/11 
@deffn PREDICATE barchart4/11:


@code{barchart4(Hder,BT,XT,XVector,XMax,XMin,YT,YVector,YMax,YMin,Fter)}


As we stated before, this predicate is quite similar to 
@glindex barchart2/10
@code{barchart2/10} except in the following aspects: 


@itemize @bullet{} 


@item The @code{XVector} argument type, because the yielded bar chart lacks the legend. 


@item The user can set limits for both @code{x} axis and @code{y} axis. 


@end itemize  

Example: 
@smallexample 
barchart4('This is the header text, you can write a graph description',
  'Barchart without legend',
  'My xaxistitle',
  [[2,'Blue','Yellow','pattern1'],
       [20,'MediumTurquoise','Plum','pattern5'],
       [30,'MediumTurquoise','Green','pattern5']],
  50,
  -10,
  'My yaxixtitle',
  [20,10,59],
  100,
  -10,
  'Numeric values in the xaxis').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{percentbarchart4/7 (pred)}}}
@temp
@end iftex
@pdindex percentbarchart4/7 
@glindex percentbarchart4/7 
@deffn PREDICATE percentbarchart4/7:


@code{percentbarchart4(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)}


The y axis maximum coordinate value is 100. The x axis limits are automatically worked out. This predicate is useful when the bar height represents percentages. 

Example: 


@smallexample 
percentbarchart4('This is the header text',
  'Barchart without legend',
  'My xaxistitle',
  [[2,'Blue','Yellow','pattern1'],[5,'Yellow','Plum','pattern5'],
       [6,'MediumTurquoise','Green','pattern5']],
  'My yaxixtitle',
  [20,10,59],
  'Numeric values in the xaxis').
@end smallexample  



@end deffn
@sp 1



@node Documentation on internals (genbar4),  , Documentation on exports (genbar4), genbar4 (library)
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{genbar4})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{xbarelement4/1 (regtype)}}}
@temp
@end iftex
@teindex xbarelement4/1 
@glindex xbarelement4/1 
@deffn REGTYPE xbarelement4/1:



Defines the attributes of the bar. 
@table @asis 


@item @code{XValue} 
x-coordinate position of the bar. Different elements with the same abscissas will produce overlapped bars. 


@item @code{ForegColor} 
It sets the Foreground color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{BackgColor} 
It sets the Background color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{SPattern} 
It sets the stipple of the bar. Its value must be a valid pattern, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a pattern chosen by the library. 
@end table  



@end deffn
@sp 1


@c (component)


@node gengraph1 (library), gengraph2 (library), genbar4 (library), Top
@comment node-name, next,  previous,  up
@chapter gengraph1 (library)
@liindex gengraph1
@c -------------------------------------------------
@c WARNING: Do not edit this file (gengraph1.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/gengraph1.pl
@c -------------------------------------------------


This module defines predicates which depict line graph and scatter graph widgets. All eigth predicates exported by this module plot two-variable data. Each point is defined by its X-Y coordinate values. A dataset is defined by two lists xvector and yvector, which contain the points coordinates. As you might guess, the values placed in the the same position in both lists are the coordinates of a point. They both share the following features: 


@itemize @bullet{} 


@item Numeric values for vector elements are needed. We'll use two vectors to represent the X-Y coordinates of each set of plotted data, but in this case every dataset shares the X-vector, i.e., x-coordinate of points with the same index @footnote{It should be pointed out that I am refering to an index as the position of an element in a list.} in different datasets is the same. Thus, the numbers of points in each yvector must be equal to the number of points in the xvector. 


@item The active element color is navyblue, which means that when you select a legend element, the corresponding line or point dataset turns into navyblue. 


@item The user can either select the appearance of the lines and/or points of each dataset or not. If not, the system will choose the colors for the lines and the points among the available ones in accordance with the plot background color and it will also set the points size and symbol to the default. If the plot background color is black, the system will choose a lighter color, and the system will select a darker color when the plot background color is white. Thus, the user can define the appearanse attributes of each dataset in four different ways. Take a look at the 
@glindex attributes/1
@code{attributes/1} type definition and see the examples to understand it clearly. 


@item The graph has a legend and one entry (symbol and label) per dataset. 


@item If you do not want to display text in the element header, barchart title, xaxis title, yaxis title or footer, simply give @code{''} as the value of the argument. 


@item The predicates check whether the format of the arguments is correct as well. The testing process involves some verifications. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contains elements but are not correct, the exception @code{error4} will be thrown. 


@end itemize  

The names of the line graph predicates begin with @strong{graph_} and those corresponding to the scatter graph group begin with @strong{scattergraph_}. 





@menu
* Usage and interface (gengraph1)::  
* Documentation on exports (gengraph1)::  
@end menu

@node Usage and interface (gengraph1), Documentation on exports (gengraph1), gengraph1 (library), gengraph1 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{gengraph1})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(gengraph1)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex graph_b1/9
@code{graph_b1/9}, 
@glindex graph_b1/13
@code{graph_b1/13}, 
@glindex graph_w1/9
@code{graph_w1/9}, 
@glindex graph_w1/13
@code{graph_w1/13}, 
@glindex scattergraph_b1/8
@code{scattergraph_b1/8}, 
@glindex scattergraph_b1/12
@code{scattergraph_b1/12}, 
@glindex scattergraph_w1/8
@code{scattergraph_w1/8}, 
@glindex scattergraph_w1/12
@code{scattergraph_w1/12}.


@item @emph{Regular Types:}

@glindex vector/1
@code{vector/1}, 
@glindex smooth/1
@code{smooth/1}, 
@glindex attributes/1
@code{attributes/1}, 
@glindex symbol/1
@code{symbol/1}, 
@glindex size/1
@code{size/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (gengraph1),  , Usage and interface (gengraph1), gengraph1 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{gengraph1})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b1/9 (pred)}}}
@temp
@end iftex
@pdindex graph_b1/9 
@glindex graph_b1/9 
@deffn PREDICATE graph_b1/9:


@code{graph_b1(Header,GTitle,XTitle,XVector,YTitle,YVectors,LAtts,Footer,Smooth)}


Besides the features mentioned at the begining of the chapter, the displayed graph generated when calling this predicate has the following distinguishing characteristics: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item The axes limits are determined from the data. 


@end itemize  

Example: 


@smallexample 
graph_b1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [20,10,59],
  'yaxixtitle',
  [ [10,35,40],[25,50,60] ],
  [ ['element1','Blue','Yellow','plus',6],['element2',Outline,Color] ],
  'footer',
  'linear').
@end smallexample  
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b1/13 (pred)}}}
@temp
@end iftex
@pdindex graph_b1/13 
@glindex graph_b1/13 
@deffn PREDICATE graph_b1/13:


@code{graph_b1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)}


The particular features related to this predicate are described below: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item You can set the minimum and maximum limits of the axes. Data outside the limits will not be plotted. 


@end itemize  

Example: 
@smallexample 
graph_b1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [20,10,59],
  50,
  _,
  'yaxixtitle',
  [[10,35,40],[25,50,60]],
  50,
  _,
  [['line1','circle',4],['line2',OutlineColor,Color]],
  'footer',
  'step').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w1/9 (pred)}}}
@temp
@end iftex
@pdindex graph_w1/9 
@glindex graph_w1/9 
@deffn PREDICATE graph_w1/9:


@code{graph_w1(Header,GTitle,XTitle,XVector,YTitle,YVectors,LAtts,Footer,Smooth)}


This predicate is quite similar to 
@glindex graph_b1/9
@code{graph_b1/9}. The differences lies in the plot background color and in the cross hairs color, which are white and black respectively. 

Example: 
@smallexample 
graph_w1('This is the header text', 
  'Graph_title', 
  'xaxistitle',
  [20,10,40,50], 
  'yaxixtitle', 
  [ [10,35,40,50],[25,20,60,40] ],
  [['line1','Blue','DarkOrchid'],['line2','circle',3]],
  'footer', 
  'quadratic').  
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w1/13 (pred)}}}
@temp
@end iftex
@pdindex graph_w1/13 
@glindex graph_w1/13 
@deffn PREDICATE graph_w1/13:


@code{graph_w1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)}


This predicate is quite similar to 
@glindex graph_b1/13
@code{graph_b1/13}, the differences between them are listed below: 


@itemize @bullet{} 


@item The plotting area background color is white. 


@item The cross hairs color is black. 


@end itemize  

Example: 
@smallexample 
graph_w1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [20,10,59],
  100,
  10,      
  'yaxixtitle',
  [[10,35,40],[25,20,60]],
  _,
  _,
  [['element1','Blue','Yellow'],['element2','Turquoise','Plum']],
  'footer',
  'quadratic').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b1/8 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_b1/8 
@glindex scattergraph_b1/8 
@deffn PREDICATE scattergraph_b1/8:


@code{scattergraph_b1(Header,GTitle,XTitle,XVector,YTitle,YVectors,PAtts,Footer)}


Apart from the features brought up at the beginning of the chapter, the scatter graph displayed invoking this predicate has the following characteristics: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item The axes limits are determined from the data. 


@end itemize  

Example: 
@smallexample 
scattergraph_b1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [10,15,20],
  'yaxixtitle',
  [[10,35,20],[15,11,21]],
  [['element1','Blue','Yellow'],['element2','Turquoise','Plum']],
  'footer').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b1/12 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_b1/12 
@glindex scattergraph_b1/12 
@deffn PREDICATE scattergraph_b1/12:


@code{scattergraph_b1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)}


The particular features related to this predicate are described below: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item You can set the minimum and maximum limits of the axes. Data outside the limits will not be plotted. 


@end itemize  

Example: 
@smallexample 
scattergraph_b1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [20,10,59],
  50,
  _,
  'yaxixtitle',
  [[10,35,40],[25,50,60]],
  50,
  _,
  [['point dataset1','Blue','Yellow'],['point dataset2']],
  'footer').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w1/8 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_w1/8 
@glindex scattergraph_w1/8 
@deffn PREDICATE scattergraph_w1/8:


@code{scattergraph_w1(Header,GT,XT,XVector,YT,YVectors,PAtts,Footer)}


This predicate is quite similar to 
@glindex scattergraph_b1/8
@code{scattergraph_b1/8} except in the following: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item If the user does not fix the points colors, they will be chosen among the lighter ones. 


@end itemize  

Example: 
@smallexample 
scattergraph_w1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [20,10,59],
  'yaxixtitle',
  [[10,35,40],[25,20,60]],
  [['e1','Blue','Green'],['e2','MediumVioletRed','Plum']],
  'footer').
@end smallexample  
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w1/12 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_w1/12 
@glindex scattergraph_w1/12 
@deffn PREDICATE scattergraph_w1/12:


@code{scattergraph_w1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)}


This predicate is quite similar to 
@glindex scattergraph1_b1/13
@code{scattergraph1_b1/13}, the differences between them are listed below: 


@itemize @bullet{} 


@item The plotting area background color is white. 


@item The cross hairs color is black. 


@end itemize  

Example: 
@smallexample 
scattergraph_w1('This is the header text',
  'Graph_title',
  'xaxistitle',
  [20,10,59],
  150,
  5,
  'yaxixtitle',
  [[10,35,40],[25,20,60]],
  _,
  -10,
  [['e1','Blue','Yellow'],['e2','MediumTurquoise','Plum']],
  'footer').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vector/1 (regtype)}}}
@temp
@end iftex
@teindex vector/1 
@glindex vector/1 
@deffn REGTYPE vector/1:




@smallexample 
vector(X) :-
        list(X,number).
@end smallexample  
The type vector defines a list of numbers (integers or floats). 
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{smooth/1 (regtype)}}}
@temp
@end iftex
@teindex smooth/1 
@glindex smooth/1 
@deffn REGTYPE smooth/1:


@code{smooth(Smooth)}


 
@smallexample 
smooth(linear).
smooth(cubic).
smooth(quadratic).
smooth(step).
@end smallexample  

Specifies how connecting segments are drawn between data points. If @code{Smooth} is @code{linear}, a single line segment is drawn, connecting both data points. When @code{Smooth} is @code{step}, two line segments will be drawn, the first line is a horizontal line segment that steps the next X-coordinate and the second one is a vertical line, moving to the next Y-coordinate. Both @code{cubic} and @code{quadratic} generate multiple segments between data points. If @code{cubic}is used, the segments are generated using a cubic spline. If @code{quadratic}, a quadratic spline is used. The default is linear. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{attributes/1 (regtype)}}}
@temp
@end iftex
@teindex attributes/1 
@glindex attributes/1 
@deffn REGTYPE attributes/1:




@smallexample 
attributes([ElementName]) :-
        atomic(ElementName).
attributes([ElementName,OutLine,Color]) :-
        atomic(ElementName),
        color(OutLine),
        color(Color).
attributes([ElementName,Symbol,Size]) :-
        atomic(ElementName),
        symbol(Symbol),
        size(Size).
attributes([ElementName,OutLine,Color,Symbol,Size]) :-
        atomic(ElementName),
        color(OutLine),
        color(Color),
        symbol(Symbol),
        size(Size).
@end smallexample  

Each line or point dataset in the graph has its own attributes, which are defined by this type. The name of the dataset, specified in the @code{ElementName} argument, may be either a number or an atom. The second argument is the color of a thin line around each point in the dataset and the Color argument is the points and lines color. Both @code{OutLine} and @code{Color} must be a valid color (see available values in 
@glindex color/1
@code{color/1}), otherwise a random color according to the plot background color will be selected. The @code{Symbol} must be a valid symbol and the @code{Size} must be a number. Be careful if you want to especify the @code{Symbol} and the @code{Size}, otherwise the predicate will not work as you expect. If you don't select a symbol and a size for a dataset the default values will be square and 1 pixel. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{symbol/1 (regtype)}}}
@temp
@end iftex
@teindex symbol/1 
@glindex symbol/1 
@deffn REGTYPE symbol/1:


@code{symbol(Symbol)}


 
@smallexample 
symbol(square).
symbol(circle).
symbol(diamond).
symbol(plus).
symbol(cross).
symbol(splus).
symbol(scross).
symbol(triangle).
@end smallexample  
@code{Symbol} stands for the shape of the points whether in scatter graphs or in line graphs. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{size/1 (regtype)}}}
@temp
@end iftex
@teindex size/1 
@glindex size/1 
@deffn REGTYPE size/1:


@code{size(Size)}


 
@smallexample 
size(Size) :-
        number(Size).
@end smallexample  
@code{Size} stands for the size in pixels of the points whether in scatter graphs or in line graphs. 



@end deffn
@sp 1


@c (component)


@node gengraph2 (library), genmultibar (library), gengraph1 (library), Top
@comment node-name, next,  previous,  up
@chapter gengraph2 (library)
@liindex gengraph2
@c -------------------------------------------------
@c WARNING: Do not edit this file (gengraph2.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/gengraph2.pl
@c -------------------------------------------------


This module defines predicates which show line graph widgets. All eight predicates exported by this module plot two-variable data. Each point is defined by its X-Y coordinate values. Every predicate share the following features: 


@itemize @bullet{} 


@item A dataset is defined by three lists xvector, yvector and attributes. The arguments named @code{XVectors} (or @code{XVs}), @code{YVectors} (or @code{YVs}) and @code{LAtts}@footnote{In scatter graphs the attibute that contains the features of a point dataset is @code{PAtts}.} contain this information. Those arguments must be lists whose elements are also lists. The first dataset is defined by the firts element of the three lists, the second dataset is defined by the second element of the three lists and so on. 


@item Numeric values for the vector elements are needed. We will use two vectors to represent the X-Y coordinates of each set of data plotted. In these predicates the vectors can have different number of points. However, the number of elements in xvector and yvector that pertain to a certain dataset must be, obviously, equal. 


@item The active line color is blue, which means that when you select a legend element, the corresponding line turns into navyblue. 


@item The user can either select the appearance for the lines and the points or not. See the 
@glindex attributes/1
@code{attributes/1} type definition. Thus, the user can call each predicate in different ways ways. 


@item The graph has a legend and one entry (symbol and label) per dataset. 


@item If you do not want to display text in the elements header, barchart title, xaxis title, yaxis title or footer, simply give @code{''} as the value of the argument. 


@item The predicates check whether the format of the arguments is correct as well. The testing process involves some verifications. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contains elements but are not correct, the exception @code{error4} will be thrown. 


@end itemize  





@menu
* Usage and interface (gengraph2)::  
* Documentation on exports (gengraph2)::  
@end menu

@node Usage and interface (gengraph2), Documentation on exports (gengraph2), gengraph2 (library), gengraph2 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{gengraph2})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(gengraph2)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex graph_b2/9
@code{graph_b2/9}, 
@glindex graph_b2/13
@code{graph_b2/13}, 
@glindex graph_w2/9
@code{graph_w2/9}, 
@glindex graph_w2/13
@code{graph_w2/13}, 
@glindex scattergraph_b2/8
@code{scattergraph_b2/8}, 
@glindex scattergraph_b2/12
@code{scattergraph_b2/12}, 
@glindex scattergraph_w2/8
@code{scattergraph_w2/8}, 
@glindex scattergraph_w2/12
@code{scattergraph_w2/12}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/gengraph1
@code{chartlib/gengraph1}, 
@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (gengraph2),  , Usage and interface (gengraph2), gengraph2 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{gengraph2})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b2/9 (pred)}}}
@temp
@end iftex
@pdindex graph_b2/9 
@glindex graph_b2/9 
@deffn PREDICATE graph_b2/9:


@code{graph_b2(Header,GTitle,XTitle,XVectors,YTitle,YVectors,LAtts,Footer,Sm)}


Besides the features mentioned at the begining of the module chapter, the displayed graph generated calling this predicate has the following distinguish characteristics: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item The axis limits are determined from the data. 


@end itemize  

Example: 


@smallexample 
graph_b2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[20,30,59],[25,50]],
  'yaxixtitle',
  [[10,35,40],[25,50]],
  [['line1','Blue','Yellow'],['line2']],
  'footer',
  'natural').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_b2/13 (pred)}}}
@temp
@end iftex
@pdindex graph_b2/13 
@glindex graph_b2/13 
@deffn PREDICATE graph_b2/13:


@code{graph_b2(Header,GT,XT,XVs,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)}


In addition to the features brought up at the begining of the module chapter, this graph has the following: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item You can set the maximum and minimum values for the graph axes. 


@end itemize  

Example: 


@smallexample 
graph_b2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[20,10,59],[15,30,35]],
  50,
  _,
  'yaxixtitle',
  [[10,35,40],[25,50,60]],
  50.5,
  _,
  [['line1','Blue','Yellow'],['line','MediumTurquoise','Plum']],
  'footer',
  'step').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w2/9 (pred)}}}
@temp
@end iftex
@pdindex graph_w2/9 
@glindex graph_w2/9 
@deffn PREDICATE graph_w2/9:


@code{graph_w2(Header,GT,XT,XVectors,YTitle,YVectors,LAtts,Footer,Smooth)}


This predicate is quite similar to 
@glindex graph_b2/9
@code{graph_b2/9}. The difference lies in the graph appearance, as you can see below. 


@itemize @bullet{} 


@item The plotting area background color is white. 


@item The cross hairs color is black. 


@end itemize  

Example: 


@smallexample 
graph_w2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[10,30,59],[25,50]],
  'yaxixtitle',
  [[10,35,40],[25,40]],
  [['element1','Blue','DarkOrchid'],['element2','DarkOliveGreen',
    'Firebrick']],
  'footer',
  'natural').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{graph_w2/13 (pred)}}}
@temp
@end iftex
@pdindex graph_w2/13 
@glindex graph_w2/13 
@deffn PREDICATE graph_w2/13:


@code{graph_w2(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)}


This predicate is comparable to 
@glindex graph_b2/13
@code{graph_b2/13}. The differences lie in the plot background color and in the cross hairs color, wich are white and black respectively. 

Example: 
@smallexample 
graph_w2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[10,30,59],[10,35,40]],
  80,
  _,
  'yaxixtitle',
  [[10,35,40],[25,50,60]],
  50,
  _,
  [['element1','Blue','Green'],['element2','Turquoise','Black']],
  'footer',
  'linear').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b2/8 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_b2/8 
@glindex scattergraph_b2/8 
@deffn PREDICATE scattergraph_b2/8:


@code{scattergraph_b2(Header,GT,XT,XVectors,YT,YVectors,PAtts,Footer)}


Apart from the features brought up at the beginning of the chapter, the scatter graph displayed when invoking this predicate has the following features: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item The axis limits are determined from the data. 


@end itemize  

Example: 
@smallexample 
scattergraph_b2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[10,15,20],[8,30,40]],
  'yaxixtitle',
  [[10,35,20],[15,11,21]],
  [['element1','Blue','Yellow'],['element2','MediumTurquoise','Plum']],
  'footer').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_b2/12 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_b2/12 
@glindex scattergraph_b2/12 
@deffn PREDICATE scattergraph_b2/12:


@code{scattergraph_b2(Header,GT,XT,XVs,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)}


The particular features related to this predicate are described below: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item You can set the minimum and maximum limits of the axes. Data outside the limits will not be plotted. 


@end itemize  

Example: 
@smallexample 
scattergraph_b2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[20,30,50],[18,40,59]],
  50,
  _,
  'yaxixtitle',
  [[10,35,40],[25,50,60]],
  50,
  _,
  [['point dataset1'],['point dataset2']],
  'footer').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w2/8 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_w2/8 
@glindex scattergraph_w2/8 
@deffn PREDICATE scattergraph_w2/8:


@code{scattergraph_w2(Header,GTitle,XTitle,XVs,YTitle,YVs,PAtts,Footer)}


This predicate is quite similar to 
@glindex scattergraph_w1/8
@code{scattergraph_w1/8} except in the following: 


@itemize @bullet{} 


@item The plotting area background color is black. 


@item The cross hairs color is white. 


@item If the user do not provide the colors of the points, they will be chosen among the lighter ones. 


@end itemize  

Example: 
@smallexample 
scattergraph_w2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[20,30,40,15,30,35,20,30]],
  'yaxixtitle',
  [[10,30,40,25,20,25,20,25]],
  [['set1','cross',4]],
  'footer').
@end smallexample  
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{scattergraph_w2/12 (pred)}}}
@temp
@end iftex
@pdindex scattergraph_w2/12 
@glindex scattergraph_w2/12 
@deffn PREDICATE scattergraph_w2/12:


@code{scattergraph_w2(Header,GT,XT,XVs,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)}


This predicate is comparable to 
@glindex scattergraph_w2/13
@code{scattergraph_w2/13}, the differences between them are listed below: 


@itemize @bullet{} 


@item The plotting area background color is white. 


@item The cross hairs color is black. 


@end itemize  

Example: 
@smallexample 
scattergraph_w2('This is the header text',
  'Graph_title',
  'xaxistitle',
  [[20,10,59],[15,30,50]],
  150,
  5,
  'yaxixtitle',
  [[10,35,40],[25,20,60]],
  _,
  -10,
  [['e1','Blue','Yellow'],['e2','MediumTurquoise','Plum']],
  'footer').
@end smallexample  



@end deffn
@sp 1


@c (component)


@node genmultibar (library), table_widget1 (library), gengraph2 (library), Top
@comment node-name, next,  previous,  up
@chapter genmultibar (library)
@liindex genmultibar
@c -------------------------------------------------
@c WARNING: Do not edit this file (genmultibar.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/genmultibar.pl
@c -------------------------------------------------


This module defines predicates which show barchart widgets. These bar charts are somewhat different from the bar charts generated by the predicates in modules genbar1, genbar2, genbar3 and genbar4. Predicates in the present module show different features of each dataset element in one chart at the same time. Each bar chart element is a group of bars, and the element features involve three vectors defined as follows: 


@itemize @bullet{} 


@item xvector is a list containing the names (atoms) of the bars (n elements). Each bar group will be displayed at uniform intervals. 


@item yvector is a list that contains m sublists, each one is composed of n elements. The i-sublist contains the y-values of the i-BarAttribute element for all of the XVector elements. 


@item bar_attributtes is a list containing the appearance features of the bars (m elements). Each element of the list can be partial or complete, which means that you can define as bar attributes only the element name or by setting the element name, its background and foreground color and its stipple pattern. 


@end itemize  

Other relevant aspects about this widgets are: 


@itemize @bullet{} 


@item If you don't want to display text in the elements header, barchart title, xaxis title, yaxis title or footer, simply type @code{''} as the value of the argument. 


@item The bar chart has a legend, and one entry (symbol and label) per feature group bar. 


@item The user can either select the appearance of the bars (background color, foreground color and stipple style) or not. See the multibar_attribute type definition. 


@item Data points can have their bar segments displayed in one of the following modes: stacked, aligned, overlapped or overlayed. They user can change the mode clicking in the checkboxes associated to each mode. 


@item The predicates test whether the format of the arguments is correct. If one or both vectors are empty, the exception @code{error2} will be thrown. If the vectors contains elements but are not correct, the exception @code{error5} or @code{error6} will be thrown, depending on what is incorrect. @code{error5} means that @code{XVector} and each element of @code{YVector} do not contain the same number of elements or that @code{YVector} and @code{BarsAtt} do not contain the same number of elements, while @code{error6} indicates that not all the @code{BarsAtt} elements contain a correct number of attributes. 


@end itemize  

The examples will help you to understand how these predicates should be called. 





@menu
* Usage and interface (genmultibar)::  
* Documentation on exports (genmultibar)::  
* Documentation on internals (genmultibar)::  
@end menu

@node Usage and interface (genmultibar), Documentation on exports (genmultibar), genmultibar (library), genmultibar (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{genmultibar})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(genmultibar)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex multibarchart/8
@code{multibarchart/8}, 
@glindex multibarchart/10
@code{multibarchart/10}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/color_pattern
@code{chartlib/color_pattern}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}, 
@glindex random/random
@code{random/random}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (genmultibar), Documentation on internals (genmultibar), Usage and interface (genmultibar), genmultibar (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{genmultibar})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{multibarchart/8 (pred)}}}
@temp
@end iftex
@pdindex multibarchart/8 
@glindex multibarchart/8 
@deffn PREDICATE multibarchart/8:


@code{multibarchart(Header,BTitle,XTitle,XVector,YTitle,BarsAtts,YVector,Footer)}


The x axis limits are autoarrange. The user can call the predicate in two ways. In the first example the user sets the appearance of the bars, in the second one the appearance features will be chosen by the library. 

Example1: 
@smallexample 
multibarchart('This is the Header text',
	'My BarchartTitle',
	'Processors',
	['processor1','processor2','processor3','processor4'],
	'Time (seconds)',
	[['setup time','MediumTurquoise','Plum','pattern2'],
	    ['sleep time','Blue','Green','pattern5'],
	    ['running time','Yellow','Plum','pattern1']],
	[[20,30,40,50],[10,8,5,35],[60,100,20,50]],
	'This is the Footer text').
@end smallexample  
Example2: 
@smallexample 
multibarchart('This is the Header text',
	'My BarchartTitle',
	'Processors',
	['processor1','processor2','processor3','processor4'],
	'Time (seconds)',
	[['setup time'],['sleep time'],['running time']],
	[[20,30,40,50],[10,8,5,35],[60,100,20,50]],
	'This is the Footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{multibarchart/10 (pred)}}}
@temp
@end iftex
@pdindex multibarchart/10 
@glindex multibarchart/10 
@deffn PREDICATE multibarchart/10:


@code{multibarchart(Header,BT,XT,XVector,YT,BAtts,YVector,YMax,YMin,Footer)}


This predicate is quite similar to 
@glindex multibarchart/8
@code{multibarchart/8}, except in that you can choose limits in the y axis. The part of the bars placed outside the limits will not be plotted. 

Example2: 
@smallexample 
multibarchart('This is the Header text',
	'My BarchartTitle',
	'Processors',
	['processor1','processor2','processor3','processor4'],
	'Time (seconds)',
	[['setup time'],['sleep time'],['running time']],
	[[20,30,40,50],[10,8,5,35],[60,100,20,50]],
	[80],
	[0],
	'This is the Footer text').
@end smallexample  



@end deffn
@sp 1



@node Documentation on internals (genmultibar),  , Documentation on exports (genmultibar), genmultibar (library)
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{genmultibar})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{multibar_attribute/1 (regtype)}}}
@temp
@end iftex
@teindex multibar_attribute/1 
@glindex multibar_attribute/1 
@deffn REGTYPE multibar_attribute/1:




@smallexample 
multibar_attribute([LegendElement]) :-
        atomic(LegendElement).
multibar_attribute([LegendElement,ForegroundColor,BackgroundColor,StipplePattern]) :-
        atom(LegendElement),
        color(ForegroundColor),
        color(BackgroundColor),
        pattern(StipplePattern).
@end smallexample  

Defines the attributes of each feature bar along the different datasets. 


@table @asis 


@item LegendElement 
Legend element name. It may be a number or an atom. Every @code{LegendElement} value of the list must be unique. 


@item @code{ForegColor} 
It sets the Foreground color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{BackgColor} 
It sets the Background color of the bar. Its value must be a valid color, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a color chosen by the library. 


@item @code{SPattern} 
It sets the stipple of the bar. Its value must be a valid pattern, otherwise the system will throw an exception. If the argument value is a variable, it gets instantiated to a pattern chosen by the library. 


@end table  
 


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{xelement/1 (regtype)}}}
@temp
@end iftex
@teindex xelement/1 
@glindex xelement/1 
@deffn REGTYPE xelement/1:



 
@smallexample 
xelement(Label) :-
        atomic(Label).
@end smallexample  
This type defines a dataset label. Although @code{Label} values may be numbers, the will be treated as atoms, So it will be displayed at uniform intervals along the x axis. 



@end deffn
@sp 1


@c (component)


@node table_widget1 (library), table_widget2 (library), genmultibar (library), Top
@comment node-name, next,  previous,  up
@chapter table_widget1 (library)
@liindex table_widget1
@c -------------------------------------------------
@c WARNING: Do not edit this file (table_widget1.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/table_widget1.pl
@c -------------------------------------------------


In addition to the features explained in the introduction, the predicates exported by this module depict tables in which the font weight for the table elements is bold. 

If the arguments are not in a correct format the exception @code{error8} will be thrown. 





@menu
* Usage and interface (table_widget1)::	 
* Documentation on exports (table_widget1)::  
* Documentation on internals (table_widget1)::	
@end menu

@node Usage and interface (table_widget1), Documentation on exports (table_widget1), table_widget1 (library), table_widget1 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{table_widget1})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(table_widget1)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex tablewidget1/4
@code{tablewidget1/4}, 
@glindex tablewidget1/5
@code{tablewidget1/5}.


@item @emph{Regular Types:}

@glindex table/1
@code{table/1}, 
@glindex image/1
@code{image/1}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (table_widget1), Documentation on internals (table_widget1), Usage and interface (table_widget1), table_widget1 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{table_widget1})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget1/4 (pred)}}}
@temp
@end iftex
@pdindex tablewidget1/4 
@glindex tablewidget1/4 
@deffn PREDICATE tablewidget1/4:


@code{tablewidget1(Title,Header,ElementTable,Footer)}


Shows a regular table in a window. The user does not choose a background image. 

Example: 
@smallexample 
tablewidget1('This is the title',
	     'Header text',
	     [['Number of processors','8'],['Average processors','95'],
	         ['Average Tasks per fork','7.5']],
	     'Footer text').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget1/5 (pred)}}}
@temp
@end iftex
@pdindex tablewidget1/5 
@glindex tablewidget1/5 
@deffn PREDICATE tablewidget1/5:


@code{tablewidget1(Title,Header,ElementTable,Footer,BackgroundImage)}


Shows a regular table in a window. The user must set a background image. See the 
@glindex image/1
@code{image/1} type definition. 

Example: 
@smallexample 
tablewidget1('This is the title',
	     'Header text',
	     [['Number of processors','8'],['Average processors','95'],
	         ['Average Tasks per fork','7.5']],
	     'Footer text',
	     './images/rain.gif')
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{table/1 (regtype)}}}
@temp
@end iftex
@teindex table/1 
@glindex table/1 
@deffn REGTYPE table/1:



A table is a list of rows, each row must contain the same number of elements, otherwise the table wouldn't be regular and an exception will be thrown by the library. The rows list may not be empty. 
@smallexample 
table([X]) :-
        row(X).
table([X|Xs]) :-
        row(X),
        table(Xs).
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{image/1 (regtype)}}}
@temp
@end iftex
@teindex image/1 
@glindex image/1 
@deffn REGTYPE image/1:



Some predicates allow the user to set the widget background image, whose is what this type is intended for. The user has to take into account the following restrictions: 


@itemize @bullet{} 


@item The image must be in gif format. 


@item The file path must be absolute. 


@end itemize  



@end deffn
@sp 1



@node Documentation on internals (table_widget1),  , Documentation on exports (table_widget1), table_widget1 (library)
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{table_widget1})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{row/1 (regtype)}}}
@temp
@end iftex
@teindex row/1 
@glindex row/1 
@deffn REGTYPE row/1:




@smallexample 
row([X]) :-
        cell_value(X).
row([X|Xs]) :-
        cell_value(X),
        row(Xs).
@end smallexample  
Each row is a list of elements whose type is 
@glindex cell_value/1
@code{cell_value/1}. A row cannot be an empty list, as you can see in the definition type. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{row/1 (regtype)}}}
@temp
@end iftex
@teindex row/1 
@glindex row/1 
@deffn REGTYPE row/1:




@smallexample 
row([X]) :-
        cell_value(X).
row([X|Xs]) :-
        cell_value(X),
        row(Xs).
@end smallexample  
Each row is a list of elements whose type is 
@glindex cell_value/1
@code{cell_value/1}. A row cannot be an empty list, as you can see in the definition type. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{cell_value/1 (regtype)}}}
@temp
@end iftex
@teindex cell_value/1 
@glindex cell_value/1 
@deffn REGTYPE cell_value/1:



This type defines the possible values that a table element have. If any cell value is @code{''}, the cell will be displayed empty. 
@smallexample 
cell_value(X) :-
        atomic(X).
@end smallexample  



@end deffn
@sp 1


@c (component)


@node table_widget2 (library), table_widget3 (library), table_widget1 (library), Top
@comment node-name, next,  previous,  up
@chapter table_widget2 (library)
@liindex table_widget2
@c -------------------------------------------------
@c WARNING: Do not edit this file (table_widget2.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/table_widget2.pl
@c -------------------------------------------------


In addition to the features explained in the introduction, predicates exported by this module display tables in which the font weight for the elements placed in the first row is bold. The remaining elements are in medium weight font. 

If the arguments are not in a correct format the exception @code{error8} will be thrown. 





@menu
* Usage and interface (table_widget2)::	 
* Documentation on exports (table_widget2)::  
@end menu

@node Usage and interface (table_widget2), Documentation on exports (table_widget2), table_widget2 (library), table_widget2 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{table_widget2})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(table_widget2)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex tablewidget2/4
@code{tablewidget2/4}, 
@glindex tablewidget2/5
@code{tablewidget2/5}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/table_widget1
@code{chartlib/table_widget1}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (table_widget2),  , Usage and interface (table_widget2), table_widget2 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{table_widget2})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget2/4 (pred)}}}
@temp
@end iftex
@pdindex tablewidget2/4 
@glindex tablewidget2/4 
@deffn PREDICATE tablewidget2/4:


@code{tablewidget2(Title,Header,ElementTable,Footer)}


Shows a regular table in a window. The system sets a default background image for the widget. 

Example: 
@smallexample 
tablewidget2('COM Features',
	     'Extracted from "Inside COM" book ',
	     [['Feature','Rich people','Bean Plants','C++','COM'],
	       ['Edible','Yes','Yes','No','No'],
	       ['Supports inheritance','Yes','Yes','Yes','Yes and No'],
	       ['Can run for President','Yes','No','No','No']],
	     'What do you think about COM?').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget2/5 (pred)}}}
@temp
@end iftex
@pdindex tablewidget2/5 
@glindex tablewidget2/5 
@deffn PREDICATE tablewidget2/5:


@code{tablewidget2(Title,Header,ElementTable,Footer,BackgroundImage)}


This predicate and 
@glindex tablewidget2/4
@code{tablewidget2/4} are quite similar, except that in the already one defined you must set the background image. 

Example: 
@smallexample 
tablewidget2('COM Features',
	     'Extracted from "Inside COM" book ',
	     [['Feature','Rich people','Bean Plants','C++','COM'],
	       ['Edible','Yes','Yes','No','No'],
	       ['Supports inheritance','Yes','Yes','Yes','Yes and No'],
	       ['Can run for President','Yes','No','No','No']],
	     'What do you think about COM?',
	     './images/rain.gif').
@end smallexample  



@end deffn
@sp 1


@c (component)


@node table_widget3 (library), table_widget4 (library), table_widget2 (library), Top
@comment node-name, next,  previous,  up
@chapter table_widget3 (library)
@liindex table_widget3
@c -------------------------------------------------
@c WARNING: Do not edit this file (table_widget3.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/table_widget3.pl
@c -------------------------------------------------


The predicates exported by this module display data in a regular table, as we brought up in the introduction. Both predicates have in common that the font weight for the elements placed in the first column is bold and the remaining elements are in medium font weight. 

If the arguments are not in a correct format the exception @code{error8} will be thrown. 





@menu
* Usage and interface (table_widget3)::	 
* Documentation on exports (table_widget3)::  
@end menu

@node Usage and interface (table_widget3), Documentation on exports (table_widget3), table_widget3 (library), table_widget3 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{table_widget3})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(table_widget3)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex tablewidget3/4
@code{tablewidget3/4}, 
@glindex tablewidget3/5
@code{tablewidget3/5}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/table_widget1
@code{chartlib/table_widget1}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (table_widget3),  , Usage and interface (table_widget3), table_widget3 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{table_widget3})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget3/4 (pred)}}}
@temp
@end iftex
@pdindex tablewidget3/4 
@glindex tablewidget3/4 
@deffn PREDICATE tablewidget3/4:


@code{tablewidget3(Title,Header,ElementTable,Footer)}


Shows a regular table in a window. The user does not choose a background image. 

Example: 
@smallexample 
tablewidget3('This is the title',
	     'Header text',
	     [['Number of processors','8'],['Average processors','95'],
	       ['Tasks per fork','7.5']],
	     'Footer text').
@end smallexample  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget3/5 (pred)}}}
@temp
@end iftex
@pdindex tablewidget3/5 
@glindex tablewidget3/5 
@deffn PREDICATE tablewidget3/5:


@code{tablewidget3(Title,Header,ElementTable,Footer,BackgroundImage)}


Shows a regular table in a window. The user must set a background image. 

Example: 
@smallexample 
tablewidget3('This is the title',
	     'Header text',
	     [['Number of processors','8'],['Average processors','95'],
	         ['Average Tasks per fork','7.5']],
	     'Footer text',
	     './images/rain.gif')
@end smallexample  



@end deffn
@sp 1


@c (component)


@node table_widget4 (library), test_format (library), table_widget3 (library), Top
@comment node-name, next,  previous,  up
@chapter table_widget4 (library)
@liindex table_widget4
@c -------------------------------------------------
@c WARNING: Do not edit this file (table_widget4.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/table_widget4.pl
@c -------------------------------------------------


In addition to the features explained in the introduction, predicates exported by this module display tables in which the font weight for the elements placed in the first row and column is bold. The remaining elements are in medium weight font. 

If the arguments are not in a correct format the exception @code{error8} will be thrown. 





@menu
* Usage and interface (table_widget4)::	 
* Documentation on exports (table_widget4)::  
@end menu

@node Usage and interface (table_widget4), Documentation on exports (table_widget4), table_widget4 (library), table_widget4 (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{table_widget4})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(table_widget4)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex tablewidget4/4
@code{tablewidget4/4}, 
@glindex tablewidget4/5
@code{tablewidget4/5}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/genbar1
@code{chartlib/genbar1}, 
@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex chartlib/table_widget1
@code{chartlib/table_widget1}, 
@glindex chartlib/test_format
@code{chartlib/test_format}, 
@glindex chartlib/install_utils
@code{chartlib/install_utils}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (table_widget4),  , Usage and interface (table_widget4), table_widget4 (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{table_widget4})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget4/4 (pred)}}}
@temp
@end iftex
@pdindex tablewidget4/4 
@glindex tablewidget4/4 
@deffn PREDICATE tablewidget4/4:


@code{tablewidget4(Title,Header,ElementTable,Footer)}


Shows a regular table in a window. The system sets a default background image for the widget. 

Example: 
@smallexample 
tablewidget4('Some sterEUtypes',
  'Source: Eurostat yearbook, 1999',
  [['Country','Adult alcohol intake per year (litres)',
       'Cigarettes smoked per day per adult',
             'Suicides per 100000 people'],
      ['Finland','8.4','2.2','26.3'],['Spain','11.4','5.3','7.5'],
      ['Austria','11.9','4.6','20.7'],['Britain','9.4','4.2','7.1'],
      ['USA','4.7','4.9','13'],['European Union','11.1','4.5','11.9']],
  'This is part of the published table').
@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{tablewidget4/5 (pred)}}}
@temp
@end iftex
@pdindex tablewidget4/5 
@glindex tablewidget4/5 
@deffn PREDICATE tablewidget4/5:


@code{tablewidget4(Title,Header,ElementTable,Footer,BackgroundImage)}


This predicate and 
@glindex tablewidget4/4
@code{tablewidget4/4} are comparable, except that in the already defined you must set the background image. 

Example: 
@smallexample 
tablewidget4('Some sterEUtypes',
  'Source: Eurostat yearbook, 1999',
  [['Country','Adult alcohol intake per year (litres)',
       'Cigarettes smoked per day per adult',
           'Suicides per 100000 people'],
      ['Finland','8.4','2.2','26.3'],['Spain','11.4','5.3','7.5'],
      ['Austria','11.9','4.6','20.7'],['Britain','9.4','4.2','7.1'],
      ['USA','4.7','4.9','13'],['European Union','11.1','4.5','11.9']],
  'This is part of the published table',
  './images/rain.gif').
@end smallexample  


@end deffn
@sp 1


@c (component)


@node test_format (library), *** PART XII - Appendices, table_widget4 (library), Top
@comment node-name, next,  previous,  up
@chapter test_format (library)
@liindex test_format
@c -------------------------------------------------
@c WARNING: Do not edit this file (test_format.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/contrib/chartlib/test_format.pl
@c -------------------------------------------------


Most of the predicates exported by this module perform some checks to determine whether the arguments attain some conditions or not. In the second case an exception will be thrown. To catch the exceptions you can use the following metapredicates when invoking chartlib exported predicates: 


@itemize @bullet{} 


@item 
@glindex chartlib_text_error_protect/1
@code{chartlib_text_error_protect/1} 


@item 
@glindex chartlib_text_error_protect/1
@code{chartlib_text_error_protect/1} 


@end itemize  

Both metapredicates are defined in the chartlib_errhandle module that comes with this library. Some of the predicates have a @code{Predicate} argument which will be used in case of error to show which chartlib predicate causes the error. 





@menu
* Usage and interface (test_format)::  
* Documentation on exports (test_format)::  
@end menu

@node Usage and interface (test_format), Documentation on exports (test_format), test_format (library), test_format (library)
@comment node-name, next,  previous,  up
@section Usage and interface (@code{test_format})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

@code{:- use_module(library(test_format)).}

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex equalnumber/3
@code{equalnumber/3}, 
@glindex not_empty/4
@code{not_empty/4}, 
@glindex not_empty/3
@code{not_empty/3}, 
@glindex check_sublist/4
@code{check_sublist/4}, 
@glindex valid_format/4
@code{valid_format/4}, 
@glindex vectors_format/4
@code{vectors_format/4}, 
@glindex valid_vectors/4
@code{valid_vectors/4}, 
@glindex valid_attributes/2
@code{valid_attributes/2}, 
@glindex valid_table/2
@code{valid_table/2}.


@end itemize


@item @strong{Other modules used:}
@itemize @minus


@item @emph{System library modules:}

@glindex chartlib/bltclass
@code{chartlib/bltclass}, 
@glindex lists
@code{lists}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (test_format),  , Usage and interface (test_format), test_format (library)
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{test_format})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{equalnumber/3 (pred)}}}
@temp
@end iftex
@pdindex equalnumber/3 
@glindex equalnumber/3 
@deffn PREDICATE equalnumber/3:


@code{equalnumber(X,Y,Predicate)}


Test whether the list @code{X} and the list @code{Y} contain the same number of elements. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{not_empty/4 (pred)}}}
@temp
@end iftex
@pdindex not_empty/4 
@glindex not_empty/4 
@deffn PREDICATE not_empty/4:


@code{not_empty(X,Y,Z,Predicate)}


Tests whether at least one the lists @code{X}, @code{Y} or @code{Z} are empty. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{not_empty/3 (pred)}}}
@temp
@end iftex
@pdindex not_empty/3 
@glindex not_empty/3 
@deffn PREDICATE not_empty/3:


@code{not_empty(X,Y,Predicate)}


Tests whether the lists @code{X} or @code{Y} are empty. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{check_sublist/4 (pred)}}}
@temp
@end iftex
@pdindex check_sublist/4 
@glindex check_sublist/4 
@deffn PREDICATE check_sublist/4:


@code{check_sublist(List,Number,Number,Predicate)}


Tests if the number of elements in each sublist of @code{List} is @code{Number1} or @code{Number2}. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{valid_format/4 (pred)}}}
@temp
@end iftex
@pdindex valid_format/4 
@glindex valid_format/4 
@deffn PREDICATE valid_format/4:


@code{valid_format(XVector,YVector,BarsAttributes,Predicate)}


Tests the following restrictions: 


@itemize @bullet{} 


@item The @code{XVector} number of elements is the same as each @code{YVector} sublist number of elements. 


@item The @code{YVector} length is equal to @code{BarsAttributes} length. 


@end itemize  


@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{vectors_format/4 (pred)}}}
@temp
@end iftex
@pdindex vectors_format/4 
@glindex vectors_format/4 
@deffn PREDICATE vectors_format/4:


@code{vectors_format(XVector,YVectors,LinesAttributes,Predicate)}


Tests the following conditions: 


@itemize @bullet{} 


@item @code{YVectors} list and @code{LinesAttributes} list have the same number of elements. 


@item @code{XVector} list and each @code{YVectors} element have the same number of elements. 


@item Each sublist of @code{LinesAttributes} is composed of 5, 3 or 1 elements. 


@end itemize  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{valid_vectors/4 (pred)}}}
@temp
@end iftex
@pdindex valid_vectors/4 
@glindex valid_vectors/4 
@deffn PREDICATE valid_vectors/4:


@code{valid_vectors(XVector,YVectors,LinesAttributes,Predicate)}


Tests the following conditions: 


@itemize @bullet{} 


@item @code{XVector} list, @code{YVectors} list and @code{LinesAttributes} list have the same number of elements. 


@item Each sublist of @code{LinesAttributes} is composed of 5, 3 or 1 element. 


@end itemize  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{valid_attributes/2 (pred)}}}
@temp
@end iftex
@pdindex valid_attributes/2 
@glindex valid_attributes/2 
@deffn PREDICATE valid_attributes/2:


@code{valid_attributes(BarsAttibuttes,Predicate)}


Check if each @code{BarsAttibuttes} element is a list composed of one or four elements. 



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{valid_table/2 (pred)}}}
@temp
@end iftex
@pdindex valid_table/2 
@glindex valid_table/2 
@deffn PREDICATE valid_table/2:


@code{valid_table(ElementTable,Predicate)}


All of the @code{ElementTable} sublists have the same number of elements and are not empty. 



@end deffn
@sp 1


@c (component)


@node *** PART XII - Appendices, Installing Ciao from the source distribution, test_format (library), Top
@comment node-name, next,  previous,  up
@unnumbered PART XII - Appendices
@iftex
@vfill
@cartouche
@sp
@ 
@end iftex
@c -------------------------------------------------
@c WARNING: Do not edit this file (Append.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/Append.pl
@c -------------------------------------------------


These appendices describe the 
@glindex installation
installation of the Ciao environment on different systems and some other issues such as 
@glindex reporting bugs
reporting bugs, signing up on the Ciao user's 
@glindex mailing list
mailing list, 
@glindex downloading new versions
downloading new versions, 
@glindex limitations
limitations, etc. 



@iftex
@sp 
@end cartouche
@vfill
@end iftex

@c (component)


@node Installing Ciao from the source distribution, Installing Ciao from a Win32 binary distribution, *** PART XII - Appendices, Top
@comment node-name, next,  previous,  up
@chapter Installing Ciao from the source distribution
@c -------------------------------------------------
@c WARNING: Do not edit this file (Install.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/Install.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#104 (2000/4/3, 10:41:2 CEST)

 To correctly install PiLLoW, first, make sure you downloaded the right version of PiLLoW (there are different versions for different LP/CLP systems; the version that comes with Ciao is of course the right one for Ciao). Then, please follow these steps: 


@enumerate  


@item Copy the files in the @code{images} directory to a WWW accessible directory in your server. 


@item Edit the file 
@glindex icon_address.pl
@code{icon_address.pl} and change the fact to point to the URL to be used to access the images above. 


@item In the Ciao system the files are in the correct place, in other systems copy the files 
@glindex pillow.pl
@code{pillow.pl} and 
@glindex icon_address.pl
@code{icon_address.pl} to a suitable directory so that your Prolog system will find them. 


@end enumerate  



@c (component)


@node Installing Ciao from a Win32 binary distribution, Beyond installation, Installing Ciao from the source distribution, Top
@comment node-name, next,  previous,  up
@chapter Installing Ciao from a Win32 binary distribution
@c -------------------------------------------------
@c WARNING: Do not edit this file (InstallWin32bin.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/InstallWin32bin.pl
@c -------------------------------------------------

@strong{Author(s):} Daniel Cabeza, Manuel Carro, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)

@strong{Version of last change:} 1.5#92 (2000/3/28, 17:41:25 CEST)

 
@coindex installation, Windows, from binaries
@glindex installation, Windows, from binaries 

This describes the installation of Ciao after downloading the Windows @emph{binary} (i.e., @emph{precompiled}) distribution. It includes the installation of libraries and manuals and applies to Windows NT/95/98 systems. This is the simplest Windows installation, since it requires no compilation and is highly recommended. However, it is also possible to compile Ciao from the source distribution on these systems (please refer to @ref{Installing Ciao from the source distribution} for details). 

If you find any problems during installation, please refer to @ref{Troubleshooting (nasty messages and nifty workarounds)}. 
@coindex troubleshooting
@glindex troubleshooting 
See also @ref{Downloading new versions} and @ref{Reporting bugs}. 



@menu
* Win32 binary installation summary::  
* Checking for correct installation on Win32::	
* Compiling the miscellaneous utilities under Windows::	 
* Server installation under Windows::  
* Uninstallation under Windows::  
@end menu

@node Win32 binary installation summary, Checking for correct installation on Win32, Installing Ciao from a Win32 binary distribution, Installing Ciao from a Win32 binary distribution
@comment node-name, next,  previous,  up
@section Win32 binary installation summary 


@noindent
Please follow these steps (below we use the terms @emph{folder} and @emph{directory} interchangeably): 


@enumerate  


@item Download the precompiled distribution and unpack it into any suitable folder, such as, e.g., @code{C:\Program Files}. 

This will create there a folder whose name reflects the Ciao version. Due to limitations of Windows related to file associations, do not put Ciao too deep in the folder hierarchy. For unpacking you will need a recent version of a zip archive manager -- there are many freely available such as 
@glindex WinZip
@code{WinZip}, 
@glindex unzip
@code{unzip}, 
@glindex pkunzip
@code{pkunzip}, etc. (see for example @code{www.winzip.com}). Some users have reported some problems with version 6.2 of WinZip, but no problems with, e.g., version 7. With WinZip, simply click on ``Extract'' and select the extraction folder as indicated above. 


@item Stop any Ciao-related applications. 

If you have a previous version of Ciao installed, make sure you do not have any Ciao applications (including, e.g., a toplevel shell) running, or the extraction process may not be able to complete. You may also want to delete the entire folder of the previous installation to save space. 


@item Open the Ciao source directory created during extraction and run (e.g. by double-clicking on it) the @code{install}(@code{.bat}) script. Answer ``yes'' to the dialog that pops up and type any type any character in the installation window to finish the process. You may need to reboot for the changes in the registry to take effect. 

This will update the windows registry (the file @code{ciao}(@code{.reg}) lists the additions) and also create some @code{.bat} files which may be useful for running Ciao executables from the command line. It also creates initialization scripts for the 
@glindex emacs
@code{emacs} editor. The actions performed by the installation script are reported in the installation window. 


@item You may want to add a 
@coindex windows shortcut
@glindex windows shortcut
@emph{windows shortcut} 
@coindex shortcut, windows
@glindex shortcut, windows 
in a convenient place, such as the desktop, to 
@glindex ciaosh.cpx
@code{ciaosh.cpx}, the standard interactive toplevel shell. It is located inside the @code{shell} folder (e.g., click on the file 
@glindex ciaosh.cpx
@code{ciaosh.cpx} with the right mouse button and select the appropriate option, @code{Send to->Desktop as shortcut}). 


@item You may also want to add another shortcut to the file 
@glindex ciao
@code{ciao}(@code{.html}) located inside @code{doc\reference\ciao_html} so that you can open the Ciao manual by simply double-clicking on this shortcut. 


@item Finally, if the (freely available) 
@glindex emacs
@code{emacs} editor/environment is not installed in your system, we @emph{highly recommend} that you also install it at this point. While it is easy to use Ciao with any editor of your choice, the Ciao distribution includes a very powerful 
@coindex development environment
@glindex development environment 
@emph{application development environment} which is based on 
@glindex emacs
@code{emacs} and which enables, e.g., source-level debugging, syntax coloring, context-sensitive on-line help, etc. If you are not convinced, consider that many programmers inside Micros*ft use @code{emacs} for developing their programs. 

 
@coindex emacs, download
@glindex emacs, download 
@coindex downloading emacs
@glindex downloading emacs 

The emacs editor (in all its versions: Un*x, Windows, etc.) can be downloaded from, for example, @uref{http://www.emacs.org/}, and also from the many GNU mirror sites worldwide (See @uref{http://www.gnu.org/} for a list), in the @code{gnu/emacs} and @code{gnu/windows/emacs} directories. For example, at UPM it can be found at @uref{ftp://ftp.fi.upm.es/pub/mirrors/gnu/emacs} and @uref{ftp://ftp.fi.upm.es/pub/mirrors/gnu/windows/emacs}. You can find answers to frequently asked questions (FAQ) about 
@glindex emacs
@code{emacs} in general at @uref{http://www.gnu.org/software/emacs/emacs-faq.text} and about the Windows version at @uref{http://www.gnu.org/software/emacs/windows/ntemacs.html} (despite the 
@glindex ntemacs
@code{ntemacs} name it runs fine also as is on Win9X and Win2000 machines). 


@coindex emacs mode, setting up, Win32
@glindex emacs mode, setting up, Win32 
You need to tell 
@glindex emacs
@code{emacs} how to load the Ciao mode automatically when editing and how to access the on-line documentation: 


@itemize @bullet{} 


@item Start 
@glindex emacs
@code{emacs} (double click on the icon or from the @code{Start} menu). Open (menu @code{Files->Open File} or simply @key{^X}@key{^F}) the file 
@glindex ForEmacs.txt
@code{ForEmacs.txt} that the installation script has created in directory where you installed the Ciao distribution. 


@item Copy the lines in the file (select with the mouse and then menu @code{Edit->Copy}). Open/Create using 
@glindex emacs
@code{emacs} (menu @code{Files->Open File} or simply @key{^X}@key{^F}) the file 
@glindex ~/.emacs
@code{~/.emacs} (or, if this fails, 
@glindex c:/.emacs
@code{c:/.emacs}). 


@item Paste the two lines (menu @code{Edit->Paste} or simply @key{^X}@key{^Y}) into the file and save (menu @code{Files->Save Buffer} or simply @key{^X}@key{^S}). 


@item Exit 
@glindex emacs
@code{emacs} and start it again. 


@end itemize  


@noindent

@glindex emacs
@code{emacs} should not report any errors (at least related to Ciao) on startup. At this point the 
@glindex emacs
@code{emacs} checks in the following section should work. 


@end enumerate  



@node Checking for correct installation on Win32, Compiling the miscellaneous utilities under Windows, Win32 binary installation summary, Installing Ciao from a Win32 binary distribution
@comment node-name, next,  previous,  up
@section Checking for correct installation on Win32 

After the actions and registry changes performed by the installation procedure, you should check that the following should work correctly: 

 
@itemize @bullet{} 


@item Ciao-related file types (@code{.pl} source files, @code{.cpx} executables, @code{.itf,.po,.asr} interface files, @code{.pls} scripts, etc.) should have specific icons associated with them (you can look at the files in the folders in the Ciao distribution to check). 


@item Double-clicking on the shortcut to 
@glindex ciaosh
@code{ciaosh}(@code{.cpx}) on the desktop should start the typical Prolog top-level shell in a window. If this shortcut has not been created on the desktop, then double-clicking on the 
@glindex ciaosh
@code{ciaosh}(@code{.cpx}) icon inside the @code{shell} folder within the Ciao source folder should have the same effect. 


@item In the top-level shell, Prolog library modules should load correctly. Type for example @code{use_module(library(dec10_io))} at the Ciao top-level prompt --you should get back a prompt with no errors reported. 


@item To exit the top level shell, type @code{halt.} as usual, or @key{^Z}. 


@end itemize  


@noindent
Also, the following documentation-related actions should work: 


@itemize @bullet{} 


@item Double-clicking on the shortcut to @code{ciao}(@code{.html}) which appears on the desktop should show the Ciao manual in your default WWW browser. If this shortcut has not been created you can double-click on the @code{ciao}(@code{.html}) file in the @code{doc\reference\ciao_html} folder inside the Ciao source folder. Make sure you configure your browser to use 
@coindex style sheets
@glindex style sheets
@emph{style sheets} for correct formatting of the manual (note, however, that some older versions of 
@glindex Explorer
Explorer did not support style sheets well and will give better results turning them off). 


@coindex printing, manual
@glindex printing, manual 
@coindex manual, printing
@glindex manual, printing 
@coindex help
@glindex help 


@item The @code{doc\reference} folder contains the manual also in the other formats present in the distribution, such as @code{info} (very convenient for users of the 
@glindex emacs
@code{emacs} editor/program development system) and @code{postscript} or @code{pdf}, which are specially useful for printing. See @ref{Printing manuals (Win32)} for instructions. 


@end itemize  



@noindent
Finally, if 
@glindex emacs
@code{emacs} is installed, after starting it (double-clicking on the @code{emacs} icon or from the @code{Start} menu) the following should work: 

 
@itemize @bullet{} 


@item Typing @key{^H} @key{i} (or in the menus @code{Help->Manuals->Browse Manuals with Info}) should open a list of manuals in info format in which the Ciao manual(s) should appear. 


@item When opening a Prolog file, i.e., a file with @code{.pl} or @code{.pls} ending, using @key{^X}@key{^F}@code{filename} (or using the menus) the code should appear highlighted according to syntax (e.g., comments in red), and @code{Ciao/Prolog} menus should appear in the menu bar on top of the 
@glindex emacs
@code{emacs} window. 


@item Loading the file using the @code{Ciao/Prolog} menu (or typing @key{^C} @key{l}) should start in another emacs buffer the Ciao toplevel shell and load the file. You should now be able to switch the the toplevel shell and make queries from within 
@glindex emacs
@code{emacs}. 


@end itemize  


@noindent
@strong{Note:} when using 
@glindex emacs
@code{emacs} it is @emph{very convenient} to swap the locations of the (normally not very useful) @key{Caps Lock} key and the (very useful in 
@glindex emacs
@code{emacs}) @key{Ctrl} key on the keyboard. How to do this is explained in the 
@glindex emacs
@code{emacs} frequently asked questions FAQs (see the 
@glindex emacs
@code{emacs} download instructions for their location). 





@node Compiling the miscellaneous utilities under Windows, Server installation under Windows, Checking for correct installation on Win32, Installing Ciao from a Win32 binary distribution
@comment node-name, next,  previous,  up
@section Compiling the miscellaneous utilities under Windows 

The 
@glindex etc
@code{etc} folder contains a number of utilities, documented in the manual in @emph{PART V - Miscellaneous Standalone Utilities}. In the Win32 distribution these utilities are not compiled by the installation process. You can create the executable for each of them when needed by compiling the corresponding @code{.pl} file. 



@node Server installation under Windows, Uninstallation under Windows, Compiling the miscellaneous utilities under Windows, Installing Ciao from a Win32 binary distribution
@comment node-name, next,  previous,  up
@section Server installation under Windows 


@coindex installation, Windows clients
@glindex installation, Windows clients 
@coindex installation, Windows server
@glindex installation, Windows server 

If you would like to install Ciao on a server machine, used by several clients, the following steps are recommended: 


@itemize @bullet{} 


@item Follow the standard installation procedure on the server. When selecting the folder in which Ciao is installed make sure you select a folder that is visible by the client machines. Also make sure that the functionality specified in the previous sections is now available on the server. 


@item Perform a 
@coindex client installation
@glindex client installation
@emph{client installation} on each client, by running (e.g., double-click on it) the 
@glindex client.bat
@code{client.bat} script. This should update the registry of each client. At this point all the functionality should also be available on the clients. 


@end itemize  



@node Uninstallation under Windows,  , Server installation under Windows, Installing Ciao from a Win32 binary distribution
@comment node-name, next,  previous,  up
@section Uninstallation under Windows 



To uninstall Ciao under Windows, simply delete the directory in which you put the Ciao distribution. If you also want to delete the registry entries created by the Ciao installation (not strictly needed) this must currently be done by hand. The installation leaves a list of these entries in the file 
@glindex ciao.reg
@code{ciao.reg} to aid in this task. Also, all the register entries contain the word @emph{ciao}. Thus, to delete all Ciao entries, run the application 
@glindex regedit
@code{regedit} (for example, by selecting @code{Run} from the Windows @code{Start} menu), search (@key{^F}) for @emph{ciao} in all registry entries (i.e., select all of @code{Keys}, @code{Values}, and @code{Data} in the @code{Edit->Find} dialog), and delete each matching key (click on the left window to find the matching key for each entry found). 




@c (component)


@node Beyond installation, References, Installing Ciao from a Win32 binary distribution, Top
@comment node-name, next,  previous,  up
@chapter Beyond installation
@c -------------------------------------------------
@c WARNING: Do not edit this file (BeyondInstall.texic)
@c It has been generated automatically from file:  
@c /home/clip/Systems/ciao-1.5/doc/common/BeyondInstall.pl
@c -------------------------------------------------

@strong{Author(s):} Manuel Carro, Daniel Cabeza, Manuel Hermenegildo.

@strong{Version:} 1.5#171 (2000/7/7, 16:10:17 CEST)


 



@menu
* Architecture-specific notes and limitations::	 
* Keeping up to date with the Ciao users mailing list::	 
* Downloading new versions::	
* Reporting bugs::		
@end menu

@node Architecture-specific notes and limitations, Keeping up to date with the Ciao users mailing list, Beyond installation, Beyond installation
@comment node-name, next,  previous,  up
@section Architecture-specific notes and limitations 


@coindex limitations, architecture-specific
@glindex limitations, architecture-specific 
Ciao makes use of advanced characteristics of modern architectures and operating systems such as multithreading, shared memory, sockets, locks, dynamic load libraries, etc., some of which are sometimes not present in a given system and others may be implemented in very different ways across the different systems. As a result, currently not all Ciao features are available in all supported operating systems. Sometimes this is because not all the required features are present in all the OS flavors supported and sometimes because we simply have not had the time to port them yet. 

The current state of matters is as follows: 


@table @asis 
@item LINUX: 
multithreading, shared DB access, and locking working. 
@item Solaris: 
multithreading, shared DB access, and locking working. 
@item IRIX: 
multithreading, shared DB access, and locking working. 
@item SunOS 4: 
multithreading, shared DB access, and locking NOT working. 
@item Win 95/98/NT/2000: 
multithreading, shared DB access, and locking working. Dynamic linking of object code (C) libraries NOT working. 
@end table  

The features that do not work are disabled at compile time. 



@node Keeping up to date with the Ciao users mailing list, Downloading new versions, Architecture-specific notes and limitations, Beyond installation
@comment node-name, next,  previous,  up
@section Keeping up to date with the Ciao users mailing list 

We recommend that you join the 
@coindex mailing list
@glindex mailing list 
@coindex ciao-users
@glindex ciao-users 
Ciao 
@coindex users mailing list
@glindex users mailing list
@emph{users mailing list} (@code{ciao-users@@clip.dia.fi.upm.es}), in order to receive information on new versions and solutions to problems. Simply send a message to @email{ciao-users-request@@clip.dia.fi.upm.es}, containing in the body only the word: 

@code{subscribe} 


@noindent
alone in one line. Messages in the list are strictly limited to issues directly related to Ciao Prolog and your email address will of course be kept strictly confidential. You mail also want to subscribe to the @code{comp.lang.prolog} newsgroup. 

There is additional info available on the Ciao system, other CLIP group software, publications on the technology underlying these systems, etc. in the CLIP group's WWW site @uref{http://clip.dia.fi.upm.es}. 



@node Downloading new versions, Reporting bugs, Keeping up to date with the Ciao users mailing list, Beyond installation
@comment node-name, next,  previous,  up
@section Downloading new versions 

Ciao and its related libraries and utilities are under constant improvement, so you should make sure that you have the latest versions of the different components, which can be dowloaded from: 
@coindex downloading, latest versions
@glindex downloading, latest versions 

@uref{http://clip.dia.fi.upm.es/Software} 



@node Reporting bugs,  , Downloading new versions, Beyond installation
@comment node-name, next,  previous,  up
@section Reporting bugs 
@coindex bugs, reporting
@glindex bugs, reporting 
@coindex reporting bugs
@glindex reporting bugs 

If you still have problems after downloading the latest version and reading the installation instructions you can send a message to @email{ciao-bug@@clip.dia.fi.upm.es}. Please be as informative as possible in your messages, so that we can reproduce the bug. 


@itemize @bullet{} 


@item For @emph{installation problems} we typically need to have the version and patch number of the Ciao package (e.g., the name of the file downloaded), the output produced by the installation process (you can capture it by redirecting the output into a file or cutting and pasting with the mouse), and the exact version of the Operating System you are using (as well as the C compiler, if you took a source distribution). 


@item For @emph{problems during use} we also need the Ciao and OS versions and a small example of code which we can run to reproduce the bug. 


@end itemize  
 






@c (references)
@node References, Library/Module Definition Index, Beyond installation, Top
@comment  node-name,  next,  previous,  up
@unnumbered References

@table @strong

@item [AAF91]
J. Almgren, S. Andersson, L. Flood, C. Frisk, H. Nilsson, and J. Sundberg.
@* @emph{{Sics}tus {P}rolog {L}ibrary {M}anual}.
@* Po Box 1263, S-16313 Spanga, Sweden, October 1991.

@item [AKNL86]
Hassan Ait-Kaci, Roger Nasr, and Pat Lincoln.
@* {E} {A}n {O}verview.
@* Technical Report AI-420-86-P, Microelectronics and Computer Technology
  Corporation, 9430 Research Boulevard, Austin, TX 78759, December 1986.

@item [Apt97]
K. Apt, editor.
@* @emph{{F}rom {L}ogic {P}rogramming to {P}rolog}.
@* Prentice-Hall, Hemel Hempstead, Hertfordshire, England, 1997.

@item [BA82]
M. Ben-Ari.
@* @emph{Principles of Concurrent Programming}.
@* Prentice Hall International, 1982.

@item [BBP81]
D.L. Bowen, L. Byrd, L.M. Pereira, F.C.N. Pereira, and D.H.D. Warren.
@* Decsystem-10 prolog user's manual.
@* Technical report, Department of Artificial Intelligence, University of
  Edinburgh, October 1981.

@item [BCC97]
F. Bueno, D. Cabeza, M. Carro, M. Hermenegildo, P. L\'{o}pez-Garc\'{\i}a, and
  G. Puebla.
@* {T}he {C}iao {P}rolog {S}ystem. {R}eference {M}anual.
@* The Ciao System Documentation Series--{TR} {CLIP}3/97.1, School of Computer
  Science, Technical University of Madrid (UPM), August 1997.

@item [BdlBH99]
F. Bueno, M.~Garc\'{\i}a de~la Banda, and M. Hermenegildo.
@* {E}ffectiveness of {A}bstract {I}nterpretation in {A}utomatic
  {P}arallelization: {A} {C}ase {S}tudy in {L}ogic {P}rogramming.
@* @emph{ACM Transactions on Programming Languages and Systems},
  21(2):189--238, March 1999.

@item [BLGPH99]
F. Bueno, P. L\'{o}pez-Garc\'{\i}a, G. Puebla, and M. Hermenegildo.
@* {T}he {Ciao} {P}rolog {P}reprocessor.
@* Technical Report CLIP8/95.0.7.20, Technical University of Madrid (UPM),
  Facultad de Inform\'atica, 28660 Boadilla del Monte, Madrid, Spain, November
  1999.

@item [Bue95]
F. Bueno.
@* {T}he {CIAO} {M}ultiparadigm {C}ompiler: {A} {U}ser's {M}anual.
@* {T}echnical {R}eport {CLIP}8/95.0, Facultad de Inform\'atica, UPM, June
  1995.

@item [Byr80]
L. Byrd.
@* Understanding the {C}ontrol {F}low of {P}rolog {P}rograms.
@* In S.-A. T\"{a}rnlund, editor, @emph{Workshop on Logic Programming},
  Debrecen, 1980.

@item [Car87]
M. Carlsson.
@* {F}reeze, {I}ndexing, and {O}ther {I}mplementation {I}ssues in the {Wam}.
@* In @emph{Fourth International Conference on Logic Programming}, pages
  40--58. University of Melbourne, {MIT} Press, May 1987.

@item [Car88]
M. Carlsson.
@* @emph{{Sics}tus {P}rolog {U}ser's {M}anual}.
@* Po Box 1263, S-16313 Spanga, Sweden, February 1988.

@item [CCG98]
I. Caballero, D. Cabeza, S. Genaim, J.M. Gomez, and M. Hermenegildo.
@* persdb\_sql: {SQL} {P}ersistent {D}atabase {I}nterface.
@* {T}echnical {R}eport D3.1.M2-A2 CLIP10/98.0, RADIOWEB Project, December
  1998.

@item [CGH93]
M. Carro, L. G\'{o}mez, and M. Hermenegildo.
@* {S}ome {P}aradigms for {V}isualizing {P}arallel {E}xecution of {L}ogic
  {P}rograms.
@* In @emph{1993 International Conference on Logic Programming}, pages
  184--201. {MIT} Press, June 1993.

@item [CH95]
D. Cabeza and M. Hermenegildo.
@* {D}istributed {C}oncurrent {C}onstraint {E}xecution in the {CIAO} {S}ystem.
@* In @emph{Proc. of the 1995 COMPULOG-NET Workshop on Parallelism and
  Implementation Technologies}, Utrecht, NL, September 1995. U. Utrecht / T.U.
  Madrid.
@* Available from \htmladdnormallink{{\tt http://www.clip.dia.fi.upm.es/}}
  {http://www.clip.dia.fi.upm.es/}.

@item [CH97]
D. Cabeza and M. Hermenegildo.
@* {WWW P}rogramming using {C}omputational {L}ogic {S}ystems (and the
  {PILLOW}/{CIAO} {L}ibrary).
@* In @emph{Proceedings of the Workshop on Logic Programming and the WWW at
  WWW6}, San Francisco, CA, April 1997.

@item [CH99]
D. Cabeza and M. Hermenegildo.
@* {T}he {C}iao {M}odular {C}ompiler and {I}ts {G}eneric {P}rogram {P}rocessing
  {L}ibrary.
@* In @emph{ICLP'99 WS on Parallelism and Implementation of (C)LP Systems},
  pages 147--164. N.M. State U., December 1999.

@item [CH00a]
D. Cabeza and M. Hermenegildo.
@* {A} {N}ew {M}odule {S}ystem for {P}rolog.
@* In @emph{International Conference on Computational Logic, CL2000}, number
  1861 in LNAI, pages 131--148. Springer-Verlag, July 2000.

@item [CH00b]
D. Cabeza and M. Hermenegildo.
@* {T}he {C}iao {M}odular, {S}tandalone {C}ompiler and {I}ts {G}eneric
  {P}rogram {P}rocessing {L}ibrary.
@* In @emph{Special Issue on Parallelism and Implementation of (C)LP Systems},
  volume 30 of @emph{Electronic Notes in Theoretical Computer Science}.
  {E}lsevier - {N}orth {H}olland, March 2000.

@item [CH00c]
M. Carro and M. Hermenegildo.
@* {T}ools for {C}onstraint {V}isualization: {T}he {VIFID/TRIFID} {T}ool.
@* In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
  @emph{{A}nalysis and {V}isualization {T}ools for {C}onstraint {P}rogramming},
  number 1870 in LNCS, pages 253--272. Springer-Verlag, September 2000.

@item [CH00d]
M. Carro and M. Hermenegildo.
@* {T}ools for {S}earch {T}ree {V}isualization: {T}he {APT} {T}ool.
@* In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
  @emph{{A}nalysis and {V}isualization {T}ools for {C}onstraint {P}rogramming},
  number 1870 in LNCS, pages 237--252. Springer-Verlag, September 2000.

@item [CHGT98]
D. Cabeza, M. Hermenegildo, S. Genaim, and C. Taboch.
@* {D}esign of a {G}eneric, {H}omogeneous {I}nterface to {R}elational
  {D}atabases.
@* {T}echnical {R}eport D3.1.M1-A1, CLIP7/98.0, RADIOWEB Project, September
  1998.

@item [CHV96a]
D. Cabeza, M. Hermenegildo, and S. Varma.
@* {T}he {P}i{LL}o{W}/{CIAO} {L}ibrary for {INTERNET/WWW} {P}rogramming using
  {C}omputational {L}ogic {S}ystems.
@* In @emph{Proceedings of the 1st Workshop on Logic Programming Tools for
  INTERNET Applications}, pages 72--90, JICSLP'96, Bonn, September 1996.

@item [CHV96b]
D. Cabeza, M. Hermenegildo, and S. Varma.
@* {T}he {{\sf P}}{\em i}{{\sf LL}}{\em o}{{\sf W}}/{CIAO} {L}ibrary for
  {INTERNET/WWW} {P}rogramming using {C}omputational {L}ogic {S}ystems.
@* In @emph{Proceedings of the 1st Workshop on Logic Programming Tools for
  INTERNET Applications}, JICSLP'96, Bonn, September 1996.
@* Available from \htmladdnormallink{{\tt
  http://clement.info.umoncton.ca/\~{}lpnet}}
  {http://clement.info.umoncton.ca/\~{}lpnet}.

@item [CLI95]
The {CLIP Group}.
@* {CIAO} {C}ompiler: {D}istributed {E}xecution and {L}ow {L}evel {S}upport
  {S}ubsystem.
@* {P}ublic {S}oftware, {ACCLAIM} {D}eliverable {D4.3/2-A3}, Facultad de
  Inform\'atica, UPM, June 1995.

@item [CM81]
W.F. Clocksin and C.S. Mellish.
@* @emph{Programming in Prolog}.
@* Springer-Verlag, 1981.

@item [Col78]
A. Colmerauer.
@* Metamorphosis grammars.
@* In @emph{Natural language communication with computers}, pages 133--189.
  Springer LNCS 63, 1978.

@item [Col82]
A. {Colmerauer et al.}
@* @emph{Prolog II: Reference Manual and Theoretical Model}.
@* Groupe D'intelligence Artificielle, Facult\'{e} Des Sciences De Luminy,
  Marseille, 1982.

@item [DEDC96]
P. Deransart, A. Ed-Dbali, and L. Cervoni.
@* @emph{Prolog: The Standard}.
@* Springer-Verlag, 1996.

@item [Dij65]
E.W. Dijkstra.
@* Co-operating sequential processes.
@* In F. Genuys, editor, @emph{Programming Languages}. Academic Press, London,
  1965.

@item [DL93]
S.K. Debray and N.W. Lin.
@* Cost analysis of logic programs.
@* @emph{{ACM} Transactions on Programming Languages and Systems},
  15(5):826--875, November 1993.

@item [DLGH97]
S.K. Debray, P. L\'{o}pez-Garc\'{\i}a, and M. Hermenegildo.
@* {N}on-{F}ailure {A}nalysis for {L}ogic {P}rograms.
@* In @emph{1997 International Conference on Logic Programming}, pages 48--62,
  Cambridge, MA, June 1997. MIT Press, Cambridge, MA.

@item [DLGHL97]
S.K. Debray, P. L\'{o}pez-Garc\'{\i}a, M. Hermenegildo, and N.-W. Lin.
@* {L}ower {B}ound {C}ost {E}stimation for {L}ogic {P}rograms.
@* In @emph{1997 International Logic Programming Symposium}, pages 291--305.
  MIT Press, Cambridge, MA, October 1997.

@item [GCH98]
J.M. Gomez, D. Cabeza, and M. Hermenegildo.
@* {WebDB}: {A} {D}atabase {WWW} {I}nterface.
@* {T}echnical {R}eport D3.1.M2-A3 CLIP11/98.0, RADIOWEB Project, December
  1998.

@item [GdW94]
J.P. Gallagher and D.A. de Waal.
@* Fast and precise regular approximations of logic programs.
@* In Pascal {Van~Hentenryck}, editor, @emph{Proc.~of the 11th International
  Conference on Logic Programming}, pages 599--613. MIT Press, 1994.

@item [HBC96]
M. Hermenegildo, F. Bueno, D. Cabeza, M. Carro, M. {Garc\'{\i}a de la Banda},
  P. L\'{o}pez-Garc\'{\i}a, and G. Puebla.
@* {T}he {CIAO} {M}ulti-{D}ialect {C}ompiler and {S}ystem: {A} {D}emo and
  {S}tatus {R}eport.
@* In @emph{Proceedings of the JICSLP'96 Workshop on Parallelism and
  Implementation Technology}. Computer Science Department, Technical University
  of Madrid, September 1996.
@* Available from \htmladdnormallink{{\tt
  http://www.clip.dia.fi.upm.es/Projects/COMPULOG/meeting96/papers/PS/clip.ps.%
gz}}
  {http://www.clip.dia.fi.upm.es/Projects/COMPULOG/meeting96/papers/PS/clip.ps%
.gz}.

@item [HBC99]
M. Hermenegildo, F. Bueno, D. Cabeza, M. Carro, {M.~Garc\'{\i}a de la Banda},
  P. L\'{o}pez-Garc\'{\i}a, and G. Puebla.
@* {T}he {CIAO} {M}ulti-{D}ialect {C}ompiler and {S}ystem: {A}n
  {E}xperimentation {W}orkbench for {F}uture {(C)LP} {S}ystems.
@* In @emph{{P}arallelism and {I}mplementation of {L}ogic and {C}onstraint
  {L}ogic {P}rogramming}, pages 65--85. Nova Science, Commack, NY, USA, April
  1999.

@item [HBGP95]
M. Hermenegildo, F. Bueno, M. {Garc\'{\i}a de la Banda}, and G. Puebla.
@* {T}he {CIAO} {M}ulti-{D}ialect {C}ompiler and {S}ystem: {A}n
  {E}xperimentation {W}orkbench for {F}uture {(C)LP} {S}ystems.
@* In @emph{Proceedings of the ILPS'95 Workshop on Visions for the Future of
  Logic Programming}, Portland, Oregon, USA, December 1995.
@* Available from \htmladdnormallink{{\tt http://www.clip.dia.fi.upm.es/}}
  {http://www.clip.dia.fi.upm.es/}.

@item [HBPLG99]
M. Hermenegildo, F. Bueno, G. Puebla, and P. L\'{o}pez-Garc\'{\i}a.
@* {P}rogram {A}nalysis, {De}bugging and {O}ptimization {U}sing the {C}iao
  {S}ystem {P}reprocessor.
@* In @emph{1999 International Conference on Logic Programming}, pages 52--66,
  Cambridge, MA, November 1999. MIT Press.

@item [HC93]
M. Hermenegildo and The {CLIP Group}.
@* {T}owards {CIAO}-{P}rolog -- {A} {P}arallel {C}oncurrent {C}onstraint
  {S}ystem.
@* In @emph{Proc. of the Compulog Net Area Workshop on Parallelism and
  Implementation Technologies}. FIM/UPM, Madrid, Spain, June 1993.

@item [HC94]
M. Hermenegildo and The {CLIP Group}.
@* {S}ome {M}ethodological {I}ssues in the {D}esign of {CIAO} - {A} {G}eneric,
  {P}arallel, {C}oncurrent {C}onstraint {S}ystem.
@* In @emph{Principles and Practice of Constraint Programming}, number 874 in
  LNCS, pages 123--133. Springer-Verlag, May 1994.

@item [HC97]
M. Hermenegildo and The {CLIP Group}.
@* {A}n {A}utomatic {D}ocumentation {G}enerator for {(C)LP} -- {R}eference
  {M}anual.
@* The Ciao System Documentation Series--{TR} {CLIP}5/97.3, Facultad de
  Inform\'atica, UPM, August 1997.

@item [HCC95]
M. Hermenegildo, D. Cabeza, and M. Carro.
@* {U}sing {A}ttributed {V}ariables in the {I}mplementation of {C}oncurrent and
  {P}arallel {L}ogic {P}rogramming {S}ystems.
@* In @emph{Proc. of the Twelfth International Conference on Logic
  Programming}, pages 631--645. {MIT} Press, June 1995.

@item [Her86]
M. Hermenegildo.
@* {A}n {A}bstract {M}achine for {R}estricted {AND}-parallel {E}xecution of
  {L}ogic {P}rograms.
@* In @emph{Third International Conference on Logic Programming}, number 225 in
  Lecture Notes in Computer Science, pages 25--40. Imperial College,
  Springer-Verlag, July 1986.

@item [Her96]
M. Hermenegildo.
@* {W}riting ``{S}hell {S}cripts'' in {SICS}tus {P}rolog, April 1996.
@* Posting in {\tt comp.lang.prolog}. Available from \htmladdnormallink{{\tt
  http://www.clip.dia.fi.upm.es/}} {http://www.clip.dia.fi.upm.es/}.

@item [Her99]
M. Hermenegildo.
@* {A} {D}ocumentation {G}enerator for {L}ogic {P}rogramming {S}ystems.
@* {T}echnical {R}eport {CLIP}10/99.0, Facultad de Inform\'atica, UPM,
  September 1999.

@item [Her00]
M. Hermenegildo.
@* {A} {D}ocumentation {G}enerator for {(C)LP} {S}ystems.
@* In @emph{International Conference on Computational Logic, CL2000}, number
  1861 in LNAI, pages 1345--1361. Springer-Verlag, July 2000.

@item [HG90]
M. Hermenegildo and K. Greene.
@* {\&-P}rolog and its {P}erformance: {E}xploiting {I}ndependent
  {A}nd-{P}arallelism.
@* In @emph{1990 International Conference on Logic Programming}, pages
  253--268. {MIT} Press, June 1990.

@item [HG91]
M. Hermenegildo and K. Greene.
@* {T}he \&-{P}rolog {S}ystem: {E}xploiting {I}ndependent {A}nd-{P}arallelism.
@* @emph{{N}ew {G}eneration {C}omputing}, 9(3,4):233--257, 1991.

@item [Hog84]
C.~J. Hogger.
@* @emph{Introduction to Logic Programming}.
@* Academic Press, London, 1984.

@item [Hol90]
C. Holzbaur.
@* @emph{{S}pecification of {C}onstraint {B}ased {I}nference {M}echanisms
  through {E}xtended {U}nification}.
@* PhD thesis, {U}niversity of {V}ienna, 1990.

@item [Hol92]
C. Holzbaur.
@* {M}etastructures vs. {A}ttributed {V}ariables in the {C}ontext of
  {E}xtensible {U}nification.
@* In @emph{1992 International Symposium on Programming Language Implementation
  and Logic Programming}, pages 260--268. LNCS631, Springer Verlag, August
  1992.

@item [Hol94]
C. Holzbaur.
@* @emph{{SICStus 2.1/DMCAI Clp 2.1.1} {U}ser's {M}anual}.
@* University of Vienna, 1994.

@item [JL88]
D. Jacobs and A. Langen.
@* {C}ompilation of {L}ogic {P}rograms for {R}estricted {A}nd-{P}arallelism.
@* In @emph{European Symposium on Programming}, pages 284--297, 1988.

@item [Knu84]
D. Knuth.
@* Literate programming.
@* @emph{Computer Journal}, 27:97--111, 1984.

@item [LGHD96]
P. L\'{o}pez-Garc\'{\i}a, M. Hermenegildo, and S.K. Debray.
@* {A} {M}ethodology for {G}ranularity {B}ased {C}ontrol of {P}arallelism in
  {L}ogic {P}rograms.
@* @emph{Journal of Symbolic Computation, Special Issue on Parallel Symbolic
  Computation}, 22:715--734, 1996.

@item [MH89]
K. Muthukumar and M. Hermenegildo.
@* {D}etermination of {V}ariable {D}ependence {I}nformation at {C}ompile-{T}ime
  {T}hrough {A}bstract {I}nterpretation.
@* In @emph{1989 North American Conference on Logic Programming}, pages
  166--189. {MIT} Press, October 1989.

@item [Nai85]
L. Naish.
@* @emph{{T}he {MU-P}rolog 3.2 {R}eference {M}anual}.
@* TR 85/11, Dept. of Computer Science, U. of Melbourne, October 1985.

@item [Nai91]
L. Naish.
@* Adding equations to {NU-Prolog}.
@* In @emph{Symp. on Progr. Language Impl. and Logic Progr (PLILP'91)}, LNCS
  528, pages 15--26. Springer Verlag, 1991.

@item [Par97]
The RADIOWEB~Project Partners.
@* {RADIOWEB} {EP}25562: {A}utomatic {G}eneration of {W}eb {S}ites for the
  {R}adio {B}rodcasting {I}ndustry -- {P}roject {D}escription / {T}echnical
  {A}nnex.
@* {T}echnical {R}eport, RADIOWEB Project, July 1997.

@item [PBH97]
G. Puebla, F. Bueno, and M. Hermenegildo.
@* {A}n {A}ssertion {L}anguage for {D}ebugging of {C}onstraint {L}ogic
  {P}rograms.
@* In @emph{Proceedings of the ILPS'97 Workshop on Tools and Environments for
  (Constraint) Logic Programming}, October 1997.
@* Available from \htmladdnormallink{{\tt
  ftp://clip.dia.fi.upm.es/pub/papers/assert\_lang\_tr\_discipldeliv.ps.gz}}
  {ftp://clip.dia.fi.upm.es/pub/papers/assert\_lang\_tr\_discipldeliv.ps.gz} as
  technical report {CLIP}2/97.1.

@item [PBH00]
G. Puebla, F. Bueno, and M. Hermenegildo.
@* {A}n {A}ssertion {L}anguage for {C}onstraint {L}ogic {P}rograms.
@* In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
  @emph{{A}nalysis and {V}isualization {T}ools for {C}onstraint {P}rogramming},
  number 1870 in LNCS, pages 23--61. Springer-Verlag, September 2000.

@item [PH99]
G. Puebla and M. Hermenegildo.
@* {S}ome {I}ssues in {A}nalysis and {S}pecialization of {M}odular
  {C}iao-{P}rolog {P}rograms.
@* In @emph{ICLP'99 Workshop on Optimization and Implementation of Declarative
  Languages}, pages 45--61. U. of Southampton, U.K, November 1999.

@item [PW80]
F.C.N. Pereira and D.H.D. Warren.
@* Definite clause grammars for language analysis - a survey of the formalism
  and a comparison with augmented transition networks.
@* @emph{Artificial Intelligence}, 13:231--278, 1980.

@item [SS86]
L. Sterling and E. Shapiro.
@* @emph{The Art of Prolog}.
@* MIT Press, 1986.

@item [Swe95]
Swedish Institute of Computer Science, P.O. Box 1263, S-16313 Spanga, Sweden.
@* @emph{{Sics}tus {P}rolog {V3.0} {U}ser's {M}anual}, 1995.

@end table

@c (index)
@node Library/Module Definition Index, Predicate/Method Definition Index, References, Top
@comment  node-name,  next,  previous,  up
@unnumbered Library/Module Definition Index



@printindex li


@c (index)
@node Predicate/Method Definition Index, Property Definition Index, Library/Module Definition Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Predicate/Method Definition Index



@printindex pd


@c (index)
@node Property Definition Index, Regular Type Definition Index, Predicate/Method Definition Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Property Definition Index



@printindex pr


@c (index)
@node Regular Type Definition Index, Declaration Definition Index, Property Definition Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Regular Type Definition Index



@printindex te


@c (index)
@node Declaration Definition Index, Concept Definition Index, Regular Type Definition Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Declaration Definition Index



@printindex de


@c (index)
@node Concept Definition Index, Global Index, Declaration Definition Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Concept Definition Index



@printindex co


@c (index)
@node Global Index,  , Concept Definition Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Global Index

This is a global index containing pointers to places where concepts, 
 predicates, modes, properties, types, applications, etc., are referred to
 in the text of the document. Note that due to limitations of the
 @code{info} format unfortunately only the first reference will appear in
 online versions of the document.

@printindex gl


@bye

