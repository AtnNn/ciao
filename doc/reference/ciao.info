This is ciao.info, produced by makeinfo version 4.0 from ciao.texi.

   *Ciao* is a _public domain_, _next generation_ multi-paradigm
programming environment with a unique set of features:

   * Ciao offers a complete Prolog system, supporting _ISO-Prolog_,
     but its novel modular design allows both _restricting_ and
     _extending_ the language. As a result, it allows working with
     _fully declarative subsets_ of Prolog and also to _extend_ these
     subsets (or ISO-Prolog) both syntactically and semantically.
     Most importantly, these restrictions and extensions can be
     activated separately on each program module so that several
     extensions can coexist in the same application for different
     modules.

   * Ciao also supports (through such extensions) programming with
     functions, higher-order (with predicate abstractions),
     constraints, and objects, as well as feature terms (records),
     persistence, several control rules (breadth-first search,
     iterative deepening, ...), concurrency (threads/engines), a good
     base for distributed execution (agents), and parallel execution.
     Libraries also support WWW programming, sockets, external
     interfaces (C, Java, TclTk, relational databases, etc.), etc.

   * *Ciao* offers support for _programming in the large_ with a
     robust module/object system, module-based separate/incremental
     compilation (automatically -no need for makefiles), an assertion
     language for declaring (_optional_) program properties
     (including types and modes, but also determinacy, non-failure,
     cost, etc.), automatic static inference and static/dynamic
     checking of such assertions, etc.

   * *Ciao* also offers support for _programming in the small_
     producing small executables (including only those builtins used
     by the program) and support for writing scripts in Prolog.

   * The *Ciao* programming environment includes a classical
     top-level and a rich emacs interface with an embeddable
     source-level debugger and a number of execution visualization
     tools.

   * The *Ciao* compiler (which can be run outside the top level
     shell) generates several forms of architecture-independent and
     stand-alone executables, which run with speed, efficiency and
     executable size which are very competive with other commercial
     and academic Prolog/CLP systems. Library modules can be compiled
     into compact bytecode or C source files, and linked statically,
     dynamically, or autoloaded.

   * The novel modular design of Ciao enables, in addition to modular
     program development, effective global program analysis and
     static debugging and optimization via source to source program
     transformation. These tasks are performed by the *Ciao
     preprocessor* ( `ciaopp', distributed separately).

   * The *Ciao* programming environment also includes `lpdoc', an
     automatic documentation generator for LP/CLP programs. It
     processes Prolog files adorned with (*Ciao*) assertions and
     machine-readable comments and generates manuals in many formats
     including `postscript', `pdf', `texinfo', `info', `HTML', `man',
     etc. , as well as on-line help, ascii `README' files, entries
     for indices of manuals (`info', WWW, ...), and maintains WWW
     distribution sites.


   *Ciao* is distributed under the GNU General Public License.


   This documentation corresponds to version 1.8#1 (2002/5/27,
19:57:48 CEST).

   Copyright (C) F. Bueno, D. Cabeza, M. Carro, M. Hermenegildo, P.
Lo'pez, and G. Puebla

   This document may be freely read, stored, reproduced,
disseminated, translated or quoted by any means and on any medium
provided the following conditions are met:

  1. Every reader or user of this document acknowledges that is aware
     that no guarantee is given regarding its contents, on any
     account, and specifically concerning veracity, accuracy and
     fitness for any purpose.

  2. No modification is made other than cosmetic, change of
     representation format, translation, correction of obvious
     syntactic errors, or as permitted by the clauses below.

  3. Comments and other additions may be inserted, provided they
     clearly appear as such; translations or fragments must clearly
     refer to an original complete version, preferably one that is
     easily accessed whenever possible.

  4. Translations, comments and other additions or modifications must
     be dated and their author(s) must be identifiable (possibly via
     an alias).

  5. This licence is preserved and applies to the whole document with
     modifications and additions (except for brief quotes),
     independently of the representation format.

  6. Any reference to the "official version", "original version" or
     "how to obtain original versions" of the document is preserved
     verbatim. Any copyright notice in the document is preserved
     verbatim. Also, the title and author(s) of the original document
     should be clearly mentioned as such.

  7. In the case of translations, verbatim sentences mentioned in
     (6.) are preserved in the language of the original document
     accompanied by verbatim translations to the language of the
     traslated document. All translations state clearly that the
     author is not responsible for the translated work. This license
     is included, at least in the language in which it is referenced
     in the original version.

  8. Whatever the mode of storage, reproduction or dissemination,
     anyone able to access a digitized version of this document must
     be able to make a digitized copy in a format directly usable,
     and if possible editable, according to accepted, and publicly
     documented, public standards.

  9. Redistributing this document to a third party requires
     simultaneous redistribution of this licence, without
     modification, and in particular without any further condition or
     restriction, expressed or implied, related or not to this
     redistribution. In particular, in case of inclusion in a
     database or collection, the owner or the manager of the database
     or the collection renounces any right related to this inclusion
     and concerning the possible uses of the document after
     extraction from the database or the collection, whether alone or
     in relation with other documents.


   Any incompatibility of the above clauses with legal, contractual
or judiciary decisions or constraints implies a corresponding
limitation of reading, usage, or redistribution rights for this
document, verbatim or modified.


File: ciao.info,  Node: Top,  Next: Summary,  Prev: (dir),  Up: (dir)

The Ciao Prolog System
**********************


   This documentation corresponds to version 1.8#1 (2002/5/27,
19:57:48 CEST).

* Menu:

* Summary::
* Introduction::
* Getting started on Un*x-like machines::
* Getting started on Windows machines::
* *** PART I - The program development environment::
* The stand-alone command-line compiler::
* The interactive top-level shell::
* The interactive debugger::
* Predicates controlling the interactive debugger::
* The script interpreter::
* Customizing library paths and path aliases::
* Using Ciao inside GNU emacs::
* *** PART II - The Ciao basic language (engine)::
* The module system::
* Directives for using code in other files::
* Control constructs/predicates::
* Basic builtin directives::
* Basic data types and properties::
* Extra-logical properties for typing::
* Basic term manipulation::
* Comparing terms::
* Basic predicates handling names of constants::
* Arithmetic::
* Basic file/stream handling::
* Basic input/output::
* Exception handling::
* Changing system behaviour and various flags::
* Fast/concurrent update of facts::
* Extending the syntax::
* Message printing primitives::
* Attributed variables::
* Gathering some basic internal info::
* *** PART III - ISO-Prolog library (iso)::
* ISO-Prolog package::
* All solutions predicates::
* Dynamic predicates::
* Term input::
* Term output::
* Defining operators::
* iso_byte_char (library)::
* iso_misc (library)::
* iso_incomplete (library)::
* *** PART IV - Classic Prolog library (classic)::
* Classic Prolog package::
* Definite clause grammars::
* Definite clause grammars (expansion)::
* List processing::
* Sorting lists::
* Dictionaries::
* String processing::
* Formatted output::
* DEC-10 Prolog file IO::
* ttyout (library)::
* compiler (library)::
* Quintus-like internal database::
* Enabling operators at run-time::
* *** PART V - Annotated Prolog library (assertions)::
* The Ciao assertion package::
* Types and properties related to assertions::
* Declaring regular types::
* Properties which are native to analyzers::
* Meta-properties::
* ISO-Prolog modes::
* Classical Prolog modes::
* Run-time checking of assertions::
* *** PART VI - Ciao Prolog library miscellanea::
* Structured stream handling::
* Operating system utilities::
* Prolog system internal predicates::
* Atom to term conversion::
* ctrlcclean (library)::
* errhandle (library)::
* Fast reading and writing of terms::
* File name manipulation::
* File I/O utilities::
* File locks::
* Term manipulation utilities::
* Term checking utilities::
* Term variables sets::
* Printing status and error messages::
* A simple pretty-printer for Ciao programs::
* Pretty-printing assertions::
* The Ciao library browser::
* Code translation utilities::
* Low-level concurrency/multithreading primitives::
* All solutions concurrent predicates::
* The socket interface::
* *** PART VII - Ciao Prolog extensions::
* Pure Prolog package::
* Higher-order::
* Higher-order predicates::
* Terms with named arguments -records/feature terms::
* functions (library)::
* global (library)::
* Independent and-parallel execution::
* Andorra execution::
* Call on determinate::
* Miscellaneous predicates::
* Delaying predicates (freeze)::
* Delaying predicates (when)::
* Active modules (high-level distributed execution)::
* Breadth-first execution::
* Iterative-deepening execution::
* Constraint programming over rationals::
* Constraint programming over reals::
* Fuzzy Prolog::
* Object oriented programming::
* Declaring classes and interfaces::
* Compile-time usage of objects::
* Run time usage of objects::
* The Ciao Remote Services Package::
* *** PART VIII - Interfaces to other languages and systems::
* Foreign Language Interface::
* Foreign Language Interface Properties::
* Utilities for on-demand compilation of foreign files::
* Foreign Language Interface Builder::
* Interface to daVinci::
* The Tcl/Tk interface::
* Low level interface library to Tcl/Tk::
* The Tcl/Tk Class Interface::
* widget_class (library)::
* menu_class (library)::
* canvas_class (library)::
* button_class (library)::
* checkbutton_class (library)::
* radiobutton_class (library)::
* entry_class (library)::
* label_class (library)::
* menubutton_class (library)::
* menu_entry_class (library)::
* shape_class (library)::
* arc_class (library)::
* oval_class (library)::
* poly_class (library)::
* line_class (library)::
* text_class (library)::
* The PiLLoW Web programming library::
* HTML/XML/CGI programming::
* HTTP conectivity::
* PiLLoW types::
* Persistent predicate database::
* Using the persdb library::
* SQL persistent database interface::
* Prolog to SQL translator::
* Low-level socket interface to SQL/ODBC databases::
* Types for the Low-level interface to SQL databases::
* *** PART IX - Abstract data types::
* counters (library)::
* Identity lists::
* Lists of numbers::
* Pattern (regular expression) matching::
* Graphs::
* Unweighted graph-processing utilities::
* wgraphs (library)::
* Labeled graph-processing utilities::
* queues (library)::
* Random numbers::
* sets (library)::
* Variable name dictionaries::
* *** PART X - Miscellaneous standalone utilities::
* A Program to Help Cleaning your Directories ::
* Printing the declarations and code in a file::
* Printing the contents of a bytecode file::
* Crossed-references of a program::
* Gathering the dependent files for a file::
* Finding differences between two Prolog files::
* The Ciao lpmake scripting facility::
* Find out which architecture we are running on::
* *** PART XI - Contributed libraries::
* Programming MYCIN rules::
* A Chart Library::
* Low level Interface between Prolog and blt::
* chartlib_errhandle (library)::
* Color and Pattern Library::
* genbar1 (library)::
* genbar2 (library)::
* genbar3 (library)::
* genbar4 (library)::
* gengraph1 (library)::
* gengraph2 (library)::
* genmultibar (library)::
* table_widget1 (library)::
* table_widget2 (library)::
* table_widget3 (library)::
* table_widget4 (library)::
* test_format (library)::
* ProVRML - a Prolog interface for VRML::
* boundary (library)::
* dictionary (library)::
* dictionary_tree (library)::
* error (library)::
* field_type (library)::
* field_value (library)::
* field_value_check (library)::
* generator (library)::
* generator_util (library)::
* internal_types (library)::
* io (library)::
* lookup (library)::
* parser (library)::
* parser_util (library)::
* possible (library)::
* tokeniser (library)::
* *** PART XII - Appendices::
* Installing Ciao from the source distribution::
* Installing Ciao from a Win32 binary distribution::
* Beyond installation::
* References::
* Library/Module Definition Index::
* Predicate/Method Definition Index::
* Property Definition Index::
* Regular Type Definition Index::
* Declaration Definition Index::
* Concept Definition Index::
* Global Index::


File: ciao.info,  Node: Summary,  Next: Introduction,  Prev: Top,  Up: Top

Summary
*******

   *Ciao* is a _public domain_, _next generation_ multi-paradigm
programming environment with a unique set of features:

   * Ciao offers a complete Prolog system, supporting _ISO-Prolog_,
     but its novel modular design allows both _restricting_ and
     _extending_ the language. As a result, it allows working with
     _fully declarative subsets_ of Prolog and also to _extend_ these
     subsets (or ISO-Prolog) both syntactically and semantically.
     Most importantly, these restrictions and extensions can be
     activated separately on each program module so that several
     extensions can coexist in the same application for different
     modules.

   * Ciao also supports (through such extensions) programming with
     functions, higher-order (with predicate abstractions),
     constraints, and objects, as well as feature terms (records),
     persistence, several control rules (breadth-first search,
     iterative deepening, ...), concurrency (threads/engines), a good
     base for distributed execution (agents), and parallel execution.
     Libraries also support WWW programming, sockets, external
     interfaces (C, Java, TclTk, relational databases, etc.), etc.

   * *Ciao* offers support for _programming in the large_ with a
     robust module/object system, module-based separate/incremental
     compilation (automatically -no need for makefiles), an assertion
     language for declaring (_optional_) program properties
     (including types and modes, but also determinacy, non-failure,
     cost, etc.), automatic static inference and static/dynamic
     checking of such assertions, etc.

   * *Ciao* also offers support for _programming in the small_
     producing small executables (including only those builtins used
     by the program) and support for writing scripts in Prolog.

   * The *Ciao* programming environment includes a classical
     top-level and a rich emacs interface with an embeddable
     source-level debugger and a number of execution visualization
     tools.

   * The *Ciao* compiler (which can be run outside the top level
     shell) generates several forms of architecture-independent and
     stand-alone executables, which run with speed, efficiency and
     executable size which are very competive with other commercial
     and academic Prolog/CLP systems. Library modules can be compiled
     into compact bytecode or C source files, and linked statically,
     dynamically, or autoloaded.

   * The novel modular design of Ciao enables, in addition to modular
     program development, effective global program analysis and
     static debugging and optimization via source to source program
     transformation. These tasks are performed by the *Ciao
     preprocessor* ( `ciaopp', distributed separately).

   * The *Ciao* programming environment also includes `lpdoc', an
     automatic documentation generator for LP/CLP programs. It
     processes Prolog files adorned with (*Ciao*) assertions and
     machine-readable comments and generates manuals in many formats
     including `postscript', `pdf', `texinfo', `info', `HTML', `man',
     etc. , as well as on-line help, ascii `README' files, entries
     for indices of manuals (`info', WWW, ...), and maintains WWW
     distribution sites.


   *Ciao* is distributed under the GNU General Public License.


File: ciao.info,  Node: Introduction,  Next: Getting started on Un*x-like machines,  Prev: Summary,  Up: Top

Introduction
************

* Menu:

* About this manual::
* About the Ciao Prolog development system::
* ISO-Prolog compliance versus extensibility::
* About the name of the System::
* Referring to Ciao::
* Syntax terminology and notational conventions::
* A tour of the manual::
* Acknowledgments::
* Version/Change Log (ciao)::


File: ciao.info,  Node: About this manual,  Next: About the Ciao Prolog development system,  Prev: Introduction,  Up: Introduction

About this manual
=================

   This is the _Reference Manual_ for the Ciao Prolog development
system. It contains basic information on how to install Ciao Prolog
and how to write, debug, and run Ciao Prolog programs from the
command line, from inside GNU `emacs', or from a windowing desktop.
It also documents all the libraries available in the standard
distribution.

   This manual has been generated using the _LPdoc_ semi-automatic
documentation generator for LP/CLP programs [HC97,Her00].  `lpdoc'
processes Prolog files (and files in other CLP languages) adorned
with assertions and machine-readable comments, which should be
written in the Ciao assertion language [PBH97,PBH00]. From these, it
generates manuals in many formats including `postscript', `pdf',
`texinfo', `info', `HTML', `man', etc., as well as on-line help,
ascii `README' files, entries for indices of manuals (`info', WWW,
...), and maintains WWW distribution sites.

   The big advantage of this approach is that it is easier to keep
the on-line and printed documentation in sync with the source code
[Knu84]. As a result, _this manual changes continually as the source
code is modified_. Because of this, the manual has a version number.
You should make sure the manual you are reading, whether it be
printed or on-line, coincides with the version of the software that
you are using.

   The approach also implies that there is often a variability in the
degree to which different libraries or system components are
documented. Many libraries offer abundant documentation, but a few
will offer little. The latter is due to the fact that we tend to
include libraries in the manual if the code is found to be useful,
even if they may still contain sparse documentation. This is because
including a library in the manual will at the bare minimum provide
formal information (such as the names of exported predicates and
their arity, which other modules it loads, etc.), create index
entries, pointers for on-line help in the electronic versions of the
manuals, and command-line completion capabilities inside `emacs'.
Again, the manual is being updated continuously as the different
libraries (and machine-readable documentation in them) are improved.


File: ciao.info,  Node: About the Ciao Prolog development system,  Next: ISO-Prolog compliance versus extensibility,  Prev: About this manual,  Up: Introduction

About the Ciao Prolog development system
========================================

   The Ciao system is a full programming environment for developing
programs in the Prolog language and in several other languages which
are extensions and modifications of Prolog in several interesting and
useful directions. The programming environment offers a number of
tools such as the Ciao standalone compiler (`ciaoc'), a
traditional-style top-level interactive shell (`ciaosh' or `ciao'),
an interpreter of scripts written in Prolog (`ciao-shell'), a Prolog
`emacs' mode (which greatly helps the task of developing programs
with support for editing, debugging, version/change tracking, etc.),
numerous libraries, a powerful program preprocessor (`ciaopp'
[BdlBH99,BLGPH99,HBPLG99], which supports static debugging and
optimization from program analysis via source to source program
transformation), and an automatic documentation generator (`lpdoc')
[HC97,Her00]. A number of execution visualization tools
[CGH93,CH00d,CH00c] are also available.

   This manual documents the first four of the tools mentioned above
[see PART I - The program development environment], and the Ciao
Prolog language and libraries. The `ciaopp' and `lpdoc' tools are
documented in separate manuals.

   The Ciao language [see PART II - The Ciao basic language (engine)]
has been designed from the ground up to be small, but to also allow
extensions and restrictions in a modular way. The first objective
allows producing small executables (including only those builtins
used by the program), providing basic support for pure logic
programming, and being able to write scripts in Prolog. The second
one allows supporting standard ISO-Prolog [see PART III - ISO-Prolog
library (iso)], as well as powerful extensions such as constraint
logic programming, functional logic programming, and object-oriented
logic programming [see PART VII - Ciao Prolog extensions], and
restrictions such as working with pure horn clauses.

   The design of Ciao has also focused on allowing modular program
development, as well as automatic program manipulation and
optimization. Ciao includes a robust module system [CH00a],
module-based automatic incremental compilation [CH99], and modular
global program analysis, debugging and optimization [PH99], based on
a rich assertion language [see PART V - Annotated Prolog library
(assertions)] for declaring (optional) program properties (including
types and modes), which can be checked either statically or
dynamically. The program analysis, static debugging and optimization
tasks related to these assertions are performed by the `ciaopp'
preprocessor, as mentioned above. These assertions (together with
special comment-style declarations) are also the ones used by the
`lpdoc' autodocumenter to generate documentation for programs (the
comment-style declarations are documented in the `lpdoc' manual).

   Ciao also includes several other features and utilities, such as
support for several forms of executables, concurrency (threads),
distributed and parallel execution, higher-order, WWW programming
(PiLLoW [CHV96b]), interfaces to other languages like C and Java,
database interfaces, graphical interfaces, etc., etc. [see PARTS VI
to XI].


File: ciao.info,  Node: ISO-Prolog compliance versus extensibility,  Next: About the name of the System,  Prev: About the Ciao Prolog development system,  Up: Introduction

ISO-Prolog compliance versus extensibility
==========================================

   One of the innovative features of Ciao is that it has been
designed to subsume _ISO-Prolog_ (International Standard ISO/IEC
13211-1, PROLOG: Part 1-General Core [DEDC96]), while at the same
time extending it in many important ways. The intention is to ensure
that all ISO-compliant Prolog programs run correctly under Ciao. At
the same time, the Ciao module system (see [PART II - The Ciao basic
language (engine)] and [CH00a] for a discussion of the motivations
behind the design) allows selectively avoiding the loading of most
ISO-builtins (and changing some other ISO characteristics) when not
needed, so that it is possible to work with purer subsets of Prolog
and also to build small executables. Also, this module system makes
it possible to develop extensions using these purer subsets (or even
the full ISO-standard) as a starting point. Using these features, the
Ciao distribution includes libraries which significantly extend the
language both syntactically and semantically.

   Compliance with ISO is still not complete: currently there are
some minor deviations in, e.g., the treatment of characters, the
syntax, some of the arithmetic functions, and part of the error
system. On the other hand, Ciao has been reported by independent
sources (members of the standarization body) to be one of the most
conforming Prologs at the moment of this writing, and the first one
to be able to compile all the standard-conforming test cases. Also,
Ciao does not offer a strictly conforming mode which rejects uses of
non-ISO features. However, in order to aid programmers who wish to
write standard compliant programs, library predicates that correspond
to those in the ISO-Prolog standard are marked specially in the
manuals, and differences between the Ciao and the prescribed
ISO-Prolog behaviours, if any, are commented appropriately.

   The intention of the Ciao developers is to progressively complete
the compliance of Ciao with the published parts of the ISO standard
as well as with other reasonable extensions of the standard may be
published in the future. However, since one of the design objectives
of Ciao is to address some shortcomings of previous implementations
of Prolog and logic programming in general, we also hope that some of
the better ideas present in the system will make it eventually into
the standards.


File: ciao.info,  Node: About the name of the System,  Next: Referring to Ciao,  Prev: ISO-Prolog compliance versus extensibility,  Up: Introduction

About the name of the System
============================

   After reading the previous sections the sharp reader may have
already seen the logic behind the 'Ciao Prolog' name. Ciao is an
interesting word which means both _hello_ and _goodbye_. Ciao Prolog
intends to be a really good, all-round, freely available ISO-Prolog
system which can be used as a classical Prolog, in both academic and
industrial environments (and, in particular, to introduce users to
Prolog and to constraint and logic programming -the _hello_ part).
But Ciao is also a new-generation, multiparadigm programming language
and program development system which goes well beyond Prolog and
other classical logic programming languages. And it has the advantage
(when compared to other systems) that it does so while keeping full
Prolog compatibility when needed.


File: ciao.info,  Node: Referring to Ciao,  Next: Syntax terminology and notational conventions,  Prev: About the name of the System,  Up: Introduction

Referring to Ciao
=================

   If you find Ciao or any of its components useful, we would
appreciate very much if you added a reference to this manual (i.e.,
the Ciao reference manual [BCC97]) in your work. The following is an
appropriate BiBTeX entry with the relevant data:

     @techreport{ciao-reference-manual-tr,
       author =       {F. Bueno and D. Cabeza and M. Carro and M. Hermenegildo
                       and P. L\'{o}pez-Garc\'{\i}a and G. Puebla},
       title =        {The Ciao Prolog system. Reference manual},
       institution =  {School of Computer Science,
                       Technical University of Madrid (UPM)},
       year =         1997,
       month =        {August},
       number =       {{CLIP}3/97.1},
       note =         {Available from http://www.clip.dia.fi.upm.es/}
     }


File: ciao.info,  Node: Syntax terminology and notational conventions,  Next: A tour of the manual,  Prev: Referring to Ciao,  Up: Introduction

Syntax terminology and notational conventions
=============================================

   This manual is not meant to be an introduction to the Prolog
language. The reader is referred to standard textbooks on Prolog such
as [SS86,CM81,Apt97,Hog84]. However, we would like to refresh herein
some concepts for the sake of establishing terminology. Also, we will
briefly introduce a few of the extensions that Ciao brings to the
Prolog language.

* Menu:

* Predicates and their components::
* Characters and character strings::
* Predicate specs::
* Modes::
* Properties and types::
* Declarations::
* Operators::


File: ciao.info,  Node: Predicates and their components,  Next: Characters and character strings,  Prev: Syntax terminology and notational conventions,  Up: Syntax terminology and notational conventions

Predicates and their components
-------------------------------

   In Prolog, procedures are called _predicates_ and predicate calls
_literals_. They all have the classical syntax of procedures (and of
logic predications and of mathematical functions). Predicates are
identified in this manual by a keyword 'PREDICATE' at the right
margin of the place where they are documented.

   Prolog instructions are expressions made up of control constructs
(*Note Control constructs/predicates::) and literals, and are called
_goals_. Literals are also (atomic) goals.

   A predicate definition is a sequence of clauses. A clause has the
form "`H :- B.'" (ending in '`.''), where `H' is syntactically the
same as a literal and is called the clause _head_, and `B' is a goal
and is called the clause _body_. A clause with no body is written
"`H.'" and is called a _fact_. Clauses with body are also called
_rules_. A Prolog program is a sequence of predicate definitions.


File: ciao.info,  Node: Characters and character strings,  Next: Predicate specs,  Prev: Predicates and their components,  Up: Syntax terminology and notational conventions

Characters and character strings
--------------------------------

   We adopt the following convention for delineating character
strings in the text of this manual: when a string is being used as a
Prolog atom it is written thus: `user' or `'user''; but in all other
circumstances double quotes are used (as in `"hello"').

   When referring to keyboard characters, printing characters are
written thus: <a>, while control characters are written like this:
<^A>. Thus <^C> is the character you get by holding down the <CTL>
key while you type <c>. Finally, the special control characters
carriage-return, line-feed and space are often abbreviated to <RET>,
<LFD> and <SPC> respectively.


File: ciao.info,  Node: Predicate specs,  Next: Modes,  Prev: Characters and character strings,  Up: Syntax terminology and notational conventions

Predicate specs
---------------

   Predicates in Prolog are distinguished by their name _and_ their
arity. We will call `name/arity' a _predicate spec_. The notation
`name/arity' is therefore used when it is necessary to refer to a
predicate unambiguously. For example, `concatenate/3' specifies the
predicate which is named "concatenate" and which takes 3 arguments.

   (Note that different predicates may have the same name and
different arity. Conversely, of course, they may have the same arity
and different name.)


File: ciao.info,  Node: Modes,  Next: Properties and types,  Prev: Predicate specs,  Up: Syntax terminology and notational conventions

Modes
-----

   When documenting a predicate, we will often describe its usage
with a mode spec which has the form `name(Arg1, ..., ArgN)' where
each `Arg' may be preceded by a _mode_. A mode is a functor which is
wrapped around an argument (or prepended if defined as an operator).
Such a mode allows documenting in a compact way the instantiation
state on call and exit of the argument to which it is applied. The
set of modes which can be used in Ciao is not fixed. Instead,
arbitrary modes can be defined by in programs using the `modedef/1'
declarations of the Ciao _assertion language_ (*Note The Ciao
assertion package:: for details). Modes are identified in this manual
by a keyword 'MODE'.

   Herein, we will use the set of modes defined in the Ciao
`isomodes' library, which is essentially the same as those used in the
ISO-Prolog standard (*Note ISO-Prolog modes::).


File: ciao.info,  Node: Properties and types,  Next: Declarations,  Prev: Modes,  Up: Syntax terminology and notational conventions

Properties and types
--------------------

   Although Ciao Prolog is _not_ a typed language, it allows writing
(and using) types, as well as (more general) properties. There may be
properties of the states and of the computation. Properties of the
states allow expressing characteristics of the program variables
during computation, like in `sorted(X)' (`X' is a sorted list).
Properties of the computation allow expressing characteristics of a
whole computation, like in `is_det(p(X,Y))' (such calls yield only
one solution). Properties are just a special form of predicates
(*Note Declaring regular types::) and are identified in this manual
by a keyword 'PROPERTY'.

   Ciao types are _regular types_ (*Note Declaring regular types::),
which are a special form of properties themselves. They are
identified in this manual by a keyword 'REGTYPE'.


File: ciao.info,  Node: Declarations,  Next: Operators,  Prev: Properties and types,  Up: Syntax terminology and notational conventions

Declarations
------------

   A _declaration_ provides information to one of the Ciao
environment tools. Declarations are interspersed in the code of a
program. Usually the target tool is either the compiler (telling it
that a predicate is dynamic, or a meta-predicate, etc.), the
preprocessor (which understands declarations of properties and types,
assertions, etc.), or the autodocumenter (which understands the
previous declarations and also certain "comment" declarations).

   A declaration has the form `:- D.' where `D' is syntactically the
same as a literal. Declarations are identified in this manual by a
keyword 'DECLARATION'.

   In Ciao users can define (and document) new declarations. New
declarations are typically useful when defining extensions to the
language (which in Ciao are called packages). Such extensions are
often implemented as expansions (see *Note Extending the syntax::).
There are many such extensions in Ciao. The `functions' library,
which provides fuctional syntax, is an example. The fact that in Ciao
expansions are local to modules (as operators, see below) makes it
possible to use a certain language extension in one module without
affecting other modules.


File: ciao.info,  Node: Operators,  Prev: Declarations,  Up: Syntax terminology and notational conventions

Operators
---------

   An _operator_ is a functor (or predicate name) which has been
declared as such, thus allowing its use in a prefix, infix, or suffix
fashion, instead of the standard procedure-like fashion. E.g.,
declaring `+' as an infix operator allows writing `X+Y' instead of
`'+'(X,Y)' (which may still, of course, be written).

   _Operators in Ciao are local to the module/file where they are
declared_. However, some operators are standard and allowed in every
program (see *Note Defining operators::). This manual documents the
operator declarations in each (library) module where they are
included. As with expansions, the fact that in Ciao operators are
local to modules makes it possible to use a certain language
extension in one module without affecting other modules.


File: ciao.info,  Node: A tour of the manual,  Next: Acknowledgments,  Prev: Syntax terminology and notational conventions,  Up: Introduction

A tour of the manual
====================

   The rest of the introductory chapters after this one provide a
first "getting started" introduction for newcomers to the Ciao
system. The rest of the chapters in the manual are organized into a
sequence of major parts as follows:

* Menu:

* PART I - The program development environment::
* PART II - The Ciao basic language (engine)::
* PART III - ISO-Prolog library (iso)::
* PART IV - Classic Prolog library (classic)::
* PART V - Annotated Prolog library (assertions)::
* PART VI - Ciao Prolog library miscellanea::
* PART VII - Ciao Prolog extensions::
* PART VIII - Interfaces to other languages and systems::
* PART IX - Abstract data types::
* PART X - Miscellaneous standalone utilities::
* PART XI - Contributed libraries::
* PART XII - Appendices::


File: ciao.info,  Node: PART I - The program development environment,  Next: PART II - The Ciao basic language (engine),  Prev: A tour of the manual,  Up: A tour of the manual

PART I - The program development environment
--------------------------------------------

   This part documents the components of the basic Ciao program
development environment. They include:

ciaoc:
     the standalone compiler, which creates executables without
     having to enter the interactive top-level.

ciaosh:
     (also invoked simply as `ciao') is an interactive top-level
     shell, similar to the one found on most Prolog systems (with
     some enhancements).

debugger.pl:
     a Byrd box-type debugger, similar to the one found on most
     Prolog systems (also with some enhancements, such as
     source-level debugging). This is not a standalone application,
     but is rather included in `ciaosh', as is done in other Prolog
     systems. However, it is also _embeddable_, in the sense that it
     can be included as a library in executables, and activated
     dynamically and conditionally while such executables are running.

ciao-shell:
     an interpreter/compiler for _Prolog scripts_ (i.e., files
     containing Prolog code which run without needing explicit
     compilation).

ciao.el:
     a _complete program development enviroment_, based on GNU emacs,
     with syntax coloring, direct access to all the tools described
     above (as well as the preprocessor and the documenter), atomatic
     location of errors, source-level debugging, context-sensitive
     access to on-line help/manuals, etc. The use of this environment
     is _very highly recommended_!

   The Ciao program development environment also includes `ciaopp',
the preprocessor, and `lpdoc', the documentation generator, which are
described in separate manuals.


File: ciao.info,  Node: PART II - The Ciao basic language (engine),  Next: PART III - ISO-Prolog library (iso),  Prev: PART I - The program development environment,  Up: A tour of the manual

PART II - The Ciao basic language (engine)
------------------------------------------

   This part documents the _Ciao basic builtins_. These predefined
predicates and declarations are available in every program, unless the
`pure' package is used (by using a `:- module(_,_,[pure]).'
declaration or `:- use_package(pure).'). These predicates are
contained in the `engine' directory within the `lib' library.  The
rest of the library predicates, including the packages that provide
most of the ISO-Prolog builtins, are documented in subsequent parts.


File: ciao.info,  Node: PART III - ISO-Prolog library (iso),  Next: PART IV - Classic Prolog library (classic),  Prev: PART II - The Ciao basic language (engine),  Up: A tour of the manual

PART III - ISO-Prolog library (iso)
-----------------------------------

   This part documents the _iso_ package which provides to Ciao
programs (most of) the ISO-Prolog functionality , including the
_ISO-Prolog builtins_ not covered by the basic library. All these
predicates are loaded by default in user files and in modules which
use standard module declarations such as:

   `:- module(_modulename_,_exports_).'

   which are equivalent to:

   `:- module(_modulename_,_exports_,[iso]).'

   or

   `:- module(_modulename_,_exports_).'

   `:- use_package([iso]).'

   If you do not want these ISO builtins loaded for a given file (in
order to make the executable smaller) you can ask for this explicitly
using:

   `:- module(_modulename_,_exports_,[]).'

   or

   `:- module(_modulename_,_exports_).'

   `:- use_package([]).'

   See the description of the declarations for declaring modules and
using other modules, and the documentation of the `iso' library for
details.


File: ciao.info,  Node: PART IV - Classic Prolog library (classic),  Next: PART V - Annotated Prolog library (assertions),  Prev: PART III - ISO-Prolog library (iso),  Up: A tour of the manual

PART IV - Classic Prolog library (classic)
------------------------------------------

   This part documents some Ciao libraries which provide additional
predicates and functionalities that, despite not being in the ISO
standard, are present in many popular Prolog systems. This includes
definite clause grammars (DCGs), "Quintus-style" internal database,
list processing predicates, dictionaries, string processing, DEC-10
Prolog-style input/output, formatted output, dynamic loading of
modules, activation of operators at run-time, etc.


File: ciao.info,  Node: PART V - Annotated Prolog library (assertions),  Next: PART VI - Ciao Prolog library miscellanea,  Prev: PART IV - Classic Prolog library (classic),  Up: A tour of the manual

PART V - Annotated Prolog library (assertions)
----------------------------------------------

   Ciao allows _annotating_ the program code with _assertions_. Such
assertions include type and instantiation mode declarations, but also
more general properties as well as comments in the style of the
_literate programming_. These assertions document predicates (and
modules and whole applications) and can be used by the Ciao
preprocessor/compiler while debugging and optimizing the program or
library, and by the Ciao documenter to build the program or library
reference manual.


File: ciao.info,  Node: PART VI - Ciao Prolog library miscellanea,  Next: PART VII - Ciao Prolog extensions,  Prev: PART V - Annotated Prolog library (assertions),  Up: A tour of the manual

PART VI - Ciao Prolog library miscellanea
-----------------------------------------

   This part documents several Ciao libraries which provide different
useful additional functionalities. Such functionalities include
performing operating system calls, gathering statistics from the
Prolog engine, file and file name manipulation, error and exception
handling, fast reading and writing of terms ( marshalling and
unmarshalling), file locking, program reporting messages,
pretty-printing programs and assertions, a browser of the system
libraries, additional expansion utilities, concurrent aggregates,
graph visualization, etc.


File: ciao.info,  Node: PART VII - Ciao Prolog extensions,  Next: PART VIII - Interfaces to other languages and systems,  Prev: PART VI - Ciao Prolog library miscellanea,  Up: A tour of the manual

PART VII - Ciao Prolog extensions
---------------------------------

   The libraries documented in this part extend the Ciao language in
several different ways. The extensions include:
   * pure Prolog programming (well, this can be viewed more as a
     restriction than an extension);

   * feature terms or _records_ (i.e., structures with names for each
     field);

   * parallel programming (e.g., &-Prolog style);

   * functional syntax;

   * higher-order library;

   * global variables;

   * `setarg' and `undo';

   * delaying predicate execution;

   * active modules;

   * breadth-first execution;

   * iterative deepening-based execution;

   * constraint logic programming;

   * object oriented programming.


File: ciao.info,  Node: PART VIII - Interfaces to other languages and systems,  Next: PART IX - Abstract data types,  Prev: PART VII - Ciao Prolog extensions,  Up: A tour of the manual

PART VIII - Interfaces to other languages and systems
-----------------------------------------------------

   The following interfaces to/from Ciao Prolog are documented in
this part:
   * External interface (e.g., to C).

   * Socket interface.

   * Tcl/tk interface.

   * Web interface (http, html, xml, etc.);

   * Persistent predicate databases (interface between the Prolog
     internal database and the external file system).

   * SQL-like database interface (interface between the Prolog
     internal database and external SQL/ODBC systems).

   * Java interface.

   * Calling emacs from Prolog.


File: ciao.info,  Node: PART IX - Abstract data types,  Next: PART X - Miscellaneous standalone utilities,  Prev: PART VIII - Interfaces to other languages and systems,  Up: A tour of the manual

PART IX - Abstract data types
-----------------------------

   This part includes libraries which implement some generic data
structures (abstract data types) that are used frequently in programs
or in the Ciao system itself.


File: ciao.info,  Node: PART X - Miscellaneous standalone utilities,  Next: PART XI - Contributed libraries,  Prev: PART IX - Abstract data types,  Up: A tour of the manual

PART X - Miscellaneous standalone utilities
-------------------------------------------

   This is the documentation for a set of miscellaneous standalone
utilities contained in the `etc' directory of the Ciao distribution.


File: ciao.info,  Node: PART XI - Contributed libraries,  Next: PART XII - Appendices,  Prev: PART X - Miscellaneous standalone utilities,  Up: A tour of the manual

PART XI - Contributed libraries
-------------------------------

   This part includes a number of libraries which have contributed by
users of the Ciao system. Over time, some of these libraries are
moved to the main library directories of the system.


File: ciao.info,  Node: PART XII - Appendices,  Prev: PART XI - Contributed libraries,  Up: A tour of the manual

PART XII - Appendices
---------------------

   These appendices describe the installation of the Ciao environment
on different systems and some other issues such as reporting bugs,
signing up on the Ciao user's mailing list, downloading new versions,
limitations, etc.


File: ciao.info,  Node: Acknowledgments,  Next: Version/Change Log (ciao),  Prev: A tour of the manual,  Up: Introduction

Acknowledgments
===============

   The Ciao system is a joint effort on one side of the present (
_Francisco Bueno_, _Daniel Cabeza_, _Manuel Carro_, _Manuel
Hermenegildo_, _Pedro Lo'pez_, and _Germa'n Puebla_) and past (
_Mari'a Jose' Garci'a de la Banda_) members of the _CLIP group_ at
the School of Computer Science, _Technical University of Madrid_ ,
and on the other side of several colleagues and students that have
collaborated with us over the years of its development. The following
is an (inevitably incomplete) list of those that have contributed to
the development of Ciao:

   * The _Ciao engine_, compiler, libraries and documentation,
     although completely rewritten at this point, have their origins
     in the _&-Prolog_ _parallel Prolog_ engine and _parallelizing
     compiler_, developed by _Manuel Hermenegildo_, _Kevin Greene_,
     _Kalyan Muthukumar_, and _Roger Nasr_ at _MCC_ and later at
     _UPM_. The &-Prolog engine and low-level ( _WAM_) compilers in
     turn were derived from early versions (0.5 to 0.7) of _SICStus
     Prolog_ [Car88]. SICStus is an excellent, high performance
     Prolog system, developed by _Mats Carlsson_ and colleagues at the
     _Swedish Institute of Computer Science_ ( _SICS_), that every
     user of Prolog should check out [Swe95,AAF91]. Very special
     thanks are due to _Seif Haridi_, _Mats Carlsson_, and colleagues
     at SICS for allowing the SICStus 0.5-0.7 components in
     _&-Prolog_ and its successor, Ciao, to be distributed freely.
     Parts of the parallel abstract machine have been developed in
     collaboration with _Gopal Gupta_ and _Enrico Pontelli_ ( _New
     Mexico State University_).

   * Many aspects of the analyzers in the _Ciao preprocessor_ (
     `ciaopp') have been developed in collaboration with _Peter
     Stuckey_ ( _Melbourne U._), _Kim Marriott_ ( _Monash U._),
     _Maurice Bruynooghe_, _Gerda Janssens_, _Anne Mulkers_, and
     _Veroniek Dumortier_ ( _K.U. Leuven_), and _Saumya Debray_ ( _U.
     of Arizona_). The assertion system has been developed in
     collaboration with _Jan Maluzynski_ and _Wlodek Drabent_ (
     _Linkoping U._) and _Pierre Deransart_ ( _INRIA_). The core of
     type inference system derives from the system developed by _John
     Gallagher_ [GdW94] ( _Bristol University_) and later adapted to
     CLP(FD) by _Pawel Pietrzak_ ( _Linkoping U._).

   * The constraint solvers for _R_ and _Q_ are derived from the code
     developed by _Christian Holzbauer_ ( _Austrian Research
     Institute for AI_ in Vienna) [Hol94,Hol90,Hol92].

   * The Ciao manuals include material from the _DECsystem-10 Prolog
     User's Manual_ by _D.L. Bowen_ (editor), _L. Byrd_, _F.C.N.
     Pereira_, _L.M. Pereira_, and _D.H.D. Warren_ [BBP81]. They also
     contain material from the SICStus Prolog user manuals for
     SICStus versions 0.5-0.7 by _Mats Carlsson_ and _Johan Widen_
     [Car88], as well as from the Prolog ISO standard documentation
     [DEDC96].

   * Ciao is designed to be highly extendable in a modular way. Many
     of the libraries distributed with Ciao have been developed by
     other people all of which is impossible to mention here.
     Individual author names are included in the documentation of
     each library and appear in the indices.

   * The development of the Ciao system has been supported in part by
     ESPRIT projects ACCLAIM, PARFORCE, and DISCIPL, and by CICYT/MEC
     projects ELLA and EDIPIA.


   If you feel you have contributed to the development of Ciao and we
have forgotten adding your name to this list or the acknowledgements
given in the different chapters, please let us know and we will be
glad to give proper credits.


File: ciao.info,  Node: Version/Change Log (ciao),  Prev: Acknowledgments,  Up: Introduction

Version/Change Log (`ciao')
===========================

*Version 1.8 (2002/5/16, 21:20:27 CEST)*
        * Improvements related to supported platforms:
             * Support for Mac OS X 10.1, based on the Darwin kernel.

             * Initial support for compilation on Linux for Power PC
               (contributed by _Paulo Moura_).

             * Workaround for incorrect C compilation while using
               newer (> 2.95) gcc compilers.

             * .bat files generated in Windows.

        * Changes in compiler behavior and user interface:
             * Corrected a bug which caused wrong code generation in
               some cases.

             * Changed execution of initialization directives. Now
               the initialization of a module/file never runs before
               the initializations of the modules from which the
               module/file imports (excluding circular dependences).

             * The engine is more intelligent when looking for an
               engine to execute bytecode; this caters for a variety
               of situations when setting explicitly the CIAOLIB
               environment variable.

             * Fixed bugs in the toplevel: behaviour of `module:main'
               calls and initialization of a module (now happens
               after related modules are loaded).

             * Layout char not needed any more to end Prolog files.

             * Syntax errors now disable .itf creation, so that they
               show next time the code is used without change.

             * Redefinition warnings now issued only when an
               unqualified call is seen.

             * Context menu in Windows can now load a file into the
               toplevel.

             * Updated Windows installation in order to run CGI
               executables under Windows: a new information item is
               added to the registry.

             * Added new directories found in recent Linux
               distributions to INFOPATH.

             * Emacs-based environment and debugger improved:
                  * Errors located immediataly after code loading.

                  * Improved ciao-check-types-modes (preprocessor
                    progress now visible).

                  * Fixed loading regions repeatedly (no more
                    predicate redefinition warnings).

                  * Added entries in `ciaopp' menu to set verbosity
                    of output.

                  * Fixed some additional xemacs compatibility issues
                    (related to searches).

                  * Errors reported by inferior processes are now
                    explored in forward order (i.e., the first error
                    rewported is the first one highlighted). Improved
                    tracking of errors.

                  * Specific tool bar now available, with icons for
                    main fuctions (works from emacs 21.1 on). Also,
                    other minor adaptations for working with emacs
                    21.1 and later.

                  * Debugger faces are now locally defined (and
                    better customization). This also improves
                    comtability with xemacs (which has different
                    faces).

                  * Direct access to a common use of the preprocessor
                    (checking modes/types and locating errors) from
                    toolbar.

                  * Inferior modes for Ciao and CiaoPP improved:
                    contextual help turned on by default.

                  * Fixes to set-query. Also, previous query now
                    appears in prompt.

                  * Improved behaviour of stored query.

                  * Improved behaviour of recentering, finding
                    errors, etc.

                  * Wait for prompt has better termination
                    characteristics.

                  * Added new interactive entry points (M-x): ciao,
                    prolog, ciaopp.

                  * Better tracking of last inferior buffer used.

                  * Miscellanous bugs removed; some colors changed to
                    adapt to different Emacs versions.

                  * Fixed some remaining incompatibilities with
                    xemacs.

                  * `:- doc' now also supported and highlighted.

                  * Eliminated need for calendar.el

                  * Added some missing library directives to fontlock
                    list, organized this better.


        * New libraries added to the system:
             * hiord: new library which needs to be loaded in order
               to use higher-order call/N and P(X) syntax. Improved
               model for predicate abstractions.

             * fuzzy: allows representing fuzzy information in the
               form or Prolog rules.

             * use_url: allows loading a module remotely by using a
               WWW address of the module source code

             * andorra: alternative search method where goals which
               become deterministic at run time are executed before
               others.

             * iterative deepening (id): alternative search method
               which makes a depth-first search until a predetermined
               depth is reached. Complete but in general cheaper than
               breadth first.

             * det_hook: allows making actions when a deterministic
               situation is reached.

             * ProVRML: read VRML code and translate it into Prolog
               terms, and the other way around.

             * io_alias_redirection: change where stdin/stdout/stderr
               point to from within Ciao Prolog programs.

             * tcl_tk: an interface to Tcl/Tk programs.

             * tcl_tk_obj: object-based interface to Tcl/Tk graphical
               objects.

             * CiaoPP: options to interface with the CiaoPP Prolog
               preprocessor.

        * Some libraries greatly improved:
             * WebDB: utilities to create WWW-based database
               interfaces.

             * Improved java interface implementation (this forced
               renaming some interface primitives).

             * User-transparent persistent predicate database
               revamped:

                  * Implemented passerta_fact/1 (asserta_fact/1).

                  * Now it is never necessary to explicitly call
                    init_persdb, a call to initialize_db is only
                    needed after dynamically defining facts of
                    persistent_dir/2. Thus, pcurrent_fact/1 predicate
                    eliminated.

                  * Facts of persistent predicates included in the
                    program code are now included in the persistent
                    database when it is created. They are ignored in
                    successive executions.

                  * Files where persistent predicates reside are now
                    created inside a directory named as the module
                    where the persistent predicates are defined, and
                    are named as F_A* for predicate F/A.

                  * Now there are two packages: persdb and
                    'persdb/ll' (for low level). In the first, the
                    standard builtins asserta_fact/1, assertz_fact/1,
                    and retract_fact/1 are replaced by new versions
                    which handle persistent data predicates, behaving
                    as usual for normal data predicates. In the
                    second package, predicates with names starting
                    with 'p' are defined, so that there is not
                    overhead in calling the standard builtins.

                  * Needed declarations for persistent_dir/2 are now
                    included in the packages.

             * SQL now works with mysql.

             * system: expanded to contain more predicates which act
               as interface to the underlying system / operating
               system.

        * Other libraries improved:
             * xref: creates cross-references among Prolog files.

             * concurrency: new predicates to create new concurrent
               predicates on-the-fly.

             * sockets: bugs corrected.

             * objects: concurrent facts now properly recognized.

             * fast read/write: bugs corrected.

             * Added 'webbased' protocol for active modules:
               publication of active module address can now be made
               through WWW.

             * Predicates in library(dynmods) moved to
               library(compiler).

             * Expansion and meta predicates improved.

             * Pretty printing.

             * Assertion processing.

             * Module-qualified function calls expansion improved.

             * Module expansion calls goal expansion even at runtime.

        * Updates to builtins (there are a few more; these are the
          most relevant):
             * Added a prolog_flag to retrieve the version and patch.

             * current_predicate/1 in library(dynamic) now enumerates
               non-engine modules, prolog_sys:current_predicate/2 no
               longer exists.

             * exec/* bug fixed.

             * srandom/1 bug fixed.

        * Updates for C interface:
             * Fixed bugs in already existing code.

             * Added support for creation and traversing of Prolog
               data structures from C predicates.

             * Added support for raising Prolog exceptions from C
               predicates.

             * Preliminary support for calling Prolog from C.

        * Miscellaneous updates:
             * Installation made more robust.

             * Some pending documentation added.

             * 'ciao' script now adds (locally) to path the place
               where it has been installed, so that other programs
               can be located without being explicitly in the $PATH.

             * Loading programs is somewhat faster now.

             * Some improvement in printing path names in Windows.

*Version 1.7 (2000/7/12, 19:1:20 CEST)*
     Development version following even 1.6 distribution.

*Version 1.6 (2000/7/12, 18:55:50 CEST)*
        * Source-level debugger in emacs, breakpts.

        * Emacs environment improved, added menus for Ciaopp and
          LPDoc.

        * Debugger embeddable in executables.

        * Stand-alone executables available for UNIX-like operating
          systems.

        * Many improvements to emacs interface.

        * Menu-based interface to autodocumenter.

        * Threads now available in Win32.

        * Many improvements to threads.

        * Modular clp(R) / clp(Q).

        * Libraries implementing And-fair breadth-first and iterative
          deepening included.

        * Improved syntax for predicate abstractions.

        * Library of higher-order list predicates.

        * Better code expansion facilities (macros).

        * New delay predicates (when/2).

        * Compressed object code/executables on demand.

        * The size of atoms is now unbound.

        * Fast creation of new unique atoms.

        * Number of clauses/predicates essentially unbound.

        * Delayed goals with freeze restored.

        * Faster compilation and startup.

        * Much faster fast write/read.

        * Improved documentation.

        * Other new libraries.

        * Improved installation/deinstallation on all platforms.

        * Many improvements to autodocumenter.

        * Many bug fixes in libraries and engine.

*Version 1.5 (1999/11/29, 16:16:23 MEST)*
     Development version following even 1.4 distribution.

*Version 1.4 (1999/11/27, 19:0:0 MEST)*
        * Documentation greatly improved.

        * Automatic (re)compilation of foreign files.

        * Concurrency primitives revamped; restored &Prolog-like
          multiengine capability.

        * Windows installation and overall operation greatly improved.

        * New version of O'Ciao class/object library, with improved
          performance.

        * Added support for "predicate abstractions" in call/N.

        * Implemented reexportation through reexport declarations.

        * Changed precedence of importations, last one is now higher.

        * Modules can now implicitly export all predicates.

        * Many minor bugs fixed.

*Version 1.3 (1999/6/16, 17:5:58 MEST)*
     Development version following even 1.2 distribution.

*Version 1.2 (1999/6/14, 16:54:55 MEST)*
     Temporary version distributed locally for extensive testing of
     reexportation and other 1.3 features.

*Version 1.1 (1999/6/4, 13:30:37 MEST)*
     Development version following even 1.0 distribution.

*Version 1.0 (1999/6/4, 13:27:42 MEST)*
        * Added Tcl/Tk interface library to distribution.

        * Added push_prolog_flag/2 and pop_prolog_flag/1
          declarations/builtins.

        * Filename processing in Windows improved.

        * Added redefining/1 declaration to avoid redefining warnings.

        * Changed syntax/1 declaration to use_package/1.

        * Added add_clause_trans/1 declaration.

        * Changed format of .itf files such that a '+' stands for all
          the standard imports from engine, which are included in
          c_itf source internally (from engine(builtin_exports)).
          Further changes in itf data handling, so that once an .itf
          file is read in a session, the file is cached and next time
          it is needed no access to the file system is required.

        * Many bugs fixed.

*Version 0.9 (1999/3/10, 17:3:49 CET)*
        * Test version before 1.0 release. Many bugs fixed.

*Version 0.8 (1998/10/27, 13:12:36 MET)*
        * Changed compiler so that only one pass is done, eliminated
          `.dep' files.

        * New concurrency primitives.

        * Changed assertion comment operator to #.

        * Implemented high-order with call/N.

        * Integrated SQL-interface to external databases with
          persistent predicate concept.

        * First implementation of object oriented programming package.

        * Some bugs fixed.

*Version 0.7 (1998/9/15, 12:12:33 MEST)*
        * Improved debugger capabilities and made easier to use.

        * Simplified assertion format.

        * New arithmetic functions added, which complete all ISO
          functions.

        * Some bugs fixed.

*Version 0.6 (1998/7/16, 21:12:7 MET DST)*
        * Defining other path aliases (in addition to 'library')
          which can be loaded dynamically in executables is now
          possible.

        * Added the posibility to define multifile predicates in the
          shell.

        * Added the posibility to define dynamic predicates
          dynamically.

        * Added addmodule meta-argument type.

        * Implemented persistent data predicates.

        * New version of PiLLoW WWW library (XML, templates, etc.).

        * Ported active modules from "distributed Ciao" (independent
          development version of Ciao).

        * Implemented lazy loading in executables.

        * Modularized engine(builtin).

        * Some bugs fixed.

*Version 0.5 (1998/3/23)*
        * First Windows version.

        * Integrated debugger in toplevel.

        * Implemented DCG's as (Ciao-style) expansions.

        * Builtins renamed to match ISO-Prolog.

        * Made ISO the default syntax/package.

*Version 0.4 (1998/2/24)*
        * First version with the new Ciao emacs mode.

        * Full integration of concurrent engine and compiler/library.

        * Added new_declaration/1 directive.

        * Added modular syntax enhancements.

        * Shell script interpreter separated from toplevel shell.

        * Added new compilation warnings.

*Version 0.3 (1997/8/20)*
        * Ciao builtins modularized.

        * New prolog flags can be defined by libraries.

        * Standalone comand-line compiler available, with automatic
          "make".

        * Added assertions and regular types.

        * First version using the automatic documentation generator.

*Version 0.2 (1997/4/16)*
        * First module system implemented.

        * Implemented exceptions using catch/3 and throw/1.

        * Added functional & record syntax.

        * Added modular sentence, term, and goal translations.

        * Implemented attributed variables.

        * First CLPQ/CLPR implementation.

        * Added the posibility of linking external .so files.

        * Changes in syntax to allow `P(X)' and `"string"||L'.

        * Changed to be more similar to ISO-Prolog.

        * Implemented Prolog shell scripts.

        * Implemented data predicates.

*Version 0.1 (1997/2/13)*
     First fully integrated, standalone Ciao distribution. Based on
     integrating into an evolution of the &-Prolog
     engine/libraries/preprocessor [Her86,HG91] many functionalities
     from several previous independent development versions of Ciao
     [HC93,HC94,HCC95,Bue95,CLI95,HBdlBP95,HBC96,CHV96b,HBC99].


File: ciao.info,  Node: Getting started on Un*x-like machines,  Next: Getting started on Windows machines,  Prev: Introduction,  Up: Top

Getting started on Un*x-like machines
*************************************

   *Author(s):* M.Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#133 (2001/11/1, 16:34:6 CET)

   This part guides you through some very basic first steps with Ciao
on a Un*x-like system. It assumes that Ciao is already installed
correctly on your Un*x system. If this is not the case, then follow
the instructions in *Note Installing Ciao from the source
distribution:: first.

   We start with by describing the basics of using Ciao from a normal
command shell such as `sh/bash', `csh/tcsh', etc. We strongly
recommend reading also *Note An introduction to the Ciao emacs
environment (Un*x):: for the basics on using Ciao under `emacs',
which is a much simpler and much more powerful way of developing Ciao
programs, and has the advantage of offering an almost identical
environment under Un*x and Windows.

* Menu:

* Testing your Ciao Un*x installation::
* Un*x user setup::
* Using Ciao from a Un*x command shell::
* An introduction to the Ciao emacs environment (Un*x)::
* Keeping up to date (Un*x)::


File: ciao.info,  Node: Testing your Ciao Un*x installation,  Next: Un*x user setup,  Prev: Getting started on Un*x-like machines,  Up: Getting started on Un*x-like machines

Testing your Ciao Un*x installation
===================================

It is a good idea to start by performing some tests to check that
Ciao is installed correctly on your system (these are the same tests
that you are instructed to do during installation, so you can
obviously skip them if you have done them already at that time). If
any of these tests do not succeed either your environment variables
are not set properly (see *Note Un*x user setup:: for how to fix
this):

   * Typing `ciao' (or `ciaosh') should start the typical Prolog
     top-level shell.

   * In the top-level shell, Prolog library modules should load
     correctly. Type for example `use_module(library(dec10_io))' -you
     should get back a prompt with no errors reported.

   * To exit the top level shell, type `halt.' as usual, or <^D>.

   * Typing `ciaoc' should produce the help message from the Ciao
     standalone compiler.

   * Typing `ciao-shell' should produce a message saying that no code
     was found. This is a Ciao application which can be used to write
     scripts written in Prolog, i.e., files which do not need any
     explicit compilation to be run.


Also, the following documentation-related actions should work:

   * If the `info' program is installed, typing `info' should produce
     a list of manuals which _should include Ciao manual(s) in a
     separate area_ (you may need to log out and back in so that your
     shell variables are reinitialized for this to work).

   * Opening with a WWW browser (e.g., `netscape') the directory or
     `URL' corresponding to the `DOCROOT' setting should show a
     series of Ciao-related manuals. Note that _style sheets_ should
     be activated for correct formatting of the manual.

   * Typing `man ciao' should produce a man page with some very basic
     general information on Ciao (and pointing to the on-line
     manuals).

   * The `DOCROOT' directory should contain the manual also in the
     other formats such as `postscript' or `pdf' which specially
     useful for printing. See *Note Printing manuals (Un*x):: for
     instructions.



File: ciao.info,  Node: Un*x user setup,  Next: Using Ciao from a Un*x command shell,  Prev: Testing your Ciao Un*x installation,  Up: Getting started on Un*x-like machines

Un*x user setup
===============

   If the tests above have succeeded, the system is probably
installed correctly and your environment variables have been set
already. In that case you can skip to the next section.

   Otherwise, if you have not already done so, make the following
modifications in your startup scripts, so that these files are used
(`<LIBROOT>' must be replaced with the appropriate value, i.e., where
the Ciao library is installed):

   * For users a _csh-compatible shell_ ( `csh', `tcsh', ...), add to
     `~/.cshrc':

                  if ( -e <LIBROOT>/ciao/DOTcshrc ) then
                     source <LIBROOT>/ciao/DOTcshrc
                  endif

     `Mac OS X' users should add (or modify) the `path' file in the
     directory `~/Library/init/tcsh', adding the lines shown above.
     *Note:* while this is recognized by the terminal shell, and
     therefore by the text-mode Emacs which comes with Mac OS X, the
     Aqua native Emacs 21 does not recognize that initialization. It
     is thus necessary, at this moment, to set manually the Ciao
     shell (ciaosh) and Ciao library location by hand. This can be
     done from the Ciao menu within Emacs after a Ciao Prolog file
     has been loaded. We suppose that the reason is that Mac OS X
     does not actually consult the per-user initialization files on
     startup. It should also be possible to put the right
     initializations in the .emacs file using the `setenv' function
     of Emacs-lisp, as in

          (setenv "CIAOLIB" "<LIBROOT>/ciao")

     The same can be done for the rest of the variables initialized
     in `<LIBROOT>/ciao/DOTcshrc'

   * For users of an _sh-compatible shell_ ( `sh', `bash', ...), add
     to `~/.profile':

                  if [ -f <LIBROOT>/ciao/DOTprofile ]; then
                     . <LIBROOT>/ciao/DOTprofile
                  fi

     This will set up things so that the Ciao executables are found
     and you can access the Ciao system manuals using the `info'
     command. Note that, depending on your shell, _you may have to
     log out and back in_ for the changes to take effect.

   * Also, if you use `emacs' (highly recommended) add this line to
     your `~/.emacs' file:

                  (load-file "<LIBROOT>/ciao/DOTemacs.el")


   If after following these steps things do not work properly, then
the installation was probably not completed properly and you may want
to try reinstalling the system.


File: ciao.info,  Node: Using Ciao from a Un*x command shell,  Next: An introduction to the Ciao emacs environment (Un*x),  Prev: Un*x user setup,  Up: Getting started on Un*x-like machines

Using Ciao from a Un*x command shell
====================================

* Menu:

* Starting/exiting the top-level shell (Un*x)::
* Getting help (Un*x)::
* Compiling and running programs (Un*x)::
* Generating executables (Un*x)::
* Running Ciao scripts (Un*x)::
* The Ciao initialization file (Un*x)::
* Printing manuals (Un*x)::


File: ciao.info,  Node: Starting/exiting the top-level shell (Un*x),  Next: Getting help (Un*x),  Prev: Using Ciao from a Un*x command shell,  Up: Using Ciao from a Un*x command shell

Starting/exiting the top-level shell (Un*x)
-------------------------------------------

   The basic methods for starting/exiting the top-level shell have
been discussed above. If upon typing `ciao' you get a "command not
found" error or you get a longer message from Ciao before starting,
it means that either Ciao was not installed correctly or you
environment variables are not set up properly. Follow the
instructions on the message printed by Ciao or refer to the
installation instructions regarding user-setup for details.


File: ciao.info,  Node: Getting help (Un*x),  Next: Compiling and running programs (Un*x),  Prev: Starting/exiting the top-level shell (Un*x),  Up: Using Ciao from a Un*x command shell

Getting help (Un*x)
-------------------

   The basic methods for accessing the manual on-line have also been
discussed above. Use the table of contents and the indices of
_predicates_, _libraries_, _concepts_, etc. to find what you are
looking for.  Context-sensitive help is available within the `emacs'
environment (see below).


File: ciao.info,  Node: Compiling and running programs (Un*x),  Next: Generating executables (Un*x),  Prev: Getting help (Un*x),  Up: Using Ciao from a Un*x command shell

Compiling and running programs (Un*x)
-------------------------------------

   Once the shell is started, you can compile and execute Prolog
modules inside the interactive top-level shell in the standard way.
E.g., type `use_module(_file_).', `use_module(library(_file_)).' for
library modules, `ensure_loaded(_file_).' for files which are not
modules, and `use_package(_file_).' for library packages (these are
syntactic/semantic packages that extend the Ciao Prolog language in
many different ways). Note that the use of `compile/1' and
`consult/1' is discouraged in Ciao.

   For example, you may want to type `use_package(iso)' to ensure
Ciao has loaded all the ISO builtins (whether this is done by default
or not depends on your `.ciaorc' file). Do not worry about any
"module already in executable" messages -these are normal and simply
mean that a certain module is already pre-loaded in the top-level
shell. At this point, typing `write(hello).' should work.

   Note that some predicates that may be built-ins in other Prologs
are available through libraries in Ciao. This facilitates making
small executables.

   To change the working directory to, say, the `examples' directory
in the Ciao root directory, first do:

           ?- use_module(library(system)).

(loading the `system' library makes a number of system-related
predicates such as `cd/1' accessible) and then:

           ?- cd('$/examples').

(in Ciao the sequence `$/' _at the beginning of a path name_ is
replaced by the path of the Ciao root directory).

   For more information see *Note The interactive top-level shell::.


File: ciao.info,  Node: Generating executables (Un*x),  Next: Running Ciao scripts (Un*x),  Prev: Compiling and running programs (Un*x),  Up: Using Ciao from a Un*x command shell

Generating executables (Un*x)
-----------------------------

   Executables can be generated from the top-level shell (using
`make_exec/2') or using the standalone compiler ( `ciaoc'). To be
able to make an executable, the file should define the predicate
`main/1' (or `main/0'), which will be called upon startup (see the
corresponding manual section for details). In its simplest use, given
a top-level _foo_`.pl' file for an application, the compilation
process produces an executable `foo', automatically detecting which
other files used by `foo.pl' need recompilation.

For example, within the `examples' directory, you can type:

         ?- make_exec(hw,_).

which should produce an executable. Typing `hw' in a shell (or
double-clicking on the icon from a graphical window) should execute
it.

   For more information see *Note The interactive top-level shell::
and *Note The stand-alone command-line compiler::.


File: ciao.info,  Node: Running Ciao scripts (Un*x),  Next: The Ciao initialization file (Un*x),  Prev: Generating executables (Un*x),  Up: Using Ciao from a Un*x command shell

Running Ciao scripts (Un*x)
---------------------------

   Ciao allows writing Prolog scripts. These are files containing
Prolog source but which get executed without having to explicitly
compile them (in the same way as, e.g., `.bat' files or programs in
scripting languages). As an example, you can run the file `hw' in the
`examples' directory of the Ciao distribution and look at the source
with an editor. You can try changing the `Hello world' message and
running the program again (no need to recompile!).

   As you can see, the file should define the predicate `main/1' (not
`main/0'), which will be called upon startup. The two header lines
are necessary in Un*x in. In Windows you can leave them in or you can
take them out, but you need to rename the script to `hw.pls'. Leaving
the lines in has the advantage that the script will also work in Un*x
without any change.

   For more information see *Note The script interpreter::.


File: ciao.info,  Node: The Ciao initialization file (Un*x),  Next: Printing manuals (Un*x),  Prev: Running Ciao scripts (Un*x),  Up: Using Ciao from a Un*x command shell

The Ciao initialization file (Un*x)
-----------------------------------

   The Ciao toplevel can be made to execute upon startup a number of
commands (such as, e.g., loading certain files or setting certain
Prolog flags) contained in an initialization file. This file should
be called `.ciaorc' and placed in your _home_ directory (e.g., `~',
the same in which the `.emacs' file is put). You may need to set the
environment variable `HOME' to the path of this directory for the
Ciao toplevel shell to be able to locate this file on startup.


File: ciao.info,  Node: Printing manuals (Un*x),  Prev: The Ciao initialization file (Un*x),  Up: Using Ciao from a Un*x command shell

Printing manuals (Un*x)
-----------------------

   As mentioned before, the manual is available in several formats in
the `reference' directory within the `doc' directory in the Ciao
distribution, including `postscript' or `pdf', which are specially
useful for printing. These files are also available in the `DOCROOT'
directory specified during installation. Printing can be done using
an application such as `ghostview' (freely available from
`http://www.cs.wisc.edu/~ghost/index.html') or `acrobat reader'
(`http://www.adobe.com', only `pdf').


File: ciao.info,  Node: An introduction to the Ciao emacs environment (Un*x),  Next: Keeping up to date (Un*x),  Prev: Using Ciao from a Un*x command shell,  Up: Getting started on Un*x-like machines

An introduction to the Ciao emacs environment (Un*x)
====================================================

   While it is easy to use Ciao with any editor of your choice, using
it within the `emacs' editor/program development system is highly
recommended: Ciao includes an `emacs' _mode_ which provides a very
complete _application development environment_ which greatly
simplifies many program development tasks. See *Note Using Ciao
inside GNU emacs:: for details on the capabilities of `ciao'/ `emacs'
combination.

   If the (freely available) `emacs' editor/environment is not
installed in your system, we highly recommend that you also install
it at this point (there are instructions for where to find `emacs'
and how to install it in the Ciao installation instructions). After
having done this you can try for example the following things:

   * A few basic things:

        * Typing <^H> <i> (or in the menus `Help->Manuals->Browse
          Manuals with Info') should open a list of manuals in info
          format in which the Ciao manual(s) should appear.

        * When opening a Prolog file, i.e., a file with `.pl' or
          `.pls' ending, using <^X><^F>`filename' (or using the
          menus) the code should appear highlighted according to
          syntax (e.g., comments in red), and `Ciao/Prolog' menus
          should appear in the menu bar on top of the `emacs' window.

        * Loading the file using the `Ciao/Prolog' menu (or typing
          <^C> <l>) should start in another emacs buffer the Ciao
          toplevel shell and load the file. You should now be able to
          switch the the toplevel shell and make queries from within
          `emacs'.


     *Note:* when using `emacs' it is _very convenient_ to swap the
     locations of the (normally not very useful) <Caps Lock> key and
     the (very useful in `emacs') <Ctrl> key on the keyboard. How to
     do this is explained in the `emacs' frequently asked questions
     FAQs (see the `emacs' download instructions for their location).

     (if these things do not work the system or emacs may not be
     installed properly).

   * You can go to the location of most of the errors that may be
     reported during compilation by typing <^C> <`>.

   * You can also, e.g., create executables from the `Ciao/Prolog'
     menu, as well as compile individual files, or generate active
     modules.

   * Loading a file for source-level debugging using the
     `Ciao/Prolog' menu (or typing <^C> <d>) and then issuing a query
     should start the source-level debugger and move a marker on the
     code in a window while execution is stepped through in the
     window running the Ciao top level.

   * You can add the lines needed in Un*x for turning any file
     defining `main/1' into a script from the Ciao/Prolog menu or by
     typing <^C> <I> <S>.

   * You can also work with the preprocessor and auto-documenter
     directly from emacs: see their manuals or browse through the
     corresponding menus that appear when editing `.pl' files.


   We encourage you once more to read *Note Using Ciao inside GNU
emacs:: to discover the many other functionalities of this
environment.


File: ciao.info,  Node: Keeping up to date (Un*x),  Prev: An introduction to the Ciao emacs environment (Un*x),  Up: Getting started on Un*x-like machines

Keeping up to date (Un*x)
=========================

   You may want to read *Note Beyond installation:: for instructions
on how to sign up on the Ciao user's mailing list, receive
announcements regarding new versions, download new versions, report
bugs, etc.


File: ciao.info,  Node: Getting started on Windows machines,  Next: *** PART I - The program development environment,  Prev: Getting started on Un*x-like machines,  Up: Top

Getting started on Windows machines
***********************************

   *Author(s):* M.Hermenegildo.

   This part guides you through some very basic first steps with Ciao
on an MSWindows ("Win32") system. It assumes that Ciao is already
installed correctly on your Windows system. If this is not the case,
then follow the instructions in *Note Installing Ciao from a Win32
binary distribution:: (or *Note Installing Ciao from the source
distribution::) first.

   We start with by describing the basics of using Ciao from the
Windows explorer and/or a DOS command shell. We strongly recommend
reading also *Note An introduction to the Ciao emacs environment
(Win32):: for the basics on using Ciao under `emacs', which is a much
simpler and much more powerful way of developing Ciao programs, and
has the advantage of offering an almost identical environment under
Windows and Un*x.

* Menu:

* Testing your Ciao Win32 installation::
* Using Ciao from the Windows explorer and command shell::
* An introduction to the Ciao emacs environment (Win32)::
* Keeping up to date (Win32)::


File: ciao.info,  Node: Testing your Ciao Win32 installation,  Next: Using Ciao from the Windows explorer and command shell,  Prev: Getting started on Windows machines,  Up: Getting started on Windows machines

Testing your Ciao Win32 installation
====================================

It is a good idea to start by performing some tests to check that
Ciao is installed correctly on your system (these are the same tests
that you are instructed to do during installation, so you can
obviously skip them if you have done them already at that time):

   * Ciao-related file types (`.pl' source files, `.cpx' executables,
     `.itf,.po,.asr' interface files, `.pls' scripts, etc.) should
     have specific icons associated with them (you can look at the
     files in the folders in the Ciao distribution to check).

   * Double-clicking on the shortcut to `ciaosh'(`.cpx') on the
     desktop should start the typical Prolog top-level shell in a
     window. If this shortcut has not been created on the desktop,
     then double-clicking on the `ciaosh'(`.cpx') icon inside the
     `shell' folder within the Ciao source folder should have the
     same effect.

   * In the top-level shell, Prolog library modules should load
     correctly. Type for example `use_module(library(dec10_io)).' at
     the Ciao top-level prompt -you should get back a prompt with no
     errors reported.

   * To exit the top level shell, type `halt.' as usual, or <^D>.


Also, the following documentation-related actions should work:

   * Double-clicking on the shortcut to `ciao'(`.html') which appears
     on the desktop should show the Ciao manual in your default WWW
     browser. If this shortcut has not been created you can
     double-click on the `ciao'(`.html') file in the
     `doc\reference\ciao_html' folder inside the Ciao source folder.
     Make sure you configure your browser to use _style sheets_ for
     correct formatting of the manual (note, however, that some older
     versions of Explorer did not support style sheets well and will
     give better results turning them off).

   * The `doc\reference' folder contains the manual also in the other
     formats present in the distribution, such as `info' (very
     convenient for users of the `emacs' editor/program development
     system) and `postscript' or `pdf', which are specially useful
     for printing. See *Note Printing manuals (Win32):: for
     instructions.



File: ciao.info,  Node: Using Ciao from the Windows explorer and command shell,  Next: An introduction to the Ciao emacs environment (Win32),  Prev: Testing your Ciao Win32 installation,  Up: Getting started on Windows machines

Using Ciao from the Windows explorer and command shell
======================================================

* Menu:

* Starting/exiting the top-level shell (Win32)::
* Getting help (Win32)::
* Compiling and running programs (Win32)::
* Generating executables (Win32)::
* Running Ciao scripts (Win32)::
* The Ciao initialization file (Win32)::
* Printing manuals (Win32)::


File: ciao.info,  Node: Starting/exiting the top-level shell (Win32),  Next: Getting help (Win32),  Prev: Using Ciao from the Windows explorer and command shell,  Up: Using Ciao from the Windows explorer and command shell

Starting/exiting the top-level shell (Win32)
--------------------------------------------

   The basic methods for starting/exiting the top-level shell have
been discussed above. The installation script also leaves a
`ciaosh'(`.bat') file inside the `shell' folder of the Ciao
distribution which can be used to start the top-level shell from the
command line in Windows95/98/NT.


File: ciao.info,  Node: Getting help (Win32),  Next: Compiling and running programs (Win32),  Prev: Starting/exiting the top-level shell (Win32),  Up: Using Ciao from the Windows explorer and command shell

Getting help (Win32)
--------------------

   The basic methods for accessing the manual on-line have also been
discussed above. Use the table of contents and the indices of
_predicates_, _libraries_, _concepts_, etc. to find what you are
looking for.  Context-sensitive help is available within the `emacs'
environment (see below).


File: ciao.info,  Node: Compiling and running programs (Win32),  Next: Generating executables (Win32),  Prev: Getting help (Win32),  Up: Using Ciao from the Windows explorer and command shell

Compiling and running programs (Win32)
--------------------------------------

   Once the shell is started, you can compile and execute Prolog
modules inside the interactive toplevel shell in the standard way.
E.g., type `use_module(_file_).', `use_module(library(_file_)).' for
library modules, `ensure_loaded(_file_).' for files which are not
modules, and `use_package(_file_).' for library packages (these are
syntactic/semantic packages that extend the Ciao Prolog language in
many different ways). Note that the use of `compile/1' and
`consult/1' is discouraged in Ciao.

   For example, you may want to type `use_package(iso)' to ensure
Ciao has loaded all the ISO builtins (whether this is done by default
or not depends on your `.ciaorc' file). Do not worry about any
"module already in executable" messages -these are normal and simply
mean that a certain module is already pre-loaded in the toplevel
shell. At this point, typing `write(hello).' should work.

   Note that some predicates that may be built-ins in other Prologs
are available through libraries in Ciao. This facilitates making
small executables.

   To change the working directory to, say, the `examples' directory
in the Ciao source directory, first do:

           ?- use_module(library(system)).

(loading the `system' library makes a number of system-related
predicates such as `cd/1' accessible) and then:

           ?- cd('$/examples').

(in Ciao the sequence `$/' _at the beginning of a path name_ is
replaced by the path of the Ciao root directory).

   For more information see *Note The interactive top-level shell::.


File: ciao.info,  Node: Generating executables (Win32),  Next: Running Ciao scripts (Win32),  Prev: Compiling and running programs (Win32),  Up: Using Ciao from the Windows explorer and command shell

Generating executables (Win32)
------------------------------

   Executables can be generated from the toplevel shell (using
`make_exec/2') or using the standalone compiler ( `ciaoc'(`.cpx'),
located in the `ciaoc' folder). To be able to make an executable, the
file should define the predicate `main/1' (or `main/0'), which will
be called upon startup (see the corresponding manual section for
details).

For example, within the `examples' directory, you can type:

         ?- make_exec(hw,_).

which should produce an executable. Double-clicking on this
executable should execute it.

   Another way of creating Ciao executables from source files is by
right-clicking on `.pl' files and choosing "make executable". This
uses the standalone compiler (this has the disadvantage, however,
that it is sometimes difficult to see the error messages).

   For more information see *Note The interactive top-level shell::
and *Note The stand-alone command-line compiler::.


File: ciao.info,  Node: Running Ciao scripts (Win32),  Next: The Ciao initialization file (Win32),  Prev: Generating executables (Win32),  Up: Using Ciao from the Windows explorer and command shell

Running Ciao scripts (Win32)
----------------------------

   Double-clicking on files ending in `.pls', _Ciao Prolog scripts_,
will also execute them. These are files containing Prolog source but
which get executed without having to explicitly compile them (in the
same way as, e.g., `.bat' files or programs in scripting languages).
As an example, you can double-click on the file `hw.pls' in the
`examples' folder and look at the source with an editor. You can try
changing the `Hello world' message and double-clicking again (no need
to recompile!).

   As you can see, the file should define the predicate `main/1' (not
`main/0'), which will be called upon startup. The two header lines
are only necessary in Un*x. In Windows you can leave them in or you
can take them out, but leaving them in has the advantage that the
script will also work in Un*x without any change.

   For more information see *Note The script interpreter::.


File: ciao.info,  Node: The Ciao initialization file (Win32),  Next: Printing manuals (Win32),  Prev: Running Ciao scripts (Win32),  Up: Using Ciao from the Windows explorer and command shell

The Ciao initialization file (Win32)
------------------------------------

   The Ciao toplevel can be made to execute upon startup a number of
commands (such as, e.g., loading certain files or setting certain
Prolog flags) contained in an initialization file. This file should
be called `.ciaorc' and placed in your _home_ folder (e.g., the same
in which the `.emacs' file is put). You may need to set the
environment variable `HOME' to the path of this folder for the Ciao
toplevel shell to be able to locate this file on startup.


File: ciao.info,  Node: Printing manuals (Win32),  Prev: The Ciao initialization file (Win32),  Up: Using Ciao from the Windows explorer and command shell

Printing manuals (Win32)
------------------------

   As mentioned before, the manual is available in several formats in
the `reference' folder within Ciao's `doc' folder, including
`postscript' or `pdf', which are specially useful for printing. This
can be done using an application such as `ghostview' (freely
available from `http://www.cs.wisc.edu/~ghost/index.html') or
`acrobat reader' (`http://www.adobe.com', only `pdf').


File: ciao.info,  Node: An introduction to the Ciao emacs environment (Win32),  Next: Keeping up to date (Win32),  Prev: Using Ciao from the Windows explorer and command shell,  Up: Getting started on Windows machines

An introduction to the Ciao emacs environment (Win32)
=====================================================

   While it is easy to use Ciao with any editor of your choice, using
it within the `emacs' editor/program development system is highly
recommended: Ciao includes an `emacs' _mode_ which provides a very
complete _application development environment_ which greatly
simplifies many program development tasks. See *Note Using Ciao
inside GNU emacs:: for details on the capabilities of `ciao'/ `emacs'
combination.

   If the (freely available) `emacs' editor/environment is not
installed in your system, we highly recommend that you also install
it at this point (there are instructions for where to find `emacs'
and how to install it in the Ciao installation instructions). After
having done this you can try for example the following things:

   * A few basic things:

        * Typing <^H> <i> (or in the menus `Help->Manuals->Browse
          Manuals with Info') should open a list of manuals in info
          format in which the Ciao manual(s) should appear.

        * When opening a Prolog file, i.e., a file with `.pl' or
          `.pls' ending, using <^X><^F>`filename' (or using the
          menus) the code should appear highlighted according to
          syntax (e.g., comments in red), and `Ciao/Prolog' menus
          should appear in the menu bar on top of the `emacs' window.

        * Loading the file using the `Ciao/Prolog' menu (or typing
          <^C> <l>) should start in another emacs buffer the Ciao
          toplevel shell and load the file. You should now be able to
          switch the the toplevel shell and make queries from within
          `emacs'.


     *Note:* when using `emacs' it is _very convenient_ to swap the
     locations of the (normally not very useful) <Caps Lock> key and
     the (very useful in `emacs') <Ctrl> key on the keyboard. How to
     do this is explained in the `emacs' frequently asked questions
     FAQs (see the `emacs' download instructions for their location).

     (if these things do not work the system or emacs may not be
     installed properly).

   * You can go to the location of most of the errors that may be
     reported during compilation by typing <^C> <`>.

   * You can also, e.g., create executables from the `Ciao/Prolog'
     menu, as well as compile individual files, or generate active
     modules.

   * Loading a file for source-level debugging using the
     `Ciao/Prolog' menu (or typing <^C> <d>) and then issuing a query
     should start the source-level debugger and move a marker on the
     code in a window while execution is stepped through in the
     window running the Ciao top level.

   * You can add the lines needed in Un*x for turning any file
     defining `main/1' into a script from the Ciao/Prolog menu or by
     typing <^C> <I> <S>.

   * You can also work with the preprocessor and auto-documenter
     directly from emacs: see their manuals or browse through the
     corresponding menus that appear when editing `.pl' files.


   We encourage you once more to read *Note Using Ciao inside GNU
emacs:: to discover the many other functionalities of this
environment.


File: ciao.info,  Node: Keeping up to date (Win32),  Prev: An introduction to the Ciao emacs environment (Win32),  Up: Getting started on Windows machines

Keeping up to date (Win32)
==========================

   You may want to read *Note Beyond installation:: for instructions
on how to sign up on the Ciao user's mailing list, receive
announcements regarding new versions, download new versions, report
bugs, etc.


File: ciao.info,  Node: *** PART I - The program development environment,  Next: The stand-alone command-line compiler,  Prev: Getting started on Windows machines,  Up: Top

PART I - The program development environment
********************************************

   This part documents the components of the basic Ciao program
development environment. They include:

ciaoc:
     the standalone compiler, which creates executables without
     having to enter the interactive top-level.

ciaosh:
     (also invoked simply as `ciao') is an interactive top-level
     shell, similar to the one found on most Prolog systems (with
     some enhancements).

debugger.pl:
     a Byrd box-type debugger, similar to the one found on most
     Prolog systems (also with some enhancements, such as
     source-level debugging). This is not a standalone application,
     but is rather included in `ciaosh', as is done in other Prolog
     systems. However, it is also _embeddable_, in the sense that it
     can be included as a library in executables, and activated
     dynamically and conditionally while such executables are running.

ciao-shell:
     an interpreter/compiler for _Prolog scripts_ (i.e., files
     containing Prolog code which run without needing explicit
     compilation).

ciao.el:
     a _complete program development enviroment_, based on GNU emacs,
     with syntax coloring, direct access to all the tools described
     above (as well as the preprocessor and the documenter), atomatic
     location of errors, source-level debugging, context-sensitive
     access to on-line help/manuals, etc. The use of this environment
     is _very highly recommended_!

   The Ciao program development environment also includes `ciaopp',
the preprocessor, and `lpdoc', the documentation generator, which are
described in separate manuals.


File: ciao.info,  Node: The stand-alone command-line compiler,  Next: The interactive top-level shell,  Prev: *** PART I - The program development environment,  Up: Top

The stand-alone command-line compiler
*************************************

   *Author(s):* Daniel Cabeza and the CLIP Group.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#30 (2000/11/3, 16:42:1 CET)

   `ciaoc' [CH00b] is the Ciao stand-alone command-line compiler.
`ciaoc' can be used to create executables or to compile individual
files to object code (to be later linked with other files).  `ciaoc'
is specially useful when working from the command line. Also, it can
be called to compile Ciao programs from other tools such as, e.g.,
shell scripts, `Makefile's, or project files. All the capabilities of
`ciaoc' are also available from the interactive top-level shell,
which uses the ciaoc modules as its components.

* Menu:

* Introduction to building executables::
* Paths used by the compiler during compilation::
* Running executables from the command line::
* Types of executables generated::
* Environment variables used by Ciao executables::
* Intermediate files in the compilation process::
* Usage (ciaoc)::


File: ciao.info,  Node: Introduction to building executables,  Next: Paths used by the compiler during compilation,  Prev: The stand-alone command-line compiler,  Up: The stand-alone command-line compiler

Introduction to building executables
====================================

   An _executable_ can be built from a single file or from a
collection of inter-related files. In the case of only one file, this
file must define the predicate `main/0' or `main/1'. This predicate
is the one which will be called when the executable is started. As an
example, consider the following file, called `hello.pl':

     main :-
          write('Hello world'),
          nl.

To compile it from the command line using the `ciaoc' standalone
compiler it suffices to type "`ciaoc hello'" (in Win32 you may have
to put the complete path to the `ciaoc' folder of the Ciao
distribution, where the installation process leaves a `ciaoc.bat'
file):

     /herme@clip:/tmp
     [60]> ciaoc hello
     
     /herme@clip:/tmp
     [61]>

This produces an executable called `hello' in Un*x-like systems and
`hello.cpx' under Win32 systems. This executable can then be run in
Win32 by double-clicking on it and on Un*x systems by simply typing
its name (see for *Note Running executables from the command line::
for how to run executables from the command line in Win32):

     /herme@clip:/tmp
     [61]> hello
     Hello world

   If the application is composed of several files the process is
identical. Assume `hello.pl' is now:

     :- use_module(aux,[p/1]).
     
     main :-
          p(X),
          write(X),
          nl.

where the file `aux.pl' contains:

     :- module(aux,[p/1]).
     
     p('Hello world').

This can again be compiled using the `ciaoc' standalone compiler as
before:

     /herme@clip:/tmp
     [60]> ciaoc hello
     
     /herme@clip:/tmp
     [61]> hello
     Hello world

The invocation of `ciaoc hello' compiles the file `hello.pl' and all
connected files that may need recompilation - in this case the file
`aux.pl'. Also, if any library files used had not been compiled
previously they would be compiled at this point (See *Note
Intermediate files in the compilation process::). Also, if, say,
`hello.pl' is changed and recompiled, the object code resulting from
the previous compilation of `aux.pl' will be reused. This is all done
without any need for `Makefile's, and considerably accelerates the
development process for large applications. This process can be
observed by selecting the `-v' option when invoking `ciaoc' (which is
equivalent to setting the `verbose_compilation' Prolog flag to `on'
in the top-level interpreter).

   If `main/1' is defined instead of `main/0' then when the
executable is started the argument of `main/1' will be instantiated
to a list of atoms, each one of them corresponding to a command line
option. Consider the file `say.pl':

     main(Argv) :-
          write_list(Argv), nl.
     
     write_list([]).
     write_list([Arg|Args]) :-
          write(Arg),
          write(' '),
          write_list(Args).

Compiling this program and running it results in the following output:

     /herme@clip:/tmp
     [91]> ciaoc say
     
     /herme@clip:/tmp
     [91]> say hello dolly
     hello dolly

   The name of the generated executable can be controlled with the
`-o' option (See *Note Usage (ciaoc)::).


File: ciao.info,  Node: Paths used by the compiler during compilation,  Next: Running executables from the command line,  Prev: Introduction to building executables,  Up: The stand-alone command-line compiler

Paths used by the compiler during compilation
=============================================

   The compiler will look for files mentioned in commands such as
`use_module/1' or `ensure_loaded/1' in the current directory. Other
paths can be added by including them in a file whose name is given to
`ciaoc' using the `-u' option. This file should contain facts of the
predicates `file_search_path/2' and `library_directory/1' (see the
documentation for these predicates and also *Note Customizing library
paths and path aliases:: for details).


File: ciao.info,  Node: Running executables from the command line,  Next: Types of executables generated,  Prev: Paths used by the compiler during compilation,  Up: The stand-alone command-line compiler

Running executables from the command line
=========================================

   As mentioned before, what the `ciaoc' compiler generates and how
it is started varies somewhat from OS to OS. In general, the product
of compiling an application with `ciaoc' is a file that contains the
bytecode (the product of the compilation) and invokes the Ciao engine
on it.

   * Un Un*x this is a _script_ (see the first lines of the file)
     which invokes the ciao engine on this file. To run the generated
     executable from a Un*x shell, or from the `bash' shell that
     comes with the Cygwin libraries (see *Note Installation and
     compilation under Windows::) it suffices to type its name at the
     shell command line, as in the examples above.

   * In a Win32 system, the compiler produces a similar file with a
     `.cpx' ending. The Ciao installation process typically makes
     sure that the Windows registry contains the right entries so
     that this executable will run upon double-cliking on it.

     In you want to run the executable from the command line an
     additional `.bat' file is typically needed. To help in doing
     this, the Win32 installation process creates a `.bat' skeleton
     file called `bat_skel' in the `Win32' folder of the
     distribution) which allows running Ciao executables from the
     command line. If you want to run a Ciao executable `file.cpx'
     from the command line, you normally copy the skeleton file to
     the folder were the executable is and rename it to `file.bat',
     then change its contents as explained in a comment inside the
     file itself.

     Note that this `.bat' file is usually not necessary in NT, as
     its command shell understands file extension associations. I.e.,
     in windows NT it is possible to run the `file.cpx' executable
     directly. Due to limitations of `.bat' files in Windows 95/98,
     in those OSs no more than 9 command line arguments can be passed
     to the executable (in NT there is no such restriction).

     Finally, in a system in which Cygnus Win32 is installed
     executables can also be used directly from the `bash' shell
     command line, without any associated `.bat' files, by simply
     typing their name at the `bash' shell command line, in the same
     way as in Un*x. This only requires that the `bash' shell which
     comes with Cygnus Win32 be installed and accessible: simply,
     make sure that `/bin/sh.exe' exists.


   Except for a couple of header lines, the contents of executables
are almost identical under different OSs (except for self-contained
ones). The bytecode they contain is architecture-independent. In
fact, it is possible to create an executable under Un*x and run it on
Windows or viceversa, by making only minor modifications (e.g.,
creating the `.bat' file and/or setting environment variables or
editing the start of the file to point to the correct engine
location).


File: ciao.info,  Node: Types of executables generated,  Next: Environment variables used by Ciao executables,  Prev: Running executables from the command line,  Up: The stand-alone command-line compiler

Types of executables generated
==============================

   While the default options used by `ciaoc' are sufficient for
normal use, by selecting other options `ciaoc' can generate several
different types of executables, which offer interesting tradeoffs
among size of the generated executable, portability, and startup time
[CH00b]:

Dynamic executables:
     `ciaoc' produces by default _dynamic_ executables. In this case
     the executable produced is a platform-independent file which
     includes in compiled form all the user defined files. On the
     other hand, any system libraries used by the application are
     loaded dynamically at startup. More precisely, any files that
     appear as `library(...)' in `use_module/1' and `ensure_loaded/1'
     declarations will not be included explicitly in the executable
     and will instead be loaded dynamically. Is is also possible to
     mark other path aliases (see the documentation for
     `file_search_path/2') for dynamic loading by using the `-d'
     option. Files accessed through such aliases will also be loaded
     dynamically.

     Dynamic loading allows making smaller executables. Such
     executables may be used directly in the same machine in which
     they were compiled, since suitable paths to the location of the
     libraries will be included as default in the executable by
     `ciaoc' during compilation.

     The executable can also be used in another machine, even if the
     architecture and OS are different. The requirement is that the
     Ciao libraries (which will also include the appropriate Ciao
     engine for that architecture and OS) be installed in the target
     machine, and that the `CIAOLIB' and `CIAOENGINE' environment
     variables are set appropriately for the executable to be able to
     find them (see *Note Environment variables used by Ciao
     executables::). How to do this differs slightly from OS to OS.

Static executables:
     Selecting the `-s' option `ciaoc' produces a _static_
     executable. In this case the executable produced (again a
     platform-independent file) will include in it all the auxiliary
     files and any system libraries needed by the application. Thus,
     such an executable is almost complete, needing in order to run
     only the Ciao engine, which is platform-specific.(1) Again, if
     the executable is run in the same machine in which it was
     compiled then the engine is found automatically. If the
     executable is moved to another machine, the executable only
     needs access to a suitable engine (which can be done by setting
     the `CIAOENGINE' environment variable to point to this engine).

     This type of compilation produces larger executables, but has
     the advantage that these executables can be installed and run in
     a different machine, with different architecture and OS, even if
     Ciao is not installed on that machine. To install (or
     distribute) such an executable, one only needs to copy the
     executable file itself and the appropriate engine for the target
     platform (See *Note Installing Ciao from the source
     distribution:: or *Note Installing Ciao from a Win32 binary
     distribution:: and *Note Multiarchitecture support::), and to
     set things so that the executable can find the engine. (2)

Dynamic executables, with lazy loading:
     Selecting the `-l' option is very similar to the case of dynamic
     executables above, except that the code in the library modules
     is not loaded when the program is started but rather it is done
     during execution, the first time a predicate defined in that
     file is called. This is advantageous if a large application is
     composed of many parts but is such that typically only some of
     the parts are used in each invocation. The Ciao preprocessor,
     `ciaopp', is a good example of this: it has many capabilitites
     but typically only some of them are used in a given session. An
     executable with lazy load has the advantage that it starts fast,
     loading a minimal functionality on startup, and then loads the
     different modules automatically as needed.

Self-contained executables:
     _Self-contained_ executables are static executables (i.e., this
     option also implies _static_ compilation) which include a Ciao
     engine along with the bytecode, so they do not depend on an
     external one for their execution. This is useful to create
     executables which run even if the machine where the program is
     to be executed does not have a Ciao engine installed and/or
     libraries. The disadvantage is that such execuatbles are
     platform-dependent (as well as larger than those that simply use
     an external library). This type of compilation is selected with
     the `-S' option. Cross-compilation is also possible with the
     `-SS' option, so you can specify the target OS and architecture
     (e.g. LINUXi86). To be able to use the latter option, it is
     necessary to have installed a ciaoengine for the target machine
     in the Ciao library (this requires compiling the engine in that
     OS/architecture and installing it, so that it is available in
     the library).

Compressed executables:
     In _compressed_ executables the bytecode is compressed. This
     allows producing smaller executables, at the cost of a slightly
     slower startup time. This is selected with the `-z' option. You
     can also produce compressed libraries if you use `-zl' along
     with the `-c' option. If you select `-zl' while generating an
     executable, any library which is compiled to accomplish this
     will be also compressed.

Active modules:
     The compiler can also compile (via the `-a' option) a given file
     into an _active module_ (see *Note Active modules (high-level
     distributed execution):: for a description of this).

   ---------- Footnotes ----------

   (1) Currently there is an exception to this related to libraries
which are written in languages other than Prolog, as, e.g., C. C
files are currently always compiled to dynamically loadable object
files (`.so' files), and they thus need to be included manually in a
distribution of an application. This will be automated in upcoming
versions of the Ciao system.

   (2) It is also possible to produce real standalone executables,
i.e., executables that do not need to have an engine around. However,
this is not automated yet, although it is planned for an upcoming
version of the compiler. In particular, the compiler can generate a
`.c' file for each `.pl' file. Then all the `.c' files can be
compiled together into a real executable (the engine is added one
more element during link time) producing a complete executable for a
given architecture. The downside of course is that such an executable
will not be portable to other architectures without recompilation.


File: ciao.info,  Node: Environment variables used by Ciao executables,  Next: Intermediate files in the compilation process,  Prev: Types of executables generated,  Up: The stand-alone command-line compiler

Environment variables used by Ciao executables
==============================================

   The executables generated by the Ciao compiler (including the ciao
development tools themselves) locate automatically where the Ciao
engine and libraries have been installed, since those paths are
stored as defaults in the engine and compiler at installation time.
Thus, there is no need for setting any environment variables in order
to _run_ Ciao executables (on a single architecture - see *Note
Multiarchitecture support:: for running on multiple architectures).

   However, the default paths can be overridden by using the
environment variables `CIAOENGINE' and `CIAOLIB'. The first one will
tell the Ciao executables where to look for an engine, and the second
will tell them where to look for the libraries. Thus, it is possible
to actually use the Ciao system without installing it by setting
these variables to the following values:
   * `CIAOENGINE': `$(SRC)/bin/$(CIAOARCH)/ciaoengine'

   * `CIAOLIB': `$(SRC)'


where `$(CIAOARCH)' is the string echoed by the command
`SRC/etc/ciao_get_arch' (or `BINROOT/ciao_get_arch', after
installation).

   This allows using alternate engines or libraries, which can be
very useful for system development and experimentation.


File: ciao.info,  Node: Intermediate files in the compilation process,  Next: Usage (ciaoc),  Prev: Environment variables used by Ciao executables,  Up: The stand-alone command-line compiler

Intermediate files in the compilation process
=============================================

   Compiling an individual source (i.e., `.pl') file produces a
`.itf' file and a `.po' file. The `.itf' file contains information of
the _modular interface_ of the file, such as information on exported
and imported predicates and on the other modules used by this module.
This information is used to know if a given file should be recompiled
at a given point in time and also to be able to detect more errors
statically including undefined predicates, mismatches on predicate
charaterictics across modules, etc. The `.po' file contains the
platform-independent object code for a file, ready for linking
(statically or dynamically).

   It is also possible to use `ciaoc' to explicitly generate the
`.po' file for one or more `.pl' files by using the `-c' option.


File: ciao.info,  Node: Usage (ciaoc),  Prev: Intermediate files in the compilation process,  Up: The stand-alone command-line compiler

Usage (ciaoc)
=============

   The following provides details on the different command line
options available when invoking `ciaoc':



     ciaoc <MiscOpts> <ExecOpts> [-o <execname>] <file> ...
     
       Make an executable from the listed files.  If there is
       more than one file, they must be non-module, and the
       first one must include the main predicate.  The -o
       option allows generating an arbitrary executable name.
     
     ciaoc <MiscOpts> <ExecOpts> -a <publishmod> <module>
     
       Make an active module executable from <module> with
       address publish module <publishmod>.
     
     ciaoc <MiscOpts> -c  <file> ...
     
       Compile listed files (make .po objects).
     
     <MiscOpts> can be: [-v] [-ri] [-u <file>]
     
     -v  verbose mode
     
     -ri generate human readable .itf files
     
     -u  use <file> for compilation
     
     <ExecOpts> can be: [-s|-S|-SS <target>|-z|-zl|-e|-l|(-ll <module>)*]
                        (-d <alias>)* [-x]
     
     -s  make a static executable (otherwise dynamic files are not included)
     
     -S  make standalone executable for the current OS and architecture
     
     -SS make standalone executable for <target> OS and architecture
         valid <target> values may be: LINUXi86, SolarisSparc...
     
         (both -S and -SS imply -s)
     
     -z  generate executables with compressed bytecode
     
     -zl generate libraries with compressed bytecode - any library (re)compiled
         as consequence of normal executable compilation will also be affected
     
     -e  make executable with eager load of dynamic files at startup (default)
     
     -l  idem with lazy load of dynamic files (except insecure cases)
     
     -ll force <module> to be loaded lazily,  implies -l
     
     -d  files using this path alias are dynamic (default: library)
     
     -x  Extended recompilation: only useful for Ciao standard library developers
     
     default extension for files is '.pl'


File: ciao.info,  Node: The interactive top-level shell,  Next: The interactive debugger,  Prev: The stand-alone command-line compiler,  Up: Top

The interactive top-level shell
*******************************

   *Author(s):* Daniel Cabeza and the CLIP Group.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#129 (2001/10/28, 15:38:52 CET)

   `ciaosh' is the Ciao interactive top-level shell. It provides the
user with an interactive programming environment with tools for
incrementally building programs, debugging programs by following
their executions, and modifying parts of programs without having to
start again from scratch. If available, it is strongly recommended to
use it with the emacs interface provided, as it greatly simplifies
the operation. This chapter documents general operation in the shell
itself. Other chapters document the

* Menu:

* Shell invocation and startup::
* Shell interaction::
* Entering recursive (conjunctive) shell levels::
* Usage and interface (ciaosh)::
* Documentation on exports (ciaosh)::
* Documentation on internals (ciaosh)::


File: ciao.info,  Node: Shell invocation and startup,  Next: Shell interaction,  Prev: The interactive top-level shell,  Up: The interactive top-level shell

Shell invocation and startup
============================

   When invoked, the shell responds with a message of identification
and the prompt `?- ' as soon as it is ready to accept input, thus:

     Ciao-Prolog X.Y #PP: Thu Mar 25 17:20:55 MET 1999
     ?-

   When the shell is initialized it looks for a file `.ciaorc' in the
HOME directory and makes an `include' of it, if it exists. This file
is useful for including `use_module/1' declarations for the modules
one wants to be loaded by default, changing prolog flags, etc. (Note
that the `.ciaorc' file can only contain directives, not actual code;
to load some code at startup put it in a separate file and load it
using e.g. a `use_module/1' declaration.) If the initialization file
does not exist, the ISO-Prolog compatibility package `iso' is
included, to provide (almost) all the ISO builtins by default. Two
command-line options control the loading of the initialization file:

`-f'
     Fast start, do not load any initialization file.

`-l' `File'
     Look for initialization file `File' instead of `~/.ciaorc'. If
     it does not exist, include the compatibility package `iso'.


File: ciao.info,  Node: Shell interaction,  Next: Entering recursive (conjunctive) shell levels,  Prev: Shell invocation and startup,  Up: The interactive top-level shell

Shell interaction
=================

   After the shell outputs the prompt, it is expecting either an
internal command (see the following sections) or a _query_ (a goal or
sequence of goals). When typing in the input, which must be a valid
prolog term, if the term does not end in the first line, subsequent
lines are indented. For example:

     ?- X =
        f(a,
        b).
     
     X = f(a,b) ?
     
     yes
     ?-

   The queries are executed by the shell as if they appeared in the
user module. Thus, in addition to builtin predicates, predicates
available to be executed directly are all predicates defined by
loaded user files (files with no module declaration), and imported
predicates from modules by the use of `use_module'.

   The possible answers of the shell, after executing an internal
command or query, are:

   * If the execution failed (or produced an error), the answer is
     `no'.

   * If the execution was successful, and no answer variable (see
     below) was bound (or constraints where imposed on such
     variables), the answer is simply `yes'.

   * If the execution was successful and bindings where made (or
     constraints where imposed) on answer variables, then the shell
     outputs the values of answer variables, as a sequence of
     bindings (or constraints), and then prints a `?' as a prompt. At
     this point it is expecting an input line from the user. By
     entering a carriage-return (<RET>) or any line starting with
     `y', the query terminates and the shell answer `yes'. Entering a
     ``,'' the shell enters a recursive level (see below). Finally,
     any other answer forces the system to backtrack and look for the
     next solution (answering as with the first solution).


   To allow using connection variables in queries without having to
report their results, variables whose name starts with `_' are not
considered in answers, the rest being the _answer variable_s. This
example illustrates the previous points:

     ?- member(a, [b, c]).
     
     no
     ?- member(a, [a, b]).
     
     yes
     ?- member(X, [a|L]).
     
     X = a ? ;
     
     L = [X|_] ?
     
     yes
     ?- atom_codes(ciao, _C), member(L, _C).
     
     L = 99 ? ;
     
     L = 105 ? ;
     
     L = 97 ? ;
     
     L = 111 ? ;
     
     no
     ?-


File: ciao.info,  Node: Entering recursive (conjunctive) shell levels,  Next: Usage and interface (ciaosh),  Prev: Shell interaction,  Up: The interactive top-level shell

Entering recursive (conjunctive) shell levels
=============================================

   As stated before, when the user answers with ``,'' after a
solution is presented, the shell enters a _recursive level_, changing
its prompt to _N_ `?- ' (where _N_ is the recursion level) and
keeping the bindings or constraints of the solution (this is inspired
by the _LogIn_ language developed by _H. Ait-Kaci_, _P. Lincoln_ and
_Roger Nasr_ [AKNL86]). Thus, the following queries will be executed
within that context, and all variables in the lower level solutions
will be reported in subsequent solutions at this level. To exit a
recursive level, input an <EOF> character or the command `up'. The
last solution after entering the level is repeated, to allow asking
for more solutions. Use command `top' to exit all recursive levels
and return to the top level. Example interaction:

     ?- directory_files('.',_Fs), member(F,_Fs).
     
     F = 'file_utils.po' ? ,
     
     1 ?- file_property(F, mod_time(T)).
     
     F = 'file_utils.po',
     T = 923497679 ?
     
     yes
     1 ?- up.
     
     F = 'file_utils.po' ? ;
     
     F = 'file_utils.pl' ? ;
     
     F = 'file_utils.itf' ? ,
     
     1 ?- file_property(F, mod_time(T)).
     
     F = 'file_utils.itf',
     T = 923497679 ?
     
     yes
     1 ?- ^D
     F = 'file_utils.itf' ?
     
     yes
     ?-


File: ciao.info,  Node: Usage and interface (ciaosh),  Next: Documentation on exports (ciaosh),  Prev: Entering recursive (conjunctive) shell levels,  Up: The interactive top-level shell

Usage and interface (`ciaosh')
==============================

   * *Library usage:*

     The following predicates can be used at the top-level shell
     natively (but see also the commands available in *Note The
     interactive debugger:: which are also available within the
     top-level shell).

   * *Exports:*
        - _Predicates:_

          `use_module/1', `use_module/2', `ensure_loaded/1',
          `make_exec/2', `include/1', `use_package/1', `consult/1',
          `compile/1', `./2', `make_po/1', `unload/1',
          `set_debug_mode/1', `set_nodebug_mode/1', `make_actmod/2',
          `force_lazy/1', `undo_force_lazy/1',
          `dynamic_search_path/1', `multifile/1'.


   * *Other modules used:*
        - _Application modules:_

          `library(ciaosh)'.

        - _System library modules:_

          `libpaths', `compiler/compiler', `compiler/exemaker',
          `compiler/c_itf', `debugger/debugger'.




File: ciao.info,  Node: Documentation on exports (ciaosh),  Next: Documentation on internals (ciaosh),  Prev: Usage and interface (ciaosh),  Up: The interactive top-level shell

Documentation on exports (`ciaosh')
===================================

 - PREDICATE: use_module/1:
     *Usage:* `use_module(Module)'
        - _Description:_ Load into the top-level the module defined
          in `Module', importing all the predicates it exports.

        - _The following properties should hold at call time:_

          `Module' is a source name.   (`streams_basic:sourcename/1')



 - PREDICATE: use_module/2:
     *Usage:* `use_module(Module,Imports)'
        - _Description:_ Load into the top-level the module defined
          in `Module', importing the predicates in `Imports'.

        - _The following properties should hold at call time:_

          `Module' is a source name.   (`streams_basic:sourcename/1')

          `Imports' is a list of `predname's.   (`basic_props:list/2')



 - PREDICATE: ensure_loaded/1:
     *Usage:* `ensure_loaded(File)'
        - _Description:_ Load into the top-level the code residing in
          file (or files) `File', which is user (i.e. non-module)
          code.

        - _The following properties should hold at call time:_

          `File' is a source name or a list of source names.
          (`ciaosh_doc:sourcenames/1')



 - PREDICATE: make_exec/2:
     *Usage:* `make_exec(File,ExecName)'
        - _Description:_ Make a Ciao executable from file (or files)
          `File', giving it name `ExecName'. If `ExecName' is a
          variable, the compiler will choose a default name for the
          executable and will bind the variable `ExecName' to that
          name. The name is chosen as follows: if the main prolog
          file has no `.pl' extension or we are in Windows, the
          executable will have extension `.cpx'; else the executable
          will be named as the main prolog file without extension.

        - _The following properties should hold at call time:_

          `File' is a source name or a list of source names.
          (`ciaosh_doc:sourcenames/1')

        - _The following properties hold upon exit:_

          `ExecName' is an atom.   (`basic_props:atm/1')



 - PREDICATE: include/1:
     *Usage:* `include(File)'
        - _Description:_ The contents of the file `File' are included
          in the top-level shell. For the moment, it only works with
          some directives, which are interpreted by the shell, or
          with normal clauses (which are asserted), if
          library(dynamic) is loaded beforehand.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')



 - PREDICATE: use_package/1:
     *Usage:* `use_package(Package)'
        - _Description:_ Equivalent to issuing an
          include(library(`Package')) for each listed file. By now
          some package contents cannot be handled.

        - _The following properties should hold at call time:_

          `Package' is a source name or a list of source names.
          (`ciaosh_doc:sourcenames/1')



 - PREDICATE: consult/1:
     *Usage:* `consult(File)'
        - _Description:_ Provided for backward compatibility. Similar
          to `ensure_loaded/1', but ensuring each listed file is
          loaded in consult mode (see *Note The interactive
          debugger::).

        - _The following properties should hold at call time:_

          `File' is a source name or a list of source names.
          (`ciaosh_doc:sourcenames/1')



 - PREDICATE: compile/1:
     *Usage:* `compile(File)'
        - _Description:_ Provided for backward compatibility. Similar
          to `ensure_loaded/1', but ensuring each listed file is
          loaded in compile mode (see *Note The interactive
          debugger::).

        - _The following properties should hold at call time:_

          `File' is a source name or a list of source names.
          (`ciaosh_doc:sourcenames/1')



 - PREDICATE: ./2:
     *Usage:* `[File|Files]'
        - _Description:_ Provided for backward compatibility,
          obsoleted by `ensure_loaded/1'.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')

          `Files' is a list of `sourcename's.   (`basic_props:list/2')



 - PREDICATE: make_po/1:
     *Usage:* `make_po(Files)'
        - _Description:_ Make object (`.po') files from `Files'.
          Equivalent to executing "`ciaoc -c'" on the files.

        - _The following properties should hold at call time:_

          `Files' is a source name or a list of source names.
          (`ciaosh_doc:sourcenames/1')



 - PREDICATE: unload/1:
     *Usage:* `unload(File)'
        - _Description:_ Unloads dynamically loaded file `File'.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')



 - PREDICATE: set_debug_mode/1:
     *Usage:* `set_debug_mode(File)'
        - _Description:_ Set the loading mode of `File' to _consult_.
          See *Note The interactive debugger::.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')



 - PREDICATE: set_nodebug_mode/1:
     *Usage:* `set_nodebug_mode(File)'
        - _Description:_ Set the loading mode of `File' to _compile_.
          See *Note The interactive debugger::.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')



 - PREDICATE: make_actmod/2:
     *Usage:* `make_actmod(ModuleFile,PublishMod)'
        - _Description:_ Make an active module executable from the
          module residing in `ModuleFile', using address publish
          module of name `PublishMod' (which needs to be in the
          library paths).

        - _The following properties should hold at call time:_

          `ModuleFile' is a source name.
          (`streams_basic:sourcename/1')

          `PublishMod' is an atom.   (`basic_props:atm/1')



 - PREDICATE: force_lazy/1:
     *Usage:* `force_lazy(Module)'
        - _Description:_ Force module of name `Module' to be loaded
          lazily in the subsequent created executables.

        - _The following properties should hold at call time:_

          `Module' is an atom.   (`basic_props:atm/1')



 - PREDICATE: undo_force_lazy/1:
     *Usage:* `undo_force_lazy(Module)'
        - _Description:_ Disable a previous `force_lazy/1' on module
          `Module' (or, if it is uninstantiated, all previous
          `force_lazy/1').

        - _Calls should, and exit will be compatible with:_

          `Module' is an atom.   (`basic_props:atm/1')



 - PREDICATE: dynamic_search_path/1:
     *Usage:* `dynamic_search_path(Name)'
        - _Description:_ Asserting a fact to this data predicate,
          files using path alias `Name' will be treated as dynamic in
          the subsequent created executables.

        - _The following properties should hold at call time:_

          `Name' is an atom.   (`basic_props:atm/1')



 - PREDICATE: multifile/1:
     *Usage:* `multifile Pred'
        - _Description:_ Dynamically declare predicate `Pred' as
          multifile. This is useful at the top-level shell to be able
          to call multifile predicates of loaded files.

        - _The following properties should hold at call time:_

          `Pred' is a Name/Arity structure denoting a predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')




File: ciao.info,  Node: Documentation on internals (ciaosh),  Prev: Documentation on exports (ciaosh),  Up: The interactive top-level shell

Documentation on internals (`ciaosh')
=====================================

 - PROPERTY: sourcenames/1:
     Is defined as follows:
          sourcenames(File) :-
                  sourcename(File).
          sourcenames(Files) :-
                  list(Files,sourcename).
     See `sourcename/1' in *Note Basic file/stream handling::

     *Usage:* `sourcenames(Files)'
        - _Description:_ `Files' is a source name or a list of source
          names.




File: ciao.info,  Node: The interactive debugger,  Next: Predicates controlling the interactive debugger,  Prev: The interactive top-level shell,  Up: Top

The interactive debugger
************************

   *Author(s):* D. Cabeza, Manuel C. Rodriguez, (A. Ciepielewski, M.
Carlsson, T. Chikayama, K. Shen).

   The Ciao program development environment includes a number of
advanced debugging tools, such as a source-level debugger, the
`ciaopp' preprocessor, and some execution visualizers. Herein we
discuss the interactive debugger available in the standard top-level,
which allows tracing the control flow of programs, in a similar way
to other popular Prolog systems. This is a classical Byrd _box-type_
_debugger_ [Byr80,BBP81], with some enhancements, most notably being
able to track the execution on the source program. We also discuss the
embedded debugger, which is a version of the debugger which can be
embedded into executables so that an interactive debugging session
can be triggered at any time while running that executable without
needing the top-level shell.

   Byrd's Procedure Box model of debugging execution provides a
simple way of visualising control flow, including backtracking.
Control flow is in principle viewed at the predicate level, rather
than at the level of individual clauses. The Ciao debugger has the
ability to mark selected modules and/or files for debugging
(traditional and source debugging), rather than having to
exhaustively trace your program. It also allows to selectively set
spy-points and breakpoints. Spy-points allow the programmer to
nominate interesting predicates at which program execution is to
pause so that the programmer can interact with the debugger.
Breakpoints are similar to spy-points, but allow pausing at a
specific line in the code, corresponding to a particular literal.
There is a wide choice of control and information options available
during debugging interaction.

   *Note:* While the debugger described herein can be used in a
standalone way (i.e., from a operating system shell or terminal
window) in the same way as other Prolog debuggers, the most
convenient way of debugging Ciao programs is by using the emacs mode
(see *Note Using Ciao inside GNU emacs::), i.e., debugging from
within the `emacs' editor / programming environment.

* Menu:

* Marking modules and files for debugging in the top-level debugger::
* The debugging process::
* Marking modules and files for debugging with the embedded debugger::
* The procedure box control flow model::
* Format of debugging messages::
* Options available during debugging::
* Calling predicates that are not exported by a module::
* Acknowledgements::


File: ciao.info,  Node: Marking modules and files for debugging in the top-level debugger,  Next: The debugging process,  Prev: The interactive debugger,  Up: The interactive debugger

Marking modules and files for debugging in the top-level debugger
=================================================================

   Usually, when a program is not working properly, the programmer
has a feeling of which are the modules where the fault may be. Since
full-fledged debugging is only available on _interpreted_ (called
_interpreted mode_ in traditional Prolog systems) modules, which are
executed much slower than compiled modules, there is the posibility
of telling the top level which particular modules are to be loaded in
_interpreted mode_, with the aim of debugging them. The simplest way
of achieving this is by executing in the Ciao shell prompt, for each
suspicious module `Module' in the program, a command like this:

     ?- debug_module(Module).

   An alternative way of loading a module in interpreted mode exists
which will instruct the debugger to keep track of the line numbers in
the source file and to report them during debugging. This feature can
be selected for a suspicious module `Module' in the program by
executing a command such as:

     ?- debug_module_source(Module).

This is most useful when running the top-level inside the `emacs'
editor since in that case the Ciao emacs mode allows performing full
source-level debugging in each module marked as above, i.e., the
source lines being executed will be highlighted dynamically during
debugging in a window showing the source code of the module.

   Note that all files with no module declaration belong to the
pseudo-module `user', so the command to be issued for debugging a
user file, say `foo.pl', would be `debug_module(user)' or
`debug_module_source(user)', and not `debug_module(foo)'.

   The two ways of performing source-level debugging are fully
compatible between them, i.e., Ciao allows having some modules loaded
with `debug_module/1' and others with `debug_module_source/1'. To
change from one interpreted mode to the other mode it suffices to
select the module with the new interpreted mode (debugger mode),
using the appropiate command, and reload the module.

   The commands above perform in fact two related actions: first,
they let the compiler know that if a file containing a module with
this name is loaded, it should be loaded in interpreted mode (source
or traditional). In addition, they instruct the debugger to actually
prepare for debugging the code belonging to that module. After that,
the modules which are to be debugged have to be (re)loaded so that
they are compiled or loaded for interpretation in the appropriate
way. The nice thing is that, due to the modular behaviour of the
compiler/top-level, if the modules are part of a bigger application,
it suffices to load the main module of the application, since this
will automatically force the dependent modules which have changed to
be loaded in the appropriate way, including those whose _loading
mode_ has changed (i.e., changing the loading mode has the effect of
forcing the required re-loading of the module at the appropriate
time).

   Later in the debugging process, as the bug location is isolated,
typically one will want to restrict more and more the modules where
debugging takes place. To this end, and without the need for
reloading, one can tell the debugger to not consider a module for
debugging issuing a `nodebug_module/1' command, which counteracts a
`debug_module/1' or `debug_module_source/1' command with the same
module name, and reloading it (or the main file).

   There are also two top-level commands `set_debug_mode/1' and
`set_nodebug_mode/1', which accept as argument a file spec (i.e.,
`library(foo)' or `foo', even if it is a user file) to be able to
load a file in interpreted mode without changing the set of modules
that the debugger will try to spy.


File: ciao.info,  Node: The debugging process,  Next: Marking modules and files for debugging with the embedded debugger,  Prev: Marking modules and files for debugging in the top-level debugger,  Up: The interactive debugger

The debugging process
=====================

   Once modules or user files are marked for debugging and reloaded,
the traditional debugging shell commands can be used (the
documentation of the `debugger' library following this chapter
contains all the commands and their description), with the same
meaning as in other classical Prolog systems. The differences in
their behavior are:

   * Debugging takes place only in the modules in which it was
     activated,

   * `nospy/1' and `spy/1' accept sequences of predicate specs, and
     they will search for those predicates only in the modules marked
     for debugging (traditional or source-level debugging).

   * `breakpt/6' and `nobreakpt/6' allow setting breakpoints at
     selected clause literals and will search for those literals only
     in the modules marked for source-level debugging (modules marked
     with `debug_module_source/1').


   In particular, the system is initially in nodebug mode, in which
no tracing is performed. The system can be put in debug mode by a
call to `debug/0' in which execution of queries will proceed until
the first _spy-point_ or _breakpoint_. Alternatively, the system can
be put in trace mode by a call to `trace/0' in which all predicates
will be trace.


File: ciao.info,  Node: Marking modules and files for debugging with the embedded debugger,  Next: The procedure box control flow model,  Prev: The debugging process,  Up: The interactive debugger

Marking modules and files for debugging with the embedded debugger
==================================================================

   The embedded debugger, as the interpreted debugger, has three
different modes of operation: debug, trace or nodebug. These
debuggers modes can be set by adding a package declaration in the
module, as follows:

     :- use_package(debug).
     :- use_package(trace).
     :- use_package(nodebug).

and recompiling the application.

   In order to debug, or trace, correctly the complete code these
declarations _must_ appear the last ones of all `use_package'
declarations used. Also it is possible, as usual, to add the
debugging package(s) in the module declaration using the predicate
`module/3' (and they should also be the last ones).

   The embedded debugger has limitations over the interpreted
debugger. The most important is that the "retry" option is not
available. But it is possible to add, and remove, spy-points and
breakpoins using the predicates `spy/1', `nospy/1', `breakpt/6' and
`nobreakpt/6', etc. These can be used in a clause declaration or as
declarations. Also it is possible to add in the code predicates for
issuing the debugger (i.e., use debug mode, and in a clause add the
predicate `trace/1').

   The nodebug mode allows keeping the spy-points and breakpoints in
the code instead of removing them from the code.

   Note that there is a particularly interesting way of using the
embedded debugger: if an _application_ is run in a shell buffer which
has been set with Ciao inferior mode (<M-x> `ciao-inferior-mode') and
this application starts emitting output from the embedded debugger
(i.e., which contains the embedded debugger and is debugging its
code) then the Ciao emacs mode will be able to follow these messages,
for example tracking execution in the source level code. This also
works if the application is written in a combination of languages,
provided the parts written in Ciao are compiled with the embedded
debugger package and is thus a covenient way of debugging
multi-language applications. The only thing needed is to make sure
that the output messages appear in a shell buffer that is in Ciao
inferior mode.

   See the following as a general example of use of the embedded
debugger:
     :- module( foo,[main/1],[assertions, debug]).
     
     :- entry main/1.
     
     main(X) :-
              display(X),
              spy(foo),
              foo(X),
              notrace,
              nl.
     
     foo([]).
     foo([X|T]) :-
             trace,
             bar(X),
             foo(T).
     
     bar(X) :-
             display(X).


File: ciao.info,  Node: The procedure box control flow model,  Next: Format of debugging messages,  Prev: Marking modules and files for debugging with the embedded debugger,  Up: The interactive debugger

The procedure box control flow model
====================================

   During debugging the interpreter prints out a sequence of goals in
various states of instantiation in order to show the state that the
program has reached in its execution. However, in order to understand
what is occurring it is necessary to understand when and why the
interpreter prints out goals. As in other programming languages, key
points of interest are procedure entry and return, but in Prolog
there is the additional complexity of backtracking. One of the major
confusions that novice Prolog programmers have to face is the
question of what actually happens when a goal fails and the system
suddenly starts backtracking. The Procedure Box model of Prolog
execution views program control flow in terms of movement about the
program text. This model provides a basis for the debugging mechanism
in the interpreter, and enables the user to view the behaviour of the
program in a consistent way. It also provides the basis for the
visualization performed on the source level program when source level
program when source-level debugging is activated within `emacs'.

   Let us look at an example Prolog procedure:


[Image file: autofigbyrdbox.eps]

   The first clause states that `Y' is a descendant of `X' if `Y' is
an offspring of `X', and the second clause states that `Y' is a
descendant of `X' if `Z' is an offspring of `X' and `Y' is a
descendant of `Z'. In the diagram a box has been drawn around the
whole procedure and labelled arrows indicate the control flow in and
out of this box. There are four such arrows which we shall look at in
turn.

   * *Call*

     This arrow represents initial invocation of the procedure. When
     a goal of the form `descendant(X,Y)' is required to be
     satisfied, control passes through the Call port of the
     descendant box with the intention of matching a component clause
     and then satisfying any subgoals in the body of that clause.
     Note that this is independent of whether such a match is
     possible; i.e. first the box is called, and then the attempt to
     match takes place. Textually we can imagine moving to the code
     for descendant when meeting a call to descendant in some other
     part of the code.

   * *Exit*

     This arrow represents a successful return from the procedure.
     This occurs when the initial goal has been unified with one of
     the component clauses and any subgoals have been satisfied.
     Control now passes out of the Exit port of the descendant box.
     Textually we stop following the code for descendant and go back
     to the place we came from.

   * *Redo*

     This arrow indicates that a subsequent goal has failed and that
     the system is backtracking in an attempt to find alternatives to
     previous solutions. Control passes through the Redo port of the
     descendant box. An attempt will now be made to resatisfy one of
     the component subgoals in the body of the clause that last
     succeeded; or, if that fails, to completely rematch the original
     goal with an alternative clause and then try to satisfy any
     subgoals in the body of this new clause. Textually we follow the
     code backwards up the way we came looking for new ways of
     succeeding, possibly dropping down on to another clause and
     following that if necessary.

   * *Fail*

     This arrow represents a failure of the initial goal, which might
     occur if no clause is matched, or if subgoals are never
     satisfied, or if any solution produced is always rejected by
     later processing. Control now passes out of the Fail port of the
     descendant box and the system continues to backtrack. Textually
     we move back to the code which called this procedure and keep
     moving backwards up the code looking for choice points.

   In terms of this model, the information we get about the procedure
box is only the control flow through these four ports. This means
that at this level we are not concerned with which clause matches,
and how any subgoals are satisfied, but rather we only wish to know
the initial goal and the final outcome. However, it can be seen that
whenever we are trying to satisfy subgoals, what we are actually
doing is passing through the ports of _their_ respective boxes. If we
were following this (e.g., activating source-level debugging), then
we would have complete information about the control flow inside the
procedure box.

   Note that the box we have drawn around the procedure should really
be seen as an invocation box. That is, there will be a different box
for each different invocation of the procedure. Obviously, with
something like a recursive procedure, there will be many different
Calls and Exits in the control flow, but these will be for different
invocations. Since this might get confusing each invocation box is
given a unique integer identifier in the messages, as described below.

   Note that not all procedure calls are traced; there are a few
basic predicates which have been made invisible since it is more
convenient not to trace them. These include debugging directives,
basic control structures, and some builtins. This means that messages
will never be printed for these predicates during debugging.


File: ciao.info,  Node: Format of debugging messages,  Next: Options available during debugging,  Prev: The procedure box control flow model,  Up: The interactive debugger

Format of debugging messages
============================

   This section explains the two formats of the message output by the
debugger at a port. All trace messages are output to the terminal
regardless of where the current output stream is directed (which
allows tracing programs while they are performing file I/O). The
basic format, which will be shown in traditional debug and in
source-level debugging within Ciao `emacs' mode, is as follows:

     S  13  7  Call: T user:descendant(dani,_123) ?

   `S' is a spy-point or breakpoint indicator. It is printed as
'`+'', indicating that there is a spy-point on `descendant/2' in
module `user', as `'B'' denoting a breakpoint, or as ' ', denoting no
spy-point or breakpoint. If there is a spy-point and a breakpoint in
the same predicate the spy-point indicator takes preference over
breakpoint indicator.

   `T' is a subterm trace. This is used in conjunction with the `^'
command (set subterm), described below. If a subterm has been
selected, `T' is printed as the sequence of commands used to select
the subterm. Normally, however, `T' is printed as ' ', indicating
that no subterm has been selected.

   The first number is the unique invocation identifier. It is always
nondecreasing (provided that the debugger is switched on) regardless
of whether or not the invocations are being actually seen. This
number can be used to cross correlate the trace messages for the
various ports, since it is unique for every invocation. It will also
give an indication of the number of procedure calls made since the
start of the execution. The invocation counter starts again for every
fresh execution of a command, and it is also reset when retries (see
later) are performed.

   The number following this is the _current depth_; i.e., the number
of direct _ancestors_ this goal has. The next word specifies the
particular port (`Call', `Exit', `Redo' or `Fail'). The goal is then
printed so that its current instantiation state can be inspected. The
final `?' is the prompt indicating that the debugger is waiting for
user interaction. One of the option codes allowed (see below) can be
input at this point.

   The second format, quite similar to the format explained above, is
shown when using source-level debugging outside the Ciao `emacs'
mode, and it is as follows:

     	   In /home/mcarlos/ciao/foo.pl (5-9) descendant-1
     S  13  7  Call: T user:descendant(dani,_123) ?

   This format is identical to the format above except for the first
line, which contains the information for location of the point in the
source program text where execution is currently at. The first line
contains the name of the source file, the start and end lines where
the literal can be found, the substring to search for between those
lines and the number of substrings to locate. This information for
locating the point on the source file is not shown when executing the
source-level debugger from the Ciao `emacs' mode.

   Ports can be "unleashed" by calling the `leash/1' predicate
omiting that port in the argument. This means that the debugger will
stop but user interaction is not possible for an unleashed port.
Obviously, the `?' prompt will not be shown in such messages, since
the user has specified that no interaction is desired at this point.


File: ciao.info,  Node: Options available during debugging,  Next: Calling predicates that are not exported by a module,  Prev: Format of debugging messages,  Up: The interactive debugger

Options available during debugging
==================================

   This section describes the particular options that are available
when the debugger prompts after printing out a debugging message. All
the options are one letter mnemonics, some of which can be optionally
followed by a decimal integer. They are read from the terminal with
any blanks being completely ignored up to the next terminator
(carriage-return, line-feed, or escape). Some options only actually
require the terminator; e.g., the creep option, only requires <RET>.

   The only option which really needs to be remembered is '`h''
(followed by <RET>). This provides help in the form of the following
list of available options.

     <cr>   creep            c      creep
      l     leap             s      skip
      r     retry            r <i>  retry i
      f     fail             f <i>  fail i
      d     display          p      print
      w     write
      g     ancestors        g <n>  ancestors n
      n     nodebug          =      debugging
      +     spy this         -      nospy this
      a     abort
      @     command          u      unify
      <     reset printdepth < <n>  set printdepth
      ^     reset subterm    ^ <n>  set subterm
      ?     help             h      help

   * `c' ( _creep_)

     causes the debugger to single-step to the very next port and
     print a message. Then if the port is leashed the user is
     prompted for further interaction. Otherwise it continues
     creeping. If leashing is off, creep is the same as leap (see
     below) except that a complete trace is printed on the terminal.

   * `l' ( _leap_)

     causes the interpreter to resume running the program, only
     stopping when a spy-point or breakpoint is reached (or when the
     program terminates). Leaping can thus be used to follow the
     execution at a higher level than exhaustive tracing. All that is
     needed to do is to set spy-points and breakpoints on an evenly
     spread set of pertinent predicates or lines, and then follow the
     control flow through these by leaping from one to the other.

   * `s' ( _skip_)

     is only valid for Call and Redo ports, if it is issued in Exit
     or Fail ports it is equivalent to creep. It skips over the
     entire execution of the predicate. That is, no message will be
     seen until control comes back to this predicate (at either the
     Exit port or the Fail port). Skip is particularly useful while
     creeping since it guarantees that control will be returned after
     the (possibly complex) execution within the box. With skip then
     no message at all will appear until control returns to the Exit
     port or Fail port corresponding to this Call port or Redo port.
     This includes calls to predicates with spy-points and
     breakpoints set: they will be masked out during the skip. There
     is a way of overriding this: the `t' option after a <^C>
     interrupt will disable the masking. Normally, however, this
     masking is just what is required!

   * `r' ( _retry_)

     can be used at any of the four ports (although at the Call port
     it has no effect). It transfers control back to the Call port of
     the box. This allows restarting an invocation when, for example,
     it has left the programmer with some weird result. The state of
     execution is exactly the same as in the original call (unless
     the invocation has performed side effects, which will not be
     undone). When a retry is performed the invocation counter is
     reset so that counting will continue from the current invocation
     number regardless of what happened before the retry. This is in
     accord with the fact that execution has, in operational terms,
     returned to the state before anything else was called.

     If an integer is supplied after the retry command, then this is
     taken as specifying an invocation number and the system tries to
     get to the Call port, not of the current box, but of the
     invocation box specified. It does this by continuously failing
     until it reaches the right place. Unfortunately this process
     cannot be guaranteed: it may be the case that the invocation the
     programmer is looking for has been cut out of the search space
     by cuts in the program. In this case the system fails to the
     latest surviving Call port before the correct one.

   * `f' ( _fail_)

     can be used at any of the four ports (although at the Fail port
     it has no effect). It transfers control to the Fail port of the
     box, forcing the invocation to fail prematurely. If an integer
     is supplied after the command, then this is taken as specifying
     an invocation number and the system tries to get to the Fail
     port of the invocation box specified. It does this by
     continuously failing until it reaches the right place.
     Unfortunately, as before, this process cannot be guaranteed.

   * `d' ( _display_)

     displays the current goal using `display/1'. See `w' below.

   * `p' ( _print_)

     re-prints the current goal using `print/1'. Nested structures
     will be printed to the specified _printdepth_ (see below).

   * `w' ( _write_)

     writes the current goal on the terminal using `write/1'.

   * `g' ( _ancestors_)

     provides a list of ancestors to the current goal, i.e., all
     goals that are hierarchically above the current goal in the
     calling sequence. It is always possible to jump to any goal in
     the ancestor list (by using retry, etc.). If an integer `n' is
     supplied, then only `n' ancestors will be printed. That is to
     say, the last `n' ancestors will be printed counting back from
     the current goal. Each entry in the list is preceded by the
     invocation number followed by the depth number (as would be
     given in a trace message).

   * `n' ( _nodebug_)

     switches the debugger off. Note that this is the correct way to
     switch debugging off at a trace point. The `@' option cannot be
     used because it always returns to the debugger.

   * `=' ( _debugging_)

     outputs information concerning the status of the current
     debugging session.

   * `+' _spy_

     sets a spy-point on the current goal.

   * `-' ( _nospy_)

     removes the spy-point from the current goal.

   * `a' ( _abort_)

     causes an abort of the current execution. All the execution
     states built so far are destroyed and the system is put right
     back at the top-level of the interpreter. (This is the same as
     the built-in predicate `abort/0'.)

   * `@' ( _command_)

     allows calling arbitrary goals. The initial message `| ?- ' will
     be output on the terminal, and a command is then read from the
     terminal and executed as if it was at top-level.

   * `u' ( _unify_()

     is available at the Call port and gives the option of providing
     a solution to the goal from the terminal rather than executing
     the goal. This is convenient, e.g., for providing a "stub" for a
     predicate that has not yet been written. A prompt `|: ' will be
     output on the terminal, and the solution is then read from the
     terminal and unified with the goal.

   * `<' ( _printdepth_)

     sets a limit for the subterm nesting level that is printed in
     messages. While in the debugger, a printdepth is in effect for
     limiting the subterm nesting level when printing the current
     goal. When displaying or writing the current goal, all nesting
     levels are shown. The limit is initially 10. This command,
     without arguments, resets the limit to 10. With an argument of
     `n' the limit is set to `n'.

   * `^' ( _subterm_)

     sets the subterm to be printed in messages. While at a
     particular port, a current subterm of the current goal is
     maintained. It is the current subterm which is displayed,
     printed, or written when prompting for a debugger command. Used
     in combination with the printdepth, this provides a means for
     navigating in the current goal for focusing on the part which is
     of interest. The current subterm is set to the current goal when
     arriving at a new port. This command, without arguments, resets
     the current subterm to the current goal. With an argument of `n'
     (greater than 0 and less or equal to the number of subterms of
     the current subterm), the current subterm is replaced by its
     `n''th subterm. With an argument of `0', the current subterm is
     replaced by its parent term.

   * `?' or `h' ( _help_)

     displays the table of options given above.



File: ciao.info,  Node: Calling predicates that are not exported by a module,  Next: Acknowledgements,  Prev: Options available during debugging,  Up: The interactive debugger

Calling predicates that are not exported by a module
====================================================

   The Ciao module system does not allow calling predicates which are
not exported during debugging. However, as an aid during debugging,
this is allowed (only from the top-level and for modules which are in
debug mode or source-level debug mode) using the `call_in_module/2'
predicate.

   Note that this does not affect analysis or optimization issues,
since it only works on modules which are loaded in debug mode or
source-level debug mode, i.e. unoptimized.


File: ciao.info,  Node: Acknowledgements,  Prev: Calling predicates that are not exported by a module,  Up: The interactive debugger

Acknowledgements
================

   Originally written by Andrzej Ciepielewski. Minor modifications by
Mats Carlsson. Later modifications (17 Dec 87) by Takashi Chikayama
(making tracer to use `print/1' rather than `write/1', temporarily
switching debugging flag off while writing trace message and within
"break" level). Additional modifications by Kish Shen (May 88):
subterm navigation, handle unbound args in `spy/1' and `nospy/1',
trapping arithmetics errors in debug mode. Adapted then to &-Prolog
and Ciao by D. Cabeza and included in the Ciao version control
system. Extended for source-level debugging by Manuel C. Rodri'guez.
(See changelog if included in the document for more detailed
documentation of the later changes.)


File: ciao.info,  Node: Predicates controlling the interactive debugger,  Next: The script interpreter,  Prev: The interactive debugger,  Up: Top

Predicates controlling the interactive debugger
***********************************************

   *Author(s):* A. Ciepielewski, M. Carlsson, T. Chikayama, K. Shen,
D. Cabeza, M. Rodriguez.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#185 (2002/2/4, 18:45:52 CET)

   This library implements predicates which are normally used in the
interactive top-level shell to debug programs. A subset of them are
available in the embeddable debugger.

* Menu:

* Usage and interface (debugger)::
* Documentation on exports (debugger)::
* Documentation on internals (debugger)::
* Known bugs and planned improvements (debugger)::


File: ciao.info,  Node: Usage and interface (debugger),  Next: Documentation on exports (debugger),  Prev: Predicates controlling the interactive debugger,  Up: Predicates controlling the interactive debugger

Usage and interface (`debugger')
================================

   * *Library usage:*

     `:- use_module(library(debugger)).'

   * *Exports:*
        - _Predicates:_

          `debug_module/1', `nodebug_module/1',
          `debug_module_source/1', `debug/0', `nodebug/0', `trace/0',
          `notrace/0', `spy/1', `nospy/1', `nospyall/0', `breakpt/6',
          `nobreakpt/6', `nobreakall/0', `list_breakpt/0',
          `debugging/0', `leash/1', `maxdepth/1', `call_in_module/2'.


   * *Other modules used:*
        - _System library modules:_

          `debugger/debugger_lib', `format', `ttyout', `read',
          `system', `write', `aggregates', `sort'.




File: ciao.info,  Node: Documentation on exports (debugger),  Next: Documentation on internals (debugger),  Prev: Usage and interface (debugger),  Up: Predicates controlling the interactive debugger

Documentation on exports (`debugger')
=====================================

 - PREDICATE: debug_module/1:
     *Usage:* `debug_module(Module)'
        - _Description:_ The debugger will take into acount module
          `Module' (assuming it is loaded in interpreted mode). When
          issuing this command at the toplevel shell, the compiler is
          instructed also to set to _interpret_ the loading mode of
          files defining that module and also to mark it as
          'modified' so that (re)loading this file or a main file
          that uses this module will force it to be reloaded for
          source-level debugging.

        - _The following properties should hold at call time:_

          `Module' is an atom.   (`basic_props:atm/1')



 - PREDICATE: nodebug_module/1:
     *Usage:* `nodebug_module(Module)'
        - _Description:_ The debugger will not take into acount
          module `Module'. When issuing this command at the toplevel
          shell, the compiler is instructed also to set to _compile_
          the loading mode of files defining that module.

        - _The following properties should hold at call time:_

          `Module' is an atom.   (`basic_props:atm/1')



 - PREDICATE: debug_module_source/1:
     *Usage:* `debug_module_source(Module)'
        - _Description:_ The debugger will take into acount module
          `Module' (assuming it is is loaded in source-level debug
          mode). When issuing this command at the toplevel shell, the
          compiler is instructed also to set to _interpret_ the
          loading mode of files defining that module and also to mark
          it as 'modified' so that (re)loading this file or a main
          file that uses this module will force it to be reloaded for
          source-level debugging.

        - _The following properties should hold at call time:_

          `Module' is an atom.   (`basic_props:atm/1')



 - PREDICATE: debug/0:
     *Usage:*
        - _Description:_ Switches the debugger on. The interpreter
          will stop at all ports of procedure boxes of spied
          predicates.



 - PREDICATE: nodebug/0:
     *Usage:*
        - _Description:_ Switches the debugger off. If there are any
          spy-points set then they will be kept but disabled.



 - PREDICATE: trace/0:
     *Usage:*
        - _Description:_ Start tracing, switching the debugger on if
          needed. The interpreter will stop at all leashed ports of
          procedure boxes of predicates either belonging to debugged
          modules or called from clauses of debugged modules. A
          message is printed at each stop point, expecting input from
          the user (write `h' to see the available options).



 - PREDICATE: notrace/0:
     *Usage:*
        - _Description:_ Equivalent to `nodebug/0'.



 - PREDICATE: spy/1:
     *Usage:* `spy(PredSpec)'
        - _Description:_ Set spy-points on predicates belonging to
          debugged modules and which match `PredSpec', switching the
          debugger on if needed. This predicate is defined as a
          prefix operator by the toplevel.

        - _The following properties should hold at call time:_

          `PredSpec' is a sequence of `multpredspec's.
          (`basic_props:sequence/2')



 - PREDICATE: nospy/1:
     *Usage:* `nospy(PredSpec)'
        - _Description:_ Remove spy-points on predicates belonging to
          debugged modules which match `PredSpec'. This predicate is
          defined as a prefix operator by the toplevel.

        - _The following properties should hold at call time:_

          `PredSpec' is a sequence of `multpredspec's.
          (`basic_props:sequence/2')



 - PREDICATE: nospyall/0:
     *Usage:*
        - _Description:_ Remove all spy-points.



 - PREDICATE: breakpt/6:
     *Usage:* `breakpt(Pred,Src,Ln0,Ln1,Number,RealLine)'
        - _Description:_ Set a _breakpoint_ in file `Src' between
          lines `Ln0' and `Ln1' at the literal corresponding to the
          `Number''th occurence of (predicate) name `Pred'. The pair
          `Ln0'-`Ln1' uniquely identifies a program clause and must
          correspond to the start and end line numbers for the
          clause. The rest of the arguments provide enough
          information to be able to locate the exact literal that the
          `RealLine' line refers to. This is normally not issued by
          users but rather by the `emacs' mode, which automatically
          computes the different argument after selecting a point in
          the source file.

        - _The following properties should hold at call time:_

          `Pred' is an atom.   (`basic_props:atm/1')

          `Src' is a source name.   (`streams_basic:sourcename/1')

          `Ln0' is an integer.   (`basic_props:int/1')

          `Ln1' is an integer.   (`basic_props:int/1')

          `Number' is an integer.   (`basic_props:int/1')

          `RealLine' is an integer.   (`basic_props:int/1')



 - PREDICATE: nobreakpt/6:
     *Usage:* `nobreakpt(Pred,Src,Ln0,Ln1,Number,RealLine)'
        - _Description:_ Remove a breakpoint in file `Src' between
          lines `Ln0' and `Ln1' at the `Number''th occurence of
          (predicate) name `Pred' (see `breakpt/6'). Also normally
          used from de `emacs' mode.

        - _The following properties should hold at call time:_

          `Pred' is an atom.   (`basic_props:atm/1')

          `Src' is a source name.   (`streams_basic:sourcename/1')

          `Ln0' is an integer.   (`basic_props:int/1')

          `Ln1' is an integer.   (`basic_props:int/1')

          `Number' is an integer.   (`basic_props:int/1')

          `RealLine' is an integer.   (`basic_props:int/1')



 - PREDICATE: nobreakall/0:
     *Usage:*
        - _Description:_ Remove all breakpoints.



 - PREDICATE: list_breakpt/0:
     *Usage:*
        - _Description:_ Prints out the location of all breakpoints.
          The location of the breakpoints is showed usual by
          referring to the source file, the lines between which the
          predicate can be found, the predicate name and the number
          of ocurrence of the predicate name of the literal.



 - PREDICATE: debugging/0:
     *Usage:*
        - _Description:_ Display debugger state.



 - PREDICATE: leash/1:
     *Usage:* `leash(Ports)'
        - _Description:_ Leash on ports `Ports', some of `call',
          `exit', `redo', `fail'. By default, all ports are on leash.

        - _The following properties should hold at call time:_

          `Ports' is a list of `port's.   (`basic_props:list/2')



 - PREDICATE: maxdepth/1:
     *Usage:* `maxdepth(MaxDepth)'
        - _Description:_ Set maximum invocation depth in debugging to
          `MaxDepth'. Calls to compiled predicates are not included
          in the computation of the depth.

        - _The following properties should hold at call time:_

          `MaxDepth' is an integer.   (`basic_props:int/1')



 - PREDICATE: call_in_module/2:
     *Usage:* `call_in_module(Module,Predicate)'
        - _Description:_ Calls predicate `Predicate' belonging to
          module `Module', even if that module does not export the
          predicate. This only works for modules which are in debug
          (interpreted) mode (i.e., they are not optimized).

        - _The following properties should hold at call time:_

          `Module' is an atom.   (`basic_props:atm/1')

          `Predicate' is a term which represents a goal, i.e., an
          atom or a structure.   (`basic_props:callable/1')




File: ciao.info,  Node: Documentation on internals (debugger),  Next: Known bugs and planned improvements (debugger),  Prev: Documentation on exports (debugger),  Up: Predicates controlling the interactive debugger

Documentation on internals (`debugger')
=======================================

 - PROPERTY: multpredspec/1:
     A property, defined as follows:
               multpredspec(Mod:Spec) :-
                       atm(Mod),
                       multpredspec(Spec).
               multpredspec(Name/Low-High) :-
                       atm(Name),
                       int(Low),
                       int(High).
               multpredspec(Name/(Low-High)) :-
                       atm(Name),
                       int(Low),
                       int(High).
               multpredspec(Name/Arity) :-
                       atm(Name),
                       int(Arity).
               multpredspec(Name) :-
                       atm(Name).





File: ciao.info,  Node: Known bugs and planned improvements (debugger),  Prev: Documentation on internals (debugger),  Up: Predicates controlling the interactive debugger

Known bugs and planned improvements (`debugger')
================================================

   * Add an option to the emacs menu to automatically select all
     modules in a project.

   * Consider the possibility to show debugging messages directly in
     the source code emacs buffer.


File: ciao.info,  Node: The script interpreter,  Next: Customizing library paths and path aliases,  Prev: Predicates controlling the interactive debugger,  Up: Top

The script interpreter
**********************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#130 (2000/5/3, 20:19:4 CEST)

   `ciao-shell' is the Ciao script interpreter. It can be used to
write _Prolog shell scripts_ (see [Her96,CHV96b]), that is,
executable files containing source code, which are compiled on demand.

   Writing Prolog scripts can sometimes be advantageous with respect
to creating binary executables for small- to medium-sized programs
that are modified often and perform relatively simple tasks. The
advantage is that no explicit compilation is necessary, and thus
changes and updates to the program imply only editing the source
file. The disadvantage is that startup of the script (the first time
after it is modified) is slower than for an application that has been
compiled previously.

   An area of application is, for example, writing _CGI executables_:
the slow speed of the network connection in comparison with that of
executing a program makes program execution speed less important and
has made scripting languages very popular for writing these
applications. Logic languages are, a priori, excellent candidates to
be used as scripting languages. For example, the built-in grammars
and databases can sometimes greatly simplify many typical
script-based applications.

* Menu:

* How it works::
* Command line arguments in scripts::


File: ciao.info,  Node: How it works,  Next: Command line arguments in scripts,  Prev: The script interpreter,  Up: The script interpreter

How it works
============

   Essentially, `ciao-shell' is a smaller version of the Ciao
top-level, which starts by loading the file given to it as the first
argument and then starts execution at `main/1' (the argument is
instantiated to a list containing the command line options, in the
usual way). Note that the Prolog script cannot have a `module'
declaration for this to work. While loading the file, `ciao-shell'
changes the prolog flag `quiet' so that no informational or warning
messages are printed (error messages will be reported to
`user_error', however). The operation of `ciao-shell' in Unix-like
systems is based in a special compiler feature: when the first
character of a file is '`#'', the compiler skips the first lines
until an empty line is found. In Windows, its use is as easy as
naming the file with a `.pls' extension, which will launch
`ciao-shell' appropriately.

   For example, in a Linux/Unix system, assume a file called `hello'
contains the following program:

     #!/bin/sh
     exec ciao-shell $0 "$@" # -*- mode: ciao; -*-
     
     main(_) :-
          write('Hello world'), nl.

   Then, the file `hello' can be _run_ by simply making it executable
and invoking it from the command line:

     /herme@clip:/tmp
     [86]> chmod +x hello
     
     /herme@clip:/tmp
     [87]> hello
     Hello world

   The line:
     #!/bin/sh

invokes the `/bin/sh' shell which will interpret the following line:
     exec ciao-shell $0 "$@" # -*- mode: ciao; -*-

and invoke `ciao-shell', instructing it to read this same file
(`$0'), passing it the rest of the arguments to `hello' as arguments
to the prolog program. The second part of the line `# -*- mode: ciao;
-*-' is simply a comment which is seen by `emacs' and instructs it to
edit this file in Ciao mode (this is needed because these script
files typically do not have a `.pl' ending). When `ciao-shell'
starts, if it is the first time, it compiles the program (skipping
the first lines, as explained above), or else at successive runs
loads the `.po' object file, and then calls `main/1'.

   Note that the process of creating Prolog scripts is made very
simple by the Ciao emacs mode, which automatically inserts the header
and makes the file executable (See *Note Using Ciao inside GNU
emacs::).


File: ciao.info,  Node: Command line arguments in scripts,  Prev: How it works,  Up: The script interpreter

Command line arguments in scripts
=================================

The following example illustrates the use of command-line arguments
in scripts. Assume that a file called `say' contains the following
lines:

     #!/bin/sh
     exec ciao-shell $0 "$@" # -*- mode: ciao; -*-
     
     main(Argv) :-
          write_list(Argv), nl.
     
     write_list([]).
     write_list([Arg|Args]) :-
          write(Arg),
          write(' '),
          write_list(Args).

An example of use is:

     /herme@clip:/tmp
     [91]> say hello dolly
     hello dolly


File: ciao.info,  Node: Customizing library paths and path aliases,  Next: Using Ciao inside GNU emacs,  Prev: The script interpreter,  Up: Top

Customizing library paths and path aliases
******************************************

   *Author(s):* D.Cabeza.

   This library provides means for customizing, from environment
variables, the libraries and path aliases known by an executable.
Many applications of Ciao, including `ciaoc', `ciaosh', and
`ciao-shell' make use of this library. Note that if an executable is
created dynamic, it will try to load its components at startup,
before the procedures of this module can be invoked, so in this case
all the components should be in standard locations.

* Menu:

* Usage and interface (libpaths)::
* Documentation on exports (libpaths)::
* Documentation on multifiles (libpaths)::


File: ciao.info,  Node: Usage and interface (libpaths),  Next: Documentation on exports (libpaths),  Prev: Customizing library paths and path aliases,  Up: Customizing library paths and path aliases

Usage and interface (`libpaths')
================================

   * *Library usage:*

     `:- use_module(library(libpaths)).'

   * *Exports:*
        - _Predicates:_

          `get_alias_path/0'.

        - _Multifiles:_

          `file_search_path/2', `library_directory/1'.


   * *Other modules used:*
        - _System library modules:_

          `system', `lists'.




File: ciao.info,  Node: Documentation on exports (libpaths),  Next: Documentation on multifiles (libpaths),  Prev: Usage and interface (libpaths),  Up: Customizing library paths and path aliases

Documentation on exports (`libpaths')
=====================================

 - PREDICATE: get_alias_path/0:
     `get_alias_path'

     Consult the environment variable 'CIAOALIASPATH' and add facts
     to predicates `library_directory/1' and `file_search_path/2' to
     define new library paths and path aliases. The format of
     'CIAOALIASPATH' is a sequence of paths or alias assignments
     separated by colons, an alias assignment is the name of the
     alias, an '=' and the path represented by that alias (no blanks
     allowed). For example, given
             CIAOALIASPATH=/home/bardo/ciao:contrib=/usr/local/lib/ciao
     the predicate will define /home/bardo/ciao as a library path and
     /usr/local/lib/ciao as the path represented by 'contrib'.





File: ciao.info,  Node: Documentation on multifiles (libpaths),  Prev: Documentation on exports (libpaths),  Up: Customizing library paths and path aliases

Documentation on multifiles (`libpaths')
========================================

 - PREDICATE: file_search_path/2:
     See *Note Basic file/stream handling::.

     The predicate is _multifile_.

     The predicate is of type _dynamic_.




 - PREDICATE: library_directory/1:
     See *Note Basic file/stream handling::.

     The predicate is _multifile_.

     The predicate is of type _dynamic_.





File: ciao.info,  Node: Using Ciao inside GNU emacs,  Next: *** PART II - The Ciao basic language (engine),  Prev: Customizing library paths and path aliases,  Up: Top

Using Ciao inside GNU emacs
***************************

   *Author(s):* Manuel Hermenegildo, Manuel C. Rodriguez, Daniel
Cabeza, <clip@clip.dia.fi.upm.es>, `http://www.clip.dia.fi.upm.es/',
The CLIP Group, School of Computer Science, Technical University of
Madrid.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#219 (2002/5/15, 22:46:11 CEST)


File: ciao.info,  Node: *** PART II - The Ciao basic language (engine),  Next: The module system,  Prev: Using Ciao inside GNU emacs,  Up: Top

PART II - The Ciao basic language (engine)
******************************************

   *Author(s):* The Clip Group.

   This part documents the _Ciao basic builtins_. These predefined
predicates and declarations are available in every program, unless the
`pure' package is used (by using a `:- module(_,_,[pure]).'
declaration or `:- use_package(pure).'). These predicates are
contained in the `engine' directory within the `lib' library.  The
rest of the library predicates, including the packages that provide
most of the ISO-Prolog builtins, are documented in subsequent parts.


File: ciao.info,  Node: The module system,  Next: Directives for using code in other files,  Prev: *** PART II - The Ciao basic language (engine),  Up: Top

The module system
*****************

   *Author(s):* Daniel Cabeza and the CLIP Group.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#168 (2002/1/3, 17:45:2 CET)

   Modularity is a basic notion in a modern computer language.
Modules allow dividing programs in several parts, which have its own
independent name spaces. The module system in Ciao [CH00a], as in
many other Prolog implementations, is procedure based. This means
that predicate names are local to a module, but functor/atom names in
data are shared.

   The predicates visible in a module are the predicates defined in
that module, plus the predicates imported from other modules. Only
predicates exported by a module can be imported from other modules.
The default module of a given predicate name is the local one if the
predicate is defined locally, else the last module from which the
predicate is imported, having explicit imports priority (that is, a
predicate imported by an `use_module/2' declaration is always
preferred above a predicate imported by an `use_module/1'
declaration). To refer to a predicate from a module which is not the
default for that predicate the name has to be module qualified. A
module qualified predicate name has the form `Module':`Predicate' as
in the call `debugger:debug_module(M)'. Note that this does not allow
having access to predicates not imported, nor defining clauses of
other modules.

   All predicates defined in files with no module declaration belong
to a special module called `user', and all are implicitly exported.
This allows dividing programs in several files without being aware of
the module system at all. Note that this feature is only supported
for compatibility reasons, being its use discouraged. Many attractive
compilation features of Ciao cannot be performed in `user' modules.

   The case of multifile predicates (defined with the declaration
`multifile/1') is also special. Multifile predicates can be defined
by clauses distributed in several modules, and all modules which
define a predicate as multifile can use that predicate. The name
space of multifile predicates is independent, as if they belonged to
special module `multifile'.

   Every `user' or module file imports implicitly a number of modules
called builtin modules. They are imported before all other
importations of the module, allowing thus redefining any of their
predicates (with the exception of `true/0') by defining local
versions or importing them from other modules. Importing explicitly
from a builtin module, however, disables the implicit importation of
the rest (this feature is used by package `library(pure)' to define
pure prolog code).


File: ciao.info,  Node: Directives for using code in other files,  Next: Control constructs/predicates,  Prev: The module system,  Up: Top

Directives for using code in other files
****************************************

   *Author(s):* Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#166 (2002/1/3, 17:42:31 CET)

   Documentation for the directives used to load code into Ciao
Prolog (both from the toplevel shell and by other modules).


File: ciao.info,  Node: Control constructs/predicates,  Next: Basic builtin directives,  Prev: Directives for using code in other files,  Up: Top

Control constructs/predicates
*****************************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#37 (2001/1/2, 16:47:3 CET)

   This module contains the set of basic control predicates, except
the predicates dealing with exceptions, which are in *Note Exception
handling::.

* Menu:

* Usage and interface (basiccontrol)::
* Documentation on exports (basiccontrol)::
* Documentation on internals (basiccontrol)::


File: ciao.info,  Node: Usage and interface (basiccontrol),  Next: Documentation on exports (basiccontrol),  Prev: Control constructs/predicates,  Up: Control constructs/predicates

Usage and interface (`basiccontrol')
====================================

   * *Library usage:*

     These predicates/constructs are builtin in Ciao, so nothing
     special has to be done to use them. In fact, as they are
     hardwired in some parts of the system, most of them cannot be
     redefined.

   * *Exports:*
        - _Predicates:_

          `,/2', `;/2', `->/2', `!/0', `\+/1', `if/3', `true/0',
          `fail/0', `repeat/0', `call/1'.




File: ciao.info,  Node: Documentation on exports (basiccontrol),  Next: Documentation on internals (basiccontrol),  Prev: Usage and interface (basiccontrol),  Up: Control constructs/predicates

Documentation on exports (`basiccontrol')
=========================================

 - PREDICATE: ,/2:
     `P , Q'

     Conjunction (`P' _and_ `Q').

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `Q' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')



 - PREDICATE: ;/2:
     `P ; Q'

     Disjunction (`P' _or_ `Q').

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `Q' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')



 - PREDICATE: ->/2:
     `P -> Q'

     If `P' then `Q' else fail, using first solution of `P' only.
     Also, `('`P' `->' `Q' `;' `R'`)', if `P' then `Q' else `R',
     using first solution of `P' only. No cuts are allowed in `P'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `Q' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')



 - PREDICATE: !/0:
     *Usage 1:* < * ISO * >
        - _Description:_ Commit to any choices taken in the current
          predicate.

     *Usage 2:* < * ISO * >
        - _Description:_ Commit to any choices taken in the current
          predicate.



 - PREDICATE: \+/1:
     `\+ P'

     Goal `P' is not provable (negation by failure). Fails if `P' has
     a solution, and succeeds otherwise. No cuts are allowed in `P'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')



 - PREDICATE: if/3:
     `if(P,Q,R)'

     If `P' then `Q' else `R', exploring all solutions of `P'. No
     cuts are allowed in `P'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `Q' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `R' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')



 - PREDICATE: true/0:
     *Usage 1:* < * ISO * >
        - _Description:_ Succeed (noop).

     *Usage 2:* < * ISO * >
        - _Description:_ Succeed (noop).



 - PREDICATE: fail/0:
     *Usage 1:* < * ISO * >
        - _Description:_ Fail, backtrack immediately.

     *Usage 2:* < * ISO * >
        - _Description:_ Fail, backtrack immediately.



 - PREDICATE: repeat/0:
     *Usage 1:* < * ISO * >
        - _Description:_ Generates an infinite sequence of
          backtracking choices.

     *Usage 2:* < * ISO * >
        - _Description:_ Generates an infinite sequence of
          backtracking choices.



 - PREDICATE: call/1:
     `call(G)'

     Executes goal `G', restricting the scope of the cuts to the
     execution of `G'. Equivalent to writing a variable `G' in a goal
     position.

     _Meta-predicate_ with arguments: `call(goal)'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `G' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')




File: ciao.info,  Node: Documentation on internals (basiccontrol),  Prev: Documentation on exports (basiccontrol),  Up: Control constructs/predicates

Documentation on internals (`basiccontrol')
===========================================

 - PREDICATE: |/2:
     An alias for disjunction (when appearing outside a list). The
     alias is performed when terms are read in.





File: ciao.info,  Node: Basic builtin directives,  Next: Basic data types and properties,  Prev: Control constructs/predicates,  Up: Top

Basic builtin directives
************************

   *Author(s):* Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#165 (2002/1/3, 17:38:59 CET)

   This chapter documents the basic builtin directives in Ciao,
additional to the documented in other chapters. These directives are
natively interpreted by the Ciao compiler ( `ciaoc').

   Unlike in other Prolog systems, directives in Ciao are not goals
to be _executed_ by the compiler or top level. Instead, they are
_read_ and acted upon by these programs. The advantage of this is
that the effect of the directives is consistent for executables, code
loaded in the top level, code analyzed by the preprocessor, etc.

   As a result, by default only the builtin directives or
declarations defined in this manual can be used in user programs.
However, it is possible to define new declarations using the
`new_declaration/1' and `new_declaration/2' directives (or using
packages including them). Also, packages may define new directives
via code translations.


File: ciao.info,  Node: Basic data types and properties,  Next: Extra-logical properties for typing,  Prev: Basic builtin directives,  Up: Top

Basic data types and properties
*******************************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#204 (2002/4/22, 18:42:18 CEST)

   This library contains the set of basic properties used by the
builtin predicates, and which constitute the basic data types and
properties of the language. They can be used both as type testing
builtins within programs (by calling them explicitly) and as
properties in assertions.

* Menu:

* Usage and interface (basic_props)::
* Documentation on exports (basic_props)::


File: ciao.info,  Node: Usage and interface (basic_props),  Next: Documentation on exports (basic_props),  Prev: Basic data types and properties,  Up: Basic data types and properties

Usage and interface (`basic_props')
===================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Properties:_

          `member/2', `compat/2', `iso/1', `not_further_inst/2',
          `regtype/1'.

        - _Regular Types:_

          `term/1', `int/1', `nnegint/1', `flt/1', `num/1', `atm/1',
          `struct/1', `gnd/1', `constant/1', `callable/1',
          `operator_specifier/1', `list/1', `list/2', `sequence/2',
          `sequence_or_list/2', `character_code/1', `string/1',
          `predname/1', `atm_or_atm_list/1'.




File: ciao.info,  Node: Documentation on exports (basic_props),  Prev: Usage and interface (basic_props),  Up: Basic data types and properties

Documentation on exports (`basic_props')
========================================

 - REGTYPE: term/1:
     The most general type (includes all possible terms).

     *Usage 1:* `term(X)'
        - _Description:_ `X' is any term.

     *Usage 2:* `term(X)'
        - _Description:_ `X' is any term.



 - REGTYPE: int/1:
     The type of integers. The range of integers is `[-2^2147483616,
     2^2147483616)'. Thus for all practical purposes, the range of
     integers can be considered infinite.

     *Usage 1:* `int(T)'
        - _Description:_ `T' is an integer.

     *Usage 2:* `int(T)'
        - _Description:_ `T' is an integer.



 - REGTYPE: nnegint/1:
     The type of non-negative integers, i.e., natural numbers.

     *Usage 1:* `nnegint(T)'
        - _Description:_ `T' is a non-negative integer.

     *Usage 2:* `nnegint(T)'
        - _Description:_ `T' is a non-negative integer.



 - REGTYPE: flt/1:
     The type of floating-point numbers. The range of floats is the
     one provided by the C `double' type, typically `[4.9e-324,
     1.8e+308]' (plus or minus). There are also three special values:
     Infinity, either positive or negative, represented as `1.0e1000'
     and `-1.0e1000'; and Not-a-number, which arises as the result of
     indeterminate operations, represented as `0.Nan'

     *Usage 1:* `flt(T)'
        - _Description:_ `T' is a float.

     *Usage 2:* `flt(T)'
        - _Description:_ `T' is a float.



 - REGTYPE: num/1:
     The type of numbers, that is, integer or floating-point.

     *Usage 1:* `num(T)'
        - _Description:_ `T' is a number.

     *Usage 2:* `num(T)'
        - _Description:_ `T' is a number.



 - REGTYPE: atm/1:
     The type of atoms, or non-numeric constants. The size of atoms
     is unbound.

     *Usage 1:* `atm(T)'
        - _Description:_ `T' is an atom.

     *Usage 2:* `atm(T)'
        - _Description:_ `T' is an atom.



 - REGTYPE: struct/1:
     The type of compound terms, or terms with non-zeroary functors.
     By now there is a limit of 255 arguments.

     *Usage 1:* `struct(T)'
        - _Description:_ `T' is a compound term.

     *Usage 2:* `struct(T)'
        - _Description:_ `T' is a compound term.



 - REGTYPE: gnd/1:
     The type of all terms without variables.

     *Usage 1:* `gnd(T)'
        - _Description:_ `T' is ground.

     *Usage 2:* `gnd(T)'
        - _Description:_ `T' is ground.



 - REGTYPE: constant/1:
     *Usage 1:* `constant(T)'
        - _Description:_ `T' is an atomic term (an atom or a number).

     *Usage 2:* `constant(T)'
        - _Description:_ `T' is an atomic term (an atom or a number).



 - REGTYPE: callable/1:
     *Usage 1:* `callable(T)'
        - _Description:_ `T' is a term which represents a goal, i.e.,
          an atom or a structure.

     *Usage 2:* `callable(T)'
        - _Description:_ `T' is a term which represents a goal, i.e.,
          an atom or a structure.



 - REGTYPE: operator_specifier/1:
     The type and associativity of an operator is described by the
     following mnemonic atoms:

    `xfx'
          Infix, non-associative: it is a requirement that both of
          the two subexpressions which are the arguments of the
          operator must be of _lower_ precedence than the operator
          itself.

    `xfy'
          Infix, right-associative: only the first (left-hand)
          subexpression must be of lower precedence; the right-hand
          subexpression can be of the _same_ precedence as the main
          operator.

    `yfx'
          Infix, left-associative: same as above, but the other way
          around.

    `fx'
          Prefix, non-associative: the subexpression must be of
          _lower_ precedence than the operator.

    `fy'
          Prefix, associative: the subexpression can be of the _same_
          precedence as the operator.

    `xf'
          Postfix, non-associative: the subexpression must be of
          _lower_ precedence than the operator.

    `yf'
          Postfix, associative: the subexpression can be of the
          _same_ precedence as the operator.

     *Usage 1:* `operator_specifier(X)'
        - _Description:_ `X' specifies the type and associativity of
          an operator.

     *Usage 2:* `operator_specifier(X)'
        - _Description:_ `X' specifies the type and associativity of
          an operator.



 - REGTYPE: list/1:
     A list is formed with successive applications of the functor
     `'.'/2', and its end is the atom `[]'. Defined as
          list([]).
          list([_1|L]) :-
                  list(L).
          list([]).
          list([_1|L]) :-
                  list(L).

     *Usage 1:* `list(L)'
        - _Description:_ `L' is a list.

     *Usage 2:* `list(L)'
        - _Description:_ `L' is a list.



 - REGTYPE: list/2:
     `list(L,T)'

     `L' is a list, and for all its elements, `T' holds.

     _Meta-predicate_ with arguments: `list(?,pred(1))'.

     *Usage 1:* `list(L,T)'
        - _Description:_ `L' is a list of `T's.

     *Usage 2:* `list(L,T)'
        - _Description:_ `L' is a list of `T's.



 - PROPERTY: member/2:
     *Usage 1:* `member(X,L)'
        - _Description:_ `X' is an element of `L'.

     *Usage 2:* `member(X,L)'
        - _Description:_ `X' is an element of `L'.



 - REGTYPE: sequence/2:
     A sequence is formed with zero, one or more occurrences of the
     operator `','/2'. For example, `a, b, c' is a sequence of three
     atoms, `a' is a sequence of one atom.

     _Meta-predicate_ with arguments: `sequence(?,pred(1))'.

     *Usage 1:* `sequence(S,T)'
        - _Description:_ `S' is a sequence of `T's.

     *Usage 2:* `sequence(S,T)'
        - _Description:_ `S' is a sequence of `T's.



 - REGTYPE: sequence_or_list/2:
     _Meta-predicate_ with arguments: `sequence_or_list(?,pred(1))'.

     *Usage 1:* `sequence_or_list(S,T)'
        - _Description:_ `S' is a sequence or list of `T's.

     *Usage 2:* `sequence_or_list(S,T)'
        - _Description:_ `S' is a sequence or list of `T's.



 - REGTYPE: character_code/1:
     *Usage 1:* `character_code(T)'
        - _Description:_ `T' is an integer which is a character code.

        - _The following properties hold upon exit:_

          `T' is an integer.   (`basic_props:int/1')

     *Usage 2:* `character_code(T)'
        - _Description:_ `T' is an integer which is a character code.

        - _The following properties hold upon exit:_

          `T' is an integer.   (`basic_props:int/1')



 - REGTYPE: string/1:
     A string is a list of character codes. The usual syntax for
     strings `"string"' is allowed, which is equivalent to
     `[0's,0't,0'r,0'i,0'n,0'g]' or `[115,116,114,105,110,103]'.
     There is also a special Ciao syntax when the list is not
     complete: `"st"||R' is equivalent to `[0's,0't|R]'.

     *Usage 1:* `string(T)'
        - _Description:_ `T' is a string (a list of character codes).

        - _The following properties hold upon exit:_

          `T' is a list of `character_code's.   (`basic_props:list/2')

     *Usage 2:* `string(T)'
        - _Description:_ `T' is a string (a list of character codes).

        - _The following properties hold upon exit:_

          `T' is a list of `character_code's.   (`basic_props:list/2')



 - REGTYPE: predname/1:
     *Usage 1:* `predname(P)'
        - _Description:_ `P' is a Name/Arity structure denoting a
          predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).
               predname(P/A) :-
                       atm(P),
                       nnegint(A).


     *Usage 2:* `predname(P)'
        - _Description:_ `P' is a Name/Arity structure denoting a
          predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).
               predname(P/A) :-
                       atm(P),
                       nnegint(A).




 - REGTYPE: atm_or_atm_list/1:
     *Usage 1:* `atm_or_atm_list(T)'
        - _Description:_ `T' is an atom or a list of atoms.

     *Usage 2:* `atm_or_atm_list(T)'
        - _Description:_ `T' is an atom or a list of atoms.



 - PROPERTY: compat/2:
     This property captures the notion of type or property
     compatibility. The instantiation or constraint state of the term
     is compatible with the given property, in the sense that
     assuming that imposing that property on the term does not render
     the store inconsistent. For example, terms `X' (i.e., a free
     variable), `[Y|Z]', and `[Y,Z]' are all compatible with the
     regular type `list/1', whereas the terms `f(a)' and `[1|2]' are
     not.

     _Meta-predicate_ with arguments: `compat(?,pred(1))'.

     *Usage 1:* `compat(Term,Prop)'
        - _Description:_ `Term' is _compatible_ with `Prop'

     *Usage 2:* `compat(Term,Prop)'
        - _Description:_ `Term' is _compatible_ with `Prop'



 - PROPERTY: iso/1:
     *Usage 1:* `iso(G)'
        - _Description:_ _Complies with the ISO-Prolog standard._

     *Usage 2:* `iso(G)'
        - _Description:_ _Complies with the ISO-Prolog standard._



 - PROPERTY: not_further_inst/2:
     *Usage 1:* `not_further_inst(G,V)'
        - _Description:_ `V' is not further instantiated.

     *Usage 2:* `not_further_inst(G,V)'
        - _Description:_ `V' is not further instantiated.



 - PROPERTY: regtype/1:
     *Usage 1:* `regtype(G)'
        - _Description:_ Defines a regular type.

     *Usage 2:* `regtype(G)'
        - _Description:_ Defines a regular type.




File: ciao.info,  Node: Extra-logical properties for typing,  Next: Basic term manipulation,  Prev: Basic data types and properties,  Up: Top

Extra-logical properties for typing
***********************************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.7#8 (1998/9/23, 19:21:44 MEST)

   This library contains traditional Prolog predicates for testing
types. They depend on the state of instantiation of their arguments,
thus being of extra-logical nature.

* Menu:

* Usage and interface (term_typing)::
* Documentation on exports (term_typing)::


File: ciao.info,  Node: Usage and interface (term_typing),  Next: Documentation on exports (term_typing),  Prev: Extra-logical properties for typing,  Up: Extra-logical properties for typing

Usage and interface (`term_typing')
===================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Properties:_

          `var/1', `nonvar/1', `atom/1', `integer/1', `float/1',
          `number/1', `atomic/1', `ground/1', `type/2'.




File: ciao.info,  Node: Documentation on exports (term_typing),  Prev: Usage and interface (term_typing),  Up: Extra-logical properties for typing

Documentation on exports (`term_typing')
========================================

 - PROPERTY: var/1:
     *Usage 1:* `var(X)'
        - _Description:_ `X' is a free variable.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `var(X)'
        - _Description:_ `X' is a free variable.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: nonvar/1:
     *Usage 1:* `nonvar(X)'
        - _Description:_ `X' is currently a term which is not a free
          variable.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `nonvar(X)'
        - _Description:_ `X' is currently a term which is not a free
          variable.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: atom/1:
     *Usage 1:* `atom(X)'
        - _Description:_ `X' is currently instantiated to an atom.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `atom(X)'
        - _Description:_ `X' is currently instantiated to an atom.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: integer/1:
     *Usage 1:* `integer(X)'
        - _Description:_ `X' is currently instantiated to an integer.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `integer(X)'
        - _Description:_ `X' is currently instantiated to an integer.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: float/1:
     *Usage 1:* `float(X)'
        - _Description:_ `X' is currently instantiated to a float.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `float(X)'
        - _Description:_ `X' is currently instantiated to a float.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: number/1:
     *Usage 1:* `number(X)'
        - _Description:_ `X' is currently instantiated to a number.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `number(X)'
        - _Description:_ `X' is currently instantiated to a number.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: atomic/1:
     *Usage 1:* `atomic(X)'
        - _Description:_ `X' is currently instantiated to an atom or
          a number.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `atomic(X)'
        - _Description:_ `X' is currently instantiated to an atom or
          a number.

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: ground/1:
     *Usage 1:* `ground(X)'
        - _Description:_ `X' is currently ground (it contains no
          variables).

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `ground(X)'
        - _Description:_ `X' is currently ground (it contains no
          variables).

        - _The following properties hold globally:_

          `X' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: type/2:
     *Usage 1:* `type(X,Y)'
        - _Description:_ `X' is internally of type `Y' (`var',
          `attv', `float', `integer', `structure', `atom' or `list').

        - _The following properties hold upon exit:_

          `Y' is an atom.   (`basic_props:atm/1')

     *Usage 2:* `type(X,Y)'
        - _Description:_ `X' is internally of type `Y' (`var',
          `attv', `float', `integer', `structure', `atom' or `list').

        - _The following properties hold upon exit:_

          `Y' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Basic term manipulation,  Next: Comparing terms,  Prev: Extra-logical properties for typing,  Up: Top

Basic term manipulation
***********************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

* Menu:

* Usage and interface (term_basic)::
* Documentation on exports (term_basic)::


File: ciao.info,  Node: Usage and interface (term_basic),  Next: Documentation on exports (term_basic),  Prev: Basic term manipulation,  Up: Basic term manipulation

Usage and interface (`term_basic')
==================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `arg/3', `functor/3', `=../2', `copy_term/2', `C/3'.

        - _Properties:_

          `=/2'.




File: ciao.info,  Node: Documentation on exports (term_basic),  Prev: Usage and interface (term_basic),  Up: Basic term manipulation

Documentation on exports (`term_basic')
=======================================

 - PROPERTY: =/2:
     *Usage 1:* `X = Y' < * ISO * >
        - _Description:_ `X' and `Y' unify.

     *Usage 2:* `X = Y' < * ISO * >
        - _Description:_ `X' and `Y' unify.



 - PREDICATE: arg/3:
     *Usage 1:* `arg(+ArgNo,+Term,?Arg)' < * ISO * >
        - _Description:_ Argument `ArgNo' of the term `Term' is `Arg'.

        - _The following properties should hold at call time:_

          `ArgNo' is currently instantiated to an integer.
          (`term_typing:integer/1')

     *Usage 2:* `arg(ArgNo,Term,Arg)' < * ISO * >
        - _Description:_ Argument `ArgNo' of the term `Term' is `Arg'.

        - _The following properties should hold at call time:_

          `ArgNo' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

          `Term' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

          `ArgNo' is currently instantiated to an integer.
          (`term_typing:integer/1')



 - PREDICATE: functor/3:
     *Usage 1:* `functor(?Term,?Name,?Arity)' < * ISO * >
        - _Description:_ The principal functor of the term `Term' has
          name `Name' and arity `Arity'.

     *Usage 2:* `functor(Term,Name,Arity)' < * ISO * >
        - _Description:_ The principal functor of the term `Term' has
          name `Name' and arity `Arity'.



 - PREDICATE: =../2:
     *Usage 1:* `?Term =.. ?List' < * ISO * >
        - _Description:_ The functor and arguments of the term `Term'
          comprise the list `List'.

     *Usage 2:* `Term =.. List' < * ISO * >
        - _Description:_ The functor and arguments of the term `Term'
          comprise the list `List'.



 - PREDICATE: copy_term/2:
     *Usage 1:* `copy_term(Term,Copy)' < * ISO * >
        - _Description:_ `Copy' is a renaming of `Term', such that
          brand new variables have been substituted for all variables
          in `Term'. If any of the variables of `Term' have
          attributes, the copied variables will have copies of the
          attributes as well. It behaves as if defined by:

               :- data 'copy of'/1.
               
               copy_term(X, Y) :-
                       asserta_fact('copy of'(X)),
                       retract_fact('copy of'(Y)).


     *Usage 2:* `copy_term(Term,Copy)' < * ISO * >
        - _Description:_ `Copy' is a renaming of `Term', such that
          brand new variables have been substituted for all variables
          in `Term'. If any of the variables of `Term' have
          attributes, the copied variables will have copies of the
          attributes as well. It behaves as if defined by:

               :- data 'copy of'/1.
               
               copy_term(X, Y) :-
                       asserta_fact('copy of'(X)),
                       retract_fact('copy of'(Y)).




 - PREDICATE: C/3:
     *Usage 1:* `C(?S1,?Terminal,?S2)'
        - _Description:_ `S1' is connected by the terminal `Terminal'
          to `S2'. Internally used in _DCG grammar rules_. Defined as
          if by the single clause: `'C'([X|S], X, S).'

     *Usage 2:* `C(S1,Terminal,S2)'
        - _Description:_ `S1' is connected by the terminal `Terminal'
          to `S2'. Internally used in _DCG grammar rules_. Defined as
          if by the single clause: `'C'([X|S], X, S).'




File: ciao.info,  Node: Comparing terms,  Next: Basic predicates handling names of constants,  Prev: Basic term manipulation,  Up: Top

Comparing terms
***************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   These built-in predicates are extra-logical. They treat
uninstantiated variables as objects with values which may be
compared, and they never instantiate those variables. They should
_not_ be used when what you really want is arithmetic comparison or
unification.

   The predicates make reference to a _standard total ordering_ of
terms, which is as follows:

   * Variables, by age (roughly, oldest first - the order is _not_
     related to the names of variables).

   * Floats, in numeric order (e.g. -1.0 is put before 1.0).

   * Integers, in numeric order (e.g. -1 is put before 1).

   * Atoms, in alphabetical (i.e. character code) order.

   * Compound terms, ordered first by arity, then by the name of the
     principal functor, then by the arguments in left-to-right order.
     Recall that lists are equivalent to compound terms with
     principal functor `'.'/2'.


   For example, here is a list of terms in standard order:

     [ X, -1.0, -9, 1, bar, foo, [1], X = Y, foo(0,2), bar(1,1,1) ]

* Menu:

* Usage and interface (term_compare)::
* Documentation on exports (term_compare)::


File: ciao.info,  Node: Usage and interface (term_compare),  Next: Documentation on exports (term_compare),  Prev: Comparing terms,  Up: Comparing terms

Usage and interface (`term_compare')
====================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `compare/3'.

        - _Properties:_

          `==/2', `\==/2', `@</2', `@=</2', `@>/2', `@>=/2'.




File: ciao.info,  Node: Documentation on exports (term_compare),  Prev: Usage and interface (term_compare),  Up: Comparing terms

Documentation on exports (`term_compare')
=========================================

 - PROPERTY: ==/2:
     *Usage 1:* `Term1 == Term2'
        - _Description:_ The terms `Term1' and `Term2' are strictly
          identical.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `Term1 == Term2'
        - _Description:_ The terms `Term1' and `Term2' are strictly
          identical.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: \==/2:
     *Usage 1:* `Term1 \== Term2'
        - _Description:_ The terms `Term1' and `Term2' are not
          strictly identical.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `Term1 \== Term2'
        - _Description:_ The terms `Term1' and `Term2' are not
          strictly identical.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: @</2:
     *Usage 1:* `@<(Term1,Term2)'
        - _Description:_ The term `Term1' precedes the term `Term2'
          in the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `@<(Term1,Term2)'
        - _Description:_ The term `Term1' precedes the term `Term2'
          in the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: @=</2:
     *Usage 1:* `@=<(Term1,Term2)'
        - _Description:_ The term `Term1' precedes or is identical to
          the term `Term2' in the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `@=<(Term1,Term2)'
        - _Description:_ The term `Term1' precedes or is identical to
          the term `Term2' in the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: @>/2:
     *Usage 1:* `@>(Term1,Term2)'
        - _Description:_ The term `Term1' follows the term `Term2' in
          the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `@>(Term1,Term2)'
        - _Description:_ The term `Term1' follows the term `Term2' in
          the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PROPERTY: @>=/2:
     *Usage 1:* `@>=(Term1,Term2)'
        - _Description:_ The term `Term1' follows or is identical to
          the term `Term2' in the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')

     *Usage 2:* `@>=(Term1,Term2)'
        - _Description:_ The term `Term1' follows or is identical to
          the term `Term2' in the standard order.

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PREDICATE: compare/3:
     `compare(Op,Term1,Term2)'

     `Op' is the result of comparing the terms `Term1' and `Term2'.

     *Usage 1:* `compare(?atm,@term,@term)'
        - _The following properties should hold upon exit:_

          `?atm' is an element of `[=,>,<]'.
          (`basic_props:member/2')

          `@term' is any term.   (`basic_props:term/1')

          `@term' is any term.   (`basic_props:term/1')

     *Usage 2:*
        - _Call and exit should be _compatible_ with:_

          `Op' is an atom.   (`basic_props:atm/1')

        - _The following properties should hold at call time:_

          `Term1' is any term.   (`basic_props:term/1')

          `Term2' is any term.   (`basic_props:term/1')

        - _The following properties should hold upon exit:_

          `Op' is an atom.   (`basic_props:atm/1')

          `Term1' is any term.   (`basic_props:term/1')

          `Term2' is any term.   (`basic_props:term/1')

          `Op' is an element of `[=,>,<]'.   (`basic_props:member/2')

          `Term1' is any term.   (`basic_props:term/1')

          `Term2' is any term.   (`basic_props:term/1')

        - _The following properties should hold globally:_

          `Term1' is not further instantiated.
          (`basic_props:not_further_inst/2')

          `Term2' is not further instantiated.
          (`basic_props:not_further_inst/2')




File: ciao.info,  Node: Basic predicates handling names of constants,  Next: Arithmetic,  Prev: Comparing terms,  Up: Top

Basic predicates handling names of constants
********************************************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   The Ciao system provides builtin predicates which allow dealing
with names of constants (atoms or numbers). As an atom name must be
of less than 512 characters, to handle sequences of more characters,
strings (character code lists) must be used.

* Menu:

* Usage and interface (atomic_basic)::
* Documentation on exports (atomic_basic)::


File: ciao.info,  Node: Usage and interface (atomic_basic),  Next: Documentation on exports (atomic_basic),  Prev: Basic predicates handling names of constants,  Up: Basic predicates handling names of constants

Usage and interface (`atomic_basic')
====================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `name/2', `atom_codes/2', `number_codes/2',
          `number_codes/3', `atom_length/2', `atom_concat/3',
          `sub_atom/4'.




File: ciao.info,  Node: Documentation on exports (atomic_basic),  Prev: Usage and interface (atomic_basic),  Up: Basic predicates handling names of constants

Documentation on exports (`atomic_basic')
=========================================

 - PREDICATE: name/2:
     `name(Const,String)'

     `String' is the list of the ASCII codes of the characters
     comprising the name of `Const'. Note that if `Const' is an atom
     whose name can be interpreted as a number (e.g. '96'), the
     predicate is not reversible, as that atom will not be
     constructed when `Const' is uninstantiated. Thus it is
     recommended that new programs use the ISO-compliant predicates
     `atom_codes/2' or `number_codes/2', as these predicates do not
     have this inconsistency.

     *Usage 2:* `name(-constant,+string)'
        - _Description:_ If `String' can be interpreted as a number,
          `Const' is unified with that number, otherwise with the
          atom whose name is `String'.

     *Usage 3:*
        - _Calls should, and exit will be compatible with:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties should hold at call time:_

          `Const' is an atomic term (an atom or a number).
          (`basic_props:constant/1')

        - _The following properties hold upon exit:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

     *Usage 4:*
        - _Description:_ If `String' can be interpreted as a number,
          `Const' is unified with that number, otherwise with the
          atom whose name is `String'.

        - _The following properties should hold at call time:_

          `Const' is a free variable.   (`term_typing:var/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties hold upon exit:_

          `Const' is an atomic term (an atom or a number).
          (`basic_props:constant/1')



 - PREDICATE: atom_codes/2:
     `atom_codes(Atom,String)'

     `String' is the list of the ASCII codes of the characters
     comprising the name of `Atom'.

     *Usage 3:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties should hold at call time:_

          `Atom' is an atom.   (`basic_props:atm/1')

        - _The following properties hold upon exit:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

     *Usage 4:* < * ISO * >
        - _The following properties should hold at call time:_

          `Atom' is a free variable.   (`term_typing:var/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties hold upon exit:_

          `Atom' is an atom.   (`basic_props:atm/1')



 - PREDICATE: number_codes/2:
     `number_codes(Number,String)'

     `String' is the list of the ASCII codes of the characters
     comprising a representation of `Number'.

     *Usage 3:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties should hold at call time:_

          `Number' is a number.   (`basic_props:num/1')

        - _The following properties hold upon exit:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

     *Usage 4:* < * ISO * >
        - _The following properties should hold at call time:_

          `Number' is a free variable.   (`term_typing:var/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties hold upon exit:_

          `Number' is a number.   (`basic_props:num/1')



 - PREDICATE: number_codes/3:
     `number_codes(Number,String,Base)'

     `String' is the list of the ASCII codes of the characters
     comprising a representation of `Number' in base `Base'.

     *Usage 3:*
        - _Calls should, and exit will be compatible with:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties should hold at call time:_

          `Number' is a number.   (`basic_props:num/1')

          `Base' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

     *Usage 4:*
        - _The following properties should hold at call time:_

          `Number' is a free variable.   (`term_typing:var/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

          `Base' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Number' is a number.   (`basic_props:num/1')



 - PREDICATE: atom_length/2:
     `atom_length(Atom,Length)'

     `Length' is the number of characters forming the name of `Atom'.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Length' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Atom' is an atom.   (`basic_props:atm/1')

        - _The following properties hold upon exit:_

          `Length' is an integer.   (`basic_props:int/1')



 - PREDICATE: atom_concat/3:
     `atom_concat(Atom_1,Atom_2,Atom_12)'

     `Atom_12' is the result of concatenating `Atom_1' followed by
     `Atom_2'.

     *Usage 1:* `atom_concat(+atom,+atom,?atom)' < * ISO * >
        - _Description:_ Concatenate two atoms.

     *Usage 2:* `atom_concat(-atom,-atom,+atom)' < * ISO * >
        - _Description:_ Non-deterministically split an atom.

     *Usage 3:* `atom_concat(-atom,+atom,+atom)' < * ISO * >
        - _Description:_ Take out of an atom a certain suffix (or
          fail if it cannot be done).

     *Usage 4:* `atom_concat(+atom,-atom,+atom)' < * ISO * >
        - _Description:_ Take out of an atom a certain prefix (or
          fail if it cannot be done).

     *Usage 5:* < * ISO * >
        - _Description:_ Concatenate two atoms.

        - _Calls should, and exit will be compatible with:_

          `Atom_12' is currently instantiated to an atom.
          (`term_typing:atom/1')

        - _The following properties should hold at call time:_

          `Atom_1' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `Atom_2' is currently instantiated to an atom.
          (`term_typing:atom/1')

        - _The following properties hold upon exit:_

          `Atom_12' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 6:* < * ISO * >
        - _Description:_ Non-deterministically split an atom.

        - _The following properties should hold at call time:_

          `Atom_1' is a free variable.   (`term_typing:var/1')

          `Atom_2' is a free variable.   (`term_typing:var/1')

          `Atom_12' is currently instantiated to an atom.
          (`term_typing:atom/1')

        - _The following properties hold upon exit:_

          `Atom_1' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `Atom_2' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 7:* < * ISO * >
        - _Description:_ Take out of an atom a certain suffix (or
          fail if it cannot be done).

        - _The following properties should hold at call time:_

          `Atom_1' is a free variable.   (`term_typing:var/1')

          `Atom_2' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `Atom_12' is currently instantiated to an atom.
          (`term_typing:atom/1')

        - _The following properties hold upon exit:_

          `Atom_1' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 8:* < * ISO * >
        - _Description:_ Take out of an atom a certain prefix (or
          fail if it cannot be done).

        - _The following properties should hold at call time:_

          `Atom_1' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `Atom_2' is a free variable.   (`term_typing:var/1')

          `Atom_12' is currently instantiated to an atom.
          (`term_typing:atom/1')

        - _The following properties hold upon exit:_

          `Atom_2' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: sub_atom/4:
     `sub_atom(Atom,Before,Length,Sub_atom)'

     `Sub_atom' is formed with `Length' consecutive characters of
     `Atom' after the `Before' character. For example, the goal
     `sub_atom(summer,1,4,umme)' succeeds.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Sub_atom' is an atom.   (`basic_props:atm/1')

        - _The following properties should hold at call time:_

          `Atom' is an atom.   (`basic_props:atm/1')

          `Before' is currently instantiated to an integer.
          (`term_typing:integer/1')

          `Length' is currently instantiated to an integer.
          (`term_typing:integer/1')

        - _The following properties hold upon exit:_

          `Sub_atom' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Arithmetic,  Next: Basic file/stream handling,  Prev: Basic predicates handling names of constants,  Up: Top

Arithmetic
**********

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.9#18 (1999/3/23, 21:6:13 MET)

   Arithmetic is performed by built-in predicates which take as
arguments arithmetic expressions (see `arithexpression/1') and
evaluate them. Terms representing arithmetic expressions can be
created dynamically, but at the time of evaluation, each variable in
an arithmetic expression must be bound to a non-variable expression
(the term must be ground). For example, given the code in the first
line a possible shell interaction follows:
     evaluate(Expression, Answer) :- Answer is Expression.
     
     ?- _X=24*9, evaluate(_X+6, Ans).
     
     Ans = 222 ?
     
     yes

* Menu:

* Usage and interface (arithmetic)::
* Documentation on exports (arithmetic)::


File: ciao.info,  Node: Usage and interface (arithmetic),  Next: Documentation on exports (arithmetic),  Prev: Arithmetic,  Up: Arithmetic

Usage and interface (`arithmetic')
==================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `is/2', `</2', `=</2', `>/2', `>=/2', `=:=/2', `=\=/2'.

        - _Regular Types:_

          `arithexpression/1'.




File: ciao.info,  Node: Documentation on exports (arithmetic),  Prev: Usage and interface (arithmetic),  Up: Arithmetic

Documentation on exports (`arithmetic')
=======================================

 - PREDICATE: is/2:
     `Val is Exp'

     The arithmetic expression `Exp' is evaluated and the result is
     unified with `Val'

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Val' is any term.   (`basic_props:term/1')

        - _The following properties should hold at call time:_

          `Exp' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

        - _The following properties hold upon exit:_

          `Val' is any term.   (`basic_props:term/1')



 - PREDICATE: </2:
     `Exp1 < Exp2'

     The numeric value of `Exp1' is less than the numeric value of
     `Exp2' when both are evaluated as arithmetic expressions.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Exp1' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

          `Exp2' is an arithmetic expression.
          (`arithmetic:arithexpression/1')



 - PREDICATE: =</2:
     `Exp1 =< Exp2'

     The numeric value of `Exp1' is less than or equal to the numeric
     value of `Exp2' when both are evaluated as arithmetic
     expressions.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Exp1' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

          `Exp2' is an arithmetic expression.
          (`arithmetic:arithexpression/1')



 - PREDICATE: >/2:
     `Exp1 > Exp2'

     The numeric value of `Exp1' is greater than the numeric value of
     `Exp2' when both are evaluated as arithmetic expressions.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Exp1' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

          `Exp2' is an arithmetic expression.
          (`arithmetic:arithexpression/1')



 - PREDICATE: >=/2:
     `Exp1 >= Exp2'

     The numeric value of `Exp1' is greater than or equal to the
     numeric value of `Exp2' when both are evaluated as arithmetic
     expressions.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Exp1' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

          `Exp2' is an arithmetic expression.
          (`arithmetic:arithexpression/1')



 - PREDICATE: =:=/2:
     `Exp1 =:= Exp2'

     The numeric values of `Exp1' and `Exp2' are equal when both are
     evaluated as arithmetic expressions.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Exp1' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

          `Exp2' is an arithmetic expression.
          (`arithmetic:arithexpression/1')



 - PREDICATE: =\=/2:
     `Exp1 =\= Exp2'

     The numeric values of `Exp1' and `Exp2' are not equal when both
     are evaluated as arithmetic expressions.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Exp1' is an arithmetic expression.
          (`arithmetic:arithexpression/1')

          `Exp2' is an arithmetic expression.
          (`arithmetic:arithexpression/1')



 - REGTYPE: arithexpression/1:
     An arithmetic expression is a term built from numbers and
     evaluable functors that represent arithmetic functions. An
     arithmetic expression evaluates to a number, which may be an
     integer ( `int/1') or a float ( `flt/1'). The evaluable functors
     allowed in an arithmetic expression are listed below, together
     with an indication of the functions they represent. All
     evaluable functors defined in ISO-Prolog are implemented, as
     well as some other useful or traditional. Unless stated
     otherwise, an expression evaluates to a float if any of its
     arguments is a float, otherwise to an integer.

        * `- /1': sign reversal.  < * ISO * >

        * `+ /1': identity.

        * `-- /1': decrement by one.

        * `++ /1': increment by one.

        * `+ /2': addition.  < * ISO * >

        * `- /2': subtraction.  < * ISO * >

        * `* /2': multiplication.  < * ISO * >

        * `// /2': integer division. Float arguments are truncated to
          integers, result always integer.  < * ISO * >

        * `/ /2': division. Result always float.  < * ISO * >

        * `rem/2': integer remainder. The result is always an
          integer, its sign is the sign of the first argument.  < *
          ISO * >

        * `mod/2': modulo. The result is always a positive integer.
          < * ISO * >

        * `abs/1': absolute value.  < * ISO * >

        * `sign/1': sign of.  < * ISO * >

        * `float_integer_part/1': float integer part. Result always
          float.  < * ISO * >

        * `float_fractional_part/1': float fractional part. Result
          always float.  < * ISO * >

        * `truncate/1': The result is the integer equal to the
          integer part of the argument.  < * ISO * >

        * `integer/1': same as `truncate/1'.

        * `float/1': conversion to float.  < * ISO * >

        * `floor/1': largest integer not greater than.  < * ISO * >

        * `round/1': integer nearest to.  < * ISO * >

        * `ceiling/1': smallest integer not smaller than.  < * ISO * >

        * `** /2': exponentiation. Result always float.  < * ISO * >

        * `>> /2': integer bitwise right shift.  < * ISO * >

        * `<< /2': integer bitwise left shift.  < * ISO * >

        * `/\ /2': integer bitwise and.  < * ISO * >

        * `\/ /2': integer bitwise or.  < * ISO * >

        * `\ /1': integer bitwise complement.  < * ISO * >

        * `# /2': integer bitwise exclusive or (xor).

        * `exp/1': exponential (_e_ to the power of). Result always
          float.  < * ISO * >

        * `log/1': natural logarithm (base _e_). Result always float.
          < * ISO * >

        * `sqrt/1': square root. Result always float.  < * ISO * >

        * `sin/1': sine. Result always float.  < * ISO * >

        * `cos/1': cosine. Result always float.  < * ISO * >

        * `atan/1': arc tangent. Result always float.  < * ISO * >

        * `gcd/2': Greatest common divisor. Arguments must evaluate
          to integers, result always integer.


     In addition to these functors, a list of just a number evaluates
     to this number. Since a quoted string is just a list of
     integers, this allows a quoted character to be used in place of
     its ASCII code; e.g. `"A"' behaves within arithmetic expressions
     as the integer 65. Note that this is not ISO-compliant, and that
     can be achieved by using the ISO notation `0'A'.

     Arithmetic expressions, as described above, are just data
     structures. If you want one evaluated you must pass it as an
     argument to one of the arithmetic predicates defined in this
     library.

     *Usage 1:* `arithexpression(E)'
        - _Description:_ `E' is an arithmetic expression.

     *Usage 2:* `arithexpression(E)'
        - _Description:_ `E' is an arithmetic expression.




File: ciao.info,  Node: Basic file/stream handling,  Next: Basic input/output,  Prev: Arithmetic,  Up: Top

Basic file/stream handling
**************************

   *Author(s):* Daniel Cabeza, Mats Carlsson.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#47 (2001/1/22, 10:24:23 CET)

   This module provides basic predicates for handling files and
streams, in order to make input/output on them.

* Menu:

* Usage and interface (streams_basic)::
* Documentation on exports (streams_basic)::
* Documentation on multifiles (streams_basic)::


File: ciao.info,  Node: Usage and interface (streams_basic),  Next: Documentation on exports (streams_basic),  Prev: Basic file/stream handling,  Up: Basic file/stream handling

Usage and interface (`streams_basic')
=====================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `open/3', `close/1', `set_input/1', `current_input/1',
          `set_output/1', `current_output/1', `character_count/2',
          `line_count/2', `line_position/2', `flush_output/1',
          `flush_output/0', `clearerr/1', `current_stream/3',
          `stream_code/2', `absolute_file_name/2',
          `absolute_file_name/7'.

        - _Regular Types:_

          `sourcename/1', `stream/1', `stream_alias/1', `io_mode/1'.

        - _Multifiles:_

          `file_search_path/2', `library_directory/1'.




File: ciao.info,  Node: Documentation on exports (streams_basic),  Next: Documentation on multifiles (streams_basic),  Prev: Usage and interface (streams_basic),  Up: Basic file/stream handling

Documentation on exports (`streams_basic')
==========================================

 - PREDICATE: open/3:
     `open(File,Mode,Stream)'

     Open `File' with mode `Mode' and return in `Stream' the stream
     associated with the file. No extension is implicit in `File'.

     *Usage 1:* `open(+sourcename,+io_mode,?stream)' < * ISO * >
        - _Description:_ Normal use.

     *Usage 2:* `open(+int,+io_mode,?stream)'
        - _Description:_ In the special case that `File' is an
          integer, it is assumed to be a file descriptor passed to
          Prolog from a foreign function call. The file descriptor is
          connected to a Prolog stream (invoking the UNIX function
          `fdopen') which is unified with `Stream'.

     *Usage 3:* < * ISO * >
        - _Description:_ Normal use.

        - _Calls should, and exit will be compatible with:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')

          `Mode' is an opening mode ('read', 'write' or 'append').
          (`streams_basic:io_mode/1')

        - _The following properties hold upon exit:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

     *Usage 4:*
        - _Description:_ In the special case that `File' is an
          integer, it is assumed to be a file descriptor passed to
          Prolog from a foreign function call. The file descriptor is
          connected to a Prolog stream (invoking the UNIX function
          `fdopen') which is unified with `Stream'.

        - _Calls should, and exit will be compatible with:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties should hold at call time:_

          `File' is an integer.   (`basic_props:int/1')

          `Mode' is an opening mode ('read', 'write' or 'append').
          (`streams_basic:io_mode/1')

        - _The following properties hold upon exit:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: close/1:
     `close(Stream)'

     Close the stream `Stream'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: set_input/1:
     `set_input(Stream)'

     Set the current input stream to `Stream'. A notion of _current
     input stream_ is maintained by the system, so that input
     predicates with no explicit stream operate on the current input
     stream. Initially it is set to `user_input'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: current_input/1:
     `current_input(Stream)'

     Unify `Stream' with the current input stream.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: set_output/1:
     `set_output(Stream)'

     Set the current output stream to `Stream'. A notion of _current
     output stream_ is maintained by the system, so that output
     predicates with no explicit stream operate on the current output
     stream. Initially it is set to `user_output'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: current_output/1:
     `current_output(Stream)'

     Unify `Stream' with the current output stream.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: character_count/2:
     `character_count(Stream,Count)'

     `Count' characters have been read from or written to `Stream'.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Count' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Count' is an integer.   (`basic_props:int/1')



 - PREDICATE: line_count/2:
     `line_count(Stream,Count)'

     `Count' lines have been read from or written to `Stream'.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Count' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Count' is an integer.   (`basic_props:int/1')



 - PREDICATE: line_position/2:
     `line_position(Stream,Count)'

     `Count' characters have been read from or written to the current
     line of `Stream'.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Count' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Count' is an integer.   (`basic_props:int/1')



 - PREDICATE: flush_output/1:
     `flush_output(Stream)'

     Flush any buffered data to output stream `Stream'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: flush_output/0:
     `flush_output'

     Behaves like `current_output(S), flush_output(S)'




 - PREDICATE: clearerr/1:
     `clearerr(Stream)'

     Clear the end-of-file and error indicators for input stream
     `Stream'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: current_stream/3:
     `current_stream(Filename,Mode,Stream)'

     `Stream' is a stream which was opened in mode `Mode' and which
     is connected to the absolute file name `Filename' (an atom) or
     to the file descriptor `Filename' (an integer). This predicate
     can be used for enumerating all currently open streams through
     backtracking.

     *Usage 3:*
        - _Calls should, and exit will be compatible with:_

          `Filename' is an atom.   (`basic_props:atm/1')

          `Mode' is an opening mode ('read', 'write' or 'append').
          (`streams_basic:io_mode/1')

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Filename' is an atom.   (`basic_props:atm/1')

          `Mode' is an opening mode ('read', 'write' or 'append').
          (`streams_basic:io_mode/1')

          `Stream' is an open stream.   (`streams_basic:stream/1')

     *Usage 4:*
        - _Calls should, and exit will be compatible with:_

          `Filename' is an integer.   (`basic_props:int/1')

          `Mode' is an opening mode ('read', 'write' or 'append').
          (`streams_basic:io_mode/1')

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Filename' is an integer.   (`basic_props:int/1')

          `Mode' is an opening mode ('read', 'write' or 'append').
          (`streams_basic:io_mode/1')

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: stream_code/2:
     `stream_code(Stream,StreamCode)'

     `StreamCode' is the file descriptor (an integer) corresponding
     to the Prolog stream `Stream'.

     *Usage 3:*
        - _Calls should, and exit will be compatible with:_

          `StreamCode' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `StreamCode' is an integer.   (`basic_props:int/1')

     *Usage 4:*
        - _The following properties should hold at call time:_

          `Stream' is a free variable.   (`term_typing:var/1')

          `StreamCode' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: absolute_file_name/2:
     `absolute_file_name(RelFileSpec,AbsFileSpec)'

     If `RelFileSpec' is an absolute pathname then do an absolute
     lookup. If `RelFileSpec' is a relative pathname then prefix the
     name with the name of the current directory and do an absolute
     lookup. If `RelFileSpec' is a path alias, perform the lookup
     following the path alias rules (see `sourcename/1'). In all
     cases: if a matching file with suffix `.pl' exists, then
     `AbsFileSpec' will be unified with this file. Failure to open a
     file normally causes an exception. The behaviour can be
     controlled by the `fileerrors' prolog flag.

     *Usage 1:* `absolute_file_name(+RelFileSpec,-AbsFileSpec)'
        - _Description:_ `AbsFileSpec' is the absolute name (with
          full path) of `RelFileSpec'.

        - _Calls should, and exit will be compatible with:_

          `+RelFileSpec' is a source name.
          (`streams_basic:sourcename/1')

          `-AbsFileSpec' is an atom.   (`basic_props:atm/1')

     *Usage 2:* `absolute_file_name(RelFileSpec,AbsFileSpec)'
        - _Description:_ `AbsFileSpec' is the absolute name (with
          full path) of `RelFileSpec'.

        - _Calls should, and exit will be compatible with:_

          `RelFileSpec' is a source name.
          (`streams_basic:sourcename/1')

          `AbsFileSpec' is an atom.   (`basic_props:atm/1')

        - _The following properties should hold at call time:_

          `RelFileSpec' is currently a term which is not a free
          variable.   (`term_typing:nonvar/1')

          `AbsFileSpec' is a free variable.   (`term_typing:var/1')



 - PREDICATE: absolute_file_name/7:
     `absolute_file_name(Spec,Opt,Suffix,CurrDir,AbsFile,AbsBase,AbsDir)'

     `AbsFile' is the absolute name (with full path) of `Spec', which
     has an optional first suffix `Opt' and an optional second suffix
     `Suffix', when the current directory is `CurrDir'. `AbsBase' is
     the same as `AbsFile', but without the second suffix, and
     `AbsDir' is the absolute path of the directory where `AbsFile'
     is. The Ciao compiler invokes this predicate with `Opt'=`'_opt''
     and `Suffix'=`'.pl'' when searching source files.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Spec' is a source name.   (`streams_basic:sourcename/1')

          `Opt' is an atom.   (`basic_props:atm/1')

          `Suffix' is an atom.   (`basic_props:atm/1')

          `CurrDir' is an atom.   (`basic_props:atm/1')

          `AbsFile' is a free variable.   (`term_typing:var/1')

          `AbsBase' is a free variable.   (`term_typing:var/1')

          `AbsDir' is a free variable.   (`term_typing:var/1')

        - _The following properties hold upon exit:_

          `AbsFile' is an atom.   (`basic_props:atm/1')

          `AbsBase' is an atom.   (`basic_props:atm/1')

          `AbsDir' is an atom.   (`basic_props:atm/1')



 - REGTYPE: sourcename/1:
     A source name is a flexible way of referring to a concrete file.
     A source name is either a relative or absolute filename given as:

        * an atom, or

        * a unary functor (which represents a _path alias_, see
          below) applied to a _relative_ path, the latter being given
          as an atom.


     In all cases certain filename extensions (e.g., `.pl') can be
     implicit. In the first form above, file names can be relative to
     the current directory. Also, file names beginning with `~' or
     `$' are treated specially. For example,

    `'~/ciao/sample.pl''
          is equivalent to `'/home/staff/herme/ciao/sample.pl'', if
          `/home/staff/herme' is the user's home directory. (This is
          also equivalent to `'$HOME/ciao/sample.pl'' as explained
          below.)

    `'~bardo/prolog/sample.pl''
          is equivalent to `'/home/bardo/prolog/sample.pl'', if
          `/home/bardo' is bardo's home directory.

    `'$UTIL/sample.pl''
          is equivalent to `'/usr/local/src/utilities/sample.pl'', if
          `/usr/local/src/utilities' is the value of the environment
          variable `UTIL'.

     The second form allows using path aliases. Such aliases allow
     refering to files not with absolute file system paths but with
     paths which are relative to predefined (or user-defined)
     abstract names. For example, given the path alias `myutils'
     which has been defined to refer to path
     `'/home/bardo/utilities'', if that directory contains the file
     `stuff.pl' then the term `myutils(stuff)' in a `use_module/1'
     declaration would refer to the file
     `'/home/bardo/utilities/stuff.pl'' (the `.pl' extension is
     implicit in the `use_module/1' declaration). As a special case,
     if that directory contains a subdirectory named `stuff' which in
     turn contains the file `stuff.pl', the same term would refer to
     the file `'/home/bardo/utilities/stuff/stuff.pl''. If a path
     alias is related to several paths, all paths are scanned in
     sequence until a match is found. For information on predefined
     path aliases or how to define new path aliases, see
     `file_search_path/2'.

     *Usage 1:* `sourcename(F)'
        - _Description:_ `F' is a source name.

     *Usage 2:* `sourcename(F)'
        - _Description:_ `F' is a source name.



 - REGTYPE: stream/1:
     Streams correspond to the file pointers used at the operating
     system level, and usually represent opened files. There are four
     special streams which correspond with the operating system
     standard streams:
    `user_input'
          The standard input stream, i.e. the terminal, usually.

    `user_output'
          The standard output stream, i.e. the terminal, usually.

    `user_error'
          The standard error stream.

    `user'
          The standard input or output stream, depending on context.

     *Usage 1:* `stream(S)'
        - _Description:_ `S' is an open stream.

     *Usage 2:* `stream(S)'
        - _Description:_ `S' is an open stream.



 - REGTYPE: stream_alias/1:
     *Usage 1:* `stream_alias(S)'
        - _Description:_ `S' is the alias of an open stream, i.e., an
          atom which represents a stream at Prolog level.

     *Usage 2:* `stream_alias(S)'
        - _Description:_ `S' is the alias of an open stream, i.e., an
          atom which represents a stream at Prolog level.



 - REGTYPE: io_mode/1:
     Can have the following values:
    `read'
          Open the file for input.

    `write'
          Open the file for output. The file is created if it does
          not already exist, the file will otherwise be truncated.

    `append'
          Open the file for output. The file is created if it does
          not already exist, the file will otherwise be appended to.

     *Usage 1:* `io_mode(M)'
        - _Description:_ `M' is an opening mode ('read', 'write' or
          'append').

     *Usage 2:* `io_mode(M)'
        - _Description:_ `M' is an opening mode ('read', 'write' or
          'append').




File: ciao.info,  Node: Documentation on multifiles (streams_basic),  Prev: Documentation on exports (streams_basic),  Up: Basic file/stream handling

Documentation on multifiles (`streams_basic')
=============================================

 - PREDICATE: file_search_path/2:
     `file_search_path(Alias,Path)'

     The path alias `Alias' is linked to path `Path'. Both arguments
     must be atoms. New facts (or clauses) of this predicate can be
     asserted to define new path aliases. Predefined path aliases in
     Ciao are:

    `library'
          Initially points to all Ciao library paths. See
          `library_directory/1'.

    `engine'
          The path of the Ciao engine builtins.

    `.'
          The current path (`'.'').

     The predicate is _multifile_.

     The predicate is of type _dynamic_.




 - PREDICATE: library_directory/1:
     `library_directory(Path)'

     `Path' is a library path (a path represented by the path alias
     `library'). Predefined library paths in Ciao are
     `'$CIAOLIB/lib'', `'$CIAOLIB/library'', and
     `'$CIAOLIB/contrib'', given that `$CIAOLIB' is the path of the
     root ciao library directory. More library paths can be defined
     by asserting new facts (or clauses) of this predicate.

     The predicate is _multifile_.

     The predicate is of type _dynamic_.





File: ciao.info,  Node: Basic input/output,  Next: Exception handling,  Prev: Basic file/stream handling,  Up: Top

Basic input/output
******************

   *Author(s):* Daniel Cabeza, Mats Carlsson.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   This module provides predicates for character input/output and for
canonical term output. From the ISO-Prolog predicates for character
input/output, only the `_code' versions are provided, the rest are
given by `library(iso_byte_char)', using these. Most predicates are
provided in two versions: one that specifies the input or output
stream as the first argument and a second which omits this argument
and uses the current input or output stream.

* Menu:

* Usage and interface (io_basic)::
* Documentation on exports (io_basic)::


File: ciao.info,  Node: Usage and interface (io_basic),  Next: Documentation on exports (io_basic),  Prev: Basic input/output,  Up: Basic input/output

Usage and interface (`io_basic')
================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `get_code/2', `get_code/1', `get1_code/2', `get1_code/1',
          `peek_code/2', `peek_code/1', `skip_code/2', `skip_code/1',
          `put_code/2', `put_code/1', `nl/1', `nl/0', `tab/2',
          `tab/1', `code_class/2', `getct/2', `getct1/2', `display/2',
          `display/1', `displayq/2', `displayq/1'.




File: ciao.info,  Node: Documentation on exports (io_basic),  Prev: Usage and interface (io_basic),  Up: Basic input/output

Documentation on exports (`io_basic')
=====================================

 - PREDICATE: get_code/2:
     `get_code(Stream,Code)'

     Reads from `Stream' the next character and unifies `Code' with
     its character code. At end of stream, unifies `Code' with the
     integer -1.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: get_code/1:
     `get_code(Code)'

     Behaves like `current_input(S), get_code(S,Code)'.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: get1_code/2:
     `get1_code(Stream,Code)'

     Reads from `Stream' the next non-layout character (see
     `code_class/2') and unifies `Code' with its character code. At
     end of stream, unifies `Code' with the integer -1.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: get1_code/1:
     `get1_code(Code)'

     Behaves like `current_input(S), get1_code(S,Code)'.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: peek_code/2:
     `peek_code(Stream,Code)'

     Unifies `Code' with the character code of the next character of
     `Stream', leaving the stream position unaltered. At end of
     stream, unifies `Code' with the integer -1.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: peek_code/1:
     `peek_code(Code)'

     Behaves like `current_input(S), peek_code(S,Code)'.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: skip_code/2:
     `skip_code(Stream,Code)'

     Skips just past the next character code `Code' from `Stream'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: skip_code/1:
     `skip_code(Code)'

     Behaves like `current_input(S), skip_code(S,Code)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: put_code/2:
     `put_code(Stream,Code)'

     Outputs to `Stream' the character corresponding to character
     code `Code'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: put_code/1:
     `put_code(Code)'

     Behaves like `current_output(S), put_code(S,Code)'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: nl/1:
     `nl(Stream)'

     Outputs a newline character to `Stream'. Equivalent to
     `put_code(Stream, 0'\n)'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: nl/0:
     `nl'

     Behaves like `current_output(S), nl(S)'.




 - PREDICATE: tab/2:
     `tab(Stream,Num)'

     Outputs `Num' spaces to `Stream'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

          `Num' is an integer.   (`basic_props:int/1')



 - PREDICATE: tab/1:
     `tab(Num)'

     Behaves like `current_output(S), tab(S,Num)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Num' is an integer.   (`basic_props:int/1')



 - PREDICATE: code_class/2:
     `code_class(Code,Class)'

     Unifies `Class' with an integer corresponding to the lexical
     class of the character whose code is `Code', with the following
     correspondence:
              0 - layout (includes space, newline, tab)
              1 - small letter
              2 - capital letter (including '_')
              3 - digit
              4 - graphic (includes #$&*+-./:<=>?@^\`~ )
              5 - punctuation (includes !;"'%(),[]{|} )
     Note that in ISO-Prolog the back quote ``' is a punctuation
     character, whereas in Ciao it is a graphic character. Thus, if
     compatibility with ISO-Prolog is desired, the programmer should
     not use this character in unquoted names.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Class' is an integer.   (`basic_props:int/1')

        - _The following properties should hold at call time:_

          `Code' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Class' is an integer.   (`basic_props:int/1')



 - PREDICATE: getct/2:
     `getct(Code,Type)'

     Reads from the current input stream the next character, unifying
     `Code' with its character code, and `Type' with its lexical
     class. At end of stream, unifies both `Code' and `Type' with the
     integer -1. Equivalent to
             get(Code), (Code = -1 -> Type = -1 ; code_class(Code,Type))

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

          `Type' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')

          `Type' is an integer.   (`basic_props:int/1')



 - PREDICATE: getct1/2:
     `getct1(Code,Type)'

     Reads from the current input stream the next non-layout
     character, unifying `Code' with its character code, and `Type'
     with its lexical class (which will be nonzero). At end of
     stream, unifies both `Code' and `Type' with the integer -1.
     Equivalent to
             get1(Code), (Code = -1 -> Type = -1 ; code_class(Code,Type))

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Code' is an integer.   (`basic_props:int/1')

          `Type' is an integer.   (`basic_props:int/1')

        - _The following properties hold upon exit:_

          `Code' is an integer.   (`basic_props:int/1')

          `Type' is an integer.   (`basic_props:int/1')



 - PREDICATE: display/2:
     `display(Stream,Term)'

     Displays `Term' onto `Stream'. Lists are output using list
     notation, the other compound terms are output in functional
     notation. Similar to `write_term(Stream, Term,
     [ignore_ops(ops)])', except that curly bracketed notation is not
     used with `{}/1', and the `write_strings' flag is not honored.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold globally:_

          `Term' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PREDICATE: display/1:
     `display(Term)'

     Behaves like `current_output(S), display(S,Term)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold globally:_

          `Term' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PREDICATE: displayq/2:
     `displayq(Stream,Term)'

     Similar to `display(Stream, Term)', but atoms and functors that
     can't be read back by `read_term/3' are quoted. Thus, similar to
     `write_term(Stream, Term, [quoted(true), ignore_ops(ops)])',
     with the same exceptions as `display/2'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Stream' is an open stream.   (`streams_basic:stream/1')

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold globally:_

          `Term' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - PREDICATE: displayq/1:
     `displayq(Term)'

     Behaves like `current_output(S), displayq(S,Term)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties hold globally:_

          `Term' is not further instantiated.
          (`basic_props:not_further_inst/2')




File: ciao.info,  Node: Exception handling,  Next: Changing system behaviour and various flags,  Prev: Basic input/output,  Up: Top

Exception handling
******************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#107 (2001/5/31, 14:12:58 CEST)

   This module includes predicates related to exceptions, which alter
the normal flow of Prolog.

* Menu:

* Usage and interface (exceptions)::
* Documentation on exports (exceptions)::


File: ciao.info,  Node: Usage and interface (exceptions),  Next: Documentation on exports (exceptions),  Prev: Exception handling,  Up: Exception handling

Usage and interface (`exceptions')
==================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `catch/3', `intercept/3', `throw/1', `halt/0', `halt/1'.




File: ciao.info,  Node: Documentation on exports (exceptions),  Prev: Usage and interface (exceptions),  Up: Exception handling

Documentation on exports (`exceptions')
=======================================

 - PREDICATE: catch/3:
     `catch(Goal,Error,Handler)'

     Executes `Goal'. If an exception is raised during its execution,
     `Error' is unified with the exception, and if the unification
     succeeds, the entire execution derived from `Goal' is aborted,
     and `Handler' is executed. The execution resumes with the
     continuation of the catch/3 call. For example, given the code
          p(X) :- throw(error), display('---').
          p(X) :- display(X).
     the execution of "`catch(p(0), E, display(E)), display(.),
     fail.'" results in the output "`error.'".

     _Meta-predicate_ with arguments: `catch(goal,?,goal)'.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Error' is any term.   (`basic_props:term/1')

        - _The following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Handler' is a term which represents a goal, i.e., an atom
          or a structure.   (`basic_props:callable/1')

        - _The following properties hold upon exit:_

          `Error' is any term.   (`basic_props:term/1')



 - PREDICATE: intercept/3:
     `intercept(Goal,Error,Handler)'

     Executes `Goal'. If an exception is raised during its execution,
     `Error' is unified with the exception, and if the unification
     succeeds, `Handler' is executed and then the execution resumes
     after the predicate which produced the exception. Note the
     difference with builtin `catch/3', given the same code defined
     there, the execution of "`intercept(p(0), E, display(E)),
     display(.), fail.'" results in the output "`error---.0.'".

     _Meta-predicate_ with arguments: `intercept(goal,?,goal)'.

     *Usage 2:*
        - _Calls should, and exit will be compatible with:_

          `Error' is any term.   (`basic_props:term/1')

        - _The following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Handler' is a term which represents a goal, i.e., an atom
          or a structure.   (`basic_props:callable/1')

        - _The following properties hold upon exit:_

          `Error' is any term.   (`basic_props:term/1')



 - PREDICATE: throw/1:
     `throw(Ball)'

     Raises an error, throwing the exception `Ball', to be caught by
     an ancestor `catch/3' or `intercept/3'. The closest matching
     ancestor is chosen. Exceptions are also thrown by other builtins
     in case of error.

     *Usage 1:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Ball' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `Ball' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PREDICATE: halt/0:
     `halt'

     Halt the system, exiting to the invoking shell.




 - PREDICATE: halt/1:
     `halt(Code)'

     Halt the system, exiting to the invoking shell, returning exit
     code `Code'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `Code' is an integer.   (`basic_props:int/1')



 - PREDICATE: abort/0:
     `abort'

     Abort the current execution.





File: ciao.info,  Node: Changing system behaviour and various flags,  Next: Fast/concurrent update of facts,  Prev: Exception handling,  Up: Top

Changing system behaviour and various flags
*******************************************

   *Author(s):* Daniel Cabeza, Mats Carlsson.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#213 (2002/5/14, 18:11:29 CEST)

   Flags define some parameters of the system and control the
behavior of system or library predicates. Each flag has a name and an
associated predefined value, and except some system flags which are
fixed in general their associated value is changeable. Predefined
flags in the system are:

`version'
     The Ciao version, as a term `ciao'(`Version',`Patch'). `Version'
     is a floating point number, `Patch' is an integer. Unchangeable.

`argv'
     Its value is a list of atoms representing the program arguments
     supplied when the current executable was invoked. This is the
     value to which is instantiated the argument of the `main/1'
     predicate at executable startup. Unchangeable.

`bounded'
     It is `false', to denote that the range of integers can be
     considered infinite (but see `int/1'). Unchangeable. < * ISO * >

`fileerrors'
     If `on', predicates handling files give errors (throw
     exceptions) when a file is inexistent or an operation is not
     allowed. If `off', fail in that conditions. Initially `on'.

`gc'
     Controls whether garbage collection is done. May be `on'
     (default) or `off'.

`gc_margin'
     An integer `Margin'. If less than `Margin' kilobytes are
     reclaimed in a garbage collection then the size of the garbage
     collected area should be increased. Also, no garbage collection
     is attempted unless the garbage collected area has at least
     `Margin' kilobytes. Initially 500.

`gc_trace'
     Governs garbage collection trace messages. An element off
     `[on,off,terse,verbose]'. Initially `off'.

`integer_rounding_function'
     It is `toward_zero', so that `-1 =:= -3//2' succeeds.
     Unchangeable. < * ISO * >

`max_arity'
     It is 255, so that no compound term (or predicate) can have more
     than this number of arguments. Unchangeable. < * ISO * >

`quiet'
     Controls which messages issued using `io_aux' are actually
     written. As the system uses that library to report its messages,
     this flag controls the _verbosity_ of the system. Possible
     states of the flag are:

    `on'
          No messages are reported.

    `error'
          Only error messages are reported.

    `warning'
          Only error and warning messages are reported.

    `off'
          All messages are reported, except debug messages. This is
          the default state.

    `debug'
          All messages, including debug messages, are reported. This
          is only intended for the system implementators.

`unknown'
     Controls action on calls to undefined predicates. The possible
     states of the flag are:

    `error'
          An error is thrown with the error term
          `existence_error(procedure, F/A)'.

    `fail'
          The call simply fails.

    `warning'
          A warning is written and the call fails.

     The state is initially `error'. < * ISO * >

* Menu:

* Usage and interface (prolog_flags)::
* Documentation on exports (prolog_flags)::
* Documentation on multifiles (prolog_flags)::


File: ciao.info,  Node: Usage and interface (prolog_flags),  Next: Documentation on exports (prolog_flags),  Prev: Changing system behaviour and various flags,  Up: Changing system behaviour and various flags

Usage and interface (`prolog_flags')
====================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `set_prolog_flag/2', `current_prolog_flag/2',
          `prolog_flag/3', `push_prolog_flag/2', `pop_prolog_flag/1',
          `prompt/2', `gc/0', `nogc/0', `fileerrors/0',
          `nofileerrors/0'.

        - _Multifiles:_

          `define_flag/3'.




File: ciao.info,  Node: Documentation on exports (prolog_flags),  Next: Documentation on multifiles (prolog_flags),  Prev: Usage and interface (prolog_flags),  Up: Changing system behaviour and various flags

Documentation on exports (`prolog_flags')
=========================================

 - PREDICATE: set_prolog_flag/2:
     `set_prolog_flag(FlagName,Value)'

     Set existing flag `FlagName' to `Value'.

     *Usage 2:* < * ISO * >
        - _The following properties should hold at call time:_

          `FlagName' is an atom.   (`basic_props:atm/1')

          `Value' is any term.   (`basic_props:term/1')



 - PREDICATE: current_prolog_flag/2:
     `current_prolog_flag(FlagName,Value)'

     `FlagName' is an existing flag and `Value' is the value
     currently associated with it.

     *Usage 2:* < * ISO * >
        - _Calls should, and exit will be compatible with:_

          `FlagName' is an atom.   (`basic_props:atm/1')

          `Value' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `FlagName' is an atom.   (`basic_props:atm/1')

          `Value' is any term.   (`basic_props:term/1')



 - PREDICATE: prolog_flag/3:
     `prolog_flag(FlagName,OldValue,NewValue)'

     `FlagName' is an existing flag, unify `OldValue' with the value
     associated with it, and set it to new value `NewValue'.

     *Usage 2:* `prolog_flag(?FlagName,-OldValue,-NewValue)'
        - _Description:_ Same as `current_prolog_flag(`FlagName',
          `OldValue')'

        - _The following properties should hold at call time:_

          `FlagName' is an atom.   (`basic_props:atm/1')

          The terms `OldValue' and `NewValue' are strictly identical.
          (`term_compare:== /2')

     *Usage 3:*
        - _Calls should, and exit will be compatible with:_

          `FlagName' is an atom.   (`basic_props:atm/1')

          `OldValue' is any term.   (`basic_props:term/1')

        - _The following properties should hold at call time:_

          `NewValue' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `FlagName' is an atom.   (`basic_props:atm/1')

          `OldValue' is any term.   (`basic_props:term/1')

     *Usage 4:* `prolog_flag(FlagName,OldValue,NewValue)'
        - _Description:_ Same as `current_prolog_flag(`FlagName',
          `OldValue')'

        - _The following properties should hold at call time:_

          `OldValue' is a free variable.   (`term_typing:var/1')

          `NewValue' is a free variable.   (`term_typing:var/1')

          `FlagName' is an atom.   (`basic_props:atm/1')

          The terms `OldValue' and `NewValue' are strictly identical.
          (`term_compare:== /2')



 - PREDICATE: push_prolog_flag/2:
     `push_prolog_flag(Flag,NewValue)'

     Same as `set_prolog_flag/2', but storing current value of `Flag'
     to restore it with `pop_prolog_flag/1'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Flag' is an atom.   (`basic_props:atm/1')

          `NewValue' is any term.   (`basic_props:term/1')



 - PREDICATE: pop_prolog_flag/1:
     `pop_prolog_flag(Flag)'

     Restore the value of `Flag' previous to the last non-canceled
     `push_prolog_flag/2' on it.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Flag' is an atom.   (`basic_props:atm/1')



 - PREDICATE: prompt/2:
     `prompt(Old,New)'

     Unify `Old' with the current prompt for reading, change it to
     `New'.

     *Usage 2:* `prompt(Old,New)'
        - _Description:_ Unify `Old' with the current prompt for
          reading without changing it.

        - _The following properties should hold at call time:_

          `Old' is a free variable.   (`term_typing:var/1')

          `New' is a free variable.   (`term_typing:var/1')

          The terms `Old' and `New' are strictly identical.
          (`term_compare:== /2')

        - _The following properties hold upon exit:_

          `Old' is an atom.   (`basic_props:atm/1')

          `New' is an atom.   (`basic_props:atm/1')

     *Usage 3:*
        - _Calls should, and exit will be compatible with:_

          `Old' is an atom.   (`basic_props:atm/1')

        - _The following properties should hold at call time:_

          `New' is an atom.   (`basic_props:atm/1')

        - _The following properties hold upon exit:_

          `Old' is an atom.   (`basic_props:atm/1')

     *Usage 4:* `prompt(Old,New)'
        - _Description:_ Unify `Old' with the current prompt for
          reading without changing it.

        - _The following properties should hold at call time:_

          `Old' is a free variable.   (`term_typing:var/1')

          `New' is a free variable.   (`term_typing:var/1')

          The terms `Old' and `New' are strictly identical.
          (`term_compare:== /2')

        - _The following properties hold upon exit:_

          `Old' is an atom.   (`basic_props:atm/1')

          `New' is an atom.   (`basic_props:atm/1')



 - PREDICATE: gc/0:
     *Usage 1:*
        - _Description:_ Enable garbage collection. Equivalent to
          `set_prolog_flag(gc, on)'

     *Usage 2:*
        - _Description:_ Enable garbage collection. Equivalent to
          `set_prolog_flag(gc, on)'



 - PREDICATE: nogc/0:
     *Usage 1:*
        - _Description:_ Disable garbage collection. Equivalent to
          `set_prolog_flag(gc, off)'

     *Usage 2:*
        - _Description:_ Disable garbage collection. Equivalent to
          `set_prolog_flag(gc, off)'



 - PREDICATE: fileerrors/0:
     *Usage 1:*
        - _Description:_ Enable reporting of file errors. Equivalent
          to `set_prolog_flag(fileerrors, on)'

     *Usage 2:*
        - _Description:_ Enable reporting of file errors. Equivalent
          to `set_prolog_flag(fileerrors, on)'



 - PREDICATE: nofileerrors/0:
     *Usage 1:*
        - _Description:_ Disable reporting of file errors. Equivalent
          to `set_prolog_flag(fileerrors, off)'

     *Usage 2:*
        - _Description:_ Disable reporting of file errors. Equivalent
          to `set_prolog_flag(fileerrors, off)'




File: ciao.info,  Node: Documentation on multifiles (prolog_flags),  Prev: Documentation on exports (prolog_flags),  Up: Changing system behaviour and various flags

Documentation on multifiles (`prolog_flags')
============================================

 - PREDICATE: define_flag/3:
     `define_flag(Flag,Values,Default)'

     New flags can be defined by writing facts of this predicate.
     `Flag' is the name of the new flag, `Values' defines the posible
     values for the flag (see below) and `Default' defines the
     predefined value associated with the flag (which should be
     compatible with `Values').

     The predicate is _multifile_.

     *Usage 1:* `define_flag(-atm,Values,-atm)'
        - _Description:_ Posible values for the flag are atoms.

          Example:
               :- multifile define_flag/3.
               define_flag(tmpdir, atom, '/tmp').

        - _Call and exit should be _compatible_ with:_

          The terms `Values' and `atom' are strictly identical.
          (`term_compare:== /2')

     *Usage 2:* `define_flag(-atm,Values,-int)'
        - _Description:_ Posible values for the flag are integers.

          Example:
               :- multifile define_flag/3.
               define_flag(max_connections, integer, 10).

        - _Call and exit should be _compatible_ with:_

          The terms `Values' and `integer' are strictly identical.
          (`term_compare:== /2')

     *Usage 3:* `define_flag(Flag,Values,Default)'
        - _Description:_ Posible values for the flag are the elements
          of `Values'.

          Example:
               :- multifile define_flag/3.
               define_flag(debug, [on,debug,trace,off], off).

        - _Call and exit should be _compatible_ with:_

          `Flag' is an atom.   (`basic_props:atm/1')

          `Values' is a list.   (`basic_props:list/1')

        - _The following properties should hold upon exit:_

          `Default' is an element of `Values'.
          (`basic_props:member/2')




File: ciao.info,  Node: Fast/concurrent update of facts,  Next: Extending the syntax,  Prev: Changing system behaviour and various flags,  Up: Top

Fast/concurrent update of facts
*******************************

   *Author(s):* Daniel Cabeza, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#95 (2001/5/2, 12:18:6 CEST)

   Prolog implementations traditionally implement the concept of
dynamic predicates: predicates which can be inspected or modified at
run-time, adding or deleting individual clauses. The power of this
feature comes at a cost: as new clause bodies can be arbitrarily
added to the program, new predicate calls can arise which are not
'visible' at compile-time, thus complicating global analysis and
optimization of the code. But it is the case that most of the time
what the programmer wants is simply to store data, with the purpose
of sharing it between search branches, predicates, or even execution
threads. In Ciao the concept of data predicate serves this purpose: a
data predicate is a predicate composed exclusively by facts, which
can be inspected, and dynamically added or deleted, at run-time.
Using data predicates instead of normal dynamic predicates brings
benefits in terms of speed, but above all makes the code much easier
to analyze automatically and thus allows better optimization.

   Also, a special kind of data predicates exists, _concurrent
predicates_, which can be used to communicate/synchronize among
different execution threads (see *Note Low-level
concurrency/multithreading primitives::).

   Data predicates must be declared through a `data/1' declaration.
Concurrent data predicates must be declared through a `concurrent/1'
declaration.

* Menu:

* Usage and interface (data_facts)::
* Documentation on exports (data_facts)::
* Documentation on internals (data_facts)::


File: ciao.info,  Node: Usage and interface (data_facts),  Next: Documentation on exports (data_facts),  Prev: Fast/concurrent update of facts,  Up: Fast/concurrent update of facts

Usage and interface (`data_facts')
==================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `asserta_fact/1', `asserta_fact/2', `assertz_fact/1',
          `assertz_fact/2', `current_fact/1', `current_fact/2',
          `retract_fact/1', `retractall_fact/1', `current_fact_nb/1',
          `retract_fact_nb/1', `close_predicate/1',
          `open_predicate/1', `set_fact/1', `erase/1'.




File: ciao.info,  Node: Documentation on exports (data_facts),  Next: Documentation on internals (data_facts),  Prev: Usage and interface (data_facts),  Up: Fast/concurrent update of facts

Documentation on exports (`data_facts')
=======================================

 - PREDICATE: asserta_fact/1:
     `asserta_fact(Fact)'

     `Fact' is added to the corresponding data predicate. The fact
     becomes the first clause of the predicate concerned.

     _Meta-predicate_ with arguments: `asserta_fact(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: asserta_fact/2:
     `asserta_fact(Fact,Ref)'

     Same as `asserta_fact/1', instantiating `Ref' to a unique
     identifier of the asserted fact.

     _Meta-predicate_ with arguments: `asserta_fact(fact,?)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Ref' is a free variable.   (`term_typing:var/1')

        - _The following properties hold upon exit:_

          `Ref' is a reference of a dynamic or data clause.
          (`data_facts:reference/1')



 - PREDICATE: assertz_fact/1:
     `assertz_fact(Fact)'

     `Fact' is added to the corresponding data predicate. The fact
     becomes the last clause of the predicate concerned.

     _Meta-predicate_ with arguments: `assertz_fact(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: assertz_fact/2:
     `assertz_fact(Fact,Ref)'

     Same as `assertz_fact/1', instantiating `Ref' to a unique
     identifier of the asserted fact.

     _Meta-predicate_ with arguments: `assertz_fact(fact,?)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Ref' is a free variable.   (`term_typing:var/1')

        - _The following properties hold upon exit:_

          `Ref' is a reference of a dynamic or data clause.
          (`data_facts:reference/1')



 - PREDICATE: current_fact/1:
     `current_fact(Fact)'

     Gives on backtracking all the facts defined as data or
     concurrent which unify with `Fact'. It is faster than calling
     the predicate explicitly, which do invoke the meta-interpreter.
     If the `Fact' has been defined as concurrent and has not been
     closed, `current_fact/1' will wait (instead of failing) for more
     clauses to appear after the last clause of `Fact' is returned.

     _Meta-predicate_ with arguments: `current_fact(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: current_fact/2:
     `current_fact(Fact,Ref)'

     `Fact' is a fact of a data predicate and `Ref' is its reference
     identifying it uniquely.

     _Meta-predicate_ with arguments: `current_fact(fact,?)'.

     *Usage 1:* `current_fact(+callable,-reference)'
        - _Description:_ Gives on backtracking all the facts defined
          as data which unify with `Fact', instantiating `Ref' to a
          unique identifier for each fact.

     *Usage 2:* `current_fact(?callable,+reference)'
        - _Description:_ Given `Ref', unifies `Fact' with the fact
          identified by it.

     *Usage 3:*
        - _Description:_ Gives on backtracking all the facts defined
          as data which unify with `Fact', instantiating `Ref' to a
          unique identifier for each fact.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Ref' is a free variable.   (`term_typing:var/1')

        - _The following properties hold upon exit:_

          `Ref' is a reference of a dynamic or data clause.
          (`data_facts:reference/1')

     *Usage 4:*
        - _Description:_ Given `Ref', unifies `Fact' with the fact
          identified by it.

        - _Calls should, and exit will be compatible with:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

        - _The following properties should hold at call time:_

          `Ref' is a reference of a dynamic or data clause.
          (`data_facts:reference/1')

        - _The following properties hold upon exit:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: retract_fact/1:
     `retract_fact(Fact)'

     Unifies `Fact' with the first matching fact of a data predicate,
     and then erases it. On backtracking successively unifies with
     and erases new matching facts. If `Fact' is declared as
     concurrent and is non- closed, `retract_fact/1' will wait for
     more clauses or for the closing of the predicate after the last
     matching clause has been removed.

     _Meta-predicate_ with arguments: `retract_fact(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: retractall_fact/1:
     `retractall_fact(Fact)'

     Erase all the facts of a data predicate unifying with `Fact'.
     Even if all facts are removed, the predicate continues to exist.

     _Meta-predicate_ with arguments: `retractall_fact(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: current_fact_nb/1:
     `current_fact_nb(Fact)'

     Behaves as `current_fact/1' but a fact is never waited on even
     if it is concurrent and non-closed.

     _Meta-predicate_ with arguments: `current_fact_nb(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: retract_fact_nb/1:
     `retract_fact_nb(Fact)'

     Behaves as `retract_fact/1', but never waits on a fact, even if
     it has been declared as concurrent and is non- closed.

     _Meta-predicate_ with arguments: `retract_fact_nb(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: close_predicate/1:
     `close_predicate(Pred)'

     Changes the behavior of the predicate `Pred' if it has been
     declared as a concurrent predicate: calls to this predicate will
     fail (instead of wait) if no more clauses of `Pred' are
     available.

     _Meta-predicate_ with arguments: `close_predicate(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Pred' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: open_predicate/1:
     `open_predicate(Pred)'

     Reverts the behavior of concurrent predicate `Pred' to waiting
     instead of failing if no more clauses of `Pred' are available.

     _Meta-predicate_ with arguments: `open_predicate(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Pred' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: set_fact/1:
     `set_fact(Fact)'

     Sets `Fact' as the unique fact of the corresponding data
     predicate.

     _Meta-predicate_ with arguments: `set_fact(fact)'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: erase/1:
     `erase(Ref)'

     Deletes the clause referenced by `Ref'.

     *Usage 2:*
        - _The following properties should hold at call time:_

          `Ref' is a reference of a dynamic or data clause.
          (`data_facts:reference/1')




File: ciao.info,  Node: Documentation on internals (data_facts),  Prev: Documentation on exports (data_facts),  Up: Fast/concurrent update of facts

Documentation on internals (`data_facts')
=========================================

 - DECLARATION: data/1:
     *Usage:* :- `data Predicates'.
        - _Description:_ Defines each predicate in `Predicates' as a
          data predicate. If a predicate is defined data in a file,
          it must be defined data in every file containing clauses
          for that predicate. The directive should precede all
          clauses of the affected predicates. This directive is
          defined as a prefix operator in the compiler.

        - _The following properties hold at call time:_

          `Predicates' is a sequence or list of `predname's.
          (`basic_props:sequence_or_list/2')



 - DECLARATION: concurrent/1:
     *Usage:* :- `concurrent Predicates'.
        - _Description:_ Defines each predicate in `Predicates' as a
          concurrent predicate. If a predicate is defined concurrent
          in a file, it must be defined concurrent in every file
          containing clauses for that predicate. The directive should
          precede all clauses of the affected predicates. This
          directive is defined as a prefix operator in the compiler.

        - _The following properties hold at call time:_

          `Predicates' is a sequence or list of `predname's.
          (`basic_props:sequence_or_list/2')



 - REGTYPE: reference/1:
     *Usage:* `reference(R)'
        - _Description:_ `R' is a reference of a dynamic or data
          clause.




File: ciao.info,  Node: Extending the syntax,  Next: Message printing primitives,  Prev: Fast/concurrent update of facts,  Up: Top

Extending the syntax
********************

   *Author(s):* Daniel Cabeza.

   This chapter documents the builtin directives in Ciao for
extending the syntax of source files. Note that the ISO-Prolog
directive `char_conversion/2' is not implemented, since Ciao does not
(yet) have a character conversion table.

* Menu:

* Usage and interface (syntax_extensions)::
* Documentation on internals (syntax_extensions)::


File: ciao.info,  Node: Usage and interface (syntax_extensions),  Next: Documentation on internals (syntax_extensions),  Prev: Extending the syntax,  Up: Extending the syntax

Usage and interface (`syntax_extensions')
=========================================

   * *Library usage:*

     These directives are builtin in Ciao, so nothing special has to
     be done to use them.


File: ciao.info,  Node: Documentation on internals (syntax_extensions),  Prev: Usage and interface (syntax_extensions),  Up: Extending the syntax

Documentation on internals (`syntax_extensions')
================================================

 - DECLARATION: op/3:
     *Usage:* :- `op(Priority,Op_spec,Operator)'.  < * ISO * >
        - _Description:_ Updates the operator table for reading the
          terms in the rest of the current text, in the same way as
          the builtin `op/3' does. Its scope is local to the current
          text. Usually included in package files.

        - _The following properties hold at call time:_

          `Priority' is an integer.   (`basic_props:int/1')

          `Op_spec' specifies the type and associativity of an
          operator.   (`basic_props:operator_specifier/1')

          `Operator' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: new_declaration/1:
     *Usage:* :- `new_declaration(Predicate)'.
        - _Description:_ Declares `Predicate' to be a valid
          declaration in the rest of the current text. Such
          declarations are simply ignored by the compiler or top
          level, but can be used by other code processing programs
          such as an automatic documentator. Also, they can easily
          translated into standard code (a set of facts and/or rules)
          by defining a suitable expansion (e.g., by
          `add_sentence_trans/1', etc.). This is tipically done in
          package files.

          Equivalent to `new_declaration(Predicate, off)'.

        - _The following properties hold at call time:_

          `Predicate' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')



 - DECLARATION: new_declaration/2:
     *Usage:* :- `new_declaration(Predicate,In_Itf)'.
        - _Description:_ Declares `Predicate' to be a valid
          declaration in the rest of the current text. Such
          declarations will be included in the interface file for
          this file if `In_Itf' is 'on', not if it is 'off'.
          Including such declarations in interface files makes them
          visible while processing other modules which make use of
          this one.

        - _The following properties hold at call time:_

          `Predicate' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')

          `In_Itf' is 'on' or 'off'  (`syntax_extensions:switch/1')



 - DECLARATION: load_compilation_module/1:
     *Usage:* :- `load_compilation_module(File)'.
        - _Description:_ Loads code defined in `File' into the
          compiler, usually including predicates which define
          translations of terms, for use with the declarations
          `add_sentence_trans/1' and similar ones. Normally included
          in package files.

        - _The following properties hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')



 - DECLARATION: add_sentence_trans/1:
     *Usage:* :- `add_sentence_trans(Predicate)'.
        - _Description:_ Starts a translation, defined by
          `Predicate', of the terms read by the compiler in the rest
          of the current text. For each subsequent term read by the
          compiler, the translation predicate is called to obtain a
          new term which will be used by the compiler as if it where
          the term present in the file. If the call fails, the term
          is used as such. A list may be returned also, to translate
          a single term into several terms. Before calling the
          translation predicate with actual program terms, it is
          called with an input of `0' to give an opportunity of
          making initializations for the module, discarding the
          result (note that normally a 0 could not be there).
          `Predicate' must be exported by a module previously loaded
          with a `load_compilation_module/1' declaration. Normally
          included in package files.

        - _The following properties hold at call time:_

          `Predicate' is a translation predicate spec (has arity 2 or
          3).   (`syntax_extensions:translation_predname/1')



 - DECLARATION: add_term_trans/1:
     *Usage:* :- `add_term_trans(P)'.
        - _Description:_ Starts a translation, defined by
          `Predicate', of the terms and sub-terms read by the
          compiler in the rest of the current text. This translation
          is performed after all translations defined by
          `add_sentence_trans/1' are done. For each subsequent term
          read by the compiler, and recursively any subterm included,
          the translation predicate is called to possibly obtain a
          new term to replace the old one. Care must be taken of not
          introducing an endless loop of translations. `Predicate'
          must be exported by a module previously loaded with a
          `load_compilation_module/1' declaration. Normally included
          in package files.

        - _The following properties hold at call time:_

          `P' is a translation predicate spec (has arity 2 or 3).
          (`syntax_extensions:translation_predname/1')



 - DECLARATION: add_goal_trans/1:
     *Usage:* :- `add_goal_trans(Predicate)'.
        - _Description:_ Declares a translation, defined by
          `Predicate', of the goals present in the clauses of the
          current text. This translation is performed after all
          translations defined by `add_sentence_trans/1' and
          `add_term_trans/1' are done. For each clause read by the
          compiler, the translation predicate is called with each
          goal present in the clause to possibly obtain other goal to
          substitute the original one, and the translation is
          subsequently applied to the resulting goal. Care must be
          taken of not introducing an endless loop of translations.
          `Predicate' must be exported by a module previously loaded
          with a `load_compilation_module/1' declaration. Bear in
          mind that this type of translation noticeably slows down
          compilation. Normally included in package files.

        - _The following properties hold at call time:_

          `Predicate' is a translation predicate spec (has arity 2 or
          3).   (`syntax_extensions:translation_predname/1')



 - DECLARATION: add_clause_trans/1:
     *Usage:* :- `add_clause_trans(Predicate)'.
        - _Description:_ Declares a translation, defined by
          `Predicate', of the clauses of the current text. The
          translation is performed before `add_goal_trans/1'
          translations but after `add_sentence_trans/1' and
          `add_term_trans/1' translations. The usefulness of this
          translation is that information of the interface of related
          modules is available when it is performed. For each clause
          read by the compiler, the translation predicate is called
          with the first argument instantiated to a structure
          `clause(Head,Body)', and the predicate must return in the
          second argument a similar structure, without changing the
          functor in `Head' (or fail, in which case the clause is
          used as is). Before executing the translation predicate
          with actual clauses it is called with an input of
          `clause(0,0)', discarding the result.

        - _The following properties hold at call time:_

          `Predicate' is a translation predicate spec (has arity 2 or
          3).   (`syntax_extensions:translation_predname/1')



 - REGTYPE: translation_predname/1:
     A translation predicate is a predicate of arity 2 or 3 used to
     make compile-time translations. The compiler invokes a
     translation predicate instantiating its first argument with the
     item to be translated, and if the predicate is of arity 3 its
     third argument with the name of the module where the translation
     is done. If the call is successful, the second argument is used
     as if that item were in the place of the original, else the
     original item is used.

     *Usage:* `translation_predname(P)'
        - _Description:_ `P' is a translation predicate spec (has
          arity 2 or 3).




File: ciao.info,  Node: Message printing primitives,  Next: Attributed variables,  Prev: Extending the syntax,  Up: Top

Message printing primitives
***************************

   *Author(s):* Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   This module provides predicates for printing in a unified way
informational messages, and also for printing some terms in a
specific way.

* Menu:

* Usage and interface (io_aux)::
* Documentation on exports (io_aux)::
* Known bugs and planned improvements (io_aux)::


File: ciao.info,  Node: Usage and interface (io_aux),  Next: Documentation on exports (io_aux),  Prev: Message printing primitives,  Up: Message printing primitives

Usage and interface (`io_aux')
==============================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `message/2', `message_lns/4', `display_string/1'.




File: ciao.info,  Node: Documentation on exports (io_aux),  Next: Known bugs and planned improvements (io_aux),  Prev: Usage and interface (io_aux),  Up: Message printing primitives

Documentation on exports (`io_aux')
===================================

 - PREDICATE: message/2:
     `message(Type,Message)'

     Output to standard error `Message', which is of type `Type'. The
     `quiet' _prolog flag_ (see *Note Changing system behaviour and
     various flags::) controls which messages are actually output,
     depending on its type. Also, for `error', `warning' and `note'
     messages, a prefix is output which denotes the severity of the
     message. `Message' is an item or a list of items from this list:
    `$$(String)'
          `String' is a string, which is output with
          `display_string/1'.

    `''(Term)'
          `Term' is output quoted. If the module `write' is loaded,
          the term is output with `writeq/1', else with `displayq/1'.

    `~~(Term)'
          `Term' is output unquoted. If the module `write' is loaded,
          the term is output with `write/1', else with `display/1'.

    `[](Term)'
          `Term' is recursively output as a message, can be an item
          or a list of items from this list.

    `Term'
          Any other term is output with `display/1'.

     *Usage 1:* `message(Type,Message)'
        - _The following properties should hold at call time:_

          `Type' is an atom.   (`basic_props:atm/1')

          `Type' is an element of
          `[error,warning,note,message,debug]'.
          (`basic_props:member/2')

     *Usage 2:* `message(Type,Message)'
        - _The following properties should hold at call time:_

          `Type' is an atom.   (`basic_props:atm/1')

          `Type' is an element of
          `[error,warning,note,message,debug]'.
          (`basic_props:member/2')



 - PREDICATE: message_lns/4:
     `message_lns(Type,L0,L1,Message)'

     Output to standard error `Message', which is of type `Type', and
     occurs between lines `L0' and `L1'. This is the same as
     `message/2', but printing the lines where the message occurs in
     a unified way (this is useful because automatic tools such as
     the emacs mode know how to parse them).

     *Usage 1:* `message_lns(Type,L0,L1,Message)'
        - _The following properties should hold at call time:_

          `Type' is an atom.   (`basic_props:atm/1')

          `Type' is an element of
          `[error,warning,note,message,debug]'.
          (`basic_props:member/2')

     *Usage 2:* `message_lns(Type,L0,L1,Message)'
        - _The following properties should hold at call time:_

          `Type' is an atom.   (`basic_props:atm/1')

          `Type' is an element of
          `[error,warning,note,message,debug]'.
          (`basic_props:member/2')



 - PREDICATE: error/1:
     Defined as
          error(Message) :-
                  message(error,Message).
     .




 - PREDICATE: warning/1:
     Defined as
          warning(Message) :-
                  message(warning,Message).
     .




 - PREDICATE: note/1:
     Defined as
          note(Message) :-
                  message(note,Message).
     .




 - PREDICATE: message/1:
     Defined as
          message(Message) :-
                  message(message,Message).
     .




 - PREDICATE: debug/1:
     Defined as
          debug(Message) :-
                  message(debug,Message).
     .




 - PREDICATE: inform_user/1:
     `inform_user(Message)'

     Similar to `message/1', but `Message' is output with
     `display_list/1'. This predicate is obsolete, and may disappear
     in future versions.




 - PREDICATE: display_string/1:
     `display_string(String)'

     Output `String' as the sequence of characters it represents.

     *Usage 1:* `display_string(String)'
        - _The following properties should hold at call time:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

     *Usage 2:* `display_string(String)'
        - _The following properties should hold at call time:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: display_list/1:
     `display_list(List)'

     Outputs `List'. If `List' is a list, do `display/1' on each of
     its elements, else do `display/1' on `List'.




 - PREDICATE: display_term/1:
     `display_term(Term)'

     Output `Term' in a way that a `read/1' will be able to read it
     back, even if operators change.





File: ciao.info,  Node: Known bugs and planned improvements (io_aux),  Prev: Documentation on exports (io_aux),  Up: Message printing primitives

Known bugs and planned improvements (`io_aux')
==============================================

   *  `message/2' assumes that a module with name 'write' is
     library(write).


File: ciao.info,  Node: Attributed variables,  Next: Gathering some basic internal info,  Prev: Message printing primitives,  Up: Top

Attributed variables
********************

   *Author(s):* Christian Holzbaur, Daniel Cabeza, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#157 (2000/5/30, 13:4:47 CEST)

   These predicates allow the manipulation of _attributed variables_.
Attributes are special terms which are attached to a (free) variable,
and are hidden from the normal Prolog computation. They can only be
treated by using the predicates below.

* Menu:

* Usage and interface (attributes)::
* Documentation on exports (attributes)::
* Documentation on multifiles (attributes)::
* Other information (attributes)::


File: ciao.info,  Node: Usage and interface (attributes),  Next: Documentation on exports (attributes),  Prev: Attributed variables,  Up: Attributed variables

Usage and interface (`attributes')
==================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `attach_attribute/2', `get_attribute/2',
          `update_attribute/2', `detach_attribute/1'.

        - _Multifiles:_

          `verify_attribute/2', `combine_attributes/2'.




File: ciao.info,  Node: Documentation on exports (attributes),  Next: Documentation on multifiles (attributes),  Prev: Usage and interface (attributes),  Up: Attributed variables

Documentation on exports (`attributes')
=======================================

 - PREDICATE: attach_attribute/2:
     *Usage 1:* `attach_attribute(Var,Attr)'
        - _Description:_ Attach attribute `Attr' to `Var'.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

     *Usage 2:* `attach_attribute(Var,Attr)'
        - _Description:_ Attach attribute `Attr' to `Var'.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PREDICATE: get_attribute/2:
     *Usage 1:* `get_attribute(Var,Attr)'
        - _Description:_ Unify `Attr' with the attribute of `Var', or
          fail if `Var' has no attribute.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

     *Usage 2:* `get_attribute(Var,Attr)'
        - _Description:_ Unify `Attr' with the attribute of `Var', or
          fail if `Var' has no attribute.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PREDICATE: update_attribute/2:
     *Usage 1:* `update_attribute(Var,Attr)'
        - _Description:_ Change the attribute of attributed variable
          `Var' to `Attr'.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

     *Usage 2:* `update_attribute(Var,Attr)'
        - _Description:_ Change the attribute of attributed variable
          `Var' to `Attr'.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PREDICATE: detach_attribute/1:
     *Usage 1:* `detach_attribute(Var)'
        - _Description:_ Take out the attribute from the attributed
          variable `Var'.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')

     *Usage 2:* `detach_attribute(Var)'
        - _Description:_ Take out the attribute from the attributed
          variable `Var'.

        - _The following properties should hold at call time:_

          `Var' is a free variable.   (`term_typing:var/1')




File: ciao.info,  Node: Documentation on multifiles (attributes),  Next: Other information (attributes),  Prev: Documentation on exports (attributes),  Up: Attributed variables

Documentation on multifiles (`attributes')
==========================================

 - PREDICATE: verify_attribute/2:
     The predicate is _multifile_.

     *Usage:* `verify_attribute(Attr,Term)'
        - _Description:_ _A user defined predicate._ This predicate
          is called when an attributed variable with attribute `Attr'
          is about to be unified with the non-variable term `Term'.
          The user should define this predicate (as multifile) in the
          modules implementing special unification.

        - _The following properties should hold at call time:_

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

          `Term' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PREDICATE: combine_attributes/2:
     The predicate is _multifile_.

     *Usage:* `combine_attributes(Var1,Var2)'
        - _Description:_ _A user defined predicate._ This predicate
          is called when two attributed variables with attributes
          `Var1' and `Var2' are about to be unified. The user should
          define this predicate (as multifile) in the modules
          implementing special unification.

        - _The following properties should hold at call time:_

          `Var1' is a free variable.   (`term_typing:var/1')

          `Var2' is a free variable.   (`term_typing:var/1')




File: ciao.info,  Node: Other information (attributes),  Prev: Documentation on multifiles (attributes),  Up: Attributed variables

Other information (`attributes')
================================

   Note that `combine_attributes/2' and `verify_attribute/2' are not
called with the attributed variables involved, but with the
corresponding attributes instead. The reasons are:

   * There are simple applications which only refer to the attributes.

   * If the application wants to refer to the attributed variables
     themselves, they can be made part the attribute term. The
     implementation of `freeze/2' utilizes this technique. Note that
     this does not lead to cyclic structures, as the connection
     between an attributed variable and its attribute is invisible to
     the pure parts of the Prolog implementation.

   * If attributed variables were passed as arguments, the user code
     would have to refer to the attributes through an extra call to
     `get_attribute/2'.

   * As the/one attribute is the first argument to each of the two
     predicates, indexing applies. Note that attributed variables
     themselves look like variables to the indexing mechanism.


   However, future improvements may change or extend the interface to
attributed variables in order to provide a richer and more expressive
interface.

   For customized output of attributed variables, please refer to the
documentation of the predicate `portray_attribute/2'.


File: ciao.info,  Node: Gathering some basic internal info,  Next: *** PART III - ISO-Prolog library (iso),  Prev: Attributed variables,  Up: Top

Gathering some basic internal info
**********************************

   *Author(s):* Daniel Cabeza, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#13 (1999/7/2, 18:49:49 MEST)

   This module provides predicates which return basic internal info.

* Menu:

* Usage and interface (system_info)::
* Documentation on exports (system_info)::
* Documentation on internals (system_info)::


File: ciao.info,  Node: Usage and interface (system_info),  Next: Documentation on exports (system_info),  Prev: Gathering some basic internal info,  Up: Gathering some basic internal info

Usage and interface (`system_info')
===================================

   * *Library usage:*

     These predicates are builtin in Ciao, so nothing special has to
     be done to use them.

   * *Exports:*
        - _Predicates:_

          `get_arch/1', `get_os/1', `this_module/1',
          `current_module/1', `ciaolibdir/1'.




File: ciao.info,  Node: Documentation on exports (system_info),  Next: Documentation on internals (system_info),  Prev: Usage and interface (system_info),  Up: Gathering some basic internal info

Documentation on exports (`system_info')
========================================

 - PREDICATE: get_arch/1:
     This predicate will describe the computer architecture wich is
     currently executing the predicate.

     Computer architectures are identified by a simple atom. This
     atom is implementation-defined, and may suffer any change from
     one Ciao Prolog version to another.

     For example,Ciao Prolog running on an Intel-based machine will
     retrieve:
          ?- get_arch(I).
          
          I = i86 ? ;
          
          no
          ?-

     *Usage 1:* `get_arch(?ArchDescriptor)'
        - _Description:_ Unifies `ArchDescriptor' with a simple atom
          which describes the computer architecture currently
          executing the predicate.

        - _Calls should, and exit will be compatible with:_

          `?ArchDescriptor' is an atom.   (`basic_props:atm/1')

     *Usage 2:* `get_arch(ArchDescriptor)'
        - _Description:_ Unifies `ArchDescriptor' with a simple atom
          which describes the computer architecture currently
          executing the predicate.

        - _Calls should, and exit will be compatible with:_

          `ArchDescriptor' is an atom.   (`basic_props:atm/1')



 - PREDICATE: get_os/1:
     This predicate will describe the Operating System which is
     running on the machine currently executing the Prolog program.

     Operating Systems are identified by a simple atom. This atom is
     implementation-defined, and may suffer any change from one Ciao
     Prolog version to another.

     For example,Ciao Prolog running on Linux will retrieve:
          ?- get_os(I).
          
          I = 'LINUX' ? ;
          
          no
          ?-

     *Usage 1:* `get_os(?OsDescriptor)'
        - _Description:_ Unifies `OsDescriptor' with a simple atom
          which describes the running Operating System when predicate
          was called.

        - _Calls should, and exit will be compatible with:_

          `?OsDescriptor' is an atom.   (`basic_props:atm/1')

     *Usage 2:* `get_os(OsDescriptor)'
        - _Description:_ Unifies `OsDescriptor' with a simple atom
          which describes the running Operating System when predicate
          was called.

        - _Calls should, and exit will be compatible with:_

          `OsDescriptor' is an atom.   (`basic_props:atm/1')



 - PREDICATE: this_module/1:
     _Meta-predicate_ with arguments: `this_module(addmodule)'.

     *Usage 1:* `this_module(Module)'
        - _Description:_ `Module' is the internal module identifier
          for current module.

        - _Call and exit should be _compatible_ with:_

          `Module' is an internal module identifier
          (`system_info:internal_module_id/1')

     *Usage 2:* `this_module(Module)'
        - _Description:_ `Module' is the internal module identifier
          for current module.

        - _Call and exit should be _compatible_ with:_

          `Module' is an internal module identifier
          (`system_info:internal_module_id/1')



 - PREDICATE: current_module/1:
     This predicate will successively unify its argument with all
     module names currently loaded. Module names will be simple atoms.

     When called using a free variable as argument, it will retrieve
     on backtracking all modules currently loaded. This is usefull
     when called from the Ciao `toplevel'.

     When called using a module name as argument it will check
     whether the given module is loaded or not. This is usefull when
     called from user programs.

     *Usage 1:* `current_module(Module)'
        - _Description:_ Retrieves (on backtracking) all currently
          loaded modules into your application.

        - _Call and exit should be _compatible_ with:_

          `Module' is an internal module identifier
          (`system_info:internal_module_id/1')

     *Usage 2:* `current_module(Module)'
        - _Description:_ Retrieves (on backtracking) all currently
          loaded modules into your application.

        - _Call and exit should be _compatible_ with:_

          `Module' is an internal module identifier
          (`system_info:internal_module_id/1')



 - PREDICATE: ciaolibdir/1:
     *Usage 1:* `ciaolibdir(CiaoPath)'
        - _Description:_ `CiaoPath' is the path to the root of the
          Ciao libraries. Inside this directory, there are the
          directories 'lib', 'library' and 'contrib', which contain
          library modules.

        - _Call and exit should be _compatible_ with:_

          `CiaoPath' is an atom.   (`basic_props:atm/1')

     *Usage 2:* `ciaolibdir(CiaoPath)'
        - _Description:_ `CiaoPath' is the path to the root of the
          Ciao libraries. Inside this directory, there are the
          directories 'lib', 'library' and 'contrib', which contain
          library modules.

        - _Call and exit should be _compatible_ with:_

          `CiaoPath' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Documentation on internals (system_info),  Prev: Documentation on exports (system_info),  Up: Gathering some basic internal info

Documentation on internals (`system_info')
==========================================

 - PROPERTY: internal_module_id/1:
     For a user file it is a term user/1 with an argument different
     for each user file, for other modules is just the name of the
     module (as an atom).

     *Usage:* `internal_module_id(M)'
        - _Description:_ `M' is an internal module identifier




File: ciao.info,  Node: *** PART III - ISO-Prolog library (iso),  Next: ISO-Prolog package,  Prev: Gathering some basic internal info,  Up: Top

PART III - ISO-Prolog library (iso)
***********************************

   This part documents the _iso_ package which provides to Ciao
programs (most of) the ISO-Prolog functionality , including the
_ISO-Prolog builtins_ not covered by the basic library. All these
predicates are loaded by default in user files and in modules which
use standard module declarations such as:

   `:- module(_modulename_,_exports_).'

   which are equivalent to:

   `:- module(_modulename_,_exports_,[iso]).'

   or

   `:- module(_modulename_,_exports_).'

   `:- use_package([iso]).'

   If you do not want these ISO builtins loaded for a given file (in
order to make the executable smaller) you can ask for this explicitly
using:

   `:- module(_modulename_,_exports_,[]).'

   or

   `:- module(_modulename_,_exports_).'

   `:- use_package([]).'

   See the description of the declarations for declaring modules and
using other modules, and the documentation of the `iso' library for
details.


File: ciao.info,  Node: ISO-Prolog package,  Next: All solutions predicates,  Prev: *** PART III - ISO-Prolog library (iso),  Up: Top

ISO-Prolog package
******************

   This library package allows the use of the ISO-Prolog predicates
in Ciao programs. It is included by default in modules starting with a
`module/2' declaration or user files without a starting
`use_package/1' declaration.

* Menu:

* Usage and interface (iso)::


File: ciao.info,  Node: Usage and interface (iso),  Prev: ISO-Prolog package,  Up: ISO-Prolog package

Usage and interface (`iso')
===========================

   * *Library usage:*

     `:- use_package(iso).'

     or

     `:- module(...,...,[iso]).'

   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write'.




File: ciao.info,  Node: All solutions predicates,  Next: Dynamic predicates,  Prev: ISO-Prolog package,  Up: Top

All solutions predicates
************************

   *Author(s):* First version by Richard A. O'Keefe and David H.D.
Warren. Changes by Mats Carlsson, Daniel Cabeza, and Manuel
Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#115 (2000/4/12, 12:17:22 CEST)

   This module implements the standard solution aggregation
predicates.

   When there are many solutions to a problem, and when all those
solutions are required to be collected together, this can be achieved
by repeatedly backtracking and gradually building up a list of the
solutions. The following built-in predicates are provided to automate
this process.

* Menu:

* Usage and interface (aggregates)::
* Documentation on exports (aggregates)::


File: ciao.info,  Node: Usage and interface (aggregates),  Next: Documentation on exports (aggregates),  Prev: All solutions predicates,  Up: All solutions predicates

Usage and interface (`aggregates')
==================================

   * *Library usage:*

     `:- use_module(library(aggregates)).'

   * *Exports:*
        - _Predicates:_

          `setof/3', `bagof/3', `findall/3', `findall/4',
          `findnsols/4', `findnsols/5', `^/2'.


   * *Other modules used:*
        - _System library modules:_

          `sort', `lists'.




File: ciao.info,  Node: Documentation on exports (aggregates),  Prev: Usage and interface (aggregates),  Up: All solutions predicates

Documentation on exports (`aggregates')
=======================================

 - PREDICATE: setof/3:
     `setof(Template,Generator,Set)'

     Finds the `Set' of instances of the `Template' satisfying
     `Generator'. The set is in ascending order (see *Note Comparing
     terms:: for a definition of this order) without duplicates, and
     is non-empty. If there are no solutions, `setof' fails. `setof'
     may succeed in more than one way, binding free variables in
     `Generator' to different values. This can be avoided by using
     existential quantifiers on the free variables in front of
     `Generator', using `^/2'. For example, given the clauses:
          father(bill, tom).
          father(bill, ann).
          father(bill, john).
          father(harry, july).
          father(harry, daniel).

     The following query produces two alternative solutions via
     backtracking:
          ?- setof(X,father(F,X),Sons).
          
          F = bill,
          Sons = [ann,john,tom] ? ;
          
          F = harry,
          Sons = [daniel,july] ? ;
          
          no
          ?-

     _Meta-predicate_ with arguments: `setof(?,goal,?)'.




 - PREDICATE: bagof/3:
     `bagof(Template,Generator,Bag)'

     Finds all the instances of the `Template' produced by the
     `Generator', and returns them in the `Bag' in the order in which
     they were found. If the `Generator' contains free variables
     which are not bound in the `Template', it assumes that this is
     like any other Prolog question and that you want bindings for
     those variables. This can be avoided by using existential
     quantifiers on the free variables in front of the `Generator',
     using `^/2'.

     _Meta-predicate_ with arguments: `bagof(?,goal,?)'.




 - PREDICATE: findall/3:
     `findall(Template,Generator,List)'

     A special case of bagof, where all free variables in the
     `Generator' are taken to be existentially quantified. Faster
     than the other aggregation predicates.

     _Meta-predicate_ with arguments: `findall(?,goal,?)'.




 - PREDICATE: findall/4:
     _Meta-predicate_ with arguments: `findall(?,goal,?,?)'.

     *Usage:* `findall(Template,Generator,List,Tail)'
        - _Description:_ As `findall/3', but returning in `Tail' the
          tail of `List'.



 - PREDICATE: findnsols/4:
     `findnsols(N,Template,Generator,List)'

     As `findall/3', but generating at most `N' solutions of
     `Generator'. Thus, the length of `List' will not be greater than
     `N'. If `N'=<0, returns directly an empty list. This predicate
     is especially useful if `Generator' may have an infinite number
     of solutions.

     _Meta-predicate_ with arguments: `findnsols(?,?,goal,?)'.




 - PREDICATE: findnsols/5:
     `findnsols(N,Template,Generator,List,Tail)'

     As `findnsols/4', but returning in `Tail' the tail of `List'.

     _Meta-predicate_ with arguments: `findnsols(?,?,goal,?,?)'.




 - PREDICATE: ^/2:
     *Usage:* `X ^ P'
        - _Description:_ Existential quantification: `X' is
          existentially quantified in `P'. E.g., in `A^p(A,B)', `A'
          is existentially quantified. Used only within aggregation
          predicates. In all other contexts, simply, execute the
          procedure call `P'.




File: ciao.info,  Node: Dynamic predicates,  Next: Term input,  Prev: All solutions predicates,  Up: Top

Dynamic predicates
******************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#93 (2001/4/24, 19:2:53 CEST)

   This module implements the assert/retract family of predicates to
manipulate dynamic predicates.

   The predicates defined in this module allow modification of the
program as it is actually running. Clauses can be added to the
program (_asserted_) or removed from the program (_retracted_). For
these predicates, the argument which corresponds to the clause head
must be instantiated to an atom or a compound term. The argument
corresponding to the clause must be instantiated either to a term
`Head :- Body' or, if the body part is empty, to `Head'. An empty
body part is represented as `true'. Note that using this library is
very detrimental to global analysis, and that for most uses the
predicates listed in *Note Fast/concurrent update of facts:: suffice.

* Menu:

* Usage and interface (dynamic)::
* Documentation on exports (dynamic)::
* Documentation on multifiles (dynamic)::


File: ciao.info,  Node: Usage and interface (dynamic),  Next: Documentation on exports (dynamic),  Prev: Dynamic predicates,  Up: Dynamic predicates

Usage and interface (`dynamic')
===============================

   * *Library usage:*

     `:- use_module(library(dynamic)).'

   * *Exports:*
        - _Predicates:_

          `asserta/1', `asserta/2', `assertz/1', `assertz/2',
          `assert/1', `assert/2', `retract/1', `retractall/1',
          `abolish/1', `clause/2', `clause/3', `current_predicate/1',
          `current_predicate/2', `dynamic/1', `data/1',
          `wellformed_body/3'.

        - _Multifiles:_

          `do_on_abolish/1'.


   * *Other modules used:*
        - _System library modules:_

          `prolog_sys'.




File: ciao.info,  Node: Documentation on exports (dynamic),  Next: Documentation on multifiles (dynamic),  Prev: Usage and interface (dynamic),  Up: Dynamic predicates

Documentation on exports (`dynamic')
====================================

 - PREDICATE: asserta/1:
     _Meta-predicate_ with arguments: `asserta(clause)'.

     *Usage:* `asserta(+Clause)' < * ISO * >
        - _Description:_ The current instance of `Clause' is
          interpreted as a clause and is added to the current
          program. The predicate concerned must be dynamic. The new
          clause becomes the _first_ clause for the predicate
          concerned. Any uninstantiated variables in `Clause' will be
          replaced by new private variables.



 - PREDICATE: asserta/2:
     _Meta-predicate_ with arguments: `asserta(clause,?)'.

     *Usage:* `asserta(+Clause,-Ref)'
        - _Description:_ Like `asserta/1'. `Ref' is a unique
          identifier of the asserted clause.



 - PREDICATE: assertz/1:
     _Meta-predicate_ with arguments: `assertz(clause)'.

     *Usage:* `assertz(+Clause)' < * ISO * >
        - _Description:_ Like `asserta/1', except that the new clause
          becomes the _last_ clause for the predicate concerned.



 - PREDICATE: assertz/2:
     _Meta-predicate_ with arguments: `assertz(clause,?)'.

     *Usage:* `assertz(+Clause,-Ref)'
        - _Description:_ Like `assertz/1'. `Ref' is a unique
          identifier of the asserted clause.



 - PREDICATE: assert/1:
     _Meta-predicate_ with arguments: `assert(clause)'.

     *Usage:* `assert(+Clause)'
        - _Description:_ Identical to `assertz/1'. Included for
          compatibility.



 - PREDICATE: assert/2:
     _Meta-predicate_ with arguments: `assert(clause,?)'.

     *Usage:* `assert(+Clause,-Ref)'
        - _Description:_ Identical to `assertz/2'. Included for
          compatibility.



 - PREDICATE: retract/1:
     _Meta-predicate_ with arguments: `retract(clause)'.

     *Usage:* `retract(+Clause)' < * ISO * >
        - _Description:_ The first clause in the program that matches
          `Clause' is erased. The predicate concerned must be dynamic.

          The predicate `retract/1' may be used in a non-determinate
          fashion, i.e., it will successively retract clauses
          matching the argument through backtracking. If reactivated
          by backtracking, invocations of the predicate whose clauses
          are being retracted will proceed unaffected by the
          retracts. This is also true for invocations of `clause' for
          the same predicate. The space occupied by a retracted
          clause will be recovered when instances of the clause are
          no longer in use.



 - PREDICATE: retractall/1:
     _Meta-predicate_ with arguments: `retractall(fact)'.

     *Usage:* `retractall(+Head)'
        - _Description:_ Erase all clauses whose head matches `Head',
          where `Head' must be instantiated to an atom or a compound
          term. The predicate concerned must be dynamic. The
          predicate definition is retained.



 - PREDICATE: abolish/1:
     _Meta-predicate_ with arguments: `abolish(spec)'.

     *Usage:* `abolish(+Spec)' < * ISO * >
        - _Description:_ Erase all clauses of the predicate specified
          by the predicate spec `Spec'. The predicate definition
          itself is also erased (the predicate is deemed undefined
          after execution of the abolish). The predicates concerned
          must all be user defined.



 - PREDICATE: clause/2:
     _Meta-predicate_ with arguments: `clause(fact,?)'.

     *Usage:* `clause(+Head,?Body)' < * ISO * >
        - _Description:_ The clause '`Head' `:-' `Body'' exists in
          the current program. The predicate concerned must be
          dynamic.



 - PREDICATE: clause/3:
     `clause(Head,Body,Ref)'

     Like `clause(Head,Body)', plus the clause is uniquely identified
     by `Ref'.

     _Meta-predicate_ with arguments: `clause(fact,?,?)'.

     *Usage 1:* `clause(+Head,?Body,?Ref)'
        - _Description:_ `Head' must be instantiated to an atom or a
          compound term.

     *Usage 2:* `clause(?Head,?Body,+Ref)'
        - _Description:_ `Ref' must be instantiated to a valid
          identifier.



 - PREDICATE: current_predicate/1:
     *Usage:* `current_predicate(?Spec)' < * ISO * >
        - _Description:_ A predicate in the current module is named
          `Spec'.



 - PREDICATE: current_predicate/2:
     *Usage:* `current_predicate(?Spec,?Module)'
        - _Description:_ A predicate in `Module' is named `Spec'.
          `Module' never is an engine module.



 - PREDICATE: dynamic/1:
     `dynamic F/A'

     The predicate named `F' with arity `A' is made dynamic in the
     current module at runtime (useful for predicate names generated
     on-the-fly). If the predicate functor name `F' is uninstatiated,
     a new, unique, predicate name is generated at runtime.




 - PREDICATE: data/1:
     `data F/A'

     The predicate named `F' with arity `A' is made data in the
     current module at runtime (useful for predicate names generated
     on-the-fly). If the predicate functor name `F' is uninstatiated,
     a new, unique, predicate name is generated at runtime.




 - PREDICATE: wellformed_body/3:
     `wellformed_body(BodyIn,Env,BodyOut)'

     `BodyIn' is a well-formed clause body. `BodyOut' is its
     counterpart with no single-variable meta-goals (i.e., with
     `call(X)' for `X'). `Env' denotes if global cuts are admissible
     in `BodyIn' (`+' if they are, `-' if they are not).





File: ciao.info,  Node: Documentation on multifiles (dynamic),  Prev: Documentation on exports (dynamic),  Up: Dynamic predicates

Documentation on multifiles (`dynamic')
=======================================

 - PREDICATE: do_on_abolish/1:
     `do_on_abolish(Head)'

     A hook predicate which will be called when the definition of the
     predicate of `Head' is abolished.

     The predicate is _multifile_.





File: ciao.info,  Node: Term input,  Next: Term output,  Prev: Dynamic predicates,  Up: Top

Term input
**********

   *Author(s):* First versions from SICStus 0.6 code; additional
changes and documentation by Daniel Cabeza and Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#196 (2002/4/17, 20:0:32 CEST)

* Menu:

* Usage and interface (read)::
* Documentation on exports (read)::
* Documentation on multifiles (read)::
* Documentation on internals (read)::


File: ciao.info,  Node: Usage and interface (read),  Next: Documentation on exports (read),  Prev: Term input,  Up: Term input

Usage and interface (`read')
============================

   * *Library usage:*

     `:- use_module(library(read)).'

   * *Exports:*
        - _Predicates:_

          `read/1', `read/2', `read_term/2', `read_term/3',
          `read_top_level/3', `second_prompt/2'.

        - _Multifiles:_

          `define_flag/3'.


   * *Other modules used:*
        - _System library modules:_

          `tokenize', `operators', `lists'.




File: ciao.info,  Node: Documentation on exports (read),  Next: Documentation on multifiles (read),  Prev: Usage and interface (read),  Up: Term input

Documentation on exports (`read')
=================================

 - PREDICATE: read/1:
     `read(Term)'

     Like `read(Stream,Term)' with `Stream' associated to the current
     input stream.




 - PREDICATE: read/2:
     *Usage:* `read(+Stream,?Term)' < * ISO * >
        - _Description:_ The next term, delimited by a full-stop
          (i.e., a `.' followed by either a space or a control
          character), is read from `Stream' and is unified with
          `Term'. The syntax of the term must agree with current
          operator declarations. If the end of `Stream' has been
          reached, `Term' is unified with the term `end_of_file'.
          Further calls to `read/2' for the same stream will then
          cause an error, unless the stream is connected to the
          terminal (in which case a prompt is opened on the terminal).

        - _The following properties should hold upon exit:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: read_term/2:
     *Usage:* `read_term(?Term,+Options)' < * ISO * >
        - _Description:_ Like `read_term/3', but reading from the
          current input

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')

          `+Options' is a list of `read_option's.
          (`basic_props:list/2')



 - PREDICATE: read_term/3:
     *Usage:* `read_term(+Stream,?Term,+Options)' < * ISO * >
        - _Description:_ Reads a `Term' from `Stream' with the
          ISO-Prolog `Options'. These options can control the
          behavior of read term (see `read_option/1').

        - _The following properties should hold upon exit:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')

          `+Options' is a list of `read_option's.
          (`basic_props:list/2')



 - PREDICATE: read_top_level/3:
     No further documentation available for this predicate.




 - PREDICATE: second_prompt/2:
     *Usage:* `second_prompt(?Old,?New)'
        - _Description:_ Changes the prompt (the _second prompt_, as
          oposed to the first one, used by the toplevel) used by
          `read/2' and friends to `New', and returns the current one
          in `Old'.

        - _The following properties should hold upon exit:_

          `?Old' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `?New' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: Documentation on multifiles (read),  Next: Documentation on internals (read),  Prev: Documentation on exports (read),  Up: Term input

Documentation on multifiles (`read')
====================================

 - PREDICATE: define_flag/3:
     Defines flags as follows:
          define_flag(read_hiord,[on,off],off).
     (See *Note Changing system behaviour and various flags::).

     If flag is `on' (it is `off' by default), a variable followed by
     a parenthesized lists of arguments is read as a `call/N' term,
     except if the variable is anonymous, in which case it is read as
     an anonymous predicate abstraction head. For example, `P(X)' is
     read as `call(P,X)' and `_(X,Y)' as `''(X,Y)'.

     The predicate is _multifile_.





File: ciao.info,  Node: Documentation on internals (read),  Prev: Documentation on multifiles (read),  Up: Term input

Documentation on internals (`read')
===================================

 - REGTYPE: read_option/1:
     *Usage:* `read_option(Option)'
        - _Description:_ `Option' is an allowed `read_term/[2,3]'
          option. These options are:
               read_option(variables(_V)).
               read_option(variable_names(_N)).
               read_option(singletons(_S)).
               read_option(lines(_StartLine,_EndLine)).
               read_option(dictionary(_Dict)).
          They can be used to return the singleton variables in the
          term, a list of variables, etc.

        - _The following properties should hold upon exit:_

          `Option' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: Term output,  Next: Defining operators,  Prev: Term input,  Up: Top

Term output
***********

   *Author(s):* Adapted from shared code written by Richard A.
O'Keefe. Changes by Mats Carlsson, Daniel Cabeza, Manuel
Hermenegildo, and Manuel Carro..

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#197 (2002/4/17, 20:2:28 CEST)

   This library provides different predicates for term output,
additional to the kernel predicates `display/1'- `display/2' and
`displayq/1'-`displayq/2'. All the predicates defined in ISO-Prolog
are included, plus other traditionally provided by Prolog
Implementations. Output predicates are provided in two versions: one
that uses the current output stream and other in which the stream is
specified explicitly, as an additional first argument.

* Menu:

* Usage and interface (write)::
* Documentation on exports (write)::
* Documentation on multifiles (write)::


File: ciao.info,  Node: Usage and interface (write),  Next: Documentation on exports (write),  Prev: Term output,  Up: Term output

Usage and interface (`write')
=============================

   * *Library usage:*

     `:- use_module(library(write)).'

   * *Exports:*
        - _Predicates:_

          `write_term/3', `write_term/2', `write/2', `write/1',
          `writeq/2', `writeq/1', `write_canonical/2',
          `write_canonical/1', `print/2', `print/1', `write_list1/1',
          `portray_clause/2', `portray_clause/1', `numbervars/3',
          `prettyvars/1', `printable_char/1'.

        - _Properties:_

          `write_option/1'.

        - _Multifiles:_

          `define_flag/3', `portray_attribute/2', `portray/1'.


   * *Other modules used:*
        - _System library modules:_

          `operators', `sort'.




File: ciao.info,  Node: Documentation on exports (write),  Next: Documentation on multifiles (write),  Prev: Usage and interface (write),  Up: Term output

Documentation on exports (`write')
==================================

 - PREDICATE: write_term/3:
     *Usage:* `write_term(@Stream,?Term,+OptList)' < * ISO * >
        - _Description:_ Outputs the term `Term' to the stream
          `Stream', with the list of write-options `OptList'. See
          `write_option/1' type for default options.

        - _The following properties should hold upon exit:_

          `@Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')

          `+OptList' is a list of `write_option's.
          (`basic_props:list/2')



 - PREDICATE: write_term/2:
     *Usage:* `write_term(?Term,+OptList)' < * ISO * >
        - _Description:_ Behaves like `current_output(S),
          write_term(S,Term,OptList)'.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')

          `+OptList' is a list of `write_option's.
          (`basic_props:list/2')



 - PROPERTY: write_option/1:
     `Opt' is a valid write option which affects the predicate
     `write_term/3' and similar ones. Possible write_options are:
        * *quoted(*_bool_*):* If _bool_ is `true', atoms and functors
          that can't be read back by `read_term/3' are quoted, if it
          is `false', each atom and functor is written as its name.
          Default value is `false'.

        * *ignore_ops(*_flag_*):* If _flag_ is `true', each compound
          term is output in functional notation, if it is `ops',
          curly bracketed notation and list notation is enabled when
          outputing compound terms, if it is `false', also operator
          notation is enabled when outputing compound terms. Default
          value is `false'.

        * *numbervars(*_bool_*):* If _bool_ is `true', a term of the
          form `'$VAR'(N)' where `N' is an integer, is output as a
          variable name consisting of a capital letter possibly
          followed by an integer, a term of the form `'$VAR'(Atom)'
          where `Atom' is an atom, as this atom (without quotes), and
          a term of the form `'$VAR'(String)' where `String' is a
          character string, as the atom corresponding to this
          character string. See predicates `numbervars/3' and
          `prettyvars/1'. If _bool_ is `false' this cases are not
          treated in any special way. Default value is `false'.

        * *portrayed(*_bool_*):* If _bool_ is `true', then call
          multifile predicates `portray/1' and `portray_attribute/1',
          to provide the user handlers for pretty printing some
          terms. `portray_attribute/1' is called whenever an
          attributed variable is to be printed, `portray/1' is called
          whenever a non-variable term is to be printed. If either
          call succeeds, then it is assumed that the term has been
          output, else it is printed as usual. If _bool_ is `false',
          these predicates are not called. Default value is `false'.
          This option is set by the toplevel when writting the final
          values of variables, and by the debugging package when
          writting the goals in the tracing messages. Thus you can
          vary the forms of these messages if you wish.

        * *max_depth(*_depth_*):* _depth_ is a positive integer or
          cero. If it is positive, it denotes the depth limit on
          printing compound terms. If it is cero, there is no limit.
          Default value is `0' (no limit).

        * *priority(*_prio_*):* _prio_ is an integer between 1 and
          1200. If the term to be printed has higher priority than
          _prio_, it will be printed parenthesized. Default value is
          1200 (no term parenthesized).

     .

     *Usage:* `write_option(Opt)'
        - _Description:_ `Opt' is a valid write option.



 - PREDICATE: write/2:
     *Usage:* `write(@Stream,?Term)' < * ISO * >
        - _Description:_ Behaves like `write_term(Stream, Term,
          [numbervars(true)])'.

        - _The following properties should hold upon exit:_

          `@Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: write/1:
     *Usage:* `write(?Term)' < * ISO * >
        - _Description:_ Behaves like `current_output(S),
          write(S,Term)'.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: writeq/2:
     *Usage:* `writeq(@Stream,?Term)' < * ISO * >
        - _Description:_ Behaves like `write_term(Stream, Term,
          [quoted(true), numbervars(true)])'.

        - _The following properties should hold upon exit:_

          `@Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: writeq/1:
     *Usage:* `writeq(?Term)' < * ISO * >
        - _Description:_ Behaves like `current_output(S),
          writeq(S,Term)'.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: write_canonical/2:
     *Usage:* `write_canonical(@Stream,?Term)' < * ISO * >
        - _Description:_ Behaves like `write_term(Stream, Term,
          [quoted(true), ignore_ops(true)])'. The output of this
          predicate can always be parsed by `read_term/2' even if the
          term contains special characters or if operator
          declarations have changed.

        - _The following properties should hold upon exit:_

          `@Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: write_canonical/1:
     *Usage:* `write_canonical(?Term)' < * ISO * >
        - _Description:_ Behaves like `current_output(S),
          write_canonical(S,Term)'.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: print/2:
     *Usage:* `print(@Stream,?Term)'
        - _Description:_ Behaves like `write_term(Stream, Term,
          [numbervars(true), portrayed(true)])'.

        - _The following properties should hold upon exit:_

          `@Stream' is an open stream.   (`streams_basic:stream/1')

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: print/1:
     *Usage:* `print(?Term)'
        - _Description:_ Behaves like `current_output(S),
          print(S,Term)'.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: write_list1/1:
     *Usage:*
        - _Description:_ Writes a list to current output one element
          in each line.

        - _Call and exit should be _compatible_ with:_

          `Arg1' is a list.   (`basic_props:list/1')



 - PREDICATE: portray_clause/2:
     *Usage:* `portray_clause(@Stream,?Clause)'
        - _Description:_ Outputs the clause `Clause' onto `Stream',
          pretty printing its variables and using indentation,
          including a period at the end. This predicate is used by
          `listing/0'.

        - _The following properties should hold upon exit:_

          `@Stream' is an open stream.   (`streams_basic:stream/1')

          `?Clause' is any term.   (`basic_props:term/1')



 - PREDICATE: portray_clause/1:
     *Usage:* `portray_clause(?Clause)'
        - _Description:_ Behaves like `current_output(S),
          portray_clause(S,Term)'.

        - _The following properties should hold upon exit:_

          `?Clause' is any term.   (`basic_props:term/1')



 - PREDICATE: numbervars/3:
     *Usage:* `numbervars(?Term,+N,?M)'
        - _Description:_ Unifies each of the variables in term `Term'
          with a term of the form `'$VAR'(I)' where `I' is an integer
          from `N' onwards. `M' is unified with the last integer used
          plus 1. If the resulting term is output with a write option
          `numbervars(true)', in the place of the variables in the
          original term will be printed a variable name consisting of
          a capital letter possibly followed by an integer. When `N'
          is 0 you will get the variable names A, B, ..., Z, A1, B1,
          etc.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')

          `+N' is currently instantiated to an integer.
          (`term_typing:integer/1')

          `?M' is currently instantiated to an integer.
          (`term_typing:integer/1')



 - PREDICATE: prettyvars/1:
     *Usage:* `prettyvars(?Term)'
        - _Description:_ Similar to `numbervars(Term,0,_)', except
          that singleton variables in `Term' are unified with
          `'$VAR'('_')', so that when the resulting term is output
          with a write option `numbervars(true)', in the place of
          singleton variables `_' is written. This predicate is used
          by `portray_clause/2'.

        - _The following properties should hold upon exit:_

          `?Term' is any term.   (`basic_props:term/1')



 - PREDICATE: printable_char/1:
     *Usage:* `printable_char(+Char)'
        - _Description:_ `Char' is the code of a character which can
          be printed.

        - _The following properties should hold upon exit:_

          `+Char' is currently instantiated to a number.
          (`term_typing:number/1')




File: ciao.info,  Node: Documentation on multifiles (write),  Prev: Documentation on exports (write),  Up: Term output

Documentation on multifiles (`write')
=====================================

 - PREDICATE: define_flag/3:
     Defines flags as follows:
          define_flag(write_strings,[on,off],off).
     (See *Note Changing system behaviour and various flags::).

     If flag is `on', lists which may be written as strings are.

     The predicate is _multifile_.




 - PREDICATE: portray_attribute/2:
     The predicate is _multifile_.

     *Usage:* `portray_attribute(Attr,Var)'
        - _Description:_ _A user defined predicate._ When an
          attributed variable `Var' is about to be printed, this
          predicate receives the variable and its attribute `Attr'.
          The predicate should either print something based on `Attr'
          or `Var', or do nothing and fail. In the latter case, the
          default printer ( `write/1') will print the attributed
          variable like an unbound variable, e.g. `_673'.

        - _The following properties should hold at call time:_

          `Attr' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

          `Var' is a free variable.   (`term_typing:var/1')



 - PREDICATE: portray/1:
     The predicate is _multifile_.

     *Usage:* `portray(?Term)'
        - _Description:_ _A user defined predicate._ This should
          either print the `Term' and succeed, or do nothing and
          fail. In the latter case, the default printer (`write/1')
          will print the `Term'.




File: ciao.info,  Node: Defining operators,  Next: iso_byte_char (library),  Prev: Term output,  Up: Top

Defining operators
******************

   *Author(s):* Adapted from SICStus 0.6 code; modifications and
documentation by Daniel Cabeza and Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#198 (2002/4/17, 20:13:7 CEST)

   Operators allow writting terms in a more clear way than the
standard functional notation. Standard operators in Ciao are defined
by this predicate (but note that the compiler itself defines more
operators at compile time):
     standard_ops :-
             op(1200,xfx,[:-]),
             op(1200,fx,[:-,?-]),
             op(1100,xfy,[;]),
             op(1050,xfy,[->]),
             op(1000,xfy,[',']),
             op(900,fy,[\+]),
             op(700,xfx,[=,\=,==,\==,@<,@>,@=<,@>=,=..,is,=:=,=\=,<,=<,>,>=]),
             op(550,xfx,[:]),
             op(500,yfx,[+,-,/\,\/,#]),
             op(500,fy,[++,--]),
             op(400,yfx,[*,/,//,rem,mod,<<,>>]),
             op(200,fy,[+,-,\]),
             op(200,xfx,[**]),
             op(200,xfy,[^]),
             op(25,fy,[^]).

* Menu:

* Usage and interface (operators)::
* Documentation on exports (operators)::


File: ciao.info,  Node: Usage and interface (operators),  Next: Documentation on exports (operators),  Prev: Defining operators,  Up: Defining operators

Usage and interface (`operators')
=================================

   * *Library usage:*

     `:- use_module(library(operators)).'

   * *Exports:*
        - _Predicates:_

          `op/3', `current_op/3', `current_prefixop/3',
          `current_infixop/4', `current_postfixop/3'.




File: ciao.info,  Node: Documentation on exports (operators),  Prev: Usage and interface (operators),  Up: Defining operators

Documentation on exports (`operators')
======================================

 - PREDICATE: op/3:
     `op(Precedence,Type,Name)'

     Declares the atom `Name' to be an operator of the stated `Type'
     and `Precedence' (0 =< `Precedence' =< 1200). `Name' may also be
     a list of atoms in which case all of them are declared to be
     operators. If `Precedence' is 0 then the operator properties of
     `Name' (if any) are cancelled. Note that, unlike in ISO-Prolog,
     it is allowed to define two operators with the same name, one
     infix and the other postfix.




 - PREDICATE: current_op/3:
     `current_op(Precedence,Type,Op)'

     The atom `Op' is currently an operator of type `Type' and
     precedence `Precedence'. Neither `Op' nor the other arguments
     need be instantiated at the time of the call; i.e., this
     predicate can be used to generate as well as to test.




 - PREDICATE: current_prefixop/3:
     `current_prefixop(Op,Less,Precedence)'

     Similar to `current_op/3', but it concerns only the prefix
     operators. It returns *only one solution*. Not a predicate for
     general use.




 - PREDICATE: current_infixop/4:
     `current_infixop(Op,LeftLess,Prec,RightLess)'

     Similar to `current_op/3', but it concerns only infix operators.
     It returns *only one solution*. Not a predicate for general use.




 - PREDICATE: current_postfixop/3:
     `current_postfixop(Op,Less,Precedence)'

     Similar to `current_op/3', but it concerns only the postfix
     operators. It returns *only one solution*. Not a predicate for
     general use.





File: ciao.info,  Node: iso_byte_char (library),  Next: iso_misc (library),  Prev: Defining operators,  Up: Top

iso_byte_char (library)
***********************

* Menu:

* Usage and interface (iso_byte_char)::
* Documentation on exports (iso_byte_char)::


File: ciao.info,  Node: Usage and interface (iso_byte_char),  Next: Documentation on exports (iso_byte_char),  Prev: iso_byte_char (library),  Up: iso_byte_char (library)

Usage and interface (`iso_byte_char')
=====================================

   * *Library usage:*

     `:- use_module(library(iso_byte_char)).'

   * *Exports:*
        - _Predicates:_

          `char_code/2', `atom_chars/2', `number_chars/2',
          `get_byte/1', `get_byte/2', `peek_byte/1', `peek_byte/2',
          `put_byte/1', `put_byte/2', `get_char/1', `get_char/2',
          `peek_char/1', `peek_char/2', `put_char/1', `put_char/2'.




File: ciao.info,  Node: Documentation on exports (iso_byte_char),  Prev: Usage and interface (iso_byte_char),  Up: iso_byte_char (library)

Documentation on exports (`iso_byte_char')
==========================================

 - PREDICATE: char_code/2:
     No further documentation available for this predicate.




 - PREDICATE: atom_chars/2:
     No further documentation available for this predicate.




 - PREDICATE: number_chars/2:
     No further documentation available for this predicate.




 - PREDICATE: get_byte/1:
     No further documentation available for this predicate.




 - PREDICATE: get_byte/2:
     No further documentation available for this predicate.




 - PREDICATE: peek_byte/1:
     No further documentation available for this predicate.




 - PREDICATE: peek_byte/2:
     No further documentation available for this predicate.




 - PREDICATE: put_byte/1:
     No further documentation available for this predicate.




 - PREDICATE: put_byte/2:
     No further documentation available for this predicate.




 - PREDICATE: get_char/1:
     No further documentation available for this predicate.




 - PREDICATE: get_char/2:
     No further documentation available for this predicate.




 - PREDICATE: peek_char/1:
     No further documentation available for this predicate.




 - PREDICATE: peek_char/2:
     No further documentation available for this predicate.




 - PREDICATE: put_char/1:
     No further documentation available for this predicate.




 - PREDICATE: put_char/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: iso_misc (library),  Next: iso_incomplete (library),  Prev: iso_byte_char (library),  Up: Top

iso_misc (library)
******************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (iso_misc)::
* Documentation on exports (iso_misc)::


File: ciao.info,  Node: Usage and interface (iso_misc),  Next: Documentation on exports (iso_misc),  Prev: iso_misc (library),  Up: iso_misc (library)

Usage and interface (`iso_misc')
================================

   * *Library usage:*

     `:- use_module(library(iso_misc)).'

   * *Exports:*
        - _Predicates:_

          `\=/2', `once/1', `compound/1', `sub_atom/5',
          `unify_with_occurs_check/2'.


   * *Other modules used:*
        - _System library modules:_

          `between'.




File: ciao.info,  Node: Documentation on exports (iso_misc),  Prev: Usage and interface (iso_misc),  Up: iso_misc (library)

Documentation on exports (`iso_misc')
=====================================

 - PREDICATE: \=/2:
     No further documentation available for this predicate.




 - PREDICATE: once/1:
     No further documentation available for this predicate.

     _Meta-predicate_ with arguments: `once(goal)'.




 - PREDICATE: compound/1:
     No further documentation available for this predicate.




 - PREDICATE: sub_atom/5:
     No further documentation available for this predicate.




 - PREDICATE: unify_with_occurs_check/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: iso_incomplete (library),  Next: *** PART IV - Classic Prolog library (classic),  Prev: iso_misc (library),  Up: Top

iso_incomplete (library)
************************

* Menu:

* Usage and interface (iso_incomplete)::
* Documentation on exports (iso_incomplete)::


File: ciao.info,  Node: Usage and interface (iso_incomplete),  Next: Documentation on exports (iso_incomplete),  Prev: iso_incomplete (library),  Up: iso_incomplete (library)

Usage and interface (`iso_incomplete')
======================================

   * *Library usage:*

     `:- use_module(library(iso_incomplete)).'

   * *Exports:*
        - _Predicates:_

          `open/4', `close/2', `stream_property/2'.




File: ciao.info,  Node: Documentation on exports (iso_incomplete),  Prev: Usage and interface (iso_incomplete),  Up: iso_incomplete (library)

Documentation on exports (`iso_incomplete')
===========================================

 - PREDICATE: open/4:
     No further documentation available for this predicate.




 - PREDICATE: close/2:
     No further documentation available for this predicate.




 - PREDICATE: stream_property/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: *** PART IV - Classic Prolog library (classic),  Next: Classic Prolog package,  Prev: iso_incomplete (library),  Up: Top

PART IV - Classic Prolog library (classic)
******************************************

   This part documents some Ciao libraries which provide additional
predicates and functionalities that, despite not being in the ISO
standard, are present in many popular Prolog systems. This includes
definite clause grammars (DCGs), "Quintus-style" internal database,
list processing predicates, dictionaries, string processing, DEC-10
Prolog-style input/output, formatted output, dynamic loading of
modules, activation of operators at run-time, etc.


File: ciao.info,  Node: Classic Prolog package,  Next: Definite clause grammars,  Prev: *** PART IV - Classic Prolog library (classic),  Up: Top

Classic Prolog package
**********************

   This library package allows the use of certain Prolog features
which have become sort of 'classical' from many Prolog
implementations. These include definite clause grammars and some
classical predicates like `append/3'. The libraries listed below
define these predicates, and the following chapters describe them.

* Menu:

* Usage and interface (classic)::


File: ciao.info,  Node: Usage and interface (classic),  Prev: Classic Prolog package,  Up: Classic Prolog package

Usage and interface (`classic')
===============================

   * *Library usage:*

     `:- use_package(classic).'

     or

     `:- module(...,...,[classic]).'

   * *New operators defined:*

     `-->/2' [1200,xfx].

   * *Other modules used:*
        - _System library modules:_

          `operators', `old_database', `lists', `sort', `dict',
          `strings', `dec10_io', `format', `ttyout',
          `compiler/compiler'.




File: ciao.info,  Node: Definite clause grammars,  Next: Definite clause grammars (expansion),  Prev: Classic Prolog package,  Up: Top

Definite clause grammars
************************

   This library package allows the use of DCGs (Definite Clause
Grammars) [Col78,PW80] in a Ciao module/program.

   Definite clause grammars are an extension of the well-known
context-free grammars. Prolog's grammar rules provide a convenient
notation for expressing definite clause grammars. A DCG rule in
Prolog takes the general form

     `head' --> `body'.

meaning "a possible form for `head' is `body'". Both `body' and
`head' are sequences of one or more items linked by the standard
Prolog conjunction operator "`,'".

   Definite clause grammars extend context-free grammars in the
following ways:

  1. A non-terminal symbol may be any Prolog term (other than a
     variable or number).

  2. A terminal symbol may be any Prolog term. To distinguish
     terminals from non-terminals, a sequence of one or more terminal
     symbols is written within a grammar rule as a Prolog list. An
     empty sequence is written as the empty list `[]'. If the
     terminal symbols are ASCII character codes, such lists can be
     written (as elsewhere) as strings. An empty sequence is written
     as the empty list, `[]' or `""'.

  3. Extra conditions, in the form of Prolog procedure calls, may be
     included in the right-hand side of a grammar rule. Such
     procedure calls are written enclosed in `{}' brackets.

  4. The left-hand side of a grammar rule consists of a non-terminal,
     optionally followed by a sequence of terminals (again written as
     a Prolog list).

  5. Alternatives may be stated explicitly in the right-hand side of
     a grammar rule, using the disjunction operator `;' or `|' as in
     Prolog.

  6. The cut symbol may be included in the right-hand side of a
     grammar rule, as in a Prolog clause. The cut symbol does not
     need to be enclosed in `{}' brackets.

   As an example, here is a simple grammar which parses an arithmetic
expression (made up of digits and operators) and computes its value.

     expr(Z) --> term(X), "+", expr(Y), {Z is X + Y}.
     expr(Z) --> term(X), "-", expr(Y), {Z is X - Y}.
     expr(X) --> term(X).
     
     term(Z) --> number(X), "*", term(Y), {Z is X * Y}.
     term(Z) --> number(X), "/", term(Y), {Z is X / Y}.
     term(Z) --> number(Z).
     
     number(C) --> "+", number(C).
     number(C) --> "-", number(X), {C is -X}.
     number(X) --> [C], {0'0=<C, C=<0'9, X is C - 0'0}.

   In the last rule, `C' is the ASCII code of some digit.

   The query

     | ?- expr(Z, "-2+3*5+1", []).

will compute `Z'=14. The two extra arguments are explained below.

   Now, in fact, grammar rules are merely a convenient "syntactic
sugar" for ordinary Prolog clauses. Each grammar rule takes an input
string, analyses some initial portion, and produces the remaining
portion (possibly enlarged) as output for further analysis. The
arguments required for the input and output strings are not written
explicitly in a grammar rule, but the syntax implicitly defines them.
We now show how to translate grammar rules into ordinary clauses by
making explicit the extra arguments.

   A rule such as

     p(X) --> q(X).

translates into

     p(X, S0, S) :- q(X, S0, S).

   If there is more than one non-terminal on the right-hand side, as
in

     p(X, Y) -->
             q(X),
             r(X, Y),
             s(Y).

then corresponding input and output arguments are identified, as in

     p(X, Y, S0, S) :-
             q(X, S0, S1),
             r(X, Y, S1, S2),
             r(Y, S2, S).

   Terminals are translated using the built-in predicate `'C'/3'
(this predicate is not normally useful in itself; it has been given
the name `'C'' simply to avoid using up a more useful name). Then,
for instance

     p(X) --> [go,to], q(X), [stop].

is translated by

     p(X, S0, S) :-
             'C'(S0, go, S1),
             'C'(S1, to, S2),
             q(X, S2, S3),
             'C'(S3, stop, S).

   Extra conditions expressed as explicit procedure calls naturally
translate as themselves, e.g.

     p(X) --> [X], {integer(X), X>0}, q(X).

translates to

     p(X, S0, S) :-
             'C'(S0, X, S1),
             integer(X),
             X>0,
             q(X, S1, S).

   Similarly, a cut is translated literally.

   Terminals on the left-hand side of a rule translate into an
explicit list in the output argument of the main non-terminal, e.g.

     is(N), [not] --> [aint].

becomes

     is(N, S0, [not|S]) :- 'C'(S0, aint, S).

   Disjunction has a fairly obvious translation, e.g.

     args(X, Y) -->
             (   dir(X), [to], indir(Y)
             ;   indir(Y), dir(X)
             ).

translates to

     args(X, Y, S0, S) :-
             (   dir(X, S0, S1),
                 'C'(S1, to, S2),
                 indir(Y, S2, S)
             ;   indir(Y, S0, S1),
                 dir(X, S1, S)
             ).

* Menu:

* Usage and interface (dcg)::


File: ciao.info,  Node: Usage and interface (dcg),  Prev: Definite clause grammars,  Up: Definite clause grammars

Usage and interface (`dcg')
===========================

   * *Library usage:*

     `:- use_package(dcg).'

     or

     `:- module(...,...,[dcg]).'


File: ciao.info,  Node: Definite clause grammars (expansion),  Next: List processing,  Prev: Definite clause grammars,  Up: Top

Definite clause grammars (expansion)
************************************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (dcg_expansion)::
* Documentation on exports (dcg_expansion)::


File: ciao.info,  Node: Usage and interface (dcg_expansion),  Next: Documentation on exports (dcg_expansion),  Prev: Definite clause grammars (expansion),  Up: Definite clause grammars (expansion)

Usage and interface (`dcg_expansion')
=====================================

   * *Library usage:*

     `:- use_module(library(dcg_expansion)).'

   * *Exports:*
        - _Predicates:_

          `phrase/2', `phrase/3', `dcg_translation/2'.


   * *Other modules used:*
        - _System library modules:_

          `terms', `assertions/doc_props'.




File: ciao.info,  Node: Documentation on exports (dcg_expansion),  Prev: Usage and interface (dcg_expansion),  Up: Definite clause grammars (expansion)

Documentation on exports (`dcg_expansion')
==========================================

 - PREDICATE: phrase/2:
     `phrase(Phrase,List)'

     Like `phrase(Phrase,List,[])'.

     _Meta-predicate_ with arguments: `phrase(goal,?)'.




 - PREDICATE: phrase/3:
     _Meta-predicate_ with arguments: `phrase(goal,?,?)'.

     *Usage:* `phrase(+Phrase,?List,?Remainder)'
        - _Description:_ The list `List' is a phrase of type `Phrase'
          (according to the current grammar rules), where `Phrase' is
          either a non-terminal or more generally a grammar rule
          body. `Remainder' is what remains of the list after a
          phrase has been found.

        - _The following properties should hold globally:_

          Documentation is still incomplete:
          `phrase(+Phrase,?List,?Remainder)' may not conform the
          functionality documented.   (`doc_props:doc_incomplete/1')



 - PREDICATE: dcg_translation/2:
     Performs the code expansion of source clauses that use DCGs.





File: ciao.info,  Node: List processing,  Next: Sorting lists,  Prev: Definite clause grammars (expansion),  Up: Top

List processing
***************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#41 (2000/2/4, 13:34:24 CET)

   This module provides a set of predicates for list processing.

* Menu:

* Usage and interface (lists)::
* Documentation on exports (lists)::


File: ciao.info,  Node: Usage and interface (lists),  Next: Documentation on exports (lists),  Prev: List processing,  Up: List processing

Usage and interface (`lists')
=============================

   * *Library usage:*

     `:- use_module(library(lists)).'

   * *Exports:*
        - _Predicates:_

          `nonsingle/1', `append/3', `reverse/2', `reverse/3',
          `delete/3', `select/3', `length/2', `nth/3', `add_after/4',
          `add_before/4', `dlist/3', `list_concat/2', `list_insert/2',
          `insert_last/3', `contains_ro/2', `contains1/2',
          `nocontainsx/2', `last/2', `list_lookup/3', `list_lookup/4',
          `intset_insert/3', `intset_delete/3', `intset_in/2',
          `intset_sequence/3', `intersection/3', `union/3',
          `difference/3', `equal_lists/2', `list_to_list_of_lists/2',
          `powerset/2'.

        - _Properties:_

          `list1/2', `sublist/2', `subordlist/2'.




File: ciao.info,  Node: Documentation on exports (lists),  Prev: Usage and interface (lists),  Up: List processing

Documentation on exports (`lists')
==================================

 - PREDICATE: nonsingle/1:
     *Usage:* `nonsingle(X)'
        - _Description:_ `X' is not a singleton.



 - PREDICATE: append/3:
     *Usage:* `append(Xs,Ys,Zs)'
        - _Description:_ `Zs' is `Ys' appended to `Xs'.



 - PREDICATE: reverse/2:
     *Usage:* `reverse(Xs,Ys)'
        - _Description:_ Reverses the order of elements in `Xs'.

        - _The following properties should hold at call time:_

          `Xs' is a list.   (`basic_props:list/1')

          `Ys' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Xs' is a list.   (`basic_props:list/1')

          `Ys' is a list.   (`basic_props:list/1')



 - PREDICATE: reverse/3:
     No further documentation available for this predicate.




 - PREDICATE: delete/3:
     *Usage:* `delete(L1,E,L2)'
        - _Description:_ `L2' is `L1' without the ocurrences of `E'.



 - PREDICATE: select/3:
     *Usage:* `select(X,Xs,Ys)'
        - _Description:_ `Xs' and `Ys' have the same elements except
          for one occurrence of `X'.



 - PREDICATE: length/2:
     *Usage 1:* `length(L,N)'
        - _Description:_ Computes the length of `L'.

        - _The following properties should hold at call time:_

          `L' is a list.   (`basic_props:list/1')

          `N' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `L' is a list.   (`basic_props:list/1')

          `N' is currently instantiated to an integer.
          (`term_typing:integer/1')

     *Usage 2:* `length(L,N)'
        - _Description:_ Outputs `L' of length `N'.

        - _The following properties should hold at call time:_

          `L' is a free variable.   (`term_typing:var/1')

          `N' is currently instantiated to an integer.
          (`term_typing:integer/1')

        - _The following properties should hold upon exit:_

          `L' is a list.   (`basic_props:list/1')

          `N' is currently instantiated to an integer.
          (`term_typing:integer/1')

     *Usage 3:* `length(L,N)'
        - _Description:_ Checks that `L' is of length `N'.

        - _The following properties should hold at call time:_

          `L' is a list.   (`basic_props:list/1')

          `N' is currently instantiated to an integer.
          (`term_typing:integer/1')

        - _The following properties should hold upon exit:_

          `L' is a list.   (`basic_props:list/1')

          `N' is currently instantiated to an integer.
          (`term_typing:integer/1')



 - PREDICATE: nth/3:
     `nth(N,List,Elem)'

     `N' is the position in `List' of `Elem'. `N' counts from one.

     *Usage 1:* `nth(+int,?list,?term)'
        - _Description:_ Unifies `Elem' and the `N'th element of
          `List'.

     *Usage 2:* `nth(-int,?list,?term)'
        - _Description:_ Finds the positions where `Elem' is in
          `List'. Positions are found in ascending order.



 - PREDICATE: add_after/4:
     *Usage:* `add_after(+L0,+E0,+E,-L)'
        - _Description:_ Adds element `E' after element `E0' (or at
          end) to list `L0' returning in `L' the new list (uses term
          comparison).



 - PREDICATE: add_before/4:
     No further documentation available for this predicate.




 - PROPERTY: list1/2:
     _Meta-predicate_ with arguments: `list1(?,pred(1))'.

     *Usage:* `list1(X,Y)'
        - _Description:_ `X' is a list of `Y's of at least one
          element.



 - PREDICATE: dlist/3:
     *Usage:* `dlist(List,DList,Tail)'
        - _Description:_ `List' is the result of removing `Tail' from
          the end of `DList' (makes a difference list from a list).



 - PREDICATE: list_concat/2:
     *Usage:* `list_concat(LL,L)'
        - _Description:_ `L' is the concatenation of all the lists in
          `LL'.

        - _Call and exit should be _compatible_ with:_

          `LL' is a list of `list's.   (`basic_props:list/2')

          `L' is a list.   (`basic_props:list/1')



 - PREDICATE: list_insert/2:
     *Usage:* `list_insert(-List,+Term)'
        - _Description:_ Adds `Term' to the end of `List' if there is
          no element in `List' identical to `Term'.



 - PREDICATE: insert_last/3:
     *Usage:* `insert_last(+L0,+E,-L)'
        - _Description:_ Adds element `E' at end of list `L0'
          returning `L'.



 - PREDICATE: contains_ro/2:
     *Usage:*
        - _Description:_ Impure membership (does not instantiate a
          variable in its first argument.



 - PREDICATE: contains1/2:
     No further documentation available for this predicate.




 - PREDICATE: nocontainsx/2:
     *Usage:* `nocontainsx(L,X)'
        - _Description:_ `X' is not identical to any element of `L'.



 - PREDICATE: last/2:
     *Usage:* `last(L,X)'
        - _Description:_ X is the last element of L.



 - PREDICATE: list_lookup/3:
     No further documentation available for this predicate.




 - PREDICATE: list_lookup/4:
     *Usage:* `list_lookup(List,Functor,Key,Value)'
        - _Description:_ Look up `Functor'(`Key',`Value') pair in
          variable ended key-value pair list `L' or else add it at
          the end.



 - PREDICATE: intset_insert/3:
     No further documentation available for this predicate.




 - PREDICATE: intset_delete/3:
     No further documentation available for this predicate.




 - PREDICATE: intset_in/2:
     No further documentation available for this predicate.




 - PREDICATE: intset_sequence/3:
     No further documentation available for this predicate.




 - PREDICATE: intersection/3:
     *Usage:* `intersection(+List1,+List2,-List)'
        - _Description:_ `List' has the elements which are both in
          `List1' and `List2'.



 - PREDICATE: union/3:
     *Usage:* `union(+List1,+List2,-List)'
        - _Description:_ `List' has the elements which are in `List1'
          followed by the elements which are in `List2' but not in
          `List1'.



 - PREDICATE: difference/3:
     *Usage:* `difference(+List1,+List2,-List)'
        - _Description:_ `List' has the elements which are in `List1'
          but not in `List2'.



 - PROPERTY: sublist/2:
     *Usage:* `sublist(List1,List2)'
        - _Description:_ `List2' contains all the elements of `List1'.

        - _If the following properties should hold at call time:_

          `List2' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PROPERTY: subordlist/2:
     *Usage:* `subordlist(List1,List2)'
        - _Description:_ `List2' contains all the elements of `List1'
          in the same order.

        - _If the following properties should hold at call time:_

          `List2' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - PREDICATE: equal_lists/2:
     *Usage:* `equal_lists(+List1,+List2)'
        - _Description:_ `List1' has all the elements of `List2', and
          vice versa.



 - PREDICATE: list_to_list_of_lists/2:
     *Usage:* `list_to_list_of_lists(+List,-LList)'
        - _Description:_ `LList' is the list of one element lists
          with elements of `List'.



 - PREDICATE: powerset/2:
     *Usage:* `powerset(+List,-LList)'
        - _Description:_ `LList' is the powerset of `List', i.e., the
          list of all lists which have elements of `List'. If `List'
          is ordered, `LList' and all its elements are ordered.




File: ciao.info,  Node: Sorting lists,  Next: Dictionaries,  Prev: List processing,  Up: Top

Sorting lists
*************

   *Author(s):* Richard A. O'Keefe. All changes by UPM CLIP Group..

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (sort)::
* Documentation on exports (sort)::
* Documentation on internals (sort)::


File: ciao.info,  Node: Usage and interface (sort),  Next: Documentation on exports (sort),  Prev: Sorting lists,  Up: Sorting lists

Usage and interface (`sort')
============================

   * *Library usage:*

     `:- use_module(library(sort)).'

   * *Exports:*
        - _Predicates:_

          `sort/2', `keysort/2'.

        - _Regular Types:_

          `keylist/1'.




File: ciao.info,  Node: Documentation on exports (sort),  Next: Documentation on internals (sort),  Prev: Usage and interface (sort),  Up: Sorting lists

Documentation on exports (`sort')
=================================

 - PREDICATE: sort/2:
     `sort(List1,List2)'

     The elements of `List1' are sorted into the standard order (see
     *Note Comparing terms::) and any identical elements are merged,
     yielding `List2'. The time and space complexity of this
     operation is at worst `O(N lg N)' where `N' is the length of
     `List1'.

     *Usage:* `sort(+list,?list)'
        - _Description:_ `List2' is the sorted list corresponding to
          `List1'.



 - PREDICATE: keysort/2:
     `keysort(List1,List2)'

     `List1' is sorted into order according to the value of the
     _keys_ of its elements, yielding the list `List2'. No merging
     takes place. This predicate is _stable_, i.e., if an element `A'
     occurs before another element `B' _with the same key_ in the
     input, then `A' will occur before `B' also in the output. The
     time and space complexity of this operation is at worst `O(N lg
     N)' where `N' is the length of `List1'.

     *Usage:* `keysort(+keylist,?keylist)'
        - _Description:_ `List2' is the (key-)sorted list
          corresponding to `List1'.



 - REGTYPE: keylist/1:
     *Usage:* `keylist(L)'
        - _Description:_ `L' is a list of pairs of the form
          `Key-Value'.




File: ciao.info,  Node: Documentation on internals (sort),  Prev: Documentation on exports (sort),  Up: Sorting lists

Documentation on internals (`sort')
===================================

 - REGTYPE: keypair/1:
     *Usage:* `keypair(P)'
        - _Description:_ `P' is a pair of the form "`K-_'", where `K'
          is considered the _key_.




File: ciao.info,  Node: Dictionaries,  Next: String processing,  Prev: Sorting lists,  Up: Top

Dictionaries
************

   *Version:* 1.7#139 (2001/11/12, 17:24:35 CET)

   This module provides predicates for implementing dictionaries.
Such dictionaries are currently implemented as ordered binary trees
of key-value pairs.

* Menu:

* Usage and interface (dict)::
* Documentation on exports (dict)::


File: ciao.info,  Node: Usage and interface (dict),  Next: Documentation on exports (dict),  Prev: Dictionaries,  Up: Dictionaries

Usage and interface (`dict')
============================

   * *Library usage:*

     `:- use_module(library(dict)).'

   * *Exports:*
        - _Predicates:_

          `dictionary/5', `dic_node/2', `dic_lookup/3',
          `dic_lookup/4', `dic_get/3', `dic_replace/4'.

        - _Properties:_

          `dictionary/1'.




File: ciao.info,  Node: Documentation on exports (dict),  Prev: Usage and interface (dict),  Up: Dictionaries

Documentation on exports (`dict')
=================================

 - PROPERTY: dictionary/1:
     *Usage:* `dictionary(D)'
        - _Description:_ `D' is a dictionary.



 - PREDICATE: dictionary/5:
     *Usage:* `dictionary(D,K,V,L,R)'
        - _Description:_ The dictionary node `D' has key `K', value
          `V', left child `L', and right child `R'.



 - PREDICATE: dic_node/2:
     *Usage:* `dic_node(D,N)'
        - _Description:_ `N' is a sub-dictionary of `D'.

        - _Calls should, and exit will be compatible with:_

          `D' is a dictionary.   (`dict:dictionary/1')

          `N' is a dictionary.   (`dict:dictionary/1')



 - PREDICATE: dic_lookup/3:
     *Usage:* `dic_lookup(D,K,V)'
        - _Description:_ `D' contains value `V' at key `K'. If it was
          not already in `D' it is added.

        - _Calls should, and exit will be compatible with:_

          `D' is a dictionary.   (`dict:dictionary/1')



 - PREDICATE: dic_lookup/4:
     *Usage:* `dic_lookup(D,K,V,O)'
        - _Description:_ Same as `dic_lookup(D,K,V)'. `O' indicates
          if it was already in `D' (`old') or not (`new').

        - _Calls should, and exit will be compatible with:_

          `D' is a dictionary.   (`dict:dictionary/1')



 - PREDICATE: dic_get/3:
     *Usage:* `dic_get(D,K,V)'
        - _Description:_ `D' contains value `V' at key `K'. Fails if
          it is not already in `D'.

        - _Calls should, and exit will be compatible with:_

          `D' is a dictionary.   (`dict:dictionary/1')



 - PREDICATE: dic_replace/4:
     *Usage:* `dic_replace(D,K,V,D1)'
        - _Description:_ `D' and `D1' are identical except for the
          element at key `K', which in `D1' contains value `V',
          whatever has (or whether it is) in `D'.

        - _Calls should, and exit will be compatible with:_

          `D' is a dictionary.   (`dict:dictionary/1')

          `D1' is a dictionary.   (`dict:dictionary/1')




File: ciao.info,  Node: String processing,  Next: Formatted output,  Prev: Dictionaries,  Up: Top

String processing
*****************

   *Author(s):* Daniel Cabeza.

   *Version:* 0.4#5 (1998/2/24)

   This module provides predicates for doing input/output with
strings (character code lists) and for including in grammars defining
strings.

* Menu:

* Usage and interface (strings)::
* Documentation on exports (strings)::
* Documentation on internals (strings)::


File: ciao.info,  Node: Usage and interface (strings),  Next: Documentation on exports (strings),  Prev: String processing,  Up: String processing

Usage and interface (`strings')
===============================

   * *Library usage:*

     `:- use_module(library(strings)).'

   * *Exports:*
        - _Predicates:_

          `get_line/2', `get_line/1', `write_string/2',
          `write_string/1', `whitespace/2', `whitespace0/2',
          `string/3'.




File: ciao.info,  Node: Documentation on exports (strings),  Next: Documentation on internals (strings),  Prev: Usage and interface (strings),  Up: String processing

Documentation on exports (`strings')
====================================

 - PREDICATE: get_line/2:
     `get_line(Stream,Line)'

     Reads from `Stream' a line of text and unifies `Line' with it.
     The end of the line can have UNIX [10] or MS-DOS [13 10]
     termination, which is not included in `Line'. At EOF, the term
     end_of_file is returned.




 - PREDICATE: get_line/1:
     `get_line(Line)'

     Behaves like `current_input(S), get_line(S,Line)'.




 - PREDICATE: write_string/2:
     `write_string(Stream,String)'

     Writes `String' onto `Stream'.




 - PREDICATE: write_string/1:
     `write_string(String)'

     Behaves like `current_input(S), write_string(S, String)'.




 - PREDICATE: whitespace/2:
     `whitespace(String,Rest)'

     In a grammar rule, as `whitespace/0', represents whitespace (a
     positive number of space (32), tab (9), newline (10) or return
     (13) characters). Thus, `Rest' is a proper suffix of `String'
     with one or more whitespace characters removed. An example of
     use would be:
             attrs([]) --> ""
             attrs([N|Ns]) -->
                 whitespace,
                 attr(N),
                 attrs(Ns).




 - PREDICATE: whitespace0/2:
     `whitespace0(String,Rest)'

     In a grammar rule, as `whitespace0/0', represents possible
     whitespace (any number of space (32), tab (9), newline (10) or
     return (13) characters). Thus, `Rest' is `String' or a proper
     suffix of `String' with one or more whitespace characters
     removed. An example of use would be:

             assignment(N,V) -->
                 variable_name(N), whitespace0, "=", whitespace0, value(V).




 - PREDICATE: string/3:
     `string(String,Head,Tail)'

     In a grammar rule, as `string/1', represents literally `String'.
     An example of use would be:

          double(A) -->
                  string(A),
                  string(A).





File: ciao.info,  Node: Documentation on internals (strings),  Prev: Documentation on exports (strings),  Up: String processing

Documentation on internals (`strings')
======================================

 - PROPERTY: line/1:
     A property, defined as follows:
               line(L) :-
                       string(L).
               line(end_of_file).





File: ciao.info,  Node: Formatted output,  Next: DEC-10 Prolog file IO,  Prev: String processing,  Up: Top

Formatted output
****************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#27 (1999/7/9, 20:25:50 MEST)

   The `format' family of predicates is due to Quintus Prolog. They
act as a Prolog interface to the C `stdio' function `printf()',
allowing formatted output.

   Output is formatted according to an output pattern which can have
either a format control sequence or any other character, which will
appear verbatim in the output. Control sequences act as place-holders
for the actual terms that will be output. Thus
             ?- format("Hello ~q!",world).

will print `Hello world!'.

   If there is only one item to print it may be supplied alone. If
there are more they have to be given as a list. If there are none
then an empty list should be supplied. There has to be as many items
as control characters.

   The character `~' introduces a control sequence. To print a `~'
verbatim just repeat it:
             ?- format("Hello ~~world!", []).

will result in `Hello ~world!'.

   A format may be spread over several lines. The control sequence
`\c' followed by a <LFD> will translate to the empty string:
             ?- format("Hello \c
             world!", []).

will result in `Hello world!'.

* Menu:

* Usage and interface (format)::
* Documentation on exports (format)::


File: ciao.info,  Node: Usage and interface (format),  Next: Documentation on exports (format),  Prev: Formatted output,  Up: Formatted output

Usage and interface (`format')
==============================

   * *Library usage:*

     `:- use_module(library(format)).'

   * *Exports:*
        - _Predicates:_

          `format/2', `format/3'.

        - _Regular Types:_

          `format_control/1'.


   * *Other modules used:*
        - _System library modules:_

          `write', `assertions/doc_props'.




File: ciao.info,  Node: Documentation on exports (format),  Prev: Usage and interface (format),  Up: Formatted output

Documentation on exports (`format')
===================================

 - PREDICATE: format/2:
     *Usage:* `format(Format,Arguments)'
        - _Description:_ Print `Arguments' onto current output stream
          according to format `Format'.

        - _Call and exit should be _compatible_ with:_

          `Format' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')



 - PREDICATE: format/3:
     *Usage:* `format(+Stream,Format,Arguments)'
        - _Description:_ Print `Arguments' onto `Stream' according to
          format `Format'.

        - _Call and exit should be _compatible_ with:_

          `Format' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')



 - REGTYPE: format_control/1:
     The general format of a control sequence is `~`N'`C''. The
     character `C' determines the type of the control sequence. `N'
     is an optional numeric argument. An alternative form of `N' is
     `*'. `*' implies that the next argument in `Arguments' should be
     used as a numeric argument in the control sequence. Example:

          ?- format("Hello~4cworld!", [0'x]).

     and

          ?- format("Hello~*cworld!", [4,0'x]).

     both produce

          Helloxxxxworld!

     The following control sequences are available.

        * ~a The argument is an atom. The atom is printed without
          quoting.

        * ~`N'c (Print character.) The argument is a number that will
          be interpreted as an ASCII code. `N' defaults to one and is
          interpreted as the number of times to print the character.

        * ~`N'e

        * ~`N'E

        * ~`N'f

        * ~`N'g

        * ~`N'G (Print float). The argument is a float. The float and
          `N' will be passed to the C `printf()' function as

               printf("%.`N'e", `Arg')
               printf("%.`N'E", `Arg')
               printf("%.`N'f", `Arg')
               printf("%.`N'g", `Arg')
               printf("%.`N'G", `Arg')

          If `N' is not supplied the action defaults to

               printf("%e", `Arg')
               printf("%E", `Arg')
               printf("%f", `Arg')
               printf("%g", `Arg')
               printf("%G", `Arg')

        * ~`N'd (Print decimal.) The argument is an integer. `N' is
          interpreted as the number of digits after the decimal
          point. If `N' is 0 or missing, no decimal point will be
          printed. Example:

               ?- format("Hello ~1d world!", [42]).
               ?- format("Hello ~d world!", [42]).

          will print as

               Hello 4.2 world!
               Hello 42 world!

          respectively.

        * ~`N'D (Print decimal.) The argument is an integer.
          Identical to `~`N'd' except that `,' will separate groups
          of three digits to the left of the decimal point. Example:

               ?- format("Hello ~1D world!", [12345]).

          will print as

               Hello 1,234.5 world!

        * ~`N'r (Print radix.) The argument is an integer. `N' is
          interpreted as a radix. `N' should be >= 2 and <= 36. If
          `N' is missing the radix defaults to 8. The letters `a-z'
          will denote digits larger than 9. Example:

               ?- format("Hello ~2r world!", [15]).
               ?- format("Hello ~16r world!", [15]).

          will print as

               Hello 1111 world!
               Hello f world!

          respectively.

        * ~`N'R (Print radix.) The argument is an integer. Identical
          to `~`N'r' except that the letters `A-Z' will denote digits
          larger than 9. Example:

               ?- format("Hello ~16R world!", [15]).

          will print as

               Hello F world!

        * ~`N's (Print string.) The argument is a list of ASCII
          codes. Exactly `N' characters will be printed. `N' defaults
          to the length of the string. Example:

               ?- format("Hello ~4s ~4s!", ["new","world"]).
               ?- format("Hello ~s world!", ["new"]).

          will print as

               Hello new  worl!
               Hello new world!

          respectively.

        * ~i (Ignore argument.) The argument may be of any type. The
          argument will be ignored. Example:

               ?- format("Hello ~i~s world!", ["old","new"]).

          will print as

               Hello new world!

        * ~k (Print canonical.) The argument may be of any type. The
          argument will be passed to `write_canonical/2' (*Note Term
          output::). Example:

               ?- format("Hello ~k world!", [[a,b,c]]).

          will print as

               Hello .(a,.(b,.(c,[]))) world!

        * ~p (print.) The argument may be of any type. The argument
          will be passed to `print/2' (*Note Term output::). Example:

          suposing the user has defined the predicate

               :- multifile portray/1.
               portray([X|Y]) :- print(cons(X,Y)).

          then

               ?- format("Hello ~p world!", [[a,b,c]]).

          will print as

               Hello cons(a,cons(b,cons(c,[]))) world!

        * ~q (Print quoted.) The argument may be of any type. The
          argument will be passed to `writeq/2' (*Note Term
          output::). Example:

               ?- format("Hello ~q world!", [['A','B']]).

          will print as

               Hello ['A','B'] world!

        * ~w (write.) The argument may be of any type. The argument
          will be passed to `write/2' (*Note Term output::). Example:

               ?- format("Hello ~w world!", [['A','B']]).

          will print as

               Hello [A,B] world!

        * ~`N'n (Print newline.) Print `N' newlines. `N' defaults to
          1. Example:

               ?- format("Hello ~n world!", []).

          will print as

               Hello
                world!

        * ~N (Fresh line.) Print a newline, if not already at the
          beginning of a line.

        * ~~ (Print tilde.) Prints `~'


     The following control sequences are also available for
     compatibility, but do not perform any useful functions.

        * ~`N'| (Set tab.) Set a tab stop at position `N', where `N'
          defaults to the current position, and advance the current
          position there.

        * ~`N'+ (Advance tab.) Set a tab stop at `N' positions past
          the current position, where `N' defaults to 8, and advance
          the current position there.

        * ~`N't (Set fill character.) Set the fill character to be
          used in the next position movement to `N', where `N'
          defaults to <SPC>.

     *Usage:* `format_control(C)'
        - _Description:_ `C' is an atom or string describing how the
          arguments should be formatted. If it is an atom it will be
          converted into a string with `name/2'.

        - _The following properties should hold globally:_

          Documentation is still incomplete: `format_control(C)' may
          not conform the functionality documented.
          (`doc_props:doc_incomplete/1')




File: ciao.info,  Node: DEC-10 Prolog file IO,  Next: ttyout (library),  Prev: Formatted output,  Up: Top

DEC-10 Prolog file IO
*********************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.4#5 (1998/2/24)

   This module implements the support for DEC-10 Prolog style file
I/O.

* Menu:

* Usage and interface (dec10_io)::
* Documentation on exports (dec10_io)::


File: ciao.info,  Node: Usage and interface (dec10_io),  Next: Documentation on exports (dec10_io),  Prev: DEC-10 Prolog file IO,  Up: DEC-10 Prolog file IO

Usage and interface (`dec10_io')
================================

   * *Library usage:*

     `:- use_module(library(dec10_io)).'

   * *Exports:*
        - _Predicates:_

          `see/1', `seeing/1', `seen/0', `tell/1', `telling/1',
          `told/0', `close_file/1'.


   * *Other modules used:*
        - _System library modules:_

          `streams'.




File: ciao.info,  Node: Documentation on exports (dec10_io),  Prev: Usage and interface (dec10_io),  Up: DEC-10 Prolog file IO

Documentation on exports (`dec10_io')
=====================================

 - PREDICATE: see/1:
     No further documentation available for this predicate.




 - PREDICATE: seeing/1:
     No further documentation available for this predicate.




 - PREDICATE: seen/0:
     No further documentation available for this predicate.




 - PREDICATE: tell/1:
     No further documentation available for this predicate.




 - PREDICATE: telling/1:
     No further documentation available for this predicate.




 - PREDICATE: told/0:
     No further documentation available for this predicate.




 - PREDICATE: close_file/1:
     No further documentation available for this predicate.





File: ciao.info,  Node: ttyout (library),  Next: compiler (library),  Prev: DEC-10 Prolog file IO,  Up: Top

ttyout (library)
****************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (ttyout)::
* Documentation on exports (ttyout)::


File: ciao.info,  Node: Usage and interface (ttyout),  Next: Documentation on exports (ttyout),  Prev: ttyout (library),  Up: ttyout (library)

Usage and interface (`ttyout')
==============================

   * *Library usage:*

     `:- use_module(library(ttyout)).'

   * *Exports:*
        - _Predicates:_

          `ttyget/1', `ttyget1/1', `ttynl/0', `ttyput/1', `ttyskip/1',
          `ttytab/1', `ttyflush/0', `ttydisplay/1', `ttydisplayq/1',
          `ttyskipeol/0', `ttydisplay_string/1'.




File: ciao.info,  Node: Documentation on exports (ttyout),  Prev: Usage and interface (ttyout),  Up: ttyout (library)

Documentation on exports (`ttyout')
===================================

 - PREDICATE: ttyget/1:
     No further documentation available for this predicate.




 - PREDICATE: ttyget1/1:
     No further documentation available for this predicate.




 - PREDICATE: ttynl/0:
     No further documentation available for this predicate.




 - PREDICATE: ttyput/1:
     No further documentation available for this predicate.




 - PREDICATE: ttyskip/1:
     No further documentation available for this predicate.




 - PREDICATE: ttytab/1:
     No further documentation available for this predicate.




 - PREDICATE: ttyflush/0:
     No further documentation available for this predicate.




 - PREDICATE: ttydisplay/1:
     No further documentation available for this predicate.




 - PREDICATE: ttydisplayq/1:
     No further documentation available for this predicate.




 - PREDICATE: ttyskipeol/0:
     No further documentation available for this predicate.




 - PREDICATE: ttydisplay_string/1:
     No further documentation available for this predicate.





File: ciao.info,  Node: compiler (library),  Next: Quintus-like internal database,  Prev: ttyout (library),  Up: Top

compiler (library)
******************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#176 (2002/1/14, 17:27:0 CET)

* Menu:

* Usage and interface (compiler)::
* Documentation on exports (compiler)::


File: ciao.info,  Node: Usage and interface (compiler),  Next: Documentation on exports (compiler),  Prev: compiler (library),  Up: compiler (library)

Usage and interface (`compiler')
================================

   * *Library usage:*

     `:- use_module(library(compiler)).'

   * *Exports:*
        - _Predicates:_

          `make_po/1', `ensure_loaded/1', `use_module/1',
          `use_module/2', `use_module/3', `unload/1',
          `set_debug_mode/1', `set_nodebug_mode/1',
          `set_debug_module/1', `set_nodebug_module/1',
          `set_debug_module_source/1', `mode_of_module/2',
          `module_of/2'.


   * *Other modules used:*
        - _System library modules:_

          `compiler/c_itf'.




File: ciao.info,  Node: Documentation on exports (compiler),  Prev: Usage and interface (compiler),  Up: compiler (library)

Documentation on exports (`compiler')
=====================================

 - PREDICATE: make_po/1:
     No further documentation available for this predicate.




 - PREDICATE: ensure_loaded/1:
     No further documentation available for this predicate.




 - PREDICATE: use_module/1:
     No further documentation available for this predicate.




 - PREDICATE: use_module/2:
     No further documentation available for this predicate.

     _Meta-predicate_ with arguments: `use_module(?,addmodule)'.




 - PREDICATE: use_module/3:
     No further documentation available for this predicate.




 - PREDICATE: unload/1:
     No further documentation available for this predicate.




 - PREDICATE: set_debug_mode/1:
     No further documentation available for this predicate.




 - PREDICATE: set_nodebug_mode/1:
     No further documentation available for this predicate.




 - PREDICATE: set_debug_module/1:
     No further documentation available for this predicate.




 - PREDICATE: set_nodebug_module/1:
     No further documentation available for this predicate.




 - PREDICATE: set_debug_module_source/1:
     No further documentation available for this predicate.




 - PREDICATE: mode_of_module/2:
     No further documentation available for this predicate.




 - PREDICATE: module_of/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: Quintus-like internal database,  Next: Enabling operators at run-time,  Prev: compiler (library),  Up: Top

Quintus-like internal database
******************************

   *Version:* 0.4#5 (1998/2/24)

   The predicates described in this section were introduced in early
implementations of Prolog to provide efficient means of performing
operations on large quantities of data. The introduction of indexed
dynamic predicates have rendered these predicates obsolete, and the
sole purpose of providing them is to support existing code. There is
no reason whatsoever to use them in new code.

   These predicates store arbitrary terms in the database without
interfering with the clauses which make up the program. The terms
which are stored in this way can subsequently be retrieved via the
key on which they were stored. Many terms may be stored on the same
key, and they can be individually accessed by pattern matching.
Alternatively, access can be achieved via a special identifier which
uniquely identifies each recorded term and which is returned when the
term is stored.

* Menu:

* Usage and interface (old_database)::
* Documentation on exports (old_database)::


File: ciao.info,  Node: Usage and interface (old_database),  Next: Documentation on exports (old_database),  Prev: Quintus-like internal database,  Up: Quintus-like internal database

Usage and interface (`old_database')
====================================

   * *Library usage:*

     `:- use_module(library(old_database)).'

   * *Exports:*
        - _Predicates:_

          `recorda/3', `recordz/3', `recorded/3', `current_key/2'.




File: ciao.info,  Node: Documentation on exports (old_database),  Prev: Usage and interface (old_database),  Up: Quintus-like internal database

Documentation on exports (`old_database')
=========================================

 - PREDICATE: recorda/3:
     `recorda(+Key,?Term,-Ref)'

     The term `Term' is recorded in the internal database as the
     first item for the key `Key', where `Ref' is its
     implementation-defined identifier. The key must be given, and
     only its principal functor is significant. Any uninstantiated
     variables in the `Term' will be replaced by new private
     variables, along with copies of any subgoals blocked on these
     variables.




 - PREDICATE: recordz/3:
     `recordz(+Key,?Term,-Ref)'

     Like `recorda/3', except that the new term becomes the _last_
     item for the key `Key'.




 - PREDICATE: recorded/3:
     `recorded(?Key,?Term,?Ref)'

     The internal database is searched for terms recorded under the
     key `Key'. These terms are successively unified with `Term' in
     the order they occur in the database. At the same time, `Ref' is
     unified with the implementation-defined identifier uniquely
     identifying the recorded item. If the key is instantiated to a
     compound term, only its principal functor is significant. If the
     key is uninstantiated, all terms in the database are
     successively unified with `Term' in the order they occur.




 - PREDICATE: current_key/2:
     `current_key(?KeyName,?KeyTerm)'

     `KeyTerm' is the most general form of the key for a currently
     recorded term, and `KeyName' is the name of that key. This
     predicate can be used to enumerate in undefined order all keys
     for currently recorded terms through backtracking.





File: ciao.info,  Node: Enabling operators at run-time,  Next: *** PART V - Annotated Prolog library (assertions),  Prev: Quintus-like internal database,  Up: Top

Enabling operators at run-time
******************************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#140 (2001/11/12, 17:27:51 CET)

   This library package allows the use of the statically defined
operators of a module for the reading performed at run-time by the
program that uses the module. Simply by using this package the
operator definitions appearing in the module are enabled during the
execution of the program.

* Menu:

* Usage and interface (runtime_ops)::


File: ciao.info,  Node: Usage and interface (runtime_ops),  Prev: Enabling operators at run-time,  Up: Enabling operators at run-time

Usage and interface (`runtime_ops')
===================================

   * *Library usage:*

     `:- use_package(runtime_ops).'

     or

     `:- module(...,...,[runtime_ops]).'

   * *Other modules used:*
        - _System library modules:_

          `operators'.




File: ciao.info,  Node: *** PART V - Annotated Prolog library (assertions),  Next: The Ciao assertion package,  Prev: Enabling operators at run-time,  Up: Top

PART V - Annotated Prolog library (assertions)
**********************************************

   Ciao allows _annotating_ the program code with _assertions_. Such
assertions include type and instantiation mode declarations, but also
more general properties as well as comments in the style of the
_literate programming_. These assertions document predicates (and
modules and whole applications) and can be used by the Ciao
preprocessor/compiler while debugging and optimizing the program or
library, and by the Ciao documenter to build the program or library
reference manual.


File: ciao.info,  Node: The Ciao assertion package,  Next: Types and properties related to assertions,  Prev: *** PART V - Annotated Prolog library (assertions),  Up: Top

The Ciao assertion package
**************************

   *Author(s):* Manuel Hermenegildo, Francisco Bueno, German Puebla.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#8 (1999/12/9, 21:1:11 MET)

   The `assertions' package adds a number of new declaration
definitions and new operator definitions which allow including
program assertions in user programs. Such assertions can be used to
describe predicates, properties, modules, applications, etc. These
descriptions can be formal specifications (such as preconditions and
post-conditions) or machine-readable textual comments.

   This module is part of the `assertions' library. It defines the
basic code-related assertions, i.e., those intended to be used mainly
by compilation-related tools, such as the static analyzer or the
run-time test generator.

   Giving specifications for predicates and other program elements is
the main functionality documented here. The exact syntax of comments
is described in the autodocumenter ( `lpdoc' [Knu84,Her99]) manual,
although some support for adding machine-readable comments in
assertions is also mentioned here.

   There are two kinds of assertions: predicate assertions and
program point assertions. All predicate assertions are currently
placed as directives in the source code, i.e., preceded by "`:-'".
Program point assertions are placed as goals in clause bodies.

* Menu:

* More info::
* Some attention points::
* Usage and interface (assertions)::
* Documentation on new declarations (assertions)::
* Documentation on exports (assertions)::


File: ciao.info,  Node: More info,  Next: Some attention points,  Prev: The Ciao assertion package,  Up: The Ciao assertion package

More info
=========

   The facilities provided by the library are documented in the
description of its component modules. This documentation is intended
to provide information only at a "reference manual" level. For a more
tutorial introduction to the subject and some more examples please
see the document "An Assertion Language for Debugging of Constraint
Logic Programs (Technical Report CLIP2/97.1)". The assertion language
implemented in this library is modeled after this design document,
although, due to implementation issues, it may differ in some
details. The purpose of this manual is to document precisely what the
implementation of the library supports at any given point in time.


File: ciao.info,  Node: Some attention points,  Next: Usage and interface (assertions),  Prev: More info,  Up: The Ciao assertion package

Some attention points
=====================

   * *Formatting commands within text strings:* many of the
     predicates defined in these modules include arguments intended
     for providing textual information. This includes titles,
     descriptions, comments, etc. The type of this argument is a
     character string. In order for the automatic generation of
     documentation to work correctly, this character string should
     adhere to certain conventions. See the description of the
     `docstring/1' type/grammar for details.

   * *Referring to variables:* In order for the automatic
     documentation system to work correctly, variable names (for
     example, when referring to arguments in the head patterns of
     _pred_ declarations) must be surrounded by an `@var' command.
     For example, `@var{VariableName}' should be used for referring
     to the variable "VariableName", which will appear then formatted
     as follows: `VariableName'. See the description of the
     `docstring/1' type/grammar for details.



File: ciao.info,  Node: Usage and interface (assertions),  Next: Documentation on new declarations (assertions),  Prev: Some attention points,  Up: The Ciao assertion package

Usage and interface (`assertions')
==================================

   * *Library usage:*

     The recommended procedure in order to make use of assertions in
     user programs is to include the `assertions' syntax library,
     using one of the following declarations, as appropriate:

             :- module(...,...,[assertions]).
             :- include(library(assertions)).
             :- use_package([assertions]).

   * *Exports:*
        - _Predicates:_

          `check/1', `trust/1', `true/1', `false/1'.


   * *New operators defined:*

     `=>/2' [975,xfx], `::/2' [978,xfx], `decl/1' [1150,fx], `decl/2'
     [1150,xfx], `pred/1' [1150,fx], `pred/2' [1150,xfx], `prop/1'
     [1150,fx], `prop/2' [1150,xfx], `modedef/1' [1150,fx], `calls/1'
     [1150,fx], `calls/2' [1150,xfx], `success/1' [1150,fx],
     `success/2' [1150,xfx], `comp/1' [1150,fx], `comp/2' [1150,xfx],
     `entry/1' [1150,fx].

   * *New declarations defined:*

     `pred/1', `pred/2', `calls/1', `calls/2', `success/1',
     `success/2', `comp/1', `comp/2', `prop/1', `prop/2', `entry/1',
     `modedef/1', `decl/1', `decl/2', `comment/2'.

   * *Other modules used:*
        - _System library modules:_

          `assertions/assertions_props'.




File: ciao.info,  Node: Documentation on new declarations (assertions),  Next: Documentation on exports (assertions),  Prev: Usage and interface (assertions),  Up: The Ciao assertion package

Documentation on new declarations (`assertions')
================================================

 - DECLARATION: pred/1:
     This assertion provides information on a predicate. The body of
     the assertion (its only argument) contains properties or
     comments in the formats defined by `assrt_body/1'.

     More than one of these assertions may appear per predicate, in
     which case each one represents a possible " mode" of use (
     usage) of the predicate. The exact scope of the usage is defined
     by the properties given for calls in the body of each assertion
     (which should thus distinguish the different usages intended).
     All of them together cover all possible modes of usage.

     For example, the following assertions describe (all the and the
     only) modes of usage of predicate `length/2' (see `lists'):
          :- pred length(L,N) : list * var => list * integer
          	# "Computes the length of `L'.".
          :- pred length(L,N) : var * integer => list * integer
          	# "Outputs `L' of length `N'.".
          :- pred length(L,N) : list * integer => list * integer
          	# "Checks that `L' is of length `N'.".

     *Usage:* :- `pred(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: pred/2:
     This assertion is similar to a `pred/1' assertion but it is
     explicitely qualified. Non-qualified `pred/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `pred(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: calls/1:
     This assertion is similar to a `pred/1' assertion but it only
     provides information about the calls to a predicate. If one or
     several calls assertions are given they are understood to
     describe all possible calls to the predicate.

     For example, the following assertion describes all possible
     calls to predicate `is/2' (see `arithmetic'):
          :- calls is(term,arithexpression).

     *Usage:* :- `calls(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a call assertion body.
          (`assertions_props:c_assrt_body/1')



 - DECLARATION: calls/2:
     This assertion is similar to a `calls/1' assertion but it is
     explicitely qualified. Non-qualified `calls/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `calls(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is a call assertion body.
          (`assertions_props:c_assrt_body/1')



 - DECLARATION: success/1:
     This assertion is similar to a `pred/1' assertion but it only
     provides information about the answers to a predicate. The
     described answers might be conditioned to a particular way of
     calling the predicate.

     For example, the following assertion specifies the answers of
     the `length/2' predicate _if_ it is called as in the first mode
     of usage above (note that the previous pred assertion already
     conveys such information, however it also compelled the
     predicate calls, while the success assertion does not):
          :- success length(L,N) : list * var => list * integer.

     *Usage:* :- `success(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a predicate assertion body.
          (`assertions_props:s_assrt_body/1')



 - DECLARATION: success/2:
     This assertion is similar to a `success/1' assertion but it is
     explicitely qualified. Non-qualified `success/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `success(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is a predicate assertion body.
          (`assertions_props:s_assrt_body/1')



 - DECLARATION: comp/1:
     This assertion is similar to a `pred/1' assertion but it only
     provides information about the global execution properties of a
     predicate (note that such kind of information is also conveyed
     by pred assertions). The described properties might be
     conditioned to a particular way of calling the predicate.

     For example, the following assertion specifies that the
     computation of `append/3' (see `lists') will not fail _if_ it is
     called as described (but does not compel the predicate to be
     called that way):
          :- comp append(Xs,Ys,Zs) : var * var * var + not_fail.

     *Usage:* :- `comp(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a comp assertion body.
          (`assertions_props:g_assrt_body/1')



 - DECLARATION: comp/2:
     This assertion is similar to a `comp/1' assertion but it is
     explicitely qualified. Non-qualified `comp/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `comp(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is a comp assertion body.
          (`assertions_props:g_assrt_body/1')



 - DECLARATION: prop/1:
     This assertion is similar to a `pred/1' assertion but it flags
     that the predicate being documented is also a " property."

     Properties are standard predicates, but which are _guaranteed to
     terminate for any possible instantiation state of their
     argument(s)_, do not perform side-effects which may interfere
     with the program behaviour, and do not further instantiate their
     arguments or add new constraints.

     Provided the above holds, properties can thus be safely used as
     run-time checks. The program transformation used in `ciaopp' for
     run-time checking guarantees the third requirement. It also
     performs some basic checks on properties which in most cases are
     enough for the second requirement. However, it is the user's
     responsibility to guarantee termination of the properties
     defined. (See also *Note Declaring regular types:: for some
     considerations applicable to writing properties.)

     The set of properties is thus a strict subset of the set of
     predicates. Note that properties can be used to describe
     characteristics of arguments in assertions and they can also be
     executed (called) as any other predicates.

     *Usage:* :- `prop(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: prop/2:
     This assertion is similar to a `prop/1' assertion but it is
     explicitely qualified. Non-qualified `prop/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `prop(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: entry/1:
     This assertion provides information about the _external_ calls
     to a predicate. It is identical syntactically to a `calls/1'
     assertion. However, they describe only external calls, i.e.,
     calls to the exported predicates of a module from outside the
     module, or calls to the predicates in a non-modular file from
     other files (or the user).

     These assertions are _trusted_ by the compiler. As a result, if
     their descriptions are erroneous they can introduce bugs in
     programs. Thus, `entry/1' assertions should be written with care.

     An important use of these assertions is in providing information
     to the compiler which it may not be able to infer from the
     program. The main use is in providing information on the ways in
     which exported predicates of a module will be called from
     outside the module. This will greatly improve the precision of
     the analyzer, which otherwise has to assume that the arguments
     that exported predicates receive are any arbitrary term.

     *Usage:* :- `entry(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is a call assertion body.
          (`assertions_props:c_assrt_body/1')



 - DECLARATION: modedef/1:
     This assertion is used to define modes. A mode defines in a
     compact way a set of call and success properties. Once defined,
     modes can be applied to predicate arguments in assertions. The
     meaning of this application is that the call and success
     properties defined by the mode hold for the argument to which
     the mode is applied. Thus, a mode is conceptually a "property
     macro".

     The syntax of mode definitions is similar to that of pred
     declarations. For example, the following set of assertions:

          :- modedef +A : nonvar(A) # "`A' is bound upon predicate entry.".
          
          :- pred p(+A,B) : integer(A) =>  ground(B).

     is equivalent to:

          :- pred p(A,B) : (nonvar(A),integer(A)) =>  ground(B)
             # "`A' is bound upon predicate entry.".

     *Usage:* :- `modedef(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: decl/1:
     This assertion is similar to a `pred/1' assertion but it is used
     for declarations instead than for predicates.

     *Usage:* :- `decl(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: decl/2:
     This assertion is similar to a `decl/1' assertion but it is
     explicitely qualified. Non-qualified `decl/1' assertions are
     assumed the qualifier `check'.

     *Usage:* :- `decl(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: comment/2:
     *Usage:* :- `comment(Pred,Comment)'.
        - _Description:_ This assertion gives a text `Comment' for a
          given predicate `Pred'.

        - _The following properties should hold at call time:_

          `Pred' is a head pattern.
          (`assertions_props:head_pattern/1')

          `Comment' is a text comment with admissible documentation
          commands. The usual formatting commands that are applicable
          in comment strings are defined by `stringcommand/1'. See the
          `lpdoc' manual for documentation on comments.
          (`assertions_props:docstring/1')




File: ciao.info,  Node: Documentation on exports (assertions),  Prev: Documentation on new declarations (assertions),  Up: The Ciao assertion package

Documentation on exports (`assertions')
=======================================

 - PREDICATE: check/1:
     *Usage:* `check(PropertyConjunction)'
        - _Description:_ This assertion provides information on a
          clause program point (position in the body of a clause).
          Calls to a `check/1' assertion can appear in the body of a
          clause in any place where a literal can normally appear.
          The property defined by `PropertyConjunction' should hold
          in all the run-time stores corresponding to that program
          point. See also *Note Run-time checking of assertions::.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   (`assertions_props:property_conjunction/1')



 - PREDICATE: trust/1:
     *Usage:* `trust(PropertyConjunction)'
        - _Description:_ This assertion also provides information on
          a clause program point. It is identical syntactically to a
          `check/1' assertion. However, the properties stated are not
          taken as something to be checked but are instead _trusted_
          by the compiler. While the compiler may in some cases
          detect an inconsistency between a `trust/1' assertion and
          the program, in all other cases the information given in
          the assertion will be taken to be true. As a result, if
          these assertions are erroneous they can introduce bugs in
          programs. Thus, `trust/1' assertions should be written with
          care.

          An important use of these assertions is in providing
          information to the compiler which it may not be able to
          infer from the program (either because the information is
          not present or because the analyzer being used is not
          precise enough). In particular, providing information on
          external predicates which may not be accessible at the time
          of compiling the module can greatly improve the precision
          of the analyzer. This can be easily done with trust
          assertion.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   (`assertions_props:property_conjunction/1')



 - PREDICATE: true/1:
     *Usage:* `true(PropertyConjunction)'
        - _Description:_ This assertion is identical syntactically to
          a `check/1' assertion. However, the properties stated have
          been proved to hold by the analyzer. Thus, these assertions
          often represent the analyzer output.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   (`assertions_props:property_conjunction/1')



 - PREDICATE: false/1:
     *Usage:* `false(PropertyConjunction)'
        - _Description:_ This assertion is identical syntactically to
          a `check/1' assertion. However, the properties stated have
          been proved not to hold by the analyzer. Thus, these
          assertions often represent the analyzer output.

        - _The following properties should hold at call time:_

          `PropertyConjunction' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.   (`assertions_props:property_conjunction/1')




File: ciao.info,  Node: Types and properties related to assertions,  Next: Declaring regular types,  Prev: The Ciao assertion package,  Up: Top

Types and properties related to assertions
******************************************

   *Author(s):* Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#156 (2001/11/24, 13:23:30 CET)

   This module is part of the `assertions' library. It provides the
formal definition of the syntax of several forms of assertions and
describes their meaning. It does so by defining types and properties
related to the assertions themselves. The text describes, for
example, the overall fields which are admissible in the bodies of
assertions, where properties can be used inside these bodies, how to
combine properties for a given predicate argument (e.g.,
conjunctions) , etc. and provides some examples.

* Menu:

* Usage and interface (assertions_props)::
* Documentation on exports (assertions_props)::


File: ciao.info,  Node: Usage and interface (assertions_props),  Next: Documentation on exports (assertions_props),  Prev: Types and properties related to assertions,  Up: Types and properties related to assertions

Usage and interface (`assertions_props')
========================================

   * *Library usage:*

     `:- use_module(library(assertions_props)).'

   * *Exports:*
        - _Properties:_

          `head_pattern/1', `nabody/1', `docstring/1'.

        - _Regular Types:_

          `assrt_body/1', `complex_arg_property/1',
          `property_conjunction/1', `property_starterm/1',
          `complex_goal_property/1', `dictionary/1', `c_assrt_body/1',
          `s_assrt_body/1', `g_assrt_body/1', `assrt_status/1',
          `assrt_type/1', `predfunctor/1', `propfunctor/1'.


   * *Other modules used:*
        - _System library modules:_

          `dcg_expansion'.




File: ciao.info,  Node: Documentation on exports (assertions_props),  Prev: Usage and interface (assertions_props),  Up: Types and properties related to assertions

Documentation on exports (`assertions_props')
=============================================

 - REGTYPE: assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `pred/1', `decl/1', etc. assertions. Such a
     body is of the form:

                Pr [:: DP] [: CP] [=> AP] [+ GP] [# CO]

     where (fields between [...] are optional):

        * `Pr' is a head pattern ( `head_pattern/1') which describes
          the predicate or property and possibly gives some implicit
          call/answer information.

        * `DP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which expresses properties which
          are compatible with the predicate, i.e., instantiations
          made by the predicate are _compatible_ with the properties
          in the sense that applying the property at any point to
          would not make it fail.

        * `CP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which applies to the _calls_ to
          the predicate.

        * `AP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which applies to the _answers_ to
          the predicate (if the predicate succeeds). These only apply
          if the (possibly empty) properties given for calls in the
          assertion hold.

        * `GP' is a (possibly empty) complex goal property (
          `complex_goal_property/1') which applies to the _whole
          execution_ of a call to the predicate. These only apply if
          the (possibly empty) properties given for calls in the
          assertion hold.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see
          `stringcommand/1').

          See the `lpdoc' manual for documentation on assertion
          comments.


     *Usage:* `assrt_body(X)'
        - _Description:_ `X' is an assertion body.



 - PROPERTY: head_pattern/1:
     A head pattern can be a predicate name (functor/arity) (
     `predname/1') or a term. Thus, both `p/3' and `p(A,B,C)' are
     valid head patterns. In the case in which the head pattern is a
     term, each argument of such a term can be:

        * A variable. This is useful in order to be able to refer to
          the corresponding argument positions by name within
          properties and in comments. Thus,
          `p(Input,Parameter,Output)' is a valid head pattern.

        * A ground term. In this case this term determines a property
          of the corresponding argument. The actual property referred
          to is that given by the term but with one more argument
          added at the beginning, which is a new variable which, in a
          rewriting of the head pattern, appears at the argument
          position occupied by the term. Unless otherwise stated (see
          below), the property built this way is understood to hold
          for both calls and answers. For example, the head pattern
          `p(Input,list(integer),Output)' is valid and equivalent for
          example to having the head pattern `p(Input,A,Output)' and
          stating that the property `list(A,integer)' holds for the
          calls and successes of the predicate.

        * Finally, it can also be a variable or a ground term, as
          above, but preceded by a " mode." This mode determines in a
          compact way certain call or answer properties. For example,
          the head pattern `p(Input,+list(integer),Output)' is valid,
          as long as `+/1' is declared as a mode.

          Acceptable modes are documented in `library(modes)'. User
          defined modes are documented in `modedef/1'.


     *Usage:* `head_pattern(Pr)'
        - _Description:_ `Pr' is a head pattern.



 - REGTYPE: complex_arg_property/1:
     `complex_arg_property(Props)'

     `Props' is a (possibly empty) complex argument property. Such
     properties can appear in two formats, which are defined by
     `property_conjunction/1' and `property_starterm/1' respectively.
     The two formats can be mixed provided they are not in the same
     field of an assertion. I.e., the following is a valid assertion:

     `:- pred foo(X,Y) : nonvar * var => (ground(X),ground(Y)).'

     *Usage:* `complex_arg_property(Props)'
        - _Description:_ `Props' is a (possibly empty) complex
          argument property



 - REGTYPE: property_conjunction/1:
     This type defines the first, unabridged format in which
     properties can be expressed in the bodies of assertions. It is
     essentially a conjunction of properties which refer to
     variables. The following is an example of a complex property in
     this format:

        * `(integer(X),list(Y,integer))': `X' has the property
          `integer/1' and `Y' has the property `list/2', with second
          argument `integer'.


     *Usage:* `property_conjunction(Props)'
        - _Description:_ `Props' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. The first
          argument of each such term is a variable which appears as a
          head argument.



 - REGTYPE: property_starterm/1:
     This type defines a second, compact format in which properties
     can be expressed in the bodies of assertions. A
     `property_starterm/1' is a term whose main functor is `*/2' and,
     when it appears in an assertion, the number of terms joined by
     `*/2' is exactly the arity of the predicate it refers to. A
     similar series of properties as in `property_conjunction/1'
     appears, but the arity of each property is one less: the
     argument position to which they refer (first argument) is left
     out and determined by the position of the property in the
     `property_starterm/1'. The idea is that each element of the
     `*/2' term corresponds to a head argument position. Several
     properties can be assigned to each argument position by grouping
     them in curly brackets. The following is an example of a complex
     property in this format:

        * ` integer * list(integer)': the first argument of the
          procedure (or function, or ...) has the property
          `integer/1' and the second one has the property `list/2',
          with second argument `integer'.

        * ` {integer,var} * list(integer)': the first argument of the
          procedure (or function, or ...) has the properties
          `integer/1' and `var/1' and the second one has the property
          `list/2', with second argument `integer'.


     *Usage:* `property_starterm(Props)'
        - _Description:_ `Props' is either a term or several terms
          separated by `*/2'. The main functor of each of those terms
          corresponds to that of the definition of a property, and
          the arity should be one less than in the definition of such
          property. All arguments of each such term are ground.



 - REGTYPE: complex_goal_property/1:
     `complex_goal_property(Props)'

     `Props' is a (possibly empty) complex goal property. Such
     properties can be either a term or a _conjunction_ of terms. The
     main functor and arity of each of those terms corresponds to the
     definition of a property. Such properties apply to all
     executions of all goals of the predicate which comply with the
     assertion in which the `Props' appear.

     The arguments of the terms in `Props' are implicitely augmented
     with a first argument which corresponds to a goal of the
     predicate of the assertion in which the `Props' appear. For
     example, the assertion
               :- comp var(A) + not_further_inst(A).
     has property `not_further_inst/1' as goal property, and
     establishes that in all executions of `var(A)' it should hold
     that `not_further_inst(var(A),A)'.

     *Usage:* `complex_goal_property(Props)'
        - _Description:_ `Props' is either a term or a _conjunction_
          of terms. The main functor and arity of each of those terms
          corresponds to the definition of a property. A first
          implicit argument in such terms identifies goals to which
          the properties apply.



 - PROPERTY: nabody/1:
     *Usage:* `nabody(ABody)'
        - _Description:_ `ABody' is a normalized assertion body.



 - REGTYPE: dictionary/1:
     *Usage:* `dictionary(D)'
        - _Description:_ `D' is a dictionary of variable names.



 - REGTYPE: c_assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `call/1', `entry/1', etc. assertions. The
     following are admissible:

                Pr : CP [# CO]

     where (fields between [...] are optional):

        * `CP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which applies to the _calls_ to
          the predicate.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see
          `stringcommand/1').


     The format of the different parts of the assertion body are
     given by `n_assrt_body/5' and its auxiliary types.

     *Usage:* `c_assrt_body(X)'
        - _Description:_ `X' is a call assertion body.



 - REGTYPE: s_assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `pred/1', `func/1', etc. assertions. The
     following are admissible:

                Pr : CP => AP # CO
                Pr : CP => AP
                Pr => AP # CO
                Pr => AP

     where:

        * `Pr' is a head pattern ( `head_pattern/1') which describes
          the predicate or property and possibly gives some implicit
          call/answer information.

        * `CP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which applies to the _calls_ to
          the predicate.

        * `AP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which applies to the _answers_ to
          the predicate (if the predicate succeeds). These only apply
          if the (possibly empty) properties given for calls in the
          assertion hold.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see
          `stringcommand/1').


     The format of the different parts of the assertion body are
     given by `n_assrt_body/5' and its auxiliary types.

     *Usage:* `s_assrt_body(X)'
        - _Description:_ `X' is a predicate assertion body.



 - REGTYPE: g_assrt_body/1:
     This predicate defines the different types of syntax admissible
     in the bodies of `comp/1' assertions. The following are
     admissible:

                Pr : CP + GP # CO
                Pr : CP + GP
                Pr + GP # CO
                Pr + GP

     where:

        * `Pr' is a head pattern ( `head_pattern/1') which describes
          the predicate or property and possibly gives some implicit
          call/answer information.

        * `CP' is a (possibly empty) complex argument property (
          `complex_arg_property/1') which applies to the _calls_ to
          the predicate.

        * `GP' contains (possibly empty) complex goal property (
          `complex_goal_property/1') which applies to the _whole
          execution_ of a call to the predicate. These only apply if
          the (possibly empty) properties given for calls in the
          assertion hold.

        * `CO' is a comment string ( `docstring/1'). This comment
          only applies if the (possibly empty) properties given for
          calls in the assertion hold. The usual formatting commands
          that are applicable in comment strings can be used (see
          `stringcommand/1').


     The format of the different parts of the assertion body are
     given by `n_assrt_body/5' and its auxiliary types.

     *Usage:* `g_assrt_body(X)'
        - _Description:_ `X' is a comp assertion body.



 - REGTYPE: assrt_status/1:
     The types of assertion status. They have the same meaning as the
     program-point assertions, and are as follows:
          assrt_status(true).
          assrt_status(false).
          assrt_status(check).
          assrt_status(checked).
          assrt_status(trust).

     *Usage:* `assrt_status(X)'
        - _Description:_ `X' is an acceptable status for an assertion.



 - REGTYPE: assrt_type/1:
     The admissible kinds of assertions:
          assrt_type(pred).
          assrt_type(prop).
          assrt_type(decl).
          assrt_type(func).
          assrt_type(calls).
          assrt_type(success).
          assrt_type(comp).
          assrt_type(entry).
          assrt_type(modedef).

     *Usage:* `assrt_type(X)'
        - _Description:_ `X' is an admissible kind of assertion.



 - REGTYPE: predfunctor/1:
     *Usage:* `predfunctor(X)'
        - _Description:_ `X' is a type of assertion which defines a
          predicate.



 - REGTYPE: propfunctor/1:
     *Usage:* `propfunctor(X)'
        - _Description:_ `X' is a type of assertion which defines a
          _property_.



 - PROPERTY: docstring/1:
     *Usage:* `docstring(String)'
        - _Description:_ `String' is a text comment with admissible
          documentation commands. The usual formatting commands that
          are applicable in comment strings are defined by
          `stringcommand/1'. See the `lpdoc' manual for documentation
          on comments.




File: ciao.info,  Node: Declaring regular types,  Next: Properties which are native to analyzers,  Prev: Types and properties related to assertions,  Up: Top

Declaring regular types
***********************

   *Author(s):* Manuel Hermenegildo, Pedro Lopez, Francisco Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#9 (1999/12/9, 21:57:42 MET)

   This library package adds some new declaration definitions and new
operator definitions to user programs. These new declarations and
operators provide some very simple syntactic sugar to support regular
type definitions in source code. Regular types are just properties
which have the additional characteristic of being regular types (
`basic_props:regtype/1').

   For example, this library package allows writing:
        :- regtype tree(X) # "`X' is a tree.".
   instead of the more combersome:
        :- prop tree(X) + regtype # "`X' is a tree.".

   Regular types can be used as properties to describe predicates and
play an essential role in program debugging (see the Ciao Prolog
preprocessor (`ciaopp') manual).

   In this chapter we explain some general considerations worth
taking into account when writing properties in general, not just
regular types. The exact syntax of regular types is also described.

* Menu:

* Defining properties::
* Usage and interface (regtypes)::
* Documentation on new declarations (regtypes)::


File: ciao.info,  Node: Defining properties,  Next: Usage and interface (regtypes),  Prev: Declaring regular types,  Up: Declaring regular types

Defining properties
===================

   Given the classes of assertions in the Ciao assertion language,
there are two fundamental classes of properties. Properties used in
assertions which refer to execution states (i.e., `calls/1',
`success/1', and the like) are called _properties of execution
states_. Properties used in assertions related to computations (i.e.,
`comp/1') are called _properties of computations_. Different
considerations apply when writing a property of the former or of the
later kind.

   Consider a definition of the predicate `string_concat/3' which
concatenates two character strings (represented as lists of ASCII
codes):
     string_concat([],L,L).
     string_concat([X|Xs],L,[X|NL]):- string_concat(Xs,L,NL).

   Assume that we would like to state in an assertion that each
argument "is a list of integers." However, we must decide which one
of the following two possibilities we mean exactly: "the argument is
_instantiated_ to a list of integers" (let us call this property
`instantiated_to_intlist/1'), or "if any part of the argument is
instantiated, this instantiation must be compatible with the argument
being a list of integers" (we will call this property
`compatible_with_intlist/1'). For example,
`instantiated_to_intlist/1' should be true for the terms `[]' and
`[1,2]', but should not for `X', `[a,2]', and `[X,2]'. In turn,
`compatible_with_intlist/1' should be true for `[]', `X', `[1,2]',
and `[X,2]', but should not be for `[X|1]', `[a,2]', and `1'. We
refer to properties such as `instantiated_to_intlist/1' above as
_instantiation properties_ and to those such as
`compatible_with_intlist/1' as _compatibility properties_
(corresponding to the traditional notions of "instantiation types"
and "compatibility types").

   It turns out that both of these notions are quite useful in
practice. In the example above, we probably would like to use
`compatible_with_intlist/1' to state that on success of
`string_concat/3' all three argument must be compatible with lists of
integers in an assertion like:

     :- success string_concat(A,B,C) => ( compatible_with_intlist(A),
                                          compatible_with_intlist(B),
                                          compatible_with_intlist(C) ).

   With this assertion, no error will be flagged for a call to
`string_concat/3' such as `string_concat([20],L,R)', which on success
produces the resulting atom `string_concat([20],L,[20|L])', but a
call `string_concat([],a,R)' would indeed flag an error.

   On the other hand, and assuming that we are running on a Prolog
system, we would probably like to use `instantiated_to_intlist/1' for
`sumlist/2' as follows:

     :- calls sumlist(L,N) : instantiated_to_intlist(L).
     
     sumlist([],0).
     sumlist([X|R],S) :- sumlist(R,PS), S is PS+X.

to describe the type of calls for which the program has been
designed, i.e., those in which the first argument of `sumlist/2' is
indeed a list of integers.

   The property `instantiated_to_intlist/1' might be written as in
the following (Prolog) definition:

     :- prop instantiated_to_intlist/1.
     
     instantiated_to_intlist(X) :-
            nonvar(X), instantiated_to_intlist_aux(X).
     
     instantiated_to_intlist_aux([]).
     instantiated_to_intlist_aux([X|T]) :-
            integer(X), instantiated_to_intlist(T).

   (Recall that the Prolog builtin `integer/1' itself implements an
instantiation check, failing if called with a variable as the
argument.)

   The property `compatible_with_intlist/1' might in turn be written
as follows (also in Prolog):

     :- prop compatible_with_intlist/1.
     
     compatible_with_intlist(X) :- var(X).
     compatible_with_intlist(X) :-
            nonvar(X), compatible_with_intlist_aux(X).
     
     compatible_with_intlist_aux([]).
     compatible_with_intlist_aux([X|T]) :-
            int_compat(X), compatible_with_intlist(T).
     
     int_compat(X) :- var(X).
     int_compat(X) :- nonvar(X), integer(X).

   Note that these predicates meet the criteria for being properties
and thus the `prop/1' declaration is correct.

   Ensuring that a property meets the criteria for "not affecting the
computation" can sometimes make its coding somewhat tedious. In some
ways, one would like to be able to write simply:

     intlist([]).
     intlist([X|R]) :- int(X), intlist(R).

(Incidentally, note that the above definition, provided that it suits
the requirements for being a property and that `int/1' is a regular
type, meets the criteria for being a regular type. Thus, it could be
declared `:- regtype intlist/1'.)

   But note that (independently of the definition of `int/1') the
definition above is not the correct instantiation check, since it
would succeed for a call such as `intlist(X)'. In fact, it is not
strictly correct as a compatibility property either, because, while
it would fail or succeed as expected, it would perform instantiations
(e.g., if called with `intlist(X)' it would bind `X' to `[]'). In
practice, it is convenient to provide some run-time support to aid in
this task.

   The run-time support of the Ciao system (see *Note Run-time
checking of assertions::) ensures that the execution of properties is
performed in such a way that properties written as above can be used
directly as instantiation checks. Thus, writing:

     :- calls sumlist(L,N) : intlist(L).

has the desired effect. Also, the same properties can often be used
as compatibility checks by writing them in the assertions as
`compat(Property)' (`basic_props:compat/1'). Thus, writing:

     :- success string_concat(A,B,C) => ( compat(intlist(A)),
                                          compat(intlist(B)),
                                          compat(intlist(C)) ).

also has the desired effect.

   As a general rule, the properties that can be used directly for
checking for compatibility should be _downwards closed_, i.e., once
they hold they will keep on holding in every state accessible in
forwards execution. There are certain predicates which are inherently
_instantiation_ checks and should not be used as _compatibility_
properties nor appear in the definition of a property that is to be
used with `compat'. Examples of such predicates (for Prolog) are
`==', `ground', `nonvar', `integer', `atom', `>', etc. as they
require a certain instantiation degree of their arguments in order to
succeed.

   In contrast with properties of execution states, _properties of
computations_ refer to the entire execution of the call(s) that the
assertion relates to. One such property is, for example, `not_fail/1'
(note that although it has been used as in `:- comp append(Xs,Ys,Zs)
+ not_fail', it is in fact read as `not_fail(append(Xs,Ys,Zs))'; see
`assertions_props:complex_goal_property/1'). For this property, which
should be interpreted as "execution of the predicate either succeeds
at least once or loops," we can use the following predicate
`not_fail/1' for run-time checking:

     not_fail(Goal):-
           if( call(Goal),
               true,            %% then
               warning(Goal) ). %% else

where the `warning/1' (library) predicate simply prints a warning
message.

   In this simple case, implementation of the predicate is not very
difficult using the (non-standard) `if/3' builtin predicate present
in many Prolog systems.

   However, it is not so easy to code predicates which check other
properties of the computation and we may in general need to program a
meta-interpreter for this purpose.


File: ciao.info,  Node: Usage and interface (regtypes),  Next: Documentation on new declarations (regtypes),  Prev: Defining properties,  Up: Declaring regular types

Usage and interface (`regtypes')
================================

   * *Library usage:*

     `:- use_package(regtypes).'

     or

     `:- module(...,...,[regtypes]).'

   * *New operators defined:*

     `regtype/1' [1150,fx], `regtype/2' [1150,xfx].

   * *New declarations defined:*

     `regtype/1', `regtype/2'.

   * *Other modules used:*
        - _System library modules:_

          `assertions/assertions_props'.




File: ciao.info,  Node: Documentation on new declarations (regtypes),  Prev: Usage and interface (regtypes),  Up: Declaring regular types

Documentation on new declarations (`regtypes')
==============================================

 - DECLARATION: regtype/1:
     This assertion is similar to a pred assertion but it flags that
     the predicate being documented is also a " regular type." This
     allows for example checking whether it is in the class of types
     supported by the type checking and inference modules. Currently,
     types are properties whose definitions are _regular programs_.

     A regular program is defined by a set of clauses, each of the
     form:
          p(x, v_1, ..., v_n)  :- body_1, ..., body_k.
     where:
       1. `x' is a term whose variables (which are called _term
          variables_) are unique, i.e., it is not allowed to
          introduce equality constraints between the variables of `x'.

          For example, `p(f(X, Y)) :- ...' is valid, but `p(f(X, X))
          :- ...' is not.

       2. in all clauses defining `p/n+1' the terms `x' do not unify
          except maybe for one single clause in which `x' is a
          variable.

       3. `n' >= 0 and `p/n' is a _parametric type functor_ (whereas
          the predicate defined by the clauses is `p/n'+1).

       4. `v_1', ..., `v_n' are unique variables, which are called
          _parametric variables_.

       5. Each `body_i' is of the form:

            1. `t(z)' where `z' is one of the _term variables_ and
               `t' is a _regular type expression_;

            2. `q(y, t_1, ..., t_m)' where `m' >= 0, `q/m' is a
               _parametric type functor_, not in the set of functors
               `=/2', `^/2', `./3'.

               `t_1, ..., t_m' are _regular type expressions_, and
               `y' is a _term variable_.

       6. Each term variable occurs at most once in the clause's body
          (and should be as the first argument of a literal).
          A _regular type expression_ is either a parametric variable
     or a parametric type functor applied to some of the parametric
     variables (but regular type abstractions might also be used in
     some cases, see *Note Meta-properties::).

     A parametric type functor is a regular type, defined by a
     regular program, or a basic type. Basic types are defined in
     *Note Basic data types and properties::.

     The set of types is thus a well defined subset of the set of
     properties. Note that types can be used to describe
     characteristics of arguments in assertions and they can also be
     executed (called) as any other predicates.

     *Usage:* :- `regtype(AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')



 - DECLARATION: regtype/2:
     This assertion is similar to a `regtype/1' assertion but it is
     explicitely qualified. Non-qualified `regtype/1' assertions are
     assumed the qualifier `check'. Note that checking regular type
     definitions should be done with the `ciaopp' preprocessor.

     *Usage:* :- `regtype(AssertionStatus,AssertionBody)'.
        - _The following properties should hold at call time:_

          `AssertionStatus' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `AssertionBody' is an assertion body.
          (`assertions_props:assrt_body/1')




File: ciao.info,  Node: Properties which are native to analyzers,  Next: Meta-properties,  Prev: Declaring regular types,  Up: Top

Properties which are native to analyzers
****************************************

   *Author(s):* Francisco Bueno, Manuel Hermenegildo, Pedro Lopez.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#1 (1999/11/29, 17:12:34 MET)

   This library contains a set of properties which are natively
understood by the different program analyzers of `ciaopp'. They are
used by `ciaopp' on output and they can also be used as properties in
assertions.

* Menu:

* Usage and interface (native_props)::
* Documentation on exports (native_props)::


File: ciao.info,  Node: Usage and interface (native_props),  Next: Documentation on exports (native_props),  Prev: Properties which are native to analyzers,  Up: Properties which are native to analyzers

Usage and interface (`native_props')
====================================

   * *Library usage:*

     `:- use_module(library('assertions/native_props'))'

     or also as a package `:- use_package(nativeprops)'.

     Note the different names of the library and the package.

   * *Exports:*
        - _Properties:_

          `linear/1', `mshare/1', `fails/1', `not_fails/1',
          `possibly_fails/1', `covered/1', `not_covered/1',
          `is_det/1', `possibly_nondet/1', `mut_exclusive/1',
          `not_mut_exclusive/1', `size_lb/2', `size_ub/2',
          `steps_lb/2', `steps_ub/2', `sideff_pure/1',
          `sideff_soft/1', `sideff_hard/1'.


   * *Other modules used:*
        - _System library modules:_

          `andprolog/andprolog_rt', `terms_vars', `sort', `lists'.




File: ciao.info,  Node: Documentation on exports (native_props),  Prev: Usage and interface (native_props),  Up: Properties which are native to analyzers

Documentation on exports (`native_props')
=========================================

 - PROPERTY: linear/1:
     `linear(X)'

     `X' is bound to a term which is linear, i.e., if it contains any
     variables, such variables appear only once in the term. For
     example, `[1,2,3]' and `f(A,B)' are linear terms, while `f(A,A)'
     is not.

     *Usage:* `linear(X)'
        - _Description:_ `X' is instantiated to a linear term.



 - PROPERTY: mshare/1:
     `mshare(X)'

     `X' contains all _sharing sets_ [JL88,MH89] which specify the
     possible variable occurrences in the terms to which the
     variables involved in the clause may be bound. Sharing sets are
     a compact way of representing groundness of variables and
     dependencies between variables. This representation is however
     generally difficult to read for humans. For this reason, this
     information is often translated to `ground/1', `indep/1' and
     `indep/2' properties, which are easier to read.

     *Usage:* `mshare(X)'
        - _Description:_ The sharing pattern is ``X''.



 - PROPERTY: fails/1:
     `fails(X)'

     Calls of the form `X' fail.

     *Usage:* `fails(X)'
        - _Description:_ Calls of the form `X' fail.



 - PROPERTY: not_fails/1:
     `not_fails(X)'

     Calls of the form `X' produce at least one solution, or not
     terminate [DLGH97].

     *Usage:* `not_fails(X)'
        - _Description:_ All the calls of the form `X' do not fail.



 - PROPERTY: possibly_fails/1:
     `possibly_fails(X)'

     Non-failure is not ensured for any call of the form `X'
     [DLGH97]. In other words, nothing can be ensured about
     non-failure nor termination of such calls.

     *Usage:* `possibly_fails(X)'
        - _Description:_ Non-failure is not ensured for calls of the
          form `X'.



 - PROPERTY: covered/1:
     `covered(X)'

     For any call of the form `X' there is at least one clause whose
     test succeeds (i.e. all the calls of the form `X' are covered.)
     [DLGH97].

     *Usage:* `covered(X)'
        - _Description:_ All the calls of the form `X' are covered.



 - PROPERTY: not_covered/1:
     `not_covered(X)'

     There is some call of the form `X' for which there is not any
     clause whose test succeeds [DLGH97].

     *Usage:* `not_covered(X)'
        - _Description:_ Not all of the calls of the form `X' are
          covered.



 - PROPERTY: is_det/1:
     `is_det(X)'

     All calls of the form `X' are deterministic, i.e. produce at
     most one solution, or not terminate.

     *Usage:* `is_det(X)'
        - _Description:_ All calls of the form `X' are deterministic.



 - PROPERTY: possibly_nondet/1:
     `possibly_nondet(X)'

     Non-determinism is not ensured for all calls of the form `X'. In
     other words, nothing can be ensured about determinacy nor
     termination of such calls.

     *Usage:* `possibly_nondet(X)'
        - _Description:_ Non-determinism is not ensured for calls of
          the form `X'.



 - PROPERTY: mut_exclusive/1:
     `mut_exclusive(X)'

     For any call of the form `X' at most one clause succeeds, i.e.
     clauses are pairwise exclusive.

     *Usage:* `mut_exclusive(X)'
        - _Description:_ For any call of the form `X' at most one
          clause succeeds.



 - PROPERTY: not_mut_exclusive/1:
     `not_mut_exclusive(X)'

     Not for all calls of the form `X' at most one clause succeeds.
     I.e. clauses are not disjoint for some call.

     *Usage:* `not_mut_exclusive(X)'
        - _Description:_ Not for all calls of the form `X' at most
          one clause succeeds.



 - PROPERTY: size_lb/2:
     `size_lb(X,Y)'

     The minimum size of the terms to which the argument `Y' is bound
     to is given by the expression `Y'. Various measures can be used
     to determine the size of an argument, e.g., list-length,
     term-size, term-depth, integer-value, etc. [DL93].

     *Usage:* `size_lb(X,Y)'
        - _Description:_ `Y' is a lower bound on the size of argument
          `X'.



 - PROPERTY: size_ub/2:
     `size_ub(X,Y)'

     The maximum size of the terms to which the argument `Y' is bound
     to is given by the expression `Y'. Various measures can be used
     to determine the size of an argument, e.g., list-length,
     term-size, term-depth, integer-value, etc. [DL93].

     *Usage:* `size_ub(X,Y)'
        - _Description:_ `Y' is a upper bound on the size of argument
          `X'.



 - PROPERTY: steps_lb/2:
     `steps_lb(X,Y)'

     The minimum computation time (in resolution steps) spent by any
     call of the form `X' is given by the expression `Y'
     [DLGHL97,LGHD96]

     *Usage:* `steps_lb(X,Y)'
        - _Description:_ `Y' is a lower bound on the cost of any call
          of the form `X'.



 - PROPERTY: steps_ub/2:
     `steps_ub(X,Y)'

     The maximum computation time (in resolution steps) spent by any
     call of the form `X' is given by the expression `Y' [DL93,LGHD96]

     *Usage:* `steps_ub(X,Y)'
        - _Description:_ `Y' is a upper bound on the cost of any call
          of the form `X'.



 - PROPERTY: sideff_pure/1:
     *Usage:* `sideff_pure(X)'
        - _Description:_ `X' is pure, i.e., has no side-effects.



 - PROPERTY: sideff_soft/1:
     *Usage:* `sideff_soft(X)'
        - _Description:_ `X' has _soft side-effects_, i.e., those not
          affecting program execution (e.g., input/output).



 - PROPERTY: sideff_hard/1:
     *Usage:* `sideff_hard(X)'
        - _Description:_ `X' has _hard side-effects_, i.e., those
          that might affect program execution (e.g., assert/retract).



 - PREDICATE: indep/1:
     *Usage:* `indep(X)'
        - _Description:_ The variables in pairs in ``X'' are pairwise
          independent.



 - PROPERTY: indep/2:
     *Usage:* `indep(X,Y)'
        - _Description:_ `X' and `Y' do not have variables in common.




File: ciao.info,  Node: Meta-properties,  Next: ISO-Prolog modes,  Prev: Properties which are native to analyzers,  Up: Top

Meta-properties
***************

   *Author(s):* Francisco Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#167 (2002/1/3, 17:43:50 CET)

   This library allows the use of some meta-constructs which provide
for specifying properties of terms which are unknown at the time of
the specification, or expressed with a shorthand for the property
definition, i.e., without really defining it.

   An example of such use is an assertion which specifies that any
property holding upon call will also hold upon exit:
              :- pred p(X) : Prop(X) => Prop(X).

   Another example is using shorthands for properties when
documenting:
              :- pred p(X) : regtype(X,(^(list;list);list)).

   (See below for an explanation of such a regular type.)

* Menu:

* Usage and interface (meta_props)::
* Documentation on exports (meta_props)::
* Documentation on multifiles (meta_props)::
* Documentation on internals (meta_props)::
* Known bugs and planned improvements (meta_props)::


File: ciao.info,  Node: Usage and interface (meta_props),  Next: Documentation on exports (meta_props),  Prev: Meta-properties,  Up: Meta-properties

Usage and interface (`meta_props')
==================================

   * *Library usage:*

     `:- use_module(library('assertions/meta_props'))'

     or also as a package `:- use_package(metaprops)'.

     Note the different names of the library and the package.

   * *Exports:*
        - _Properties:_

          `call/2', `prop/2', `regtype/2'.

        - _Multifiles:_

          `callme/2'.




File: ciao.info,  Node: Documentation on exports (meta_props),  Next: Documentation on multifiles (meta_props),  Prev: Usage and interface (meta_props),  Up: Meta-properties

Documentation on exports (`meta_props')
=======================================

 - PROPERTY: call/2:
     `call(P,A)'

     `A' has property `P' (provided that `P' is a property).
     Equivalent to `P(A)'.

     *Usage:* `call(P,A)'
        - _Description:_ `A' has property `P'.

        - _If the following properties hold at call time:_

          `P' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')



 - PROPERTY: prop/2:
     *Usage:* `prop(A,P)'
        - _Description:_ `A' has property `P'.

        - _If the following properties hold at call time:_

          `P' has property `^ (callable;prop_abs)'.
          (`meta_props:prop/2')



 - PROPERTY: regtype/2:
     *Usage:* `regtype(A,T)'
        - _Description:_ `A' is of type `T'.

        - _If the following properties hold at call time:_

          `T' has property `^ (regtype;prop_abs)'.
          (`meta_props:prop/2')




File: ciao.info,  Node: Documentation on multifiles (meta_props),  Next: Documentation on internals (meta_props),  Prev: Documentation on exports (meta_props),  Up: Meta-properties

Documentation on multifiles (`meta_props')
==========================================

 - PREDICATE: callme/2:
     (User defined.) A hook predicate you have to define as
     `callme(P,X):- P(X), !.' in the program that uses this library.
     This is done automatically if the package is used instead of the
     library module (but then you _should not_ define `callme/2' in
     your program).

     The predicate is _multifile_.





File: ciao.info,  Node: Documentation on internals (meta_props),  Next: Known bugs and planned improvements (meta_props),  Prev: Documentation on multifiles (meta_props),  Up: Meta-properties

Documentation on internals (`meta_props')
=========================================

 - PROPERTY: prop_abs/1:
     `prop_abs(Prop)'

     `Prop' is a _property abstraction_, i.e., a _parametric
     property_, or a term formed of property abstractions, where the
     functors used in the term are escaped by `^'.

     One particular case of property abstractions are _parametric
     regular type abstractions_, i.e., a parametric type functor or a
     `^'-escaped term formed of regular type abstractions.

     Such abstractions are a short-hand for a corresponding regular
     type (correspondingly, property). For example, the following
     abstraction:
                   ^(list;list);list
     denotes terms of the form `(X;Y)' where `list(X)' and `list(Y)'
     hold and also terms `T' such that `list(T)' holds. It is
     equivalent to the regular type:
                   abstract_type((X;Y)):- list(X), list(Y).
                   abstract_type(T):- list(T).

     *Usage:* `prop_abs(Prop)'
        - _Description:_ `Prop' is a property abstraction.




File: ciao.info,  Node: Known bugs and planned improvements (meta_props),  Prev: Documentation on internals (meta_props),  Up: Meta-properties

Known bugs and planned improvements (`meta_props')
==================================================

   * Using a hook predicate is not very elegant. Need something else.

   * The cut in the hook prevents backtracking (enough for most uses
     of properties but not quite ok).


File: ciao.info,  Node: ISO-Prolog modes,  Next: Classical Prolog modes,  Prev: Meta-properties,  Up: Top

ISO-Prolog modes
****************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#112 (1999/11/23, 1:8:50 MET)

   This file defines the " modes" used in the documentation of the
ISO-Prolog standard. See also *Note Classical Prolog modes:: for an
alternative set of modes.

* Menu:

* Usage and interface (isomodes)::
* Documentation on new modes (isomodes)::


File: ciao.info,  Node: Usage and interface (isomodes),  Next: Documentation on new modes (isomodes),  Prev: ISO-Prolog modes,  Up: ISO-Prolog modes

Usage and interface (`isomodes')
================================

   * *Library usage:*

     `:- use_package([assertions,isomodes]).'

   * *New operators defined:*

     `?/1' [200,fy], `@/1' [200,fy].

   * *New modes defined:*

     `+/1', `@/1', `-/1', `?/1', `*/1', `+/2', `@/2', `-/2', `?/2',
     `*/2'.

   * *Other modules used:*
        - _System library modules:_

          `assertions/meta_props'.




File: ciao.info,  Node: Documentation on new modes (isomodes),  Prev: Usage and interface (isomodes),  Up: ISO-Prolog modes

Documentation on new modes (`isomodes')
=======================================

 - MODE: +/1:
     *Usage:* `+ A'
        - _The following properties are added at call time:_

          `A' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - MODE: @/1:
     *Usage:* `@ A'
        - _The following properties are added globally:_

          `A' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - MODE: -/1:
     *Usage:* `- A'
        - _The following properties are added at call time:_

          `A' is a free variable.   (`term_typing:var/1')



 - MODE: ?/1:
     Unspecified argument.




 - MODE: */1:
     Unspecified argument.




 - MODE: +/2:
     *Usage:* `A + X'
        - _The following properties are added at call time:_

          `A' has property `X'.   (`meta_props:call/2')



 - MODE: @/2:
     *Usage:* `@(A,X)'
        - _The following properties are added at call time:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added upon exit:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added globally:_

          `A' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - MODE: -/2:
     *Usage:* `A - X'
        - _The following properties are added at call time:_

          `A' is a free variable.   (`term_typing:var/1')

        - _The following properties are added upon exit:_

          `A' has property `X'.   (`meta_props:call/2')



 - MODE: ?/2:
     *Usage:* `?(A,X)'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added upon exit:_

          `A' has property `X'.   (`meta_props:call/2')



 - MODE: */2:
     *Usage:* `A * X'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')




File: ciao.info,  Node: Classical Prolog modes,  Next: Run-time checking of assertions,  Prev: ISO-Prolog modes,  Up: Top

Classical Prolog modes
**********************

   *Author(s):* Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.8#43 (1999/3/6, 18:39:38 CET)

   This file defines a number of very simple " modes" which are
frequently useful in programs. These correspond to the modes used in
classical Prolog texts with some simple addtions. Note that some of
these modes use the same symbol as one of the ISO-modes (see *Note
ISO-Prolog modes::) but with subtly different meaning.

* Menu:

* Usage and interface (basicmodes)::
* Documentation on new modes (basicmodes)::


File: ciao.info,  Node: Usage and interface (basicmodes),  Next: Documentation on new modes (basicmodes),  Prev: Classical Prolog modes,  Up: Classical Prolog modes

Usage and interface (`basicmodes')
==================================

   * *Library usage:*

     :- use_package([assertions,basicmodes]).

   * *New operators defined:*

     `?/1' [500,fx], `@/1' [500,fx].

   * *New modes defined:*

     `+/1', `-/1', `?/1', `@/1', `in/1', `out/1', `go/1', `+/2',
     `-/2', `?/2', `@/2', `in/2', `out/2', `go/2'.

   * *Other modules used:*
        - _System library modules:_

          `assertions/meta_props'.




File: ciao.info,  Node: Documentation on new modes (basicmodes),  Prev: Usage and interface (basicmodes),  Up: Classical Prolog modes

Documentation on new modes (`basicmodes')
=========================================

 - MODE: +/1:
     Input value in argument.

     *Usage:* `+ A'
        - _The following properties are added at call time:_

          `A' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - MODE: -/1:
     No input value in argument.

     *Usage:* `- A'
        - _The following properties are added at call time:_

          `A' is a free variable.   (`term_typing:var/1')



 - MODE: ?/1:
     Unspecified argument.




 - MODE: @/1:
     No output value in argument.

     *Usage:* `@ A'
        - _The following properties are added globally:_

          `A' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - MODE: in/1:
     Input argument.

     *Usage:* `in(A)'
        - _The following properties are added at call time:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')

        - _The following properties are added upon exit:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')



 - MODE: out/1:
     Output argument.

     *Usage:* `out(A)'
        - _The following properties are added at call time:_

          `A' is a free variable.   (`term_typing:var/1')

        - _The following properties are added upon exit:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')



 - MODE: go/1:
     Ground output (input/output argument).

     *Usage:* `go(A)'
        - _The following properties are added upon exit:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')



 - MODE: +/2:
     *Usage:* `A + X'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added at call time:_

          `A' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')



 - MODE: -/2:
     *Usage:* `A - X'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added at call time:_

          `A' is a free variable.   (`term_typing:var/1')



 - MODE: ?/2:
     *Usage:* `?(A,X)'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')



 - MODE: @/2:
     *Usage:* `@(A,X)'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added globally:_

          `A' is not further instantiated.
          (`basic_props:not_further_inst/2')



 - MODE: in/2:
     *Usage:* `in(A,X)'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added at call time:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')

        - _The following properties are added upon exit:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')



 - MODE: out/2:
     *Usage:* `out(A,X)'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added at call time:_

          `A' is a free variable.   (`term_typing:var/1')

        - _The following properties are added upon exit:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')



 - MODE: go/2:
     *Usage:* `go(A,X)'
        - _Call and exit are _compatible_ with:_

          `A' has property `X'.   (`meta_props:call/2')

        - _The following properties are added upon exit:_

          `A' is currently ground (it contains no variables).
          (`term_typing:ground/1')




File: ciao.info,  Node: Run-time checking of assertions,  Next: *** PART VI - Ciao Prolog library miscellanea,  Prev: Classical Prolog modes,  Up: Top

Run-time checking of assertions
*******************************

   *Author(s):* German Puebla.

   This library package allows the use of run-time checks for the
assertions introduced in a program.

   The recommended way of performing _run-time checks_ of predicate
assertions in a program is via the Ciao preprocessor (see `ciaopp'
manual), which performs the required program transformation. However,
this package can also be used to perform checking of program-point
assertions.

* Menu:

* Usage and interface (rtchecks)::
* Documentation on multifiles (rtchecks)::
* Known bugs and planned improvements (rtchecks)::


File: ciao.info,  Node: Usage and interface (rtchecks),  Next: Documentation on multifiles (rtchecks),  Prev: Run-time checking of assertions,  Up: Run-time checking of assertions

Usage and interface (`rtchecks')
================================

   * *Library usage:*

     `:- use_package(rtchecks).'

     or

     `:- module(...,...,[rtchecks]).'

   * *Other modules used:*
        - _System library modules:_

          `assertions/meta_props', `rtchecks/rtchecks_sys'.




File: ciao.info,  Node: Documentation on multifiles (rtchecks),  Next: Known bugs and planned improvements (rtchecks),  Prev: Usage and interface (rtchecks),  Up: Run-time checking of assertions

Documentation on multifiles (`rtchecks')
========================================

 - PREDICATE: callme/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




 - PREDICATE: callme/1:
     No further documentation available for this predicate.

     The predicate is _multifile_.




 - PREDICATE: proves/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




 - PREDICATE: disproves/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.





File: ciao.info,  Node: Known bugs and planned improvements (rtchecks),  Prev: Documentation on multifiles (rtchecks),  Up: Run-time checking of assertions

Known bugs and planned improvements (`rtchecks')
================================================

   * All the code in this package is included in the user program
     when it is used, ant there is a lot of it! A module should be
     used instead.

   * `check/1' uses lists instead of "proper" properties.


File: ciao.info,  Node: *** PART VI - Ciao Prolog library miscellanea,  Next: Structured stream handling,  Prev: Run-time checking of assertions,  Up: Top

PART VI - Ciao Prolog library miscellanea
*****************************************

   This part documents several Ciao libraries which provide different
useful additional functionalities. Such functionalities include
performing operating system calls, gathering statistics from the
Prolog engine, file and file name manipulation, error and exception
handling, fast reading and writing of terms ( marshalling and
unmarshalling), file locking, program reporting messages,
pretty-printing programs and assertions, a browser of the system
libraries, additional expansion utilities, concurrent aggregates,
graph visualization, etc.


File: ciao.info,  Node: Structured stream handling,  Next: Operating system utilities,  Prev: *** PART VI - Ciao Prolog library miscellanea,  Up: Top

Structured stream handling
**************************

   *Version:* 0.5#15 (1998/6/9, 16:30:53 MET DST)

* Menu:

* Usage and interface (streams)::
* Documentation on exports (streams)::


File: ciao.info,  Node: Usage and interface (streams),  Next: Documentation on exports (streams),  Prev: Structured stream handling,  Up: Structured stream handling

Usage and interface (`streams')
===============================

   * *Library usage:*

     `:- use_module(library(streams)).'

   * *Exports:*
        - _Predicates:_

          `open_null_stream/1', `open_input/2', `close_input/1',
          `open_output/2', `close_output/1'.




File: ciao.info,  Node: Documentation on exports (streams),  Prev: Usage and interface (streams),  Up: Structured stream handling

Documentation on exports (`streams')
====================================

 - PREDICATE: open_null_stream/1:
     No further documentation available for this predicate.




 - PREDICATE: open_input/2:
     No further documentation available for this predicate.




 - PREDICATE: close_input/1:
     No further documentation available for this predicate.




 - PREDICATE: open_output/2:
     No further documentation available for this predicate.




 - PREDICATE: close_output/1:
     No further documentation available for this predicate.





File: ciao.info,  Node: Operating system utilities,  Next: Prolog system internal predicates,  Prev: Structured stream handling,  Up: Top

Operating system utilities
**************************

   *Author(s):* Daniel Cabeza, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#211 (2002/4/30, 20:40:19 CEST)

   This module contains predicates for invoking services which are
typically provided by the operating system. Note that the predicates
which take names of files or directories as arguments in this module
expect atoms, not path aliases. I.e., generally these predicates will
not call `absolute_file_name/2' on names of files or directories
taken as arguments.

* Menu:

* Usage and interface (system)::
* Documentation on exports (system)::
* Documentation on multifiles (system)::


File: ciao.info,  Node: Usage and interface (system),  Next: Documentation on exports (system),  Prev: Operating system utilities,  Up: Operating system utilities

Usage and interface (`system')
==============================

   * *Library usage:*

     `:- use_module(library(system)).'

   * *Exports:*
        - _Predicates:_

          `pause/1', `time/1', `datime/1', `datime/9', `getenvstr/2',
          `setenvstr/2', `extract_paths/2', `get_pid/1',
          `current_host/1', `current_executable/1', `umask/2',
          `make_directory/2', `make_directory/1', `make_dirpath/2',
          `make_dirpath/1', `working_directory/2', `cd/1', `shell/0',
          `shell/1', `shell/2', `system/1', `system/2', `popen/3',
          `exec/4', `exec/3', `directory_files/2', `mktemp/2',
          `file_exists/1', `file_exists/2', `file_property/2',
          `file_properties/6', `modif_time/2', `modif_time0/2',
          `fmode/2', `chmod/2', `chmod/3', `delete_file/1',
          `delete_directory/1', `rename_file/2', `cyg2win/3'.

        - _Regular Types:_

          `datime_struct/1', `popen_mode/1'.

        - _Multifiles:_

          `define_flag/3'.


   * *Other modules used:*
        - _System library modules:_

          `lists'.




File: ciao.info,  Node: Documentation on exports (system),  Next: Documentation on multifiles (system),  Prev: Usage and interface (system),  Up: Operating system utilities

Documentation on exports (`system')
===================================

 - PREDICATE: pause/1:
     `pause(Seconds)'

     Make this thread sleep for some `Seconds'.




 - PREDICATE: time/1:
     `time(Time)'

     `Time' is unified with the number of seconds elapsed since
     January, 1, 1970 (UTC).




 - PREDICATE: datime/1:
     `datime(Datime)'

     `Datime' is unified with a term of the form
     `datime(Year,Month,Day,Hour,Minute,Second)' which contains the
     current date and time.




 - PREDICATE: datime/9:
     `datime(Time,Year,Month,Day,Hour,Min,Sec,WeekDay,YearDay)'

     `Time' is as in `time/1'. `WeekDay' is the number of days since
     Sunday, in the range 0 to 6. `YearDay' is the number of days
     since January 1, in the range 0 to 365.

     *Usage 1:* `datime(+int,?int,?int,?int,?int,?int,?int,?int,?int)'
        - _Description:_ If `Time' is given, the rest of the
          arguments are unified with the date and time to which the
          `Time' argument refers.

     *Usage 2:* `datime(-int,?int,?int,?int,?int,?int,?int,?int,?int)'
        - _Description:_ Bound `Time' to current time and the rest of
          the arguments refer to current time.



 - REGTYPE: datime_struct/1:
     A regular type, defined as follows:
               datime_struct(datime(Year,Month,Day,Hour,Min,Sec)) :-
                       int(Year),
                       int(Month),
                       int(Day),
                       int(Hour),
                       int(Min),
                       int(Sec).




 - PREDICATE: getenvstr/2:
     `getenvstr(Name,Value)'

     The environment variable `Name' has `Value'. Fails if variable
     `Name' is not defined.




 - PREDICATE: setenvstr/2:
     `setenvstr(Name,Value)'

     The environment variable `Name' is assigned `Value'.




 - PREDICATE: extract_paths/2:
     `extract_paths(String,Paths)'

     Interpret `String' as the value of a UNIX environment variable
     holding a list of paths and return in `Paths' the list of the
     paths. Paths in `String' are separated by colons, and an empty
     path is considered a shorthand for '.' (current path). The most
     typical environment variable with this format is PATH. For
     example, this is a typical use:
          ?- set_prolog_flag(write_strings, on).
          
          yes
          ?- getenvstr('PATH', PATH), extract_paths(PATH, Paths).
          
          PATH = ":/home/bardo/bin:/home/clip/bin:/opt/bin/:/bin",
          Paths = [".","/home/bardo/bin","/home/clip/bin","/opt/bin/","/bin"] ?
          
          yes
          ?-




 - PREDICATE: get_pid/1:
     `get_pid(Pid)'

     Unifies `Pid' with the process identificator of the current
     process or thread.




 - PREDICATE: current_host/1:
     `current_host(Hostname)'

     `Hostname' is unified with the fully qualified name of the host.




 - PREDICATE: current_executable/1:
     `current_executable(Path)'

     Unifies `Path' with the path to the current executable.




 - PREDICATE: umask/2:
     `umask(OldMask,NewMask)'

     The process file creation mask was `OldMask', and it is changed
     to `NewMask'.

     *Usage 2:* `umask(OldMask,NewMask)'
        - _Description:_ Gets the process file creation mask without
          changing it.

        - _The following properties should hold at call time:_

          `OldMask' is a free variable.   (`term_typing:var/1')

          `NewMask' is a free variable.   (`term_typing:var/1')

          The terms `OldMask' and `NewMask' are strictly identical.
          (`term_compare:== /2')

        - _The following properties hold upon exit:_

          `OldMask' is an integer.   (`basic_props:int/1')

          `NewMask' is an integer.   (`basic_props:int/1')



 - PREDICATE: make_directory/2:
     `make_directory(DirName,Mode)'

     Creates the directory `DirName' with a given `Mode'. This is, as
     usual, operated against the current umask value.




 - PREDICATE: make_directory/1:
     `make_directory(DirName)'

     Equivalent to `make_directory(D,0o777)'.




 - PREDICATE: make_dirpath/2:
     `make_dirpath(Path,Mode)'

     Creates the whole `Path' for a given directory with a given
     `Mode'. As an example, `make_dirpath('/tmp/var/mydir/otherdir')'.




 - PREDICATE: make_dirpath/1:
     `make_dirpath(Path)'

     Equivalent to `make_dirpath(D,0o777)'.




 - PREDICATE: working_directory/2:
     `working_directory(OldDir,NewDir)'

     Unifies current working directory with `OldDir', and then
     changes the working directory to `NewDir'. Calling
     `working_directory(Dir,Dir)' simply unifies `Dir' with the
     current working directory without changing anything else.

     *Usage 2:* `working_directory(OldDir,NewDir)'
        - _Description:_ Gets current working directory.

        - _The following properties should hold at call time:_

          `OldDir' is a free variable.   (`term_typing:var/1')

          `NewDir' is a free variable.   (`term_typing:var/1')

          The terms `OldDir' and `NewDir' are strictly identical.
          (`term_compare:== /2')

        - _The following properties hold upon exit:_

          `OldDir' is an atom.   (`basic_props:atm/1')

          `NewDir' is an atom.   (`basic_props:atm/1')



 - PREDICATE: cd/1:
     `cd(Path)'

     Changes working directory to `Path'.




 - PREDICATE: shell/0:
     *Usage:*
        - _Description:_ Execs the shell specified by the environment
          variable `SHELL'. When the shell process terminates,
          control is returned to Prolog.



 - PREDICATE: shell/1:
     `shell(Command)'

     `Command' is executed in the shell specified by the environment
     variable `SHELL'. It succeeds if the exit code is zero and fails
     otherwise.




 - PREDICATE: shell/2:
     `shell(Command,ReturnCode)'

     Executes `Command' in the shell specified by the environment
     variable `SHELL' and stores the exit code in `ReturnCode'.




 - PREDICATE: system/1:
     `system(Command)'

     Executes `Command' using the shell `/bin/sh'.




 - PREDICATE: system/2:
     `system(Command,ReturnCode)'

     Executes `Command' in the `/bin/sh' shell and stores the exit
     code in `ReturnCode'.




 - PREDICATE: popen/3:
     `popen(Command,Mode,Stream)'

     Open a pipe to process `Command' in a new shell with a given
     `Mode' and return a communication `Stream' (as in UNIX
     `popen(3)'). If `Mode' is `read' the output from the process is
     sent to `Stream'. If `Mode' is `write', `Stream' is sent as
     input to the process. `Stream' may be read from or written into
     using the ordinary stream I/O predicates. `Stream' must be
     closed explicitly using `close/1', i.e., it is not closed
     automatically when the process dies.




 - REGTYPE: popen_mode/1:
     *Usage:* `popen_mode(M)'
        - _Description:_ `M' is 'read' or 'write'.



 - PREDICATE: exec/4:
     `exec(Command,StdIn,StdOut,StdErr)'

     Starts the process `Command' and returns the standart I/O
     streams of the process in `StdIn', `StdOut', and `StdErr'.




 - PREDICATE: exec/3:
     `exec(Command,StdIn,StdOut)'

     Starts the process `Command' and returns the standart I/O
     streams of the process in `StdIn' and `StdOut'. `Standard error'
     is connected to whichever the parent process had it connected to.




 - PREDICATE: directory_files/2:
     `directory_files(Directory,FileList)'

     `FileList' is the unordered list of entries (files, directories,
     etc.) in `Directory'.




 - PREDICATE: mktemp/2:
     `mktemp(Template,Filename)'

     Returns a unique `Filename' based on `Template': `Template' must
     be a valid file name with six trailing X, which are substituted
     to create a new file name.




 - PREDICATE: file_exists/1:
     `file_exists(File)'

     Succeeds if `File' (a file or directory) exists (and is
     accessible).




 - PREDICATE: file_exists/2:
     `file_exists(File,Mode)'

     `File' (a file or directory) exists and it is accessible with
     `Mode', as in the Unix call `access(2)'. Typically, `Mode' is 4
     for read permission, 2 for write permission and 1 for execute
     permission.




 - PREDICATE: file_property/2:
     `file_property(File,Property)'

     `File' has the property `Property'. The possible properties are:

    type(`Type')
          `Type' is one of `regular', `directory', `symlink', `fifo',
          `socket' or `unknown'.

    linkto(`Linkto')
          If `File' is a symbolic link, `Linkto' is the file pointed
          to by the link (and the other properties come from that
          file, not from the link itself).

    mod_time(`ModTime')
          `ModTime' is the time of last modification (seconds since
          January, 1, 1970).

    mode(`Protection')
          `Protection' is the protection mode.

    size(`Size')
          `Size' is the size.

     If `Property' is uninstantiated, the predicate will enumerate
     the properties on backtracking.




 - PREDICATE: file_properties/6:
     `file_properties(Path,Type,Linkto,Time,Protection,Size)'

     The file `Path' has the following properties:

        * File type `Type' (one of `regular', `directory', `symlink',
          `fifo', `socket' or `unknown').

        * If `Path' is a symbolic link, `Linkto' is the file pointed
          to. All other properties come from the file pointed, not
          the link. `Linkto' is " if `Path' is not a symbolic link.

        * Time of last modification `Time' (seconds since January, 1,
          1970).

        * Protection mode `Protection'.

        * Size in bytes `Size'.





 - PREDICATE: modif_time/2:
     `modif_time(File,Time)'

     The file `File' was last modified at `Time', which is in seconds
     since January, 1, 1970. Fails if `File' does not exist.




 - PREDICATE: modif_time0/2:
     `modif_time0(File,Time)'

     If `File' exists, `Time' is its latest modification time, as in
     `modif_time/2'. Otherwise, if `File' does not exist, `Time' is
     zero.




 - PREDICATE: fmode/2:
     `fmode(File,Mode)'

     The file `File' has protection mode `Mode'.




 - PREDICATE: chmod/2:
     `chmod(File,NewMode)'

     Change the protection mode of file `File' to `NewMode'.




 - PREDICATE: chmod/3:
     `chmod(File,OldMode,NewMode)'

     The file `File' has protection mode `OldMode' and it is changed
     to `NewMode'.

     *Usage 2:* `chmod(File,OldMode,NewMode)'
        - _Description:_ Equivalent to fmode(`File',`OldMode')

        - _The following properties should hold at call time:_

          `File' is an atom.   (`basic_props:atm/1')

          `OldMode' is a free variable.   (`term_typing:var/1')

          `NewMode' is a free variable.   (`term_typing:var/1')

          The terms `OldMode' and `NewMode' are strictly identical.
          (`term_compare:== /2')

        - _The following properties hold upon exit:_

          `File' is an atom.   (`basic_props:atm/1')

          `OldMode' is an atom.   (`basic_props:atm/1')

          `NewMode' is an atom.   (`basic_props:atm/1')



 - PREDICATE: delete_file/1:
     `delete_file(File)'

     Delete the file `File'.




 - PREDICATE: delete_directory/1:
     `delete_directory(File)'

     Delete the directory `Directory'.




 - PREDICATE: rename_file/2:
     `rename_file(File1,File2)'

     Change the name of `File1' to `File2'.




 - PREDICATE: cyg2win/3:
     `cyg2win(+CygWinPath,?WindowsPath,+SpawSlash)'

     Converts a path in the CygWin style to a Windows-style path,
     rewriting the driver part. If `SwapSlash' is `swap', slashes are
     converted in to backslash. If it is `noswap', they are preserved.





File: ciao.info,  Node: Documentation on multifiles (system),  Prev: Documentation on exports (system),  Up: Operating system utilities

Documentation on multifiles (`system')
======================================

 - PREDICATE: define_flag/3:
     No further documentation available for this predicate.

     The predicate is _multifile_.





File: ciao.info,  Node: Prolog system internal predicates,  Next: Atom to term conversion,  Prev: Operating system utilities,  Up: Top

Prolog system internal predicates
*********************************

   *Author(s):* Manuel Carro, Daniel Cabeza, Mats Carlsson.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#153 (2000/5/29, 10:24:35 CEST)

   This module implements some miscellaneous predicates which provide
access to some internal statistics, special properties of the
predicates, etc.

* Menu:

* Usage and interface (prolog_sys)::
* Documentation on exports (prolog_sys)::
* Documentation on internals (prolog_sys)::
* Known bugs and planned improvements (prolog_sys)::


File: ciao.info,  Node: Usage and interface (prolog_sys),  Next: Documentation on exports (prolog_sys),  Prev: Prolog system internal predicates,  Up: Prolog system internal predicates

Usage and interface (`prolog_sys')
==================================

   * *Library usage:*

     `:- use_module(library(prolog_sys)).'

   * *Exports:*
        - _Predicates:_

          `statistics/0', `statistics/2', `predicate_property/2',
          `current_atom/1', `garbage_collect/0', `new_atom/1'.




File: ciao.info,  Node: Documentation on exports (prolog_sys),  Next: Documentation on internals (prolog_sys),  Prev: Usage and interface (prolog_sys),  Up: Prolog system internal predicates

Documentation on exports (`prolog_sys')
=======================================

 - PREDICATE: statistics/0:
     *Usage:*
        - _Description:_ Prints statistics about the system.



 - PREDICATE: statistics/2:
     *Usage 1:* `statistics(Time_option,Time_result)'
        - _Description:_ Gather information about time (either
          process time or wall time) since last consult or since
          start of program. Results are returned in milliseconds.

        - _The following properties should hold at call time:_

          Options to get information about execution time.
          `Time_option' must be one of `runtime', `walltime'.
          (`prolog_sys:time_option/1')

          `Time_result' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          Options to get information about execution time.
          `Time_option' must be one of `runtime', `walltime'.
          (`prolog_sys:time_option/1')

          `Time_result' is a two-element list of integers. The first
          integer is the time since the start of the execution; the
          second integer is the time since the previous consult to
          time.   (`prolog_sys:time_result/1')

     *Usage 2:* `statistics(Memory_option,Memory_result)'
        - _Description:_ Gather information about memory consumption.

        - _The following properties should hold at call time:_

          Options to get information about memory usage.
          (`prolog_sys:memory_option/1')

          `Memory_result' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          Options to get information about memory usage.
          (`prolog_sys:memory_option/1')

          Result is a two-element list of integers. The first element
          is the space taken up by the option selected, measured in
          bytes; the second integer is zero for program space (which
          grows as necessary), and the amount of free space otherwise.
          (`prolog_sys:memory_result/1')

     *Usage 3:* `statistics(Garbage_collection_option,Gc_result)'
        - _Description:_ Gather information about garbage collection.

        - _The following properties should hold at call time:_

          Options to get information about garbage collection.
          (`prolog_sys:garbage_collection_option/1')

          `Gc_result' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          Options to get information about garbage collection.
          (`prolog_sys:garbage_collection_option/1')

          `Gc_result' is a tree-element list of integers, related to
          garbage collection and memory management. When
          `stack_shifts' is selected, the first one is the number of
          shifts (reallocations) of the local stack; the second is
          the number of shifts of the trail, and the third is the
          time spent in these shifts. When `garbage_collection' is
          selected, the numbers are, respectively, the number of
          garbage collections performed, the number of bytes freed,
          and the time spent in garbage collection.
          (`prolog_sys:gc_result/1')

     *Usage 4:* `statistics(Symbol_option,Symbol_result)'
        - _Description:_ Gather information about number of symbols
          and predicates.

        - _The following properties should hold at call time:_

          Option to get information about the number of symbols in
          the program.   (`prolog_sys:symbol_option/1')

          `Symbol_result' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          Option to get information about the number of symbols in
          the program.   (`prolog_sys:symbol_option/1')

          `Symbol_result' is a two-element list of integers. The
          first one is the number of atom, functor, and predicate
          names in the symbol table. The second is the number of
          predicates known to be defined (although maybe without
          clauses).   (`prolog_sys:symbol_result/1')

     *Usage 5:* `statistics(Option,?term)'
        - _Description:_ If `Option' is unbound, it is bound to the
          values on the other cases.



 - PREDICATE: predicate_property/2:
     *Usage:* `predicate_property(Head,Property)'
        - _Description:_ The predicate with clause `Head' is
          `Property'.

        - _The following properties should hold at call time:_

          `Head' is any term.   (`basic_props:term/1')

          `Property' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `Head' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Property' is an atom.   (`basic_props:atm/1')



 - PREDICATE: current_atom/1:
     *Usage:* `current_atom(Atom)'
        - _Description:_ Enumerates on backtracking all the existing
          atoms in the system.

        - _The following properties should hold at call time:_

          `Atom' is a free variable.   (`term_typing:var/1')

        - _The following properties hold upon exit:_

          `Atom' is an atom.   (`basic_props:atm/1')



 - PREDICATE: garbage_collect/0:
     *Usage:*
        - _Description:_ Forces garbage collection when called.



 - PREDICATE: new_atom/1:
     *Usage:* `new_atom(Atom)'
        - _Description:_ Returns, on success, a new atom, not
          existing before in the system. The entry argument must be a
          variable. The idea behind this atom generation is to
          provide a fast source of identifiers for new objects,
          concurrent predicates, etc. on the fly.

        - _The following properties should hold at call time:_

          `Atom' is a free variable.   (`term_typing:var/1')

        - _The following properties hold upon exit:_

          `Atom' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Documentation on internals (prolog_sys),  Next: Known bugs and planned improvements (prolog_sys),  Prev: Documentation on exports (prolog_sys),  Up: Prolog system internal predicates

Documentation on internals (`prolog_sys')
=========================================

 - REGTYPE: time_option/1:
     *Usage:* `time_option(M)'
        - _Description:_ Options to get information about execution
          time. `M' must be one of `runtime', `walltime'.



 - REGTYPE: memory_option/1:
     *Usage:* `memory_option(M)'
        - _Description:_ Options to get information about memory
          usage.



 - REGTYPE: garbage_collection_option/1:
     *Usage:* `garbage_collection_option(M)'
        - _Description:_ Options to get information about garbage
          collection.



 - REGTYPE: symbol_option/1:
     *Usage:* `symbol_option(M)'
        - _Description:_ Option to get information about the number
          of symbols in the program.



 - REGTYPE: time_result/1:
     *Usage:* `time_result(Result)'
        - _Description:_ `Result' is a two-element list of integers.
          The first integer is the time since the start of the
          execution; the second integer is the time since the
          previous consult to time.



 - REGTYPE: memory_result/1:
     *Usage:* `memory_result(Result)'
        - _Description:_ Result is a two-element list of integers.
          The first element is the space taken up by the option
          selected, measured in bytes; the second integer is zero for
          program space (which grows as necessary), and the amount of
          free space otherwise.



 - REGTYPE: gc_result/1:
     *Usage:* `gc_result(Result)'
        - _Description:_ `Result' is a tree-element list of integers,
          related to garbage collection and memory management. When
          `stack_shifts' is selected, the first one is the number of
          shifts (reallocations) of the local stack; the second is
          the number of shifts of the trail, and the third is the
          time spent in these shifts. When `garbage_collection' is
          selected, the numbers are, respectively, the number of
          garbage collections performed, the number of bytes freed,
          and the time spent in garbage collection.



 - REGTYPE: symbol_result/1:
     *Usage:* `symbol_result(Result)'
        - _Description:_ `Result' is a two-element list of integers.
          The first one is the number of atom, functor, and predicate
          names in the symbol table. The second is the number of
          predicates known to be defined (although maybe without
          clauses).




File: ciao.info,  Node: Known bugs and planned improvements (prolog_sys),  Prev: Documentation on internals (prolog_sys),  Up: Prolog system internal predicates

Known bugs and planned improvements (`prolog_sys')
==================================================

   * The space used by the process is not measured here: process
     data, code, and stack also take up memory. The memory reported
     for atoms is not what is actually used, but the space used up by
     the hash table (which is enlarged as needed).


File: ciao.info,  Node: Atom to term conversion,  Next: ctrlcclean (library),  Prev: Prolog system internal predicates,  Up: Top

Atom to term conversion
***********************

   *Author(s):* Francisco Bueno, Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#189 (2002/2/14, 17:16:46 CET)

* Menu:

* Usage and interface (atom2term)::
* Documentation on exports (atom2term)::
* Known bugs and planned improvements (atom2term)::


File: ciao.info,  Node: Usage and interface (atom2term),  Next: Documentation on exports (atom2term),  Prev: Atom to term conversion,  Up: Atom to term conversion

Usage and interface (`atom2term')
=================================

   * *Library usage:*

     `:- use_module(library(atom2term)).'

   * *Exports:*
        - _Predicates:_

          `atom2term/2', `string2term/2', `parse_term/3'.




File: ciao.info,  Node: Documentation on exports (atom2term),  Next: Known bugs and planned improvements (atom2term),  Prev: Usage and interface (atom2term),  Up: Atom to term conversion

Documentation on exports (`atom2term')
======================================

 - PREDICATE: atom2term/2:
     *Usage:* `atom2term(+Atom,-Term)'
        - _Description:_ Convert an atom into a term. `Atom' is an
          atom, but must have term syntax. `Term' is a term resulting
          from parsing `Atom' char by char.



 - PREDICATE: string2term/2:
     *Usage:* `string2term(+String,-Term)'
        - _Description:_ Same as `atom2term/2' but first argument is
          a string (containing a term).



 - PREDICATE: parse_term/3:
     *Usage:* `parse_term(+String,-Term,?Dummy)'
        - _Description:_ `String' is parsed into `Term' upto `Dummy'
          (which is the non-parsed rest of the list).




File: ciao.info,  Node: Known bugs and planned improvements (atom2term),  Prev: Documentation on exports (atom2term),  Up: Atom to term conversion

Known bugs and planned improvements (`atom2term')
=================================================

   * This is just a quick hack written mainly for parsing daVinci's
     messages. There should be a call to the standard reader to do
     this!


File: ciao.info,  Node: ctrlcclean (library),  Next: errhandle (library),  Prev: Atom to term conversion,  Up: Top

ctrlcclean (library)
********************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (ctrlcclean)::
* Documentation on exports (ctrlcclean)::


File: ciao.info,  Node: Usage and interface (ctrlcclean),  Next: Documentation on exports (ctrlcclean),  Prev: ctrlcclean (library),  Up: ctrlcclean (library)

Usage and interface (`ctrlcclean')
==================================

   * *Library usage:*

     `:- use_module(library(ctrlcclean)).'

   * *Exports:*
        - _Predicates:_

          `ctrlc_clean/1', `delete_on_ctrlc/2', `ctrlcclean/0'.


   * *Other modules used:*
        - _System library modules:_

          `system'.




File: ciao.info,  Node: Documentation on exports (ctrlcclean),  Prev: Usage and interface (ctrlcclean),  Up: ctrlcclean (library)

Documentation on exports (`ctrlcclean')
=======================================

 - PREDICATE: ctrlc_clean/1:
     No further documentation available for this predicate.

     _Meta-predicate_ with arguments: `ctrlc_clean(goal)'.




 - PREDICATE: delete_on_ctrlc/2:
     No further documentation available for this predicate.




 - PREDICATE: ctrlcclean/0:
     No further documentation available for this predicate.





File: ciao.info,  Node: errhandle (library),  Next: Fast reading and writing of terms,  Prev: ctrlcclean (library),  Up: Top

errhandle (library)
*******************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (errhandle)::
* Documentation on exports (errhandle)::


File: ciao.info,  Node: Usage and interface (errhandle),  Next: Documentation on exports (errhandle),  Prev: errhandle (library),  Up: errhandle (library)

Usage and interface (`errhandle')
=================================

   * *Library usage:*

     `:- use_module(library(errhandle)).'

   * *Exports:*
        - _Predicates:_

          `error_protect/1', `handle_error/2'.




File: ciao.info,  Node: Documentation on exports (errhandle),  Prev: Usage and interface (errhandle),  Up: errhandle (library)

Documentation on exports (`errhandle')
======================================

 - PREDICATE: error_protect/1:
     No further documentation available for this predicate.

     _Meta-predicate_ with arguments: `error_protect(goal)'.




 - PREDICATE: handle_error/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: Fast reading and writing of terms,  Next: File name manipulation,  Prev: errhandle (library),  Up: Top

Fast reading and writing of terms
*********************************

   *Author(s):* Daniel Cabeza, Oscar Portela Arjona.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#16 (2000/8/29, 13:44:18 CEST)

   This library provides predicates to support reading / writing of
terms on a format designed to be handled on read faster than standard
representation.

* Menu:

* Usage and interface (fastrw)::
* Documentation on exports (fastrw)::
* Known bugs and planned improvements (fastrw)::


File: ciao.info,  Node: Usage and interface (fastrw),  Next: Documentation on exports (fastrw),  Prev: Fast reading and writing of terms,  Up: Fast reading and writing of terms

Usage and interface (`fastrw')
==============================

   * *Library usage:*

     `:- use_module(library(fastrw)).'

   * *Exports:*
        - _Predicates:_

          `fast_read/1', `fast_write/1', `fast_read/2',
          `fast_write/2', `fast_write_to_string/3'.


   * *Other modules used:*
        - _System library modules:_

          `dict'.




File: ciao.info,  Node: Documentation on exports (fastrw),  Next: Known bugs and planned improvements (fastrw),  Prev: Usage and interface (fastrw),  Up: Fast reading and writing of terms

Documentation on exports (`fastrw')
===================================

 - PREDICATE: fast_read/1:
     `fast_read(Term)'

     The next term is read from current standard input and is unified
     with `Term'. The syntax of the term must agree with fast_read /
     fast_write format. If the end of the input has been reached,
     `Term' is unified with the term 'end_of_file'. Further calls to
     `fast_read/1' will then cause an error.




 - PREDICATE: fast_write/1:
     `fast_write(Term)'

     Output `Term' in a way that `fast_read/1' and `fast_read/2' will
     be able to read it back.




 - PREDICATE: fast_read/2:
     `fast_read(Stream,Term)'

     The next term is read from `Stream' and unified with `Term'. The
     syntax of the term must agree with fast_read / fast_write
     format. If the end of the input has been reached, `Term' is
     unified with the term 'end_of_file'. Further calls to
     `fast_read/2' will then cause an error.




 - PREDICATE: fast_write/2:
     `fast_write(Stream,Term)'

     Output `Term' to `Stream' in a way that `fast_read/1' and
     `fast_read/2' will be able to read it back.




 - PREDICATE: fast_write_to_string/3:
     No further documentation available for this predicate.





File: ciao.info,  Node: Known bugs and planned improvements (fastrw),  Prev: Documentation on exports (fastrw),  Up: Fast reading and writing of terms

Known bugs and planned improvements (`fastrw')
==============================================

   * Both `fast_read/2' and `fast_write/2' simply set the current
     output/input and call `fast_read/1' and `fast_write/1'.
     Therefore, in the event an error hapens during its execution,
     the current input / output streams may be left pointing to the
     `Stream'


File: ciao.info,  Node: File name manipulation,  Next: File I/O utilities,  Prev: Fast reading and writing of terms,  Up: Top

File name manipulation
**********************

   *Author(s):* Daniel Cabeza, Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#51 (1999/9/9, 16:28:44 MEST)

   This library provides some small utilities to handle file name
syntax.

* Menu:

* Usage and interface (filenames)::
* Documentation on exports (filenames)::


File: ciao.info,  Node: Usage and interface (filenames),  Next: Documentation on exports (filenames),  Prev: File name manipulation,  Up: File name manipulation

Usage and interface (`filenames')
=================================

   * *Library usage:*

     `:- use_module(library(filenames)).'

   * *Exports:*
        - _Predicates:_

          `no_path_file_name/2', `file_name_extension/3',
          `basename/2', `extension/2'.


   * *Other modules used:*
        - _System library modules:_

          `lists'.




File: ciao.info,  Node: Documentation on exports (filenames),  Prev: Usage and interface (filenames),  Up: File name manipulation

Documentation on exports (`filenames')
======================================

 - PREDICATE: no_path_file_name/2:
     This predicate will extract the last item (usually the file
     name) from a given path.

     The first argument must be instantiated to a string or atom.
     Whenever the first argument is an atom, the second argument will
     be an atom. Whenever the first argument is a string, the second
     argument will be a string.

     This predicate will fail under any of the following conditions:
        * First argument is not an atom, nor a string.

        * Second argument is not the last given path item (given path
          is the first argument).

     Those are the most usual usages of no_path_file_name/2:
          ?- no_path_file_name_("/home/nexusV/somefile.txt",K).
          
          K = "somefile.txt" ?
          
          yes
          ?- no_path_file_name('/home/nexusV/somefile.txt',K).
          
          K = 'somefile.txt' ?
          
          yes
          ?-

     *Usage:* `no_path_file_name(Path,FileName)'
        - _Description:_ `FileName' is the file corresponding to the
          given `Path'.

        - _Call and exit should be _compatible_ with:_

          `Path' is an atom or a string  (`filenames:atom_or_str/1')

          `FileName' is an atom or a string
          (`filenames:atom_or_str/1')



 - PREDICATE: file_name_extension/3:
     This predicate may be used in two ways:
        * To create a file name from its components: name and
          extension. For instance:

               ?- file_name_extension(File,mywork,'.txt').
               
               File = 'mywork.txt' ?
               
               yes
               ?-

        * To split a file name into its name and extension. For
          Instance:
               ?- file_name_extension('mywork.txt',A,B).
               
               A = mywork,
               B = '.txt' ?
               
               yes
               ?-

     Any other usage of file_name_extension/3 will cause the
     predicate to fail. Notice that valid arguments are accepted both
     as atoms or strings.

     *Usage:* `file_name_extension(FileName,BaseName,Extension)'
        - _Description:_ Splits a `FileName' into its `BaseName' and
          `Extension'.

        - _Call and exit should be _compatible_ with:_

          `FileName' is an atom or a string
          (`filenames:atom_or_str/1')

          `BaseName' is an atom or a string
          (`filenames:atom_or_str/1')

          `Extension' is an atom or a string
          (`filenames:atom_or_str/1')



 - PREDICATE: basename/2:
     `basename(FileName,BaseName)'

     `BaseName' is `FileName' without extension. Equivalent to
     `file_name_extension(FileName,BaseName,_)'. Useful to extract
     the base name of a file using functional syntax.

     *Usage:*
        - _Calls should, and exit will be compatible with:_

          `FileName' is an atom or a string
          (`filenames:atom_or_str/1')

          `BaseName' is an atom or a string
          (`filenames:atom_or_str/1')



 - PREDICATE: extension/2:
     `extension(FileName,Extension)'

     `Extension' is the extension (suffix) of `FileName'. Equivalent
     to `file_name_extension(FileName,_,Extension)'. Useful to
     extract the extension of a file using functional syntax.

     *Usage:*
        - _Calls should, and exit will be compatible with:_

          `FileName' is an atom or a string
          (`filenames:atom_or_str/1')

          `Extension' is an atom or a string
          (`filenames:atom_or_str/1')




File: ciao.info,  Node: File I/O utilities,  Next: File locks,  Prev: File name manipulation,  Up: Top

File I/O utilities
******************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#55 (2000/2/11, 21:19:43 CET)

* Menu:

* Usage and interface (file_utils)::
* Documentation on exports (file_utils)::


File: ciao.info,  Node: Usage and interface (file_utils),  Next: Documentation on exports (file_utils),  Prev: File I/O utilities,  Up: File I/O utilities

Usage and interface (`file_utils')
==================================

   * *Library usage:*

     `:- use_module(library(file_utils)).'

   * *Exports:*
        - _Predicates:_

          `file_terms/2', `copy_stdout/1', `file_to_string/2',
          `stream_to_string/2'.


   * *Other modules used:*
        - _System library modules:_

          `read', `streams'.




File: ciao.info,  Node: Documentation on exports (file_utils),  Prev: Usage and interface (file_utils),  Up: File I/O utilities

Documentation on exports (`file_utils')
=======================================

 - PREDICATE: file_terms/2:
     *Usage 1:* `file_terms(@File,?Terms)'
        - _Description:_ Transform a file `File' to/from a list of
          terms `Terms'.

        - _The following properties should hold upon exit:_

          `@File' is a source name.   (`streams_basic:sourcename/1')

          `?Terms' is a list.   (`basic_props:list/1')

     *Usage 2:* `file_terms(File,Terms)'
        - _Description:_ Unifies `Terms' with the list of all terms
          in `File'.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')

          `Terms' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `File' is a source name.   (`streams_basic:sourcename/1')

          `Terms' is a list.   (`basic_props:list/1')

     *Usage 3:* `file_terms(File,Terms)'
        - _Description:_ Writes the terms in list `Terms' (including
          the ending '.') onto file `File'.

        - _The following properties should hold at call time:_

          `File' is a source name.   (`streams_basic:sourcename/1')

          `Terms' is a list.   (`basic_props:list/1')

        - _The following properties should hold upon exit:_

          `File' is a source name.   (`streams_basic:sourcename/1')

          `Terms' is a list.   (`basic_props:list/1')



 - PREDICATE: copy_stdout/1:
     *Usage:* `copy_stdout(+File)'
        - _Description:_ Copies file `File' to standard output.

        - _The following properties should hold upon exit:_

          `+File' is a source name.   (`streams_basic:sourcename/1')



 - PREDICATE: file_to_string/2:
     *Usage:* `file_to_string(+FileName,-String)'
        - _Description:_ Reads all the characters from the file
          `FileName' and returns them in `String'.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is a source name.
          (`streams_basic:sourcename/1')

          `-String' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: stream_to_string/2:
     *Usage:* `stream_to_string(+Stream,-String)'
        - _Description:_ Reads all the characters from `Stream' and
          returns them in `String'.

        - _Call and exit should be _compatible_ with:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `-String' is a string (a list of character codes).
          (`basic_props:string/1')




File: ciao.info,  Node: File locks,  Next: Term manipulation utilities,  Prev: File I/O utilities,  Up: Top

File locks
**********

   *Author(s):* J. Gomez, D. Cabeza, M. Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#159 (2001/11/27, 11:58:24 CET)

   This module implements file locks: the ability to lock a fiel so
that other processes cannot access it until the file is unlocked. *It
is, however, not working.* The predicates do nothing. Proper
implementation is planned for a near future.

* Menu:

* Usage and interface (file_locks)::
* Documentation on exports (file_locks)::
* Known bugs and planned improvements (file_locks)::


File: ciao.info,  Node: Usage and interface (file_locks),  Next: Documentation on exports (file_locks),  Prev: File locks,  Up: File locks

Usage and interface (`file_locks')
==================================

   * *Library usage:*

     `:- use_module(library(file_locks)).'

   * *Exports:*
        - _Predicates:_

          `lock_file/3', `unlock_file/2'.




File: ciao.info,  Node: Documentation on exports (file_locks),  Next: Known bugs and planned improvements (file_locks),  Prev: Usage and interface (file_locks),  Up: File locks

Documentation on exports (`file_locks')
=======================================

 - PREDICATE: lock_file/3:
     *Usage:* `lock_file(File,LockType,Result)'
        - _Description:_ Tries to lock `File' with `LockType' and
          returns the result (either `true' or `false') in `Result'.

        - _The following properties should hold at call time:_

          `File' is an atom.   (`basic_props:atm/1')

          `LockType' is an atom.   (`basic_props:atm/1')

          `Result' is an atom.   (`basic_props:atm/1')



 - PREDICATE: unlock_file/2:
     *Usage:* `unlock_file(File,Result)'
        - _Description:_ Tries to unlock `File' the result (either
          `true' or `false') in `Result'.

        - _The following properties should hold at call time:_

          `File' is an atom.   (`basic_props:atm/1')

          `Result' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Known bugs and planned improvements (file_locks),  Prev: Documentation on exports (file_locks),  Up: File locks

Known bugs and planned improvements (`file_locks')
==================================================

   * No doing anything helpful.


File: ciao.info,  Node: Term manipulation utilities,  Next: Term checking utilities,  Prev: File locks,  Up: Top

Term manipulation utilities
***************************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#141 (2001/11/12, 17:47:36 CET)

* Menu:

* Usage and interface (terms)::
* Documentation on exports (terms)::


File: ciao.info,  Node: Usage and interface (terms),  Next: Documentation on exports (terms),  Prev: Term manipulation utilities,  Up: Term manipulation utilities

Usage and interface (`terms')
=============================

   * *Library usage:*

     `:- use_module(library(terms)).'

   * *Exports:*
        - _Predicates:_

          `copy_args/3', `arg/2', `atom_concat/2'.




File: ciao.info,  Node: Documentation on exports (terms),  Prev: Usage and interface (terms),  Up: Term manipulation utilities

Documentation on exports (`terms')
==================================

 - PREDICATE: copy_args/3:
     *Usage:* `copy_args(N,Term,Copy)'
        - _Description:_ `Term' and `Copy' have the same first `N'
          arguments.

        - _The following properties should hold at call time:_

          `N' is a non-negative integer.   (`basic_props:nnegint/1')



 - PREDICATE: arg/2:
     *Usage:* `arg(Term,Arg)'
        - _Description:_ `Arg' is an argument of `Term'. Gives each
          of the arguments on backtracking.



 - PREDICATE: atom_concat/2:
     `atom_concat(Atms,Atm)'

     `Atm' is the atom resulting from concatenating all atoms in the
     list `Atms' in the order in which they appear.





File: ciao.info,  Node: Term checking utilities,  Next: Term variables sets,  Prev: Term manipulation utilities,  Up: Top

Term checking utilities
***********************

   *Version:* 1.7#143 (2001/11/12, 17:51:0 CET)

* Menu:

* Usage and interface (terms_check)::
* Documentation on exports (terms_check)::
* Other information (terms_check)::


File: ciao.info,  Node: Usage and interface (terms_check),  Next: Documentation on exports (terms_check),  Prev: Term checking utilities,  Up: Term checking utilities

Usage and interface (`terms_check')
===================================

   * *Library usage:*

     `:- use_module(library(terms_check)).'

   * *Exports:*
        - _Predicates:_

          `ask/2', `instance/2', `variant/2'.




File: ciao.info,  Node: Documentation on exports (terms_check),  Next: Other information (terms_check),  Prev: Usage and interface (terms_check),  Up: Term checking utilities

Documentation on exports (`terms_check')
========================================

 - PREDICATE: ask/2:
     `ask(Term1,Term2)'

     `Term1' and `Term2' unify without producing bindings for the
     variables of `Term1'. I.e., `instance(`Term1',`Term2')' holds.




 - PREDICATE: instance/2:
     `instance(Term1,Term2)'

     `Term1' is an instance of `Term2'.




 - PREDICATE: variant/2:
     `variant(Term1,Term2)'

     `Term1' and `Term2' are identical up to renaming.





File: ciao.info,  Node: Other information (terms_check),  Prev: Documentation on exports (terms_check),  Up: Term checking utilities

Other information (`terms_check')
=================================

   Currently, `ask/2' and `instance/2' are exactly the same. However,
`ask/2' is more general, since it is also applicable to constraint
domains (although not yet implemented): for the particular case of
Herbrand terms, it is just `instance/2' (which is the only ask check
currently implemented).


File: ciao.info,  Node: Term variables sets,  Next: Printing status and error messages,  Prev: Term checking utilities,  Up: Top

Term variables sets
*******************

   *Version:* 1.7#142 (2001/11/12, 17:49:44 CET)

* Menu:

* Usage and interface (terms_vars)::
* Documentation on exports (terms_vars)::


File: ciao.info,  Node: Usage and interface (terms_vars),  Next: Documentation on exports (terms_vars),  Prev: Term variables sets,  Up: Term variables sets

Usage and interface (`terms_vars')
==================================

   * *Library usage:*

     `:- use_module(library(terms_vars)).'

   * *Exports:*
        - _Predicates:_

          `varset/2', `varsbag/3', `varset_in_args/2'.


   * *Other modules used:*
        - _System library modules:_

          `idlists', `sort'.




File: ciao.info,  Node: Documentation on exports (terms_vars),  Prev: Usage and interface (terms_vars),  Up: Term variables sets

Documentation on exports (`terms_vars')
=======================================

 - PREDICATE: varset/2:
     `varset(Term,Xs)'

     `Xs' is the sorted list of all the variables in `Term'.




 - PREDICATE: varsbag/3:
     `varsbag(Term,Vs,Xs)'

     `Vs' is the list of all the variables in `Term' ordered as they
     appear in `Term' left-to-right depth-first (including
     duplicates) plus `Xs'.




 - PREDICATE: varset_in_args/2:
     *Usage:* `varset_in_args(T,LL)'
        - _Description:_ Each list of `LL' contains the variables of
          an argument of `T', for each argument, and in left to right
          order.

        - _The following properties should hold at call time:_

          `T' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

        - _The following properties should hold upon exit:_

          `LL' is a list of `list(var)'s.   (`basic_props:list/2')




File: ciao.info,  Node: Printing status and error messages,  Next: A simple pretty-printer for Ciao programs,  Prev: Term variables sets,  Up: Top

Printing status and error messages
**********************************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#108 (1999/11/18, 13:48:3 MET)

   This is a very simple library for printing status and error
messages to the console.

* Menu:

* Usage and interface (messages)::
* Documentation on exports (messages)::
* Documentation on multifiles (messages)::
* Known bugs and planned improvements (messages)::


File: ciao.info,  Node: Usage and interface (messages),  Next: Documentation on exports (messages),  Prev: Printing status and error messages,  Up: Printing status and error messages

Usage and interface (`messages')
================================

   * *Library usage:*

     `:- use_module(library(messages)).'

   * *Exports:*
        - _Predicates:_

          `error_message/1', `error_message/2', `error_message/3',
          `warning_message/1', `warning_message/2',
          `warning_message/3', `note_message/1', `note_message/2',
          `note_message/3', `simple_message/1', `simple_message/2',
          `optional_message/2', `optional_message/3',
          `debug_message/1', `debug_message/2', `debug_goal/2',
          `debug_goal/3'.

        - _Multifiles:_

          `callme/2', `issue_debug_messages/1'.


   * *Other modules used:*
        - _System library modules:_

          `assertions/meta_props', `format', `lists', `filenames'.




File: ciao.info,  Node: Documentation on exports (messages),  Next: Documentation on multifiles (messages),  Prev: Usage and interface (messages),  Up: Printing status and error messages

Documentation on exports (`messages')
=====================================

 - PREDICATE: error_message/1:
     _Meta-predicate_ with arguments: `error_message(addmodule)'.

     *Usage:* `error_message(Text)'
        - _Description:_ The text provided in `Text' is printed as an
          ERROR message.

        - _The following properties should hold at call time:_

          `Text' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: error_message/2:
     _Meta-predicate_ with arguments: `error_message(?,addmodule)'.

     *Usage:* `error_message(Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as an
          ERROR message, using the arguments in `ArgList' to
          interpret any variable-related formatting commands embedded
          in `Text'.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: error_message/3:
     _Meta-predicate_ with arguments: `error_message(?,?,addmodule)'.

     *Usage:* `error_message(Lc,Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as an
          ERROR message, using the arguments in `ArgList' to
          interpret any variable-related formatting commands embedded
          in `Text', and reporting error location `Lc' (file and line
          numbers).

        - _The following properties should hold at call time:_

          `Lc' is of type `^loc(atm,int,int)'.
          (`meta_props:regtype/2')

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: warning_message/1:
     _Meta-predicate_ with arguments: `warning_message(addmodule)'.

     *Usage:* `warning_message(Text)'
        - _Description:_ The text provided in `Text' is printed as a
          WARNING message.

        - _The following properties should hold at call time:_

          `Text' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: warning_message/2:
     _Meta-predicate_ with arguments: `warning_message(?,addmodule)'.

     *Usage:* `warning_message(Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as a
          WARNING message, using the arguments in `ArgList' to
          interpret any variable-related formatting commands embedded
          in `Text'.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: warning_message/3:
     _Meta-predicate_ with arguments:
     `warning_message(?,?,addmodule)'.

     *Usage:* `warning_message(Lc,Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as a
          WARNING message, using the arguments in `ArgList' to
          interpret any variable-related formatting commands embedded
          in `Text', and reporting error location `Lc' (file and line
          numbers).

        - _The following properties should hold at call time:_

          `Lc' is of type `^loc(atm,int,int)'.
          (`meta_props:regtype/2')

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: note_message/1:
     _Meta-predicate_ with arguments: `note_message(addmodule)'.

     *Usage:* `note_message(Text)'
        - _Description:_ The text provided in `Text' is printed as a
          NOTE.

        - _The following properties should hold at call time:_

          `Text' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: note_message/2:
     _Meta-predicate_ with arguments: `note_message(?,addmodule)'.

     *Usage:* `note_message(Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as a
          NOTE, using the arguments in `ArgList' to interpret any
          variable-related formatting commands embedded in `Text'.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: note_message/3:
     _Meta-predicate_ with arguments: `note_message(?,?,addmodule)'.

     *Usage:* `note_message(Lc,Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as a
          NOTE, using the arguments in `ArgList' to interpret any
          variable-related formatting commands embedded in `Text',
          and reporting error location `Lc' (file and line numbers).

        - _The following properties should hold at call time:_

          `Lc' is of type `^loc(atm,int,int)'.
          (`meta_props:regtype/2')

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: simple_message/1:
     *Usage:* `simple_message(Text)'
        - _Description:_ The text provided in `Text' is printed.

        - _The following properties should hold at call time:_

          `Text' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: simple_message/2:
     *Usage:* `simple_message(Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as a
          message, using the arguments in `ArgList'.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: optional_message/2:
     *Usage:* `optional_message(Text,Opts)'
        - _Description:_ The text provided in `Text' is printed as a
          message, but only if the atom `-v' is a member of `Opts'.
          These predicates are meant to be used for optional
          messages, which are only to be printed when _verbose_
          output is requested explicitly.

        - _The following properties should hold at call time:_

          `Text' is a string (a list of character codes).
          (`basic_props:string/1')

          `Opts' is a list of `atm's.   (`basic_props:list/2')



 - PREDICATE: optional_message/3:
     *Usage:* `optional_message(Text,ArgList,Opts)'
        - _Description:_ The text provided in `Text' is printed as a
          message, using the arguments in `ArgList', but only if the
          atom `-v' is a member of `Opts'. These predicates are meant
          to be used for optional messages, which are only to be
          printed when _verbose_ output is requested explicitly.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')

          `Opts' is a list of `atm's.   (`basic_props:list/2')



 - PREDICATE: debug_message/1:
     _Meta-predicate_ with arguments: `debug_message(addmodule)'.

     *Usage:* `debug_message(Text)'
        - _Description:_ The text provided in `Text' is printed as a
          debugging message. These messages are turned `on' by
          defining a fact of `issue_debug_messages/1' with the module
          name as argument.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')



 - PREDICATE: debug_message/2:
     _Meta-predicate_ with arguments: `debug_message(?,addmodule)'.

     *Usage:* `debug_message(Text,ArgList)'
        - _Description:_ The text provided in `Text' is printed as a
          debugging message, using the arguments in `ArgList' to
          interpret any variable-related formatting commands embedded
          in `Text'. These messages are turned `on' by defining a
          fact of `issue_debug_messages/1' which the module name as
          argument.

        - _The following properties should hold at call time:_

          `Text' is an atom or string describing how the arguments
          should be formatted. If it is an atom it will be converted
          into a string with `name/2'.   (`format:format_control/1')

          `ArgList' is a list.   (`basic_props:list/1')



 - PREDICATE: debug_goal/2:
     _Meta-predicate_ with arguments: `debug_goal(goal,addmodule)'.

     *Usage:* `debug_goal(Goal,Text)'
        - _Description:_ `Goal' is called. The text provided in
          `Text' is then printed as a debugging message. The whole
          process (including running `Goal') is turned `on' by
          defining a fact of `issue_debug_messages/1' with the module
          name as argument.



 - PREDICATE: debug_goal/3:
     _Meta-predicate_ with arguments: `debug_goal(goal,?,addmodule)'.

     *Usage:* `debug_goal(Goal,Text,ArgList)'
        - _Description:_ `Goal' is called. The text provided in
          `Text' is then printed as a debugging message, using the
          arguments in `ArgList' to interpret any variable-related
          formatting commands embedded in `Text'. Note that the
          variables in `ArgList' can be computed by `Goal'. The whole
          process (including running `Goal') is turned `on' by
          defining a fact of `issue_debug_messages/1' with the module
          name as argument.




File: ciao.info,  Node: Documentation on multifiles (messages),  Next: Known bugs and planned improvements (messages),  Prev: Documentation on exports (messages),  Up: Printing status and error messages

Documentation on multifiles (`messages')
========================================

 - PREDICATE: callme/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




 - PREDICATE: issue_debug_messages/1:
     The predicate is _multifile_.

     The predicate is of type _data_.

     *Usage:* `issue_debug_messages(Module)'
        - _Description:_ Printing of debugging messages is enabled
          for module `Module'.

        - _The following properties should hold upon exit:_

          `Module' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: Known bugs and planned improvements (messages),  Prev: Documentation on multifiles (messages),  Up: Printing status and error messages

Known bugs and planned improvements (`messages')
================================================

   * Debug message switching should really be done with an expansion,
     for performance.


File: ciao.info,  Node: A simple pretty-printer for Ciao programs,  Next: Pretty-printing assertions,  Prev: Printing status and error messages,  Up: Top

A simple pretty-printer for Ciao programs
*****************************************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#112 (2001/6/25, 17:34:9 CEST)

   This library module writes out to standard output a clause or a
list of clauses.

* Menu:

* Usage and interface (pretty_print)::
* Documentation on exports (pretty_print)::
* Documentation on internals (pretty_print)::


File: ciao.info,  Node: Usage and interface (pretty_print),  Next: Documentation on exports (pretty_print),  Prev: A simple pretty-printer for Ciao programs,  Up: A simple pretty-printer for Ciao programs

Usage and interface (`pretty_print')
====================================

   * *Library usage:*

     `:- use_module(library(pretty_print)).'

   * *Exports:*
        - _Predicates:_

          `pretty_print/2', `pretty_print/3'.


   * *Other modules used:*
        - _System library modules:_

          `vndict', `write'.




File: ciao.info,  Node: Documentation on exports (pretty_print),  Next: Documentation on internals (pretty_print),  Prev: Usage and interface (pretty_print),  Up: A simple pretty-printer for Ciao programs

Documentation on exports (`pretty_print')
=========================================

 - PREDICATE: pretty_print/2:
     *Usage:* `pretty_print(Cls,Flags)'
        - _Description:_ Prints each clause in the list `Cls' after
          numbering its variables.

        - _The following properties should hold at call time:_

          `pretty_print:clauses(Cls)'  (`pretty_print:clauses/1')

          `Flags' is a list of `flag's.   (`basic_props:list/2')



 - PREDICATE: pretty_print/3:
     *Usage:* `pretty_print(Cls,Flags,Ds)'
        - _Description:_ Prints each clause in the list `Cls' after
          using the corresponding variable names dictionary in `Ds'
          to name its variables.

        - _The following properties should hold at call time:_

          `pretty_print:clauses(Cls)'  (`pretty_print:clauses/1')

          `Flags' is a list of `flag's.   (`basic_props:list/2')

          `Ds' is a dictionary of variable names.
          (`vndict:varnamedict/1')




File: ciao.info,  Node: Documentation on internals (pretty_print),  Prev: Documentation on exports (pretty_print),  Up: A simple pretty-printer for Ciao programs

Documentation on internals (`pretty_print')
===========================================

 - REGTYPE: clauses/1:
     A regular type, defined as follows:
               clauses([]).
               clauses([_1|_2]) :-
                       clause(_1),
                       clauses(_2).
               clauses(_1) :-
                       clause(_1).




 - REGTYPE: clause/1:
     A regular type, defined as follows:
               clause(_1) :-
                       clterm(_1).
               clause((_1,_2)) :-
                       clterm(_1),
                       term(_2).




 - REGTYPE: clterm/1:
     A regular type, defined as follows:
               clterm(clause(_1,_2)) :-
                       callable(_1),
                       body(_2).
               clterm(directive(_1)) :-
                       body(_1).
               clterm((_1:-_2)) :-
                       callable(_1),
                       body(_2).
               clterm(_1) :-
                       callable(_1).




 - REGTYPE: body/1:
     A well formed body, including cge expressions and &-concurrent
     expressions. The atomic goals may or may not have a key in the
     form `^(goal:any)', and may or may not be module qualified, but
     if they are it has to be in the form `^(^(moddesc:goal):any)'.

     *Usage:* `body(X)'
        - _Description:_ `X' is a printable body.



 - REGTYPE: flag/1:
     A keyword `ask/1' flags whether to output _asks_ or _whens_ and
     `nl/1' whether to separate clauses with a blank line or not.

     *Usage:* `flag(X)'
        - _Description:_ `X' is a flag for the pretty-printer.




File: ciao.info,  Node: Pretty-printing assertions,  Next: The Ciao library browser,  Prev: A simple pretty-printer for Ciao programs,  Up: Top

Pretty-printing assertions
**************************

   *Author(s):* Francisco Bueno Carrillo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#2 (1999/11/29, 18:2:53 MET)

   This module defines some predicates which are useful for writing
assertions in a readable form.

* Menu:

* Usage and interface (assrt_write)::
* Documentation on exports (assrt_write)::


File: ciao.info,  Node: Usage and interface (assrt_write),  Next: Documentation on exports (assrt_write),  Prev: Pretty-printing assertions,  Up: Pretty-printing assertions

Usage and interface (`assrt_write')
===================================

   * *Library usage:*

     `:- use_module(library(assrt_write)).'

   * *Exports:*
        - _Predicates:_

          `write_assertion/6', `write_assertion_as_comment/6'.


   * *Other modules used:*
        - _System library modules:_

          `format', `assertions/assrt_lib', `messages',
          `assertions/assertions_props'.




File: ciao.info,  Node: Documentation on exports (assrt_write),  Prev: Usage and interface (assrt_write),  Up: Pretty-printing assertions

Documentation on exports (`assrt_write')
========================================

 - PREDICATE: write_assertion/6:
     *Usage:* `write_assertion(Goal,Status,Type,Body,Dict,Flag)'
        - _Description:_ Writes the (normalized) assertion to current
          output.

        - _Call and exit should be _compatible_ with:_

          `Status' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `Type' is an admissible kind of assertion.
          (`assertions_props:assrt_type/1')

          `Body' is a normalized assertion body.
          (`assertions_props:nabody/1')

          `Dict' is a dictionary of variable names.
          (`assertions_props:dictionary/1')

          `Flag' is `status' or `nostatus'.
          (`assrt_write:status_flag/1')



 - PREDICATE: write_assertion_as_comment/6:
     *Usage:*
     `write_assertion_as_comment(Goal,Status,Type,Body,Dict,Flag)'
        - _Description:_ Writes the (normalized) assertion to current
          output as a Prolog comment.

        - _Call and exit should be _compatible_ with:_

          `Status' is an acceptable status for an assertion.
          (`assertions_props:assrt_status/1')

          `Type' is an admissible kind of assertion.
          (`assertions_props:assrt_type/1')

          `Body' is a normalized assertion body.
          (`assertions_props:nabody/1')

          `Dict' is a dictionary of variable names.
          (`assertions_props:dictionary/1')

          `Flag' is `status' or `nostatus'.
          (`assrt_write:status_flag/1')




File: ciao.info,  Node: The Ciao library browser,  Next: Code translation utilities,  Prev: Pretty-printing assertions,  Up: Top

The Ciao library browser
************************

   *Author(s):* Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#21 (2000/9/26, 13:37:17 CEST)

   `librowser' library provides a set of predicates wich enables the
user to interactively find Ciao/Prolog libraries and/or any predicate
exported by them.

   This is a simple example:

     ?- apropos('*find*').
     persdbrt_sql: dbfindall/4
     persdbrtsql: dbfindall/4
     conc_aggregates: findall/3
     linda: rd_findall/3
     vndict: find_name/4
     internals: $find_file/8
     aggregates: findall/4,findall/3
     
     yes
     ?-

   Librowser is specially usefull when using inside GNU Emacs, just
place the cursor over a librowser response and press C-cTAB in order
to get help on the related predicate. Refer to the *"Using Ciao
inside GNU Emacs"* chapter for further information.

* Menu:

* Usage and interface (librowser)::
* Documentation on exports (librowser)::
* Documentation on internals (librowser)::


File: ciao.info,  Node: Usage and interface (librowser),  Next: Documentation on exports (librowser),  Prev: The Ciao library browser,  Up: The Ciao library browser

Usage and interface (`librowser')
=================================

   * *Library usage:*

     It is not necesary to use this library at user programs. It was
     designed to be used at the Ciao _toplevel_ shell: `ciaosh'. In
     order to do so, just make use of `use_module/1' as follows:

     `use_module(library(librowser))'.

     Then, the library interface must be read. This is automatically
     done when calling any predicate at librowser, and the entire
     process will take a little moment.So, you should want to perform
     such a process after loading the Ciao toplevel:

          Ciao 0.9 #75: Fri Apr 30 19:04:24 MEST 1999
          ?- use_module(library(librowser)).
          
          yes
          ?- update.

     Whether you want this process to be automatically performed when
     loading `ciaosh', you may include those lines in your _.ciaorc_
     personal initialization file.

   * *Exports:*
        - _Predicates:_

          `update/0', `browse/2', `where/1', `describe/1',
          `system_lib/1', `apropos/1'.


   * *Other modules used:*
        - _System library modules:_

          `filenames', `read', `fastrw', `system', `streams',
          `patterns', `lists'.




File: ciao.info,  Node: Documentation on exports (librowser),  Next: Documentation on internals (librowser),  Prev: Usage and interface (librowser),  Up: The Ciao library browser

Documentation on exports (`librowser')
======================================

 - PREDICATE: update/0:
     This predicate will scan the Ciao system libraries for predicate
     definitions. This may be done once time before calling any other
     predicate at this library.

     update/0 will also be automatically called (once) when calling
     any other predicate at librowser.

     *Usage:*
        - _Description:_ Creates an internal database of modules at
          Ciao system libraries.



 - PREDICATE: browse/2:
     This predicate is fully reversible, and is provided to inspect
     concrete predicate specifications. For example:
          ?- browse(M,findall/A).
          
          A = 3,
          M = conc_aggregates ? ;
          
          A = 4,
          M = aggregates ? ;
          
          A = 3,
          M = aggregates ? ;
          
          no
          ?-

     *Usage:* `browse(Module,Spec)'
        - _Description:_ Asocciates the given `Spec' predicate
          specification with the `Module' which exports it.

        - _The following properties should hold at call time:_

          `Module' is a module name (an atom)
          (`librowser:module_name/1')

          `Spec' is a *Functor/Arity* predicate specification
          (`librowser:pred_spec/1')



 - PREDICATE: where/1:
     This predicate will print at the screen the module needed in
     order to import a given predicate specification. For example:
          ?- where(findall/A).
          findall/3 exported at module conc_aggregates
          findall/4 exported at module aggregates
          findall/3 exported at module aggregates
          
          yes
          ?-

     *Usage:* `where(Spec)'
        - _Description:_ Display what module to load in order to
          import the given `Spec'.

        - _The following properties should hold at call time:_

          `Spec' is a *Functor/Arity* predicate specification
          (`librowser:pred_spec/1')



 - PREDICATE: describe/1:
     This one is used to find out which predicates were exported by a
     given module. Very usefull when you know the library, but not
     the concrete predicate. For example:
          ?- describe(librowser).
          Predicates at library librowser :
          
          apropos/1
          system_lib/1
          describe/1
          where/1
          browse/2
          update/0
          
          yes
          ?-

     *Usage:* `describe(Module)'
        - _Description:_ Display a list of exported predicates at the
          given `Module'

        - _The following properties should hold at call time:_

          `Module' is a module name (an atom)
          (`librowser:module_name/1')



 - PREDICATE: system_lib/1:
     It retrieves on backtracking all Ciao system libraries stored in
     the internal database. Certainly, those which were scanned at
     `update/0' calling.

     *Usage:* `system_lib(Module)'
        - _Description:_ `Module' variable will be successively
          instantiated to the system libaries stored in the internal
          database.

        - _The following properties should hold at call time:_

          `Module' is a module name (an atom)
          (`librowser:module_name/1')



 - PREDICATE: apropos/1:
     This tool makes use of regular expresions in order to find
     predicate specifications. It is very usefull whether you can't
     remember the full name of a predicate. Regular expresions take
     the same format as described in library `patterns'. Example:
          ?- apropos('atom_*').
          
          terms: atom_concat/2
          concurrency: atom_lock_state/2
          atomic_basic: atom_concat/3,atom_length/2,atom_codes/2
          iso_byte_char: atom_chars/2
          
          yes
          ?-

     *Usage:* `apropos(RegSpec)'
        - _Description:_ This will search any predicate specification
          `Spec' which matches the given `RegSpec' incomplete
          predicate specification.

        - _The following properties should hold at call time:_

          `RegSpec' is a Pattern/Arity specification.
          (`librowser:apropos_spec/1')




File: ciao.info,  Node: Documentation on internals (librowser),  Prev: Documentation on exports (librowser),  Up: The Ciao library browser

Documentation on internals (`librowser')
========================================

 - REGTYPE: apropos_spec/1:
     Defined as:
          apropos_spec(_1).
          apropos_spec(Pattern/Arity) :-
                  pattern(Pattern),
                  int(Arity).

     *Usage:* `apropos_spec(S)'
        - _Description:_ `S' is a Pattern/Arity specification.




File: ciao.info,  Node: Code translation utilities,  Next: Low-level concurrency/multithreading primitives,  Prev: The Ciao library browser,  Up: Top

Code translation utilities
**************************

   *Author(s):* Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#40 (2001/1/5, 19:7:40 CET)

   This library offers a general way to perform clause body
expansions. Goal, fact and spec translation predicates are
authomatically called when needed, while this utility navigates
through the meta-argument specification of the body itself. All
predicates within this library must be called at _second-pass
expansions_, since it uses information stored at `c_itf' library.

* Menu:

* Usage and interface (expansion_tools)::
* Documentation on exports (expansion_tools)::
* Documentation on internals (expansion_tools)::
* Known bugs and planned improvements (expansion_tools)::


File: ciao.info,  Node: Usage and interface (expansion_tools),  Next: Documentation on exports (expansion_tools),  Prev: Code translation utilities,  Up: Code translation utilities

Usage and interface (`expansion_tools')
=======================================

   * *Library usage:*

     This library is provided as a tool for those modules which
     performs source-to-source code translation, usually known as
     _code expanders_. It may be loaded as other modules using a
     `use_module/1'. Nothing special needs to be done.

   * *Exports:*
        - _Predicates:_

          `imports_meta_pred/3', `body_expander/6', `arg_expander/6'.


   * *Other modules used:*
        - _System library modules:_

          `compiler/c_itf'.




File: ciao.info,  Node: Documentation on exports (expansion_tools),  Next: Documentation on internals (expansion_tools),  Prev: Usage and interface (expansion_tools),  Up: Code translation utilities

Documentation on exports (`expansion_tools')
============================================

 - PREDICATE: imports_meta_pred/3:
     Macro provided in order to know meta-predicate specifications
     accessible from a module.

     *Usage:* `imports_meta_pred(Module,MetaSpec,AccessibleAt)'
        - _Description:_ Tells whether `MetaSpec' meta-predicate
          specification is accessible from `Module'. `AccessibleAt'
          will be binded to '-' whether meta-predicate is a builtin
          one. If not, it will be unified with the module which
          defines the meta-predicate.

        - _The following properties should hold at call time:_

          `Module' is an atom.   (`basic_props:atm/1')

          `MetaSpec' is any term.   (`basic_props:term/1')

          `AccessibleAt' is a free variable.   (`term_typing:var/1')



 - PREDICATE: body_expander/6:
     This predicate is the main translation tool. It navigates
     through a clause body, when a single _goal_ appears, user-code
     is called in order to perform a translation. Whether user-code
     fails to translate the involved goal, it remains the same.
     Regardless that goal is translated or not, an argument expansion
     will be performed over all goals if applicable (see
     `arg_expander/6' predicate).

     Variable (unknown at compile time) goals will also be attempt to
     translate.

     _Meta-predicate_ with arguments:
     `body_expander(pred(3),pred(3),pred(3),?,?,?)'.

     *Usage:*
     `body_expander(GoalTrans,FactTrans,SpecTrans,Module,Body,ExpandedBody)'
        - _Description:_ Translates `Body' to `ExpandedBody' by the
          usage of user-defined translators `GoalTrans', `FactTrans'
          and `SpecTrans'. The module where the original body appears
          must be unified with `Module' argument.

        - _The following properties should hold at call time:_

          `GoalTrans' is a user-defined predicate which performs
          _goal_ meta-type translation
          (`expansion_tools:goal_expander/1')

          `FactTrans' is a user-defined predicate which performs
          _fact_ meta-type translation
          (`expansion_tools:fact_expander/1')

          `SpecTrans' is a user-defined predicate which performs
          _spec_ meta-type translation
          (`expansion_tools:spec_expander/1')

          `Module' is an atom.   (`basic_props:atm/1')

          `Body' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

          `ExpandedBody' is a free variable.   (`term_typing:var/1')



 - PREDICATE: arg_expander/6:
     This predicate is an auxiliary translation tool, which is used by
     `body_expander/6' predicate. It remains exported as a macro. The
     predicate navigates through the _meta-argument specification_ of
     a goal. Whether a _goal,fact or spec_ argument appears,
     user-code is called in order to perform a translation. Whether
     user-code fails to translate the involved argument, it remains
     the same. Builtins as ','/2 or ';'/2 are treated as
     meta-predicates defining _goal_ meta-arguments. When a _goal_
     meta-argument is located, `body_expander/6' will be called in
     order to navigate through it. Notice that a _goal_ meta-argument
     may be unified with another goal defining another meta-argument,
     so navigation is required. If arguments are not known to
     arg_expander/6, translation will not occur. This is posible
     whether goal or qualifing module are variables.

     _Meta-predicate_ with arguments:
     `arg_expander(pred(3),pred(3),pred(3),?,?,?)'.

     *Usage:*
     `arg_expander(GoalTrans,FactTrans,SpecTrans,Module,Goal,ExpandedGoal)'
        - _Description:_ Translates `Goal' to `ExpandedGoal' by
          applying user-defined translators (`GoalTrans', `FactTrans'
          and `SpecTrans') to each meta-argument present at such
          goal. The module where the original goal appears must be
          unified with `Module' argument.

        - _The following properties should hold at call time:_

          `GoalTrans' is a user-defined predicate which performs
          _goal_ meta-type translation
          (`expansion_tools:goal_expander/1')

          `FactTrans' is a user-defined predicate which performs
          _fact_ meta-type translation
          (`expansion_tools:fact_expander/1')

          `SpecTrans' is a user-defined predicate which performs
          _spec_ meta-type translation
          (`expansion_tools:spec_expander/1')

          `Module' is an atom.   (`basic_props:atm/1')

          `Goal' is currently a term which is not a free variable.
          (`term_typing:nonvar/1')

          `ExpandedBody' is a free variable.   (`term_typing:var/1')




File: ciao.info,  Node: Documentation on internals (expansion_tools),  Next: Known bugs and planned improvements (expansion_tools),  Prev: Documentation on exports (expansion_tools),  Up: Code translation utilities

Documentation on internals (`expansion_tools')
==============================================

 - PROPERTY: expander_pred/1:
     *Usage:* `expander_pred(Pred)'
        - _Description:_ `Pred' is a user-defined predicate used to
          perform code translations. First argument will be binded to
          the corresponding term to be translated. Second argument
          must be binded to the corresponding translation. Third
          argument will be binded to the current module were first
          argument appears. Additional arguments will be user-defined.




File: ciao.info,  Node: Known bugs and planned improvements (expansion_tools),  Prev: Documentation on internals (expansion_tools),  Up: Code translation utilities

Known bugs and planned improvements (`expansion_tools')
=======================================================

   * _pred(N)_ meta-arguments are not supported at this moment.


File: ciao.info,  Node: Low-level concurrency/multithreading primitives,  Next: All solutions concurrent predicates,  Prev: Code translation utilities,  Up: Top

Low-level concurrency/multithreading primitives
***********************************************

   *Author(s):* Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#138 (2001/11/8, 19:50:32 CET)

   This module provides basic mechanisms for using concurrency and
implementing multi-goal applications.  It provides a means for
arbitrary goals to be specified to be run in a separate stack set; in
that case, they are assigned a goal identifier with which further
accesses (e.g., asking for more solutions) to the goal can be made.
Additionally, in some architectures, these goals can be assigned an
O.S. thread, separate from the one which made the initial call, thus
providing concurrency and, in multiprocessors, parallelism
capabilities.

   As for now, the memory space of the threads (c.f., stack sets) is
separate in the sense that goals are copied to the new stack set, and
bindings of variables are not seen among stack sets which allows
forward and backward execution to proceed independently in each stack
set, at the cost of the initial goal copy. However, the program space
(including, specially, the concurrent predicates) are shared and seen
by all the goals and threads, and should be used as the primary means
of communication and synchronization. Higer level libraries can be
built using these basic blocks.

   Additionally, a small set of lock primitives are provided. Locks
are associated with atom names. Whereas the concurrent database
facilities are enough to implement locks, semaphores, messages, etc.,
the predicates implementing atom-based locks are faster than the ones
accessing the concurrent database (but they are less powerful).

* Menu:

* Usage and interface (concurrency)::
* Documentation on exports (concurrency)::
* Known bugs and planned improvements (concurrency)::


File: ciao.info,  Node: Usage and interface (concurrency),  Next: Documentation on exports (concurrency),  Prev: Low-level concurrency/multithreading primitives,  Up: Low-level concurrency/multithreading primitives

Usage and interface (`concurrency')
===================================

   * *Library usage:*

     `:- use_module(library(concurrency)).'

   * *Exports:*
        - _Predicates:_

          `eng_call/4', `eng_call/3', `eng_backtrack/2', `eng_cut/1',
          `eng_release/1', `eng_wait/1', `eng_kill/1',
          `eng_killothers/0', `eng_self/1', `goal_id/1',
          `eng_goal_id/1', `eng_status/0', `lock_atom/1',
          `unlock_atom/1', `atom_lock_state/2', `concurrent/1'.


   * *Other modules used:*
        - _System library modules:_

          `prolog_sys'.




File: ciao.info,  Node: Documentation on exports (concurrency),  Next: Known bugs and planned improvements (concurrency),  Prev: Usage and interface (concurrency),  Up: Low-level concurrency/multithreading primitives

Documentation on exports (`concurrency')
========================================

 - PREDICATE: eng_call/4:
     _Meta-predicate_ with arguments: `eng_call(goal,?,?,?)'.

     *Usage:*
     `eng_call(+Goal,+EngineCreation,+ThreadCreation,-GoalId)'
        - _Description:_ Calls `Goal' in a new engine (stack set),
          possibly using a new thread, and returns a `GoalId' to
          designate this new goal henceforth. `EngineCreation' can be
          either `wait' or `create'; the distinction is not yet
          meaningful. `ThreadCreation' can be one of `self', `wait',
          or `create'. In the first case the creating thread is used
          to execute `Goal', and thus it has to wait until its first
          result or failure. The call will fail if `Goal' fails, and
          succeed otherwise. However, the call will always suceed
          when a remote thread is started. The space and identifiers
          reclaimed for the thread must be explicitly deallocated by
          calling `eng_release/1'. `GoalId's are unique in each
          execution of a Ciao Prolog program.

        - _The following properties should hold at call time:_

          `+Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `+EngineCreation' is an atom.   (`basic_props:atm/1')

          `+ThreadCreation' is an atom.   (`basic_props:atm/1')

          `-GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_call/3:
     _Meta-predicate_ with arguments: `eng_call(goal,?,?)'.

     *Usage:* `eng_call(+Goal,+EngineCreation,+ThreadCreation)'
        - _Description:_ Similar to `eng_call/4', but the thread (if
          created) and stack areas are automatically released upon
          success or failure of the goal. No `GoalId' is provided for
          further interaction with the goal.

        - _The following properties should hold at call time:_

          `+Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `+EngineCreation' is an atom.   (`basic_props:atm/1')

          `+ThreadCreation' is an atom.   (`basic_props:atm/1')



 - PREDICATE: eng_backtrack/2:
     *Usage:* `eng_backtrack(+GoalId,+ThreadCreation)'
        - _Description:_ Performs backtracking on the goal designed
          by `GoalId'. A new thread can be used to perform
          backtracking, according to `ThreadCreation' (same as in
          `eng_call/4'). Fails if the goal is backtracked over by the
          local thread, and there are no more solutions. Always
          succeeds if executed by a remote thread. The engine is
          *not* automatically released up upon failure:
          `eng_release/1' must be called to that end.

        - _The following properties should hold at call time:_

          `+GoalId' is an integer.   (`basic_props:int/1')

          `+ThreadCreation' is an atom.   (`basic_props:atm/1')



 - PREDICATE: eng_cut/1:
     *Usage:* `eng_cut(+GoalId)'
        - _Description:_ Performs a _cut_ in the execution of the
          goal `GoalId'. The next call to `eng_backtrack/2' will
          therefore backtrack all the way and fail.

        - _The following properties should hold at call time:_

          `+GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_release/1:
     *Usage:* `eng_release(+GoalId)'
        - _Description:_ Cleans up and releases the engine executing
          the goal designed by `GoalId'. The engine must be idle,
          i.e., currently not exedcuting any goal.  `eng_wait/1' can
          be used to ensure this.

        - _The following properties should hold at call time:_

          `+GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_wait/1:
     *Usage:* `eng_wait(+GoalId)'
        - _Description:_ Waits for the engine executing the goal
          denoted by `GoalId' to finish the computation (i.e., it has
          finished searching for a solution, either with success or
          failure).

        - _The following properties should hold at call time:_

          `+GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_kill/1:
     *Usage:* `eng_kill(+GoalId)'
        - _Description:_ Kills the thread executing `GoalId' (if
          any), and frees the memory used up by the stack set.
          Usually one should wait ( `eng_wait/1') for a goal, and
          then release it, but killing the thread explicitly allows
          recovering from error states. A goal cannot kill itself.
          This feature should be used with caution, because there are
          situations where killing a thread might render the system
          in an unstable state. Threads should cooperate in their
          killing, but if the killed thread is blocked in a I/O
          operation, or inside an internal critical region, this
          cooperation is not possible and the system, although
          stopped, might very well end up in a incosistent state.

        - _The following properties should hold at call time:_

          `+GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_killothers/0:
     *Usage:*
        - _Description:_ Kills threads and releases stack sets of all
          active goals, but the one calling `eng_killothers'. Again,
          a safety measure. The same cautions as with `eng_kill/1'
          should be taken.



 - PREDICATE: eng_self/1:
     *Usage:* `eng_self(?GoalId)'
        - _Description:_ `GoalId' is unified with the identifier of
          the goal within which `eng_self/1' is executed.
          `eng_self/1' is deprecated, and eng_goal_id/1 should be
          used instead.

        - _The following properties should hold at call time:_

          `?GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: goal_id/1:
     *Usage:* `goal_id(?GoalId)'
        - _Description:_ `GoalId' is unified with the identifier of
          the goal within which `goal_id/1' is executed.  `goal_id/1'
          is deprecated, and eng_goal_id/1 should be used instead.

        - _The following properties should hold at call time:_

          `?GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_goal_id/1:
     *Usage:* `eng_goal_id(?GoalId)'
        - _Description:_ `GoalId' is unified with the identifier of
          the goal within which `eng_goal_id/1' is executed.

        - _The following properties should hold at call time:_

          `?GoalId' is an integer.   (`basic_props:int/1')



 - PREDICATE: eng_status/0:
     *Usage:*
        - _Description:_ Prints to standard output the current status
          of the stack sets.



 - PREDICATE: lock_atom/1:
     *Usage:* `lock_atom(+Atom)'
        - _Description:_ The semaphore associated to `Atom' is
          accessed; if its value is nonzero, it is atomically
          decremented and the execution of this thread proceeds.
          Otherwise, the goal waits until a nonzero value is reached.
          The semaphore is then atomically decremented and the
          execution of this thread proceeds.

        - _The following properties should hold at call time:_

          `+Atom' is an atom.   (`basic_props:atm/1')



 - PREDICATE: unlock_atom/1:
     *Usage:* `unlock_atom(+Atom)'
        - _Description:_ The semaphore associated to `Atom' is
          atomically incremented.

        - _The following properties should hold at call time:_

          `+Atom' is an atom.   (`basic_props:atm/1')



 - PREDICATE: atom_lock_state/2:
     *Usage 1:* `atom_lock_state(+Atom,+Value)'
        - _Description:_ Sets the semaphore associated to `Atom' to
          `Value'. This is usually done at the beginning of the
          execution, but can be executed at any time. If not called,
          semaphore associated to atoms are by default inited to 1.
          It should be used with caution: arbitrary use can transform
          programs using locks in a mess of internal relations. The
          change of a semaphore value in a place other than the
          initialization stage of a program is *not* among the
          allowed operations as defined by Dijkstra [Dij65,BA82].

        - _The following properties should hold at call time:_

          `+Atom' is an atom.   (`basic_props:atm/1')

          `+Value' is an integer.   (`basic_props:int/1')

     *Usage 2:* `atom_lock_state(+Atom,-Value)'
        - _Description:_ Consults the `Value' of the semaphore
          associated to `Atom'. Use sparingly and mainly as a medium
          to check state correctness. Not among the operations on
          semaphore by Djikstra.

        - _The following properties should hold at call time:_

          `+Atom' is an atom.   (`basic_props:atm/1')

          `-Value' is an integer.   (`basic_props:int/1')



 - PREDICATE: concurrent/1:
     `concurrent F/A'

     The predicate named `F' with arity `A' is made concurrent in the
     current module at runtime (useful for predicate names generated
     on-the-fly). This difficults a better compile-time analysis, but
     in turn offers more flexibility to applications. It is also
     faster for some applications: if several agents have to share
     data in a stuctured fashion (e.g., the generator knows and wants
     to restrict the data generated to a set of other threads), a
     possibility is to use the same concurrent fact and emply a field
     within the fact to distinguish the receiver/sender. This can
     cause many threads to access and wait on the same fact, which in
     turns can create contention problems. It is much better to
     create a new concurrent fact and to use that new name as a
     channel to communicate the different threads.  `concurrent/1'
     can either be given a predicate spec in the form `Name/Arity',
     with `Name' and `Arity' bound, or to give a value only to
     `Arity', and let the system choose a new, unused `Name' for the
     fact.





File: ciao.info,  Node: Known bugs and planned improvements (concurrency),  Prev: Documentation on exports (concurrency),  Up: Low-level concurrency/multithreading primitives

Known bugs and planned improvements (`concurrency')
===================================================

   * Available only for Windows 32 environments and for architectures
     implementing POSIX threads.

   * Some implementation of threads have a limit on the total number
     of threads that can be created by a process. Thread creation, in
     this case, just hangs. A better solution is planned for the
     future.

   * Creating many concurrent facts may fill up the atom table,
     causing Ciao Prolog to abort.


File: ciao.info,  Node: All solutions concurrent predicates,  Next: The socket interface,  Prev: Low-level concurrency/multithreading primitives,  Up: Top

All solutions concurrent predicates
***********************************

   *Author(s):* Concurrent-safe (and incomplete) version of the
aggregates predicates, based on the regular versions by Richard A.
O'Keefe and David H.D. Warren. Concurrency-safeness provided by
Manuel Carro..

   This module implements thread-safe aggregation predicates. Its use
and results should be the same as those in the aggregates library,
but several goals can use them concurrently without the interference
and wrong results (due to implementation reasons) aggregates might
lead to. This particular implementation is completely based on the
one used in the aggregates library.

* Menu:

* Usage and interface (conc_aggregates)::
* Documentation on exports (conc_aggregates)::
* Known bugs and planned improvements (conc_aggregates)::


File: ciao.info,  Node: Usage and interface (conc_aggregates),  Next: Documentation on exports (conc_aggregates),  Prev: All solutions concurrent predicates,  Up: All solutions concurrent predicates

Usage and interface (`conc_aggregates')
=======================================

   * *Library usage:*

     `:- use_module(library(conc_aggregates)).'

   * *Exports:*
        - _Predicates:_

          `findall/3'.


   * *Other modules used:*
        - _System library modules:_

          `prolog_sys'.




File: ciao.info,  Node: Documentation on exports (conc_aggregates),  Next: Known bugs and planned improvements (conc_aggregates),  Prev: Usage and interface (conc_aggregates),  Up: All solutions concurrent predicates

Documentation on exports (`conc_aggregates')
============================================

 - PREDICATE: findall/3:
     _Meta-predicate_ with arguments: `findall(?,goal,?)'.

     *Usage:* `findall(?Template,+Generator,?List)' < * ISO * >
        - _Description:_ A special case of bagof, where all free
          variables in the `Generator' are taken to be existentially
          quantified. Safe in concurrent applications.

        - _The following properties should hold upon exit:_

          `Template' is any term.   (`basic_props:term/1')

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Set' is a list.   (`basic_props:list/1')




File: ciao.info,  Node: Known bugs and planned improvements (conc_aggregates),  Prev: Documentation on exports (conc_aggregates),  Up: All solutions concurrent predicates

Known bugs and planned improvements (`conc_aggregates')
=======================================================

   * Thread-safe `setof/3' is not yet implemented.

   * Thread-safe `bagof/3' is not yet implemented.


File: ciao.info,  Node: The socket interface,  Next: *** PART VII - Ciao Prolog extensions,  Prev: All solutions concurrent predicates,  Up: Top

The socket interface
********************

   *Author(s):* Manuel Carro, Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#58 (2001/2/8, 11:46:41 CET)

   This module defines primitives to open sockets, send, and receive
data from them. This allows communicating with other processes, on
the same machine or across the Internet. The reader should also
consult standard bibliography on the topic for a proper use of these
primitives.

* Menu:

* Usage and interface (sockets)::
* Documentation on exports (sockets)::


File: ciao.info,  Node: Usage and interface (sockets),  Next: Documentation on exports (sockets),  Prev: The socket interface,  Up: The socket interface

Usage and interface (`sockets')
===============================

   * *Library usage:*

     `:- use_module(library(sockets)).'

   * *Exports:*
        - _Predicates:_

          `connect_to_socket/3', `socket_recv/2',
          `hostname_address/2', `socket_shutdown/2',
          `socket_recv_code/3', `socket_send/2', `select_socket/5',
          `socket_accept/2', `bind_socket/3',
          `connect_to_socket_type/4'.

        - _Regular Types:_

          `socket_type/1', `shutdown_type/1'.


   * *Other modules used:*
        - _System library modules:_

          `sockets/sockets_c'.




File: ciao.info,  Node: Documentation on exports (sockets),  Prev: Usage and interface (sockets),  Up: The socket interface

Documentation on exports (`sockets')
====================================

 - PREDICATE: connect_to_socket/3:
     *Usage:* `connect_to_socket(+Host,+Port,-Stream)'
        - _Description:_ Calls `connect_to_socket_type/4' with
          SOCK_STREAM connection type. This is the connection type
          you want in order to use the `write/2' and `read/2'
          predicates (and other stream IO related predicates).

        - _Call and exit should be _compatible_ with:_

          `+Host' is an atom.   (`basic_props:atm/1')

          `+Port' is an integer.   (`basic_props:int/1')

          `-Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: socket_recv/2:
     *Usage:* `socket_recv(+Stream,?String)'
        - _Description:_ As `socket_recv_code/3', but the return code
          is ignored.

        - _Call and exit should be _compatible_ with:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `?String' is a string (a list of character codes).
          (`basic_props:string/1')



 - REGTYPE: socket_type/1:
     Defines the atoms which can be used to specify the socket type
     recognized by `connect_to_socket_type/4'. Defined as follows:
          socket_type(stream).
          socket_type(dgram).
          socket_type(raw).
          socket_type(seqpacket).
          socket_type(rdm).

     *Usage:* `socket_type(T)'
        - _Description:_ `T' is a valid socket type.



 - REGTYPE: shutdown_type/1:
     *Usage:* `shutdown_type(T)'
        - _Description:_ `T' is a valid shutdown type.



 - PREDICATE: hostname_address/2:
     *Usage:* `hostname_address(+Hostname,?Address)'
        - _Description:_ `Address' is unified with the atom
          representing the address (in AF_INET format) corresponding
          to `Hostname'.

        - _Call and exit should be _compatible_ with:_

          `+Hostname' is an atom.   (`basic_props:atm/1')

          `?Address' is an atom.   (`basic_props:atm/1')



 - PREDICATE: socket_shutdown/2:
     *Usage:* `socket_shutdown(+Stream,+How)'
        - _Description:_ Shut down a duplex communication socket with
          which `Stream' is associated. All or part of the
          communication can be shutdown, depending on the value of
          `How'. The atoms `read', `write', or `read_write' should be
          used to denote the type of closing required.

        - _Call and exit should be _compatible_ with:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `+How' is a valid shutdown type.
          (`sockets:shutdown_type/1')



 - PREDICATE: socket_recv_code/3:
     *Usage:* `socket_recv_code(+Stream,?String,?Length)'
        - _Description:_ Receives a `String' from the socket
          associated to `Stream', and returns its `Length'. If
          `Length' is -1, no more data is available.

        - _Call and exit should be _compatible_ with:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `?String' is a string (a list of character codes).
          (`basic_props:string/1')

          `?Length' is an integer.   (`basic_props:int/1')



 - PREDICATE: socket_send/2:
     *Usage:* `socket_send(+Stream,+String)'
        - _Description:_ Sends `String' to the socket associated to
          `Stream'. The socket has to be in connected state. `String'
          is not supposed to be NULL terminated, since it is a Prolog
          string. If a NULL terminated string is needed at the other
          side, it has to be explicitly created in Prolog.

        - _Call and exit should be _compatible_ with:_

          `+Stream' is an open stream.   (`streams_basic:stream/1')

          `+String' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: select_socket/5:
     *Usage:*
     `select_socket(+Socket,-NewStream,+TO_ms,+Streams,-ReadStreams)'
        - _Description:_ Wait for data available in a list of
          `Streams' and in a `Socket'. `Streams' is a list of Prolog
          streams which will be tested for reading. `Socket' is a
          socket (i.e., an integer denoting the O.S. port number) or a
          free variable. `TO_ms' is a number denoting a timeout.
          Within this timeout the `Streams' and the `Socket' are
          checked for the availability of data to be read.
          `ReadStreams' is the list of streams belonging to `Streams'
          which have data pending to be read. If `Socket' was a free
          variable, it is ignored, and `NewStream' is not checked. If
          `Socket' was instantiated to a port number and there are
          connections pending, a connection is accepted and connected
          with the Prolog stream in `NewStream'.

        - _Call and exit should be _compatible_ with:_

          `+Socket' is an integer.   (`basic_props:int/1')

          `-NewStream' is an open stream.   (`streams_basic:stream/1')

          `+TO_ms' is an integer.   (`basic_props:int/1')

          `+Streams' is a list of `stream's.   (`basic_props:list/2')

          `-ReadStreams' is a list of `stream's.
          (`basic_props:list/2')



 - PREDICATE: socket_accept/2:
     *Usage:* `socket_accept(+Sock,-Stream)'
        - _Description:_ Creates a new `Stream' connected to `Sock'.

        - _Call and exit should be _compatible_ with:_

          `+Sock' is an integer.   (`basic_props:int/1')

          `-Stream' is an open stream.   (`streams_basic:stream/1')



 - PREDICATE: bind_socket/3:
     *Usage:* `bind_socket(?Port,+Length,-Socket)'
        - _Description:_ Returs an AF_INET `Socket' bound to `Port'
          (which may be assigned by the OS or defined by the caller),
          and listens to it (hence no listen call in this set of
          primitives). `Length' specifies the maximum number of
          pending connections.

        - _Call and exit should be _compatible_ with:_

          `?Port' is an integer.   (`basic_props:int/1')

          `+Length' is an integer.   (`basic_props:int/1')

          `-Socket' is an integer.   (`basic_props:int/1')



 - PREDICATE: connect_to_socket_type/4:
     *Usage:* `connect_to_socket_type(+Host,+Port,+Type,-Stream)'
        - _Description:_ Returns a `Stream' which connects to `Host'.
          The `Type' of connection can be defined. A `Stream' is
          returned, which can be used to `write/2' to, to `read/2', to
          `socket_send/2' to, or to `socket_recv/2' from the socket.

        - _Call and exit should be _compatible_ with:_

          `+Host' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `+Port' is an integer.   (`basic_props:int/1')

          `+Type' is a valid socket type.   (`sockets:socket_type/1')

          `-Stream' is an open stream.   (`streams_basic:stream/1')




File: ciao.info,  Node: *** PART VII - Ciao Prolog extensions,  Next: Pure Prolog package,  Prev: The socket interface,  Up: Top

PART VII - Ciao Prolog extensions
*********************************

   The libraries documented in this part extend the Ciao language in
several different ways. The extensions include:
   * pure Prolog programming (well, this can be viewed more as a
     restriction than an extension);

   * feature terms or _records_ (i.e., structures with names for each
     field);

   * parallel programming (e.g., &-Prolog style);

   * functional syntax;

   * higher-order library;

   * global variables;

   * `setarg' and `undo';

   * delaying predicate execution;

   * active modules;

   * breadth-first execution;

   * iterative deepening-based execution;

   * constraint logic programming;

   * object oriented programming.


File: ciao.info,  Node: Pure Prolog package,  Next: Higher-order,  Prev: *** PART VII - Ciao Prolog extensions,  Up: Top

Pure Prolog package
*******************

   This library package allows the use of _pure Prolog_ in a Ciao
module/program. It is based on the fact that if an _engine module_ is
imported explicitly then all of them have to be imported explicitly.
The engine modules are:
   * `engine(arithmetic)'

     *Note Arithmetic::.

   * `engine(atomic_basic)'

     *Note Basic predicates handling names of constants::.

   * `engine(attributes)'

     *Note Attributed variables::.

   * `engine(basic_props)'

     *Note Basic data types and properties::.

   * `engine(basiccontrol)'

     *Note Control constructs/predicates::.

   * `engine(data_facts)'

     *Note Fast/concurrent update of facts::.

   * `engine(exceptions)'

     *Note Exception handling::.

   * `engine(io_aux)'

     *Note Message printing primitives::.

   * `engine(io_basic)'

     *Note Basic input/output::.

   * `engine(prolog_flags)'

     *Note Changing system behaviour and various flags::.

   * `engine(streams_basic)'

     *Note Basic file/stream handling::.

   * `engine(system_info)'

     *Note Gathering some basic internal info::.

   * `engine(term_basic)'

     *Note Basic term manipulation::.

   * `engine(term_compare)'

     *Note Comparing terms::.

   * `engine(term_typing)'

     *Note Extra-logical properties for typing::.

   Note that if any of these modules is explicitely imported in a
program then the language defaults to Pure Prolog, plus the
functionality added by the modules explicitely imported.

   It is recommended that if you explicitely import an engine module
you also use this package, which will guarantee that the predicate
`true/0' is defined (note that this is the only Ciao builtin which
cannot be redefined).

* Menu:

* Usage and interface (pure)::
* Known bugs and planned improvements (pure)::


File: ciao.info,  Node: Usage and interface (pure),  Next: Known bugs and planned improvements (pure),  Prev: Pure Prolog package,  Up: Pure Prolog package

Usage and interface (`pure')
============================

   * *Library usage:*

     `:- use_package(pure).'

     or

     `:- module(...,...,[pure]).'


File: ciao.info,  Node: Known bugs and planned improvements (pure),  Prev: Usage and interface (pure),  Up: Pure Prolog package

Known bugs and planned improvements (`pure')
============================================

   * Currently, the following builtin predicates/program constructs
     cannot be redefined, in addition to `true/0': `(->)/2' `(,)/2'
     `(+)/1' `if/3'


File: ciao.info,  Node: Higher-order,  Next: Higher-order predicates,  Prev: Pure Prolog package,  Up: Top

Higher-order
************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#146 (2001/11/15, 19:32:38 CET)

* Menu:

* Usage and interface (hiord_rt)::
* Documentation on exports (hiord_rt)::


File: ciao.info,  Node: Usage and interface (hiord_rt),  Next: Documentation on exports (hiord_rt),  Prev: Higher-order,  Up: Higher-order

Usage and interface (`hiord_rt')
================================

   * *Library usage:*

     `:- use_module(library(hiord_rt)).'

   * *Exports:*
        - _Predicates:_

          `call/2'.




File: ciao.info,  Node: Documentation on exports (hiord_rt),  Prev: Usage and interface (hiord_rt),  Up: Higher-order

Documentation on exports (`hiord_rt')
=====================================

 - PREDICATE: call/2:
     `call(Pred,Arg1)'

     There exists a set of builtin predicates of the form `call/N'
     with `N > 1' which execute predicate `Pred' given arguments
     `Arg1' ... `ArgX'. If `Pred' has already arguments `Arg1' is
     added to the start, the rest to the end. This predicate, when
     `Pred' is a variable, can be written using the special Ciao
     syntax `Pred(Arg1,...,ArgX)'.





File: ciao.info,  Node: Higher-order predicates,  Next: Terms with named arguments -records/feature terms,  Prev: Higher-order,  Up: Top

Higher-order predicates
***********************

   *Author(s):* Daniel Cabeza, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#208 (2002/4/23, 19:9:14 CEST)

   This library implements a few basic higher-order predicates. These
add functionality to the basic higher-order functionality of Ciao.
Examples of the latter are:

   Using pred(1):

       list(L, between(1,6))
       list(L, functor(_,2))
       list(L, >(0))

   Using pred(2):

* Menu:

* Usage and interface (hiordlib)::
* Documentation on exports (hiordlib)::


File: ciao.info,  Node: Usage and interface (hiordlib),  Next: Documentation on exports (hiordlib),  Prev: Higher-order predicates,  Up: Higher-order predicates

Usage and interface (`hiordlib')
================================

   * *Library usage:*

     `:- use_module(library(hiordlib)).'

   * *Exports:*
        - _Predicates:_

          `map/3', `foldl/4', `minimum/3'.




File: ciao.info,  Node: Documentation on exports (hiordlib),  Prev: Usage and interface (hiordlib),  Up: Higher-order predicates

Documentation on exports (`hiordlib')
=====================================

 - PREDICATE: map/3:
     _Meta-predicate_ with arguments: `map(?,pred(2),?)'.

     *Usage:* `map(LList,Op,RList)'
        - _Description:_ Examples of use:
                 map([1,3,2], arg(f(a,b,c,d)), [a,c,b]) or
                 map([1,3,2], nth([a,b,c,d]), [a,c,b])
                 map(["D","C"], append("."), ["D.","C."])




 - PREDICATE: foldl/4:
     _Meta-predicate_ with arguments: `foldl(?,?,pred(3),?)'.

     *Usage:* `foldl(List,Seed,Op,Result)'
        - _Description:_ Example of use:
               ?- foldl(["daniel","cabeza","gras"], "",
                        (''(X,Y,Z) :- append(X, " "||Y, Z)), R).
               
               R = "daniel cabeza gras " ?




 - PREDICATE: minimum/3:
     _Meta-predicate_ with arguments: `minimum(?,pred(2),?)'.

     *Usage:* `minimum(?List,+SmallerThan,?Minimum)'
        - _Description:_ `Minimum' is the smaller in the nonempty
          list `List' according to the relation `SmallerThan':
          `SmallerThan(X, Y)' succeeds iff X is smaller than Y.

        - _The following properties should hold at call time:_

          `?List' is a list.   (`basic_props:list/1')

          `+SmallerThan' is a term which represents a goal, i.e., an
          atom or a structure.   (`basic_props:callable/1')

          `?Minimum' is any term.   (`basic_props:term/1')




File: ciao.info,  Node: Terms with named arguments -records/feature terms,  Next: functions (library),  Prev: Higher-order predicates,  Up: Top

Terms with named arguments -records/feature terms
*************************************************

   *Author(s):* Daniel Cabeza and Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#118 (2001/8/28, 15:7:22 CEST)

   This library package provides syntax which allows accessing term
arguments by name (these terms are sometimes also referred to as
_records_, and are also similar to _feature terms_ [AKPS92]).

* Menu:

* Usage and interface (argnames)::
* Documentation on new declarations (argnames)::
* Other information (argnames)::
* Known bugs and planned improvements (argnames)::


File: ciao.info,  Node: Usage and interface (argnames),  Next: Documentation on new declarations (argnames),  Prev: Terms with named arguments -records/feature terms,  Up: Terms with named arguments -records/feature terms

Usage and interface (`argnames')
================================

   * *Library usage:*

     `:- use_package(argnames).'

     or

     `:- module(...,...,[argnames]).'

   * *New operators defined:*

     `$/2' [150,xfx], `=>/2' [950,xfx], `argnames/1' [1150,fx].

   * *New declarations defined:*

     `argnames/1'.



File: ciao.info,  Node: Documentation on new declarations (argnames),  Next: Other information (argnames),  Prev: Usage and interface (argnames),  Up: Terms with named arguments -records/feature terms

Documentation on new declarations (`argnames')
==============================================

 - DECLARATION: argnames/1:
     *Usage:* :- `argnames(ArgNamedPredSpec)'.
        - _Description:_ An `argnames/1' declaration assigns names to
          the argument positions of terms (or literal/goals) which
          use a certain functor/arity. This allows referring to these
          arguments by their name rather than by their argument
          position. Sometimes, argument names may be clearer and
          easier to remember than argument positions, specially for
          predicates with many arguments. Also, in some cases this
          may allow adding arguments to certain predicates without
          having to change the code that uses them. These terms with
          named arguments are sometimes also referred to as records,
          and are also similar to feature terms [AKPS92]. For
          example, in order to write a program for the _zebra_ puzzle
          we might declare:

               :- use_package([argnames]).
               :- argnames house(color, nation, pet, drink, car).

          which first includes the package and then assigns a name to
          each of the arguments of any term (or literal/goal) with
          `house/5' as the main functor.

          Once an `argnames/1' is given, is possible to use the names
          to refer to the arguments of any term (or literal/goal)
          which has the same main functor as that of the term which
          appears in the `argnames/1' declaration. This is done by
          first writing the functor name, then the infix operator
          `$', and then, between curly brackets, zero, one, or more
          pairs _argument-name_`=>'_argument-value_, separated by
          commas (i.e., the infix operator `=>' is used between the
          name and the value). Again, argument names must be atomic.
          Argument values can be any term. Arguments which are not
          specified are assumed to have a value of "`_'" (i.e., they
          are left unconstrained).

          Thus, after the declaration for `house/5' in the example
          above, any ocurrence in that code of, for example,
          `house${nation=>Owns_zebra,pet=>zebra}' is exactly
          equivalent to `house(_,Owns_zebra,zebra,_,_)'. Also,
          `house${}' is equivalent to `house(_,_,_,_,_)'. The actual
          zebra puzzle specification might include a clause such as:

               zebra(Owns_zebra, Drinks_water, Street) :-
                  Street = [house${},house${},house${},house${},house${}],
                  member(house${nation=>Owns_zebra,pet=>zebra}, Street),
                  member(house${nation=>Drinks_water,drink=>water}, Street),
                  member(house${drink=>coffee,color=>green}, Street),
                  left_right(house${color=>ivory}, house${color=>green}, Street),
                  member(house${car=>porsche,pet=>snails}, Street),
                       ...

          Any number of `argnames/1' declarations can appear in a
          file, one for each functor whose arguments are to be
          accessed by name. As with other packages, argument name
          declarations are _local to the file_ in which they appear.
          The `argnames/1' declarations affect only program text
          which appears after the declaration. It is easy to make a
          set of declarations affect several files for example by
          putting such declarations in a sepatate file which is
          included by all such files.

          An `argnames/1' declaration does not change in any way the
          internal representation of the associated terms and does
          not affect run-time efficiency. It is simply syntactic
          sugar.





File: ciao.info,  Node: Other information (argnames),  Next: Known bugs and planned improvements (argnames),  Prev: Documentation on new declarations (argnames),  Up: Terms with named arguments -records/feature terms

Other information (`argnames')
==============================

   Two simple examples of the use of the argnames library package
follow.

* Menu:

* Using argument names in a toy database::
* Complete code for the zebra example::


File: ciao.info,  Node: Using argument names in a toy database,  Next: Complete code for the zebra example,  Prev: Other information (argnames),  Up: Other information (argnames)

Using argument names in a toy database
--------------------------------------

     :- module(simple_db,_,[argnames,assertions,regtypes]).
     :- use_module(library(aggregates)).
     
     :- comment(title,"A simple database application using argument names").
     
     :- pred product/4 :: int * string * string * int.
     
     :- argnames
     product( id,    description,    brand,          quantity        ).
     %       ----------------------------------------------------------
     product(  1,    "Keyboard",     "Logitech",     6               ).
     product(  2,    "Mouse",        "Logitech",     5               ).
     product(  3,    "Monitor",      "Philips",      3               ).
     product(  4,    "Laptop",       "Dell",         4               ).
     
     % Compute the stock of products from a given brand.
     % Note call to findall is equivalent to: findall(Q,product(_,_,Brand,Q),L).
     brand_stock(Brand,Stock) :-
             findall(Q,product${brand=>Brand,quantity=>Q},L),
             sumlist(L,Stock).
     
     sumlist([],0).
     sumlist([X|T],S) :-
             sumlist(T,S1),
             S is X + S1.


File: ciao.info,  Node: Complete code for the zebra example,  Prev: Using argument names in a toy database,  Up: Other information (argnames)

Complete code for the zebra example
-----------------------------------

     :- module(_,zebra/3,[argnames]).
     
     /*     There are five consecutive houses, each of a different
     color and inhabited by men of different nationalities. They each
     own a different pet, have a different favorite drink, and drive a
     different car.
     
     1.   The Englishman lives in the red house.
     2.   The Spaniard owns the dog.
     3.   Coffee is drunk in the green house.
     4.   The Ukrainian drinks tea.
     5.   The green house is immediately to the right of the ivory
          house.
     6.   The Porsche driver owns snails.
     7.   The Masserati is driven by the man who lives in the yellow
          house.
     8.   Milk is drunk in the middle house.
     9.   The Norwegian lives in the first house on the left.
     10.  The man who drives a Saab lives in the house next to the man
          with the fox.
     11.  The Masserati is driven by the man in the house next to the
          house where the horse is kept.
     12.  The Honda driver drinks orange juice.
     13.  The Japanese drives a Jaguar.
     14.  The Norwegian lives next to the blue house.
     
     The problem is: Who owns the Zebra?  Who drinks water?
     */
     
     :- argnames house(color, nation, pet, drink, car).
     
     zebra(Owns_zebra, Drinks_water, Street) :-
             Street = [house${},house${},house${},house${},house${}],
             member(house${nation => Owns_zebra, pet => zebra}, Street),
             member(house${nation => Drinks_water, drink => water}, Street),
             member(house${nation => englishman, color => red}, Street),
             member(house${nation => spaniard, pet => dog}, Street),
             member(house${drink => coffee, color => green}, Street),
             member(house${nation => ukrainian, drink => tea}, Street),
             left_right(house${color => ivory}, house${color => green}, Street),
             member(house${car => porsche, pet => snails}, Street),
             member(house${car => masserati, color => yellow}, Street),
             Street = [_, _, house${drink => milk}, _, _],
             Street = [house${nation => norwegian}|_],
             next_to(house${car => saab}, house${pet => fox}, Street),
             next_to(house${car => masserati}, house${pet => horse}, Street),
             member(house${car => honda, drink => orange_juice}, Street),
             member(house${nation => japanese, car => jaguar}, Street),
             next_to(house${nation => norwegian}, house${color => blue}, Street).
     
     
     member(X,[X|_]).
     member(X,[_|Y]) :- member(X,Y).
     
     left_right(L,R,[L,R|_]).
     left_right(L,R,[_|T]) :- left_right(L,R,T).
     
     next_to(X,Y,L) :- left_right(X,Y,L).
     next_to(X,Y,L) :- left_right(Y,X,L).


File: ciao.info,  Node: Known bugs and planned improvements (argnames),  Prev: Other information (argnames),  Up: Terms with named arguments -records/feature terms

Known bugs and planned improvements (`argnames')
================================================

   * It would be nice to add a mechanism to portray terms with named
     arguments in a special (user definable) way.


File: ciao.info,  Node: functions (library),  Next: global (library),  Prev: Terms with named arguments -records/feature terms,  Up: Top

functions (library)
*******************

* Menu:

* Usage and interface (functions)::


File: ciao.info,  Node: Usage and interface (functions),  Prev: functions (library),  Up: functions (library)

Usage and interface (`functions')
=================================

   * *Library usage:*

     `:- use_package(functions).'

     or

     `:- module(...,...,[functions]).'

   * *New operators defined:*

     `function/1' [1150,fx], `:=/2' [800,xfx], `~/1' [50,fx], `^^/1'
     [910,fx].

   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write'.




File: ciao.info,  Node: global (library),  Next: Independent and-parallel execution,  Prev: functions (library),  Up: Top

global (library)
****************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (global)::
* Documentation on exports (global)::


File: ciao.info,  Node: Usage and interface (global),  Next: Documentation on exports (global),  Prev: global (library),  Up: global (library)

Usage and interface (`global')
==============================

   * *Library usage:*

     `:- use_module(library(global)).'

   * *Exports:*
        - _Predicates:_

          `set_global/2', `get_global/2', `push_global/2',
          `pop_global/2', `del_global/1'.




File: ciao.info,  Node: Documentation on exports (global),  Prev: Usage and interface (global),  Up: global (library)

Documentation on exports (`global')
===================================

 - PREDICATE: set_global/2:
     No further documentation available for this predicate.




 - PREDICATE: get_global/2:
     No further documentation available for this predicate.




 - PREDICATE: push_global/2:
     No further documentation available for this predicate.




 - PREDICATE: pop_global/2:
     No further documentation available for this predicate.




 - PREDICATE: del_global/1:
     No further documentation available for this predicate.





File: ciao.info,  Node: Independent and-parallel execution,  Next: Andorra execution,  Prev: global (library),  Up: Top

Independent and-parallel execution
**********************************

   *Author(s):* Manuel Carro, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#160 (2001/11/27, 12:35:53 CET)

   *Note:* This is just a partial first shot. The real library still
needs to be written. Not difficult, just no time...

   This library will eventually allow and-parallel execution of goals
in (Herbrand-)independent fashion. It resembles the execution rules
of &-Prolog [HG90]. Basically, goals are run in and-parallel
_provided that their arguments do not share bindings_, i.e., are not
bound to terms which contain a common variable.

* Menu:

* Usage and interface (andprolog)::
* Documentation on internals (andprolog)::
* Known bugs and planned improvements (andprolog)::


File: ciao.info,  Node: Usage and interface (andprolog),  Next: Documentation on internals (andprolog),  Prev: Independent and-parallel execution,  Up: Independent and-parallel execution

Usage and interface (`andprolog')
=================================

   * *Library usage:*

     `:- use_package(andprolog).'

     or

     `:- module(...,...,[andprolog]).'

   * *New operators defined:*

     `' [950,xfy].


File: ciao.info,  Node: Documentation on internals (andprolog),  Next: Known bugs and planned improvements (andprolog),  Prev: Usage and interface (andprolog),  Up: Independent and-parallel execution

Documentation on internals (`andprolog')
========================================

 - PREDICATE:
     `'

     `GoalA' and `GoalB' are run in independent and-parallel fashion.
     This is just a first sketch, and valid only for deterministic
     independent goals. The use is as

          q:- a & b.

     which would start `a' and `b' in separate threads (possibly in
     parallalel, if the machine architecture and operating system
     allows that), and continue when *both* have finished. This type
     of execution is safe only when `a' and `b' are independent in
     the sense of variable sharing. This condition can be tested with
     the `indep/2' predicate.




 - PREDICATE: active_agents/1:
     `active_agents(NumberOfAgents)'

     Tests/sets the `NumberOfAgents' which are active looking for
     goals to execute. As for now, those agents are
     resource-consuming, even when they are just looking for work,
     and not executing any user goals.




 - PREDICATE: indep/2:
     `indep(X,Y)'

     `X' and `Y' are _independent_, i.e., they are bound to terms
     which have no variables in common. For example, `indep(X,Y)'
     holds for `X=f(Z),Y=g(K)' and also for `X=f(a),Y=X' (since both
     `X' and `Y' are bound to ground terms). It does not hold for
     `X=f(Z),Y=g(Z)' and for `X=Y'.




 - PREDICATE: indep/1:
     `indep(X)'

     `X' is a list of lists of length two, i.e., a list of the form
     `[[T1, T2], [T3, T4], ...]'. The variables in each pair of the
     list ``X'' are tested for independence using `indep/2'. This
     list-of-pairs format is the output of several independdnce
     analyzers for pair sharing.





File: ciao.info,  Node: Known bugs and planned improvements (andprolog),  Prev: Documentation on internals (andprolog),  Up: Independent and-parallel execution

Known bugs and planned improvements (`andprolog')
=================================================

   * *Beware:* the current code is just a partial first shot. It is
     provided for the sole purpose of experimentation and development.

   * The fact that only the first solution is returned for the
     conjunction is due to performance issues (and lack of time), and
     we expect to remove it in a near future.

   * CGEs (i.e., `=>') are not supported.

   * The `indep/1', `indep/2', and `ground/1' tests are not very
     efficient; they will be replaced by native versions (taken from
     the &-Prolog code) in the future.


File: ciao.info,  Node: Andorra execution,  Next: Call on determinate,  Prev: Independent and-parallel execution,  Up: Top

Andorra execution
*****************

   *Author(s):* Claudio Vaucheret, Francisco Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#144 (2001/11/12, 17:57:47 CET)

   This package allows the execution under the Basic Andorra Model
[War88]. The model classifies goals as a _determinate goal_, if at
most one clause matches the goal, or nondeterminate goal, otherwise.
In this model a goal is delayed until either it becomes determinate
or it becomes the leftmost goal and no determinate goal is available.
The implementation of this selection rule is based on the use of
attributed variables [Hol92,Hol90].

   In order to test determinacy we verify only the heads of clauses
and builtins in the bodies of clauses before the first cut, if any.
By default, determinacy of a goal is detected dynamically: when
called, if at most one clause matches, it is executed; otherwise, it
is delayed. For goals delayed the test is repeated each time a
variable appearing in the goal is instantiated. In addition,
efficiency can be improved by using declarations that specify the
determinacy conditions. These will be considered for testing instead
of the generic test on all clauses that can match.

   As with any other Ciao package, the andorra computation rule
affects only the module that uses the package. If execution passes
across two modules that use the computation rule, determinate goals
are run in advance _within_ one module and also within the other
module. But determinate goals of one module do not run ahead of goals
of the other module.

   It is however possible to preserve the computation rule for calls
to predicates defined in other modules. These modules should
obviously also use this package. In addition _all_ predicates from
such modules should imported, i.e., the directive `:-
use_module(module)', should be used in this case instead of `:-
use_module(module,[...])'. Otherwise calls to predicates outside the
module will only be called when they became the leftmost goal.

* Menu:

* Usage and interface (andorra)::
* Documentation on new declarations (andorra)::
* Documentation on exports (andorra)::
* Other information (andorra)::


File: ciao.info,  Node: Usage and interface (andorra),  Next: Documentation on new declarations (andorra),  Prev: Andorra execution,  Up: Andorra execution

Usage and interface (`andorra')
===============================

   * *Library usage:*

     `:- use_package(andorra).'

     or

     `:- module(...,...,[andorra]).'

   * *Exports:*
        - _Regular Types:_

          `detcond/1', `path/1'.


   * *New operators defined:*

     `?\=/2' [700,xfx], `?=/2' [700,xfx].

   * *New declarations defined:*

     `determinate/2'.



File: ciao.info,  Node: Documentation on new declarations (andorra),  Next: Documentation on exports (andorra),  Prev: Usage and interface (andorra),  Up: Andorra execution

Documentation on new declarations (`andorra')
=============================================

 - DECLARATION: determinate/2:
     :- `determinate(Pred,Cond)'.

     Declares determinacy conditions for a predicate. Conditions
     `Cond' are on variables of arguments of `Pred'. For example, in:
          :- determinate(member(A,B,C), ( A ?= term(B,[1])  ; C?=[_|_]) ).
          
          member(A,[A|B],B).
          member(A,[B|C],[B|D]) :-
                  A==B,
                  member(A,C,D).
     the declaration states that a call `member(A,B,C)' is
     determinate when either `A' doesn't unify with the first
     argument of `B' or `C' doesn't unify with `[_|_]'.

     *Usage:* :- `determinate(Pred,Cond)'.
        - _Description:_ States that the predicate `Pred' is
          determinate when `Cond' holds.

        - _The following properties should hold at call time:_

          `Pred' is a Name/Arity structure denoting a predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')

          `Cond' is a determinacy condition.   (`user(...
          /andorra_doc):detcond/1')




File: ciao.info,  Node: Documentation on exports (andorra),  Next: Other information (andorra),  Prev: Documentation on new declarations (andorra),  Up: Andorra execution

Documentation on exports (`andorra')
====================================

 - REGTYPE: detcond/1:
     Defined by:
          detcond(ground(X)) :-
                  var(X).
          detcond(nonvar(X)) :-
                  var(X).
          detcond(instatiated(A,Path)) :-
                  var(A),
                  list(Path,int).
          detcond(?\=(Term1,Term2)) :-
                  path(Term1),
                  path(Term2).
          detcond(?=(Term1,Term2)) :-
                  path(Term1),
                  path(Term2).
          detcond(Test) :-
                  test(Test).

        * `ground/1' and `nonvar/1' have the usual meaning.

        * `instatiated(A,Path)' means that the subterm of `A'
          addressed by `Path' is not a variable. `Path' is a list of
          integer numbers describing a path to the subterm regarding
          the whole term A as a tree. For example,
          `instantiated(f(g(X),h(i(Z),Y)),[2,1])' tests whether
          `i(Z)' is not a variable.

        * `Term1 ?\= Term2' means "terms `Term1' and `Term2' do not
          unify (when instantiated)". `Term1' and `Term2' can be
          either an argument of the predicate or a term
          `term(V,Path)', which refers to the subterm of `V'
          addressed by `Path'.

        * `Term1 ?= Term2' means "terms `Term1' and `Term2' unify
          (when instantiated)". The same considerations above apply
          to `Term1' and `Term2'.

        * any other test that does not unify variables can also be
          used ( `==/2', `\==/2', `atomic/1').

     *Usage:* `detcond(X)'
        - _Description:_ `X' is a determinacy condition.



 - REGTYPE: path/1:
     Defined by:
          path(X) :-
                  var(X).
          path(X) :-
                  list(X,int).





File: ciao.info,  Node: Other information (andorra),  Prev: Documentation on exports (andorra),  Up: Andorra execution

Other information (`andorra')
=============================

   The andorra transformation will include the following predicates
into the code of the module that uses the package. Be careful not to
define predicates by these names:
   * `detcond_andorra/4'

   * `path_andorra/4'

   * `detcond_susp/4'

   * `path_susp/4'

   * `list_andorra2/5'

   * `test_andorra2/4'


File: ciao.info,  Node: Call on determinate,  Next: Miscellaneous predicates,  Prev: Andorra execution,  Up: Top

Call on determinate
*******************

   *Author(s):* Jose' Morales, Manuel Carro.

   *Version:* 1.7#149 (2001/11/19, 19:17:51 CET)

   Offers an enriched variant of call and cut `!!/0' which executes
pending goals when the computation has no more alternatives.

   This library is useful to, for example, get rid of external
connections once the necessary data has been obtained.

* Menu:

* Usage and interface (det_hook_rt)::
* Documentation on exports (det_hook_rt)::
* Documentation on internals (det_hook_rt)::
* Other information (det_hook_rt)::
* Known bugs and planned improvements (det_hook_rt)::


File: ciao.info,  Node: Usage and interface (det_hook_rt),  Next: Documentation on exports (det_hook_rt),  Prev: Call on determinate,  Up: Call on determinate

Usage and interface (`det_hook_rt')
===================================

   * *Library usage:*

          :- use_module(library(det_hook_rt)).
     in which case, `!!/0' is not available.

     Typically, this library is used as a package:
          :- use_package(det_hook).

   * *Exports:*
        - _Predicates:_

          `det_try/3'.




File: ciao.info,  Node: Documentation on exports (det_hook_rt),  Next: Documentation on internals (det_hook_rt),  Prev: Usage and interface (det_hook_rt),  Up: Call on determinate

Documentation on exports (`det_hook_rt')
========================================

 - PREDICATE: det_try/3:
     _Meta-predicate_ with arguments: `det_try(goal,goal,goal)'.

     *Usage:* `det_try(Goal,OnCut,OnFail)'
        - _Description:_ `Action' is called, and `OnCut' and `OnFail'
          are goals to be executed when `Goal' is cut or when it
          finitely fails, respectively. In order for this to work,
          cutting must be performed in a special way, by usin the
          `!!/0' predicate, also provided by this module.

        - _The following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `OnCut' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `OnFail' is a term which represents a goal, i.e., an atom
          or a structure.   (`basic_props:callable/1')




File: ciao.info,  Node: Documentation on internals (det_hook_rt),  Next: Other information (det_hook_rt),  Prev: Documentation on exports (det_hook_rt),  Up: Call on determinate

Documentation on internals (`det_hook_rt')
==========================================

 - PREDICATE: !!/0:
     *Usage:*
        - _Description:_ Performs a special cut which prunes
          alternatives away, as the usual cut, but which also
          executes the goals specified as `OnCut' for any call in the
          scope of the cut.




File: ciao.info,  Node: Other information (det_hook_rt),  Next: Known bugs and planned improvements (det_hook_rt),  Prev: Documentation on internals (det_hook_rt),  Up: Call on determinate

Other information (`det_hook_rt')
=================================

   As an example, the program

     :- module(_, _, [det_hook]).
     
     enumerate(X):-
             display(enumerating), nl,
             OnCut = (display('goal cut'), nl),
             OnFail = (display('goal failed'), nl),
             det_try(enum(X), OnCut, OnFail).
     
     enum(1).
     enum(2).
     enum(3).

   behaves as follows:

     ?- enumerate(X).
     enumerating
     
     X = 1 ? ;
     
     X = 2 ? ;
     
     X = 3 ? ;
     goal failed

   (note the message inserted on failure). The execution can be cut
as follows:

     ?- use_package(det_hook).
     {Including /home/clip/lib/ciao/ciao-1.7/library/det_hook/det_hook.pl
     }
     
     yes
     ?- enumerate(X), '!!'.
     enumerating
     goal cut
     
     X = 1 ? ;
     
     no


File: ciao.info,  Node: Known bugs and planned improvements (det_hook_rt),  Prev: Other information (det_hook_rt),  Up: Call on determinate

Known bugs and planned improvements (`det_hook_rt')
===================================================

   * If the started goals do not exhaust their solutions, and '!!'/0
     is not used, the database will populate with facts which will be
     consulted the next time a '!!'/0 is used. This could cause
     incorrect executions.


File: ciao.info,  Node: Miscellaneous predicates,  Next: Delaying predicates (freeze),  Prev: Call on determinate,  Up: Top

Miscellaneous predicates
************************

   *Author(s):* Manuel Carro, Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#95 (1999/11/8, 18:37:30 MET)

   This module implements some miscellaneous non-logical (but
sometimes very useful) predicates.

* Menu:

* Usage and interface (odd)::
* Documentation on exports (odd)::


File: ciao.info,  Node: Usage and interface (odd),  Next: Documentation on exports (odd),  Prev: Miscellaneous predicates,  Up: Miscellaneous predicates

Usage and interface (`odd')
===========================

   * *Library usage:*

     `:- use_module(library(odd)).'

   * *Exports:*
        - _Predicates:_

          `setarg/3', `undo/1'.




File: ciao.info,  Node: Documentation on exports (odd),  Prev: Usage and interface (odd),  Up: Miscellaneous predicates

Documentation on exports (`odd')
================================

 - PREDICATE: setarg/3:
     *Usage:* `setarg(Index,Term,NewArg)'
        - _Description:_ Replace destructively argument `Index' in
          `Term' by `NewArg'. The assignment is undone on
          backtracking. This is a major change to the normal behavior
          of data assignment in Ciao Prolog.

        - _The following properties should hold at call time:_

          `Index' is currently instantiated to an integer.
          (`term_typing:integer/1')

          `Term' is a compound term.   (`basic_props:struct/1')

          `NewArg' is any term.   (`basic_props:term/1')

        - _The following properties hold upon exit:_

          `Index' is currently instantiated to an integer.
          (`term_typing:integer/1')

          `Term' is a compound term.   (`basic_props:struct/1')

          `NewArg' is any term.   (`basic_props:term/1')



 - PREDICATE: undo/1:
     *Usage:* `undo(Goal)'
        - _Description:_  `call(`Goal')' is executed on backtracking.
          This is a major change to the normal control of Ciao Prolog
          execution.

        - _The following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

        - _The following properties hold upon exit:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')




File: ciao.info,  Node: Delaying predicates (freeze),  Next: Delaying predicates (when),  Prev: Miscellaneous predicates,  Up: Top

Delaying predicates (freeze)
****************************

   *Author(s):* Manuel Carro, Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#72 (2000/3/19, 19:9:14 CET)

   This library offers a simple implementation of `freeze/2',
`frozen/2', etc. [Col82,Nai85,Nai91,Car87] based on the use of
attributed variables [Hol92,Hol90].

* Menu:

* Usage and interface (freeze)::
* Documentation on exports (freeze)::
* Documentation on multifiles (freeze)::


File: ciao.info,  Node: Usage and interface (freeze),  Next: Documentation on exports (freeze),  Prev: Delaying predicates (freeze),  Up: Delaying predicates (freeze)

Usage and interface (`freeze')
==============================

   * *Library usage:*

     `:- use_module(library(freeze)).'

   * *Exports:*
        - _Predicates:_

          `freeze/2', `frozen/2'.

        - _Multifiles:_

          `verify_attribute/2', `combine_attributes/2'.




File: ciao.info,  Node: Documentation on exports (freeze),  Next: Documentation on multifiles (freeze),  Prev: Usage and interface (freeze),  Up: Delaying predicates (freeze)

Documentation on exports (`freeze')
===================================

 - PREDICATE: freeze/2:
     _Meta-predicate_ with arguments: `freeze(?,goal)'.

     *Usage:* `freeze(X,Goal)'
        - _Description:_ If `X' is free delay `Goal' until `X' is
          non-variable.

        - _The following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: frozen/2:
     _Meta-predicate_ with arguments: `frozen(?,goal)'.

     *Usage:* `frozen(X,Goal)'
        - _Description:_ `Goal' is currently delayed until variable
          `X' becomes bound.

        - _The following properties should hold upon exit:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')




File: ciao.info,  Node: Documentation on multifiles (freeze),  Prev: Documentation on exports (freeze),  Up: Delaying predicates (freeze)

Documentation on multifiles (`freeze')
======================================

 - PREDICATE: verify_attribute/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




 - PREDICATE: combine_attributes/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.





File: ciao.info,  Node: Delaying predicates (when),  Next: Active modules (high-level distributed execution),  Prev: Delaying predicates (freeze),  Up: Top

Delaying predicates (when)
**************************

   *Author(s):* Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#3 (2000/7/21, 11:54:59 CEST)

   `when/2' delays a predicate until some condition in its variable
is met. For example, we may want to find out the maximum of two
numbers, but we are not sure when they will be instantiated. We can
write the standard `max/3' predicate (but changing its name to
`gmax/3' to denote that the first and second arguments must be
ground) as

     gmax(X, Y, X):- X > Y, !.
     gmax(X, Y, Y):- X =< Y.

   and then define a 'safe' `max/3' as

     max(X, Y, Z):-
             when((ground(X),ground(Y)), gmax(X, Y, Z)).

   which can be called as follows:

     ?- max(X, Y, Z) , Y = 0, X = 8.
     
     X = 8,
     Y = 0,
     Z = 8 ?
     
     yes

   Alternatively, `max/3' could have been defined as

     max(X, Y, Z):-
             when(ground((X, Y)), gmax(X, Y, Z)).

   with the same effects as above. More complex implementations are
possible. Look, for example, at the `max.pl' implementation under the
`when' library directory, where a `max/3' predicate is implemented
which waits on all the arguments until there is enough information to
determine their values:

     ?- use_module(library('when/max')).
     
     yes
     ?- max(X, Y, Z), Z = 5, Y = 4.
     
     X = 5,
     Y = 4,
     Z = 5 ?
     
     yes

* Menu:

* Usage and interface (when)::
* Documentation on exports (when)::
* Documentation on multifiles (when)::
* Known bugs and planned improvements (when)::


File: ciao.info,  Node: Usage and interface (when),  Next: Documentation on exports (when),  Prev: Delaying predicates (when),  Up: Delaying predicates (when)

Usage and interface (`when')
============================

   * *Library usage:*

     `:- use_module(library(when)).'

   * *Exports:*
        - _Predicates:_

          `when/2'.

        - _Regular Types:_

          `wakeup_exp/1'.

        - _Multifiles:_

          `verify_attribute/2', `combine_attributes/2'.


   * *Other modules used:*
        - _System library modules:_

          `terms_vars', `sort', `sets'.




File: ciao.info,  Node: Documentation on exports (when),  Next: Documentation on multifiles (when),  Prev: Usage and interface (when),  Up: Delaying predicates (when)

Documentation on exports (`when')
=================================

 - PREDICATE: when/2:
     _Meta-predicate_ with arguments: `when(?,goal)'.

     *Usage:* `when(WakeupCond,Goal)'
        - _Description:_ Delays / executes `Goal' according to
          `WakeupCond' given. The `WakeupCond's now acceptable are
          `ground(T)' ( `Goal' is delayed until `T' is ground),
          `nonvar(T)' ( `Goal' is delayed until `T' is not a
          variable), and conjunctions and disjunctions of conditions:

               wakeup_exp(ground(_1)).
               wakeup_exp(nonvar(_1)).
               wakeup_exp((C1,C2)) :-
                       wakeup_exp(C1),
                       wakeup_exp(C2).
               wakeup_exp((C1;C2)) :-
                       wakeup_exp(C1),
                       wakeup_exp(C2).

          `when/2' only fails it the `WakeupCond' is not legally
          formed. If `WakeupCond' is met at the time of the call no
          delay mechanism is involved -- but there exists a time
          penalty in the condition checking.

          In case that an instantiation fires the execution of
          several predicates, the order in which these are executed
          is not defined.

        - _The following properties should hold at call time:_

          `WakeupCond' is a legal expression for delaying goals.
          (`when:wakeup_exp/1')

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - REGTYPE: wakeup_exp/1:
     *Usage:* `wakeup_exp(T)'
        - _Description:_ `T' is a legal expression for delaying goals.




File: ciao.info,  Node: Documentation on multifiles (when),  Next: Known bugs and planned improvements (when),  Prev: Documentation on exports (when),  Up: Delaying predicates (when)

Documentation on multifiles (`when')
====================================

 - PREDICATE: verify_attribute/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.




 - PREDICATE: combine_attributes/2:
     No further documentation available for this predicate.

     The predicate is _multifile_.





File: ciao.info,  Node: Known bugs and planned improvements (when),  Prev: Documentation on multifiles (when),  Up: Delaying predicates (when)

Known bugs and planned improvements (`when')
============================================

   * Redundant conditions are not removed.

   * Floundered goals are not appropriately printed.


File: ciao.info,  Node: Active modules (high-level distributed execution),  Next: Breadth-first execution,  Prev: Delaying predicates (when),  Up: Top

Active modules (high-level distributed execution)
*************************************************

   *Author(s):* Manuel Hermenegildo, Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#205 (2002/4/22, 20:52:9 CEST)

   Active modules [CH95] provide a high-level model of inter-process
communication and distributed execution (note that using Ciao's
communication and concurrency primitives, such as sockets, concurrent
predicates, etc.). An _active module_ (or an _active object_) is an
ordinary module to which computational resources are attached, and
which resides at a given location on the network. Compiling an active
module produces an executable which, when running, acts as a server
for a number of predicates, the predicates exported by the module.
Predicates exported by an active module can be accessed by a program
on the network by simply "using" the module, which then imports such
"remote predicates." The process of loading an active module does not
involve transferring any code, but rather setting up things so that
calls in the module using the active module are executed as remote
procedure calls to the active module. This occurs in the same way
independently of whether the active module and the using module are
in the same machine or in different machines across the network.

   Except for having to compile it in a special way (see below), an
active module is identical from the programmer point of view to an
ordinary module. A program using an active module imports it and uses
it in the same way as any other module, except that it uses "
`use_active_module'" rather than " `use_module'" (see below). Also,
an active module has an address (network address) which must be known
in order to use it. In order to use an active module it is necessary
to know its address: different "protocols" are provided for this
purpose (see below).

   (1)

   From the implementation point of view, active modules are
essentially daemons: executables which are started as independent
processes at the operating system level. Communication with active
modules is implemented using sockets (thus, the address of an active
module is an IP socket address in a particular machine). Requests to
execute goals in the module are sent through the socket by remote
programs. When such a request arrives, the process running the active
module takes it and executes it, returning through the socket the
computed answers. These results are then taken and used by the remote
processes. Backtracking over such remote calls works as usual and
transparently. The only limitation (this may change in the future,
but it is currently done for efficiency reasons) is that all
alternative answers are precomputed (and cached) upon the first call
to an active module and thus _an active module should not export a
predicate which has an infinite number of answers_.

   The first thing to do is to select a method whereby the client(s)
(the module(s) that will use the active module) can find out in which
machine/port (IP address/socket number) the server (i.e., the active
module) will be listening once started, i.e., a "protocol" to
communicate with the active module. The easiest way to do this is to
make use of the redezvous methods which are provided in the Ciao
distribution in the `library/actmods' directory; currently,
`tmpbased...', `filebased...', and `webbased...'.

   The first one is based on saving the IP address and socket number
of the server in a file in a predefined directory (generally `/tmp',
but this can be changed by changing `tmpbased_common.pl').

   The second one is similar but saves the info in the directory in
which the server is started (as _<module_name>_`.addr'), or in the
directory that a `.addr' file, if it exists, specifies. The clients
must be started in the same directory (or have access to a file
`.addr' specifying the same directory). However, they can be started
in different machines, provided this directory is shared (e.g., by
NFS or Samba), or the file can be moved to an appropriate directory
on a different machine -provided the full path is the same.

   The third one is based on a name server for active modules. When
an active module is compiled, it communicates its address to the name
server. When the client of the active module wants to communicate
with it, it asks the name server the active module address. This is
all done transparently to the user. The name server must be running
when the active module is compiled (and, of course, when the
application using it is executed). The location of the name server
for an application must be specified in an application file named
`webbased_common.pl' (see below).

   These rendezvous methods are encoded in two modules: a first one,
called `...publish.pl', is used by the server to publish its info.
The second one, called `...locate.pl', is used by the client(s) to
locate the server info. For efficiency, the client methods maintain a
cache of addresses, so that the server information only needs to be
read from the file system the first time the active module is
accessed.

   Active modules are compiled using the `-a' option of the Ciao
compiler (this can also be done from the interactive top-level shell
using `make_actmod/2'). For example, issuing the following command:

       ciaoc -a 'actmods/filebased_publish' simple_server

   compiles the simple server example that comes with the
distribution (in the `actmods/example' directory). The
`simple_client_with_main' example (in the same directory) can be
compiled as usual:

       ciaoc simple_client_with_main

   Note that the client uses the `actmods' package, specifies the
rendezvous method by importing `library('actmods/filebased_locate')',
and explicitely imports the "remote" predicates (_implicit imports
will not work_). Each module using the `actmods' package _should only
use one of the rendezvous methods_.

   Now, if the server is running (e.g., `simple_server &' in Un*x or
double-clicking on it in Win32) when the client is executed it will
connect with the server to access the predicate(s) that it imports
from it.

   A simpler even client `simple_client.pl' can be loaded into the
top level and its predicates called as usual (and they will connect
with the server if it is running).

* Menu:

* Active module name servers::
* Active modules as agents::

   ---------- Footnotes ----------

   (1) It is also possible to provide active modules via a WWW
address. However, we find it more straightforward to simply use
socket addresses. In any case, this is generally hidden inside the
access method and can be thus made transparent to the user.


File: ciao.info,  Node: Active module name servers,  Next: Active modules as agents,  Prev: Active modules (high-level distributed execution),  Up: Active modules (high-level distributed execution)

Active module name servers
--------------------------

   An application using a name server for active modules must have a
file named `webbased_common.pl' that specifies where the name server
resides. It must have the `URL' and the path which corresponds to
that `URL' in the file system of the server machine (the one that
hosts the `URL') of the file that will hold the name server address.

   The current distribution provides a file `webbased_common.pl' that
can be used (after proper setting of its contents) for a server of
active modules for a whole installation. Alternatively, particular
servers for each application can (or could) be set up...

   The current distribution also provides a module that can be used
as name server by any application. It is in file
`examples/webbased_server/webbased_server.pl'.

   To set up a name server edit `webbased_common.pl' to change its
contents appropriately as described above (`URL' and corresponding
complete file path). Then recompile this library module:
         ciaoc -c webbased_common
   The name server has to be compiled as an active module itself:
         ciaoc -a actmods/webserver_publish webbased_server
   It has to be started in the server machine before the application
and its active modules are compiled.

   Alternatively, you can copy `webbased_common.pl' and use it to set
up name servers for particular applications. Currently, this is a bit
complicated. You have to ensure that the name server, the application
program, and all its active modules are compiled and executed with
the same `webbased_common.pl' module. One way to do this is to create
a subdirectory `actmods' under the directory of your application,
copy `webbased_common.pl' to it, modify it, and then compile the name
server, the application program, and its active modules using a
library path that guarantees that your `actmods' directory is located
by the compiler before the standard Ciao library. The same applies
for when running all of them if the library loading is dynamic.

   Addresses of active modules are saved by the name server in a
subdirectory `webbased_db' of the directory where you start it --see
`examples/webbased_server/webbased_db/webbased_server'). This allows
to restart the server right away if it dies (since it saves its
state). This directory should be cleaned up regularly of addresses of
active modules which are no more active. To do this, stop the server
--by killing it (its pid is in `PATH/FILE'), and restart it after
cleaning up the files in the above mentioned directory.


File: ciao.info,  Node: Active modules as agents,  Prev: Active module name servers,  Up: Active modules (high-level distributed execution)

Active modules as agents
------------------------

   It is rather easy to turn Ciao active modules into agents for some
kind of applications. The directory `examples/agents' contains a
(hopefully) self-explanatory example.


File: ciao.info,  Node: Usage and interface (actmods),  Next: Documentation on new declarations (actmods),  Prev: Active modules (high-level distributed execution),  Up: Active modules (high-level distributed execution)

Usage and interface (`actmods')
===============================

   * *Library usage:*

     `:- use_package(actmods).'

     or

     `:- module(...,...,[actmods]).'

   * *New declarations defined:*

     `use_active_module/2'.



File: ciao.info,  Node: Documentation on new declarations (actmods),  Next: Known bugs and planned improvements (actmods),  Prev: Usage and interface (actmods),  Up: Active modules (high-level distributed execution)

Documentation on new declarations (`actmods')
=============================================

 - DECLARATION: use_active_module/2:
     *Usage:* :- `use_active_module(AModule,Predicates)'.
        - _Description:_ Specifies that this code imports from the
          _active module_ defined in `AModule' the predicates in
          `Imports'. The imported predicates must be exported by the
          active module.

        - _The following properties should hold at call time:_

          `AModule' is a source name.   (`streams_basic:sourcename/1')

          `Predicates' is a list of `predname's.
          (`basic_props:list/2')




File: ciao.info,  Node: Known bugs and planned improvements (actmods),  Prev: Documentation on new declarations (actmods),  Up: Active modules (high-level distributed execution)

Known bugs and planned improvements (`actmods')
===============================================

   * The package provides no means for security: the accessing
     application must take care of this (?).

   * It can happen that there is a unique process for an active
     module serving calls from several different simultaneous
     executions of the same application. In this case, there might be
     unwanted interactions (e.g., if the active module has state).

   * Applications may fail if the name server or an active module is
     restarted during execution of the application (since they
     restart at a different port than the one cached by the
     application).

   * One may want name servers to reside at a fixed and known machine
     and port number (this is known as a _service_ and is defined in
     `/etc/services' in a Un*x machine). Currently, the port number
     changes in each invocation of the server.

   * One may want to have one name server dedicated to a single
     application. Currently, there is no easy way to do this.


File: ciao.info,  Node: Breadth-first execution,  Next: Iterative-deepening execution,  Prev: Active modules (high-level distributed execution),  Up: Top

Breadth-first execution
***********************

   *Author(s):* Daniel Cabeza, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#143 (2000/5/12, 13:54:34 CEST)

   This package implements breadth-first execution of predicates.
Predicates written with operators `'<-'/1' (facts) and `'<-'/2'
(clauses) are executed using breadth-first search. This may be useful
in search problems when a complete proof procedure is needed. An
example of code would be:
     :- module(chain, _, [bf]).
     
     test(bf) :- bfchain(a,d).
     test(df) :- chain(a,d).   % loops!
     
     bfchain(X,X) <- .
     bfchain(X,Y) <- arc(X,Z), bfchain(Z,Y).
     
     chain(X,X).
     chain(X,Y) :- arc(X,Z), chain(Z,Y).
     
     arc(a,b).
     arc(a,d).
     arc(b,c).
     arc(c,a).

   There is another version, called `bf/af', which ensures
AND-fairness by goal shuffling. This version correctly says "`no'"
executing the following test:
     :- module(sublistapp, [test/0,sublistapp/2], ['bf/af']).
     
     test :- sublistapp([a],[b]).
     
     sublistapp(S,L) <- append(_,S,Y), append(Y,_,L).
     
     append([], L, L) <- .
     append([X|Xs], L, [X|Ys]) <- append(Xs, L, Ys).

* Menu:

* Usage and interface (bf)::
* Known bugs and planned improvements (bf)::


File: ciao.info,  Node: Usage and interface (bf),  Next: Known bugs and planned improvements (bf),  Prev: Breadth-first execution,  Up: Breadth-first execution

Usage and interface (`bf')
==========================

   * *Library usage:*

     `:- use_package(bf).'

     or

     `:- module(...,...,[bf]).'

   * *New operators defined:*

     `<-/2' [1200,xfx], `<-/1' [1200,xf].


File: ciao.info,  Node: Known bugs and planned improvements (bf),  Prev: Usage and interface (bf),  Up: Breadth-first execution

Known bugs and planned improvements (`bf')
==========================================

   * Does not correctly work in user files.


File: ciao.info,  Node: Iterative-deepening execution,  Next: Constraint programming over rationals,  Prev: Breadth-first execution,  Up: Top

Iterative-deepening execution
*****************************

   *Author(s):* Claudio Vaucheret, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#119 (2001/8/28, 15:39:1 CEST)

   This package applies a _compiling control_ technique to implement
_depth first iterative deepening_ execution [Kor85]. It changes the
usual _depth-first_ computation rule by _iterative-deepening_ on
those predicates specifically marked. This is very useful in search
problems when a complete proof procedure is needed.

   When this computation rule is used, first all goals are expanded
only up to a given depth. If no solution is found or more solutions
are needed by backtracking, the depth limit is incremented and the
whole goal is repeated. Although it might seem that this approach is
very inefficient because all higher levels are repeated for the
deeper ones, it has been shown that is performs only about b/(b - 1)
times as many operations than the corresponding breadth-first search,
(where b is the branching factor of the proof tree) while the waste
of memory is the same as depth first.

   The usage is by means of the following directive:

   `:- iterative(Name, FirstCut, Formula).'

   which states than the predicate 'Name' given in functor/arity form
will be executed using iterative deepening rule starting at the depth
'FirstCut' with depth being incremented by the predicate 'Formula'.
This predicate compute the new depth using the previous one. It must
implement a dilating function i.e. the new depth must be greater. For
example, to start with depth 5 and increment by 10 you can write:

   `:- iterative(p/1,5,f).'

   `f(X,Y) :- Y is X + 10.'

   or if you prefer,

   `:- iterative(p/1,5,(_(X,Y):- Y is X + 10)).'

   You can also use a fourth parameter to set a limiting depth. All
goals below the given depth limit simply fail. Thus, with the
following directive:

   `:- iterative(p/1,5,(_(X,Y):- Y is X + 10),100).'

   all goals deeper than 100 will fail.

   An example of code using this package would be:


   The order of solutions are first the shallower and then the
deeper. Solutions which are between two cutoff are given in the usual
left to right order. For example,


   It is possible to preserve the iterative-deepening behavior for
calls to predicates defined in other modules. These modules should
obviously also use this package. In addition _all_ predicates from
such modules should imported, i.e., the directive `:-
use_module(module)', should be used in this case instead of `:-
use_module(module,[...])'. Otherwise calls to predicates outside the
module will be treated in the usual way i.e. by depth-first
computation.

   Another complete proof procedure implemented is the `bf' package (
breadth first execution).

* Menu:

* Usage and interface (id)::


File: ciao.info,  Node: Usage and interface (id),  Prev: Iterative-deepening execution,  Up: Iterative-deepening execution

Usage and interface (`id')
==========================

   * *Library usage:*

     `:- use_package(id).'

     or

     `:- module(...,...,[id]).'


File: ciao.info,  Node: Constraint programming over rationals,  Next: Constraint programming over reals,  Prev: Iterative-deepening execution,  Up: Top

Constraint programming over rationals
*************************************

   *Author(s):* Christian Holzbaur, Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#156 (2000/5/30, 11:0:51 CEST)

   *Note:* This package is currently being adapted to the new
characteristics of the Ciao module system. This new version now works
right now to some extent, but it is under further development at the
moment. Use with (lots of) caution.

* Menu:

* Usage and interface (clpq)::
* Other information (clpq)::


File: ciao.info,  Node: Usage and interface (clpq),  Next: Other information (clpq),  Prev: Constraint programming over rationals,  Up: Constraint programming over rationals

Usage and interface (`clpq')
============================

   * *Library usage:*

     `:- use_package(clpq).'

     or

     `:- module(...,...,[clpq]).'


File: ciao.info,  Node: Other information (clpq),  Prev: Usage and interface (clpq),  Up: Constraint programming over rationals

Other information (`clpq')
==========================

* Menu:

* Some CLP(Q) examples::


File: ciao.info,  Node: Some CLP(Q) examples,  Prev: Other information (clpq),  Up: Other information (clpq)

Some CLP(Q) examples
--------------------

(Other examples can be found in the source and library directories.)

   * 'Reversible' Fibonacci (clpq):

     :- module(_, [fib/2], []).
     :- use_package(clpq).
     
     fib(X,Y):- X .=. 0, Y .=. 0.
     fib(X,Y):- X .=. 1, Y .=. 1.
     fib(N,F) :-
             N .>. 1,
             N1 .=. N - 1,
             N2 .=. N - 2,
             fib(N1, F1),
             fib(N2, F2),
             F .=. F1+F2.

   * Matrix multiplication (clpq):

     :- use_package(clpq).
     :- use_module(library(write)).
     
     mmultiply([],_,[]).
     mmultiply([V0|Rest], V1, [Result|Others]):-
                 mmultiply(Rest, V1, Others),
                     multiply(V1,V0,Result).
     
     multiply([],_,[]).
     multiply([V0|Rest], V1, [Result|Others]):-
                 multiply(Rest, V1, Others),
                     vmul(V0,V1,Result).
     
     vmul([],[],0).
     vmul([H1|T1], [H2|T2], Result):-
             vmul(T1,T2, Newresult),
             Result .=. H1*H2+Newresult.
     
     matrix(1,[[1,2,3,4,5],[4,0,-1,5,6],[7,1,-2,8,9],[-1,0,1,3,2],[1,5,-3,2,4]]).
     matrix(2,[[3,2,1,0,-1],[-2,1,3,0,2],[1,2,0,-1,5],[1,3,2,4,5],[-5,1,4,2,2]]).
     
     %% Call with: ?- go(M).
     
     go(M):-
             matrix(1,M1),
             matrix(2,M2),
             mmultiply(M1, M, M2).

   * Queens (clpq):

     :- use_package(clpq).
     
     queens(N, Qs) :- constrain_values(N, N, Qs), place_queens(N, Qs).
     
     constrain_values(0, _N, []).
     constrain_values(N, Range, [X|Xs]) :-
             N .>. 0, X .>. 0, X .=<. Range,
             N1 .=. N - 1,
             constrain_values(N1, Range, Xs), no_attack(Xs, X, 1).
     
     no_attack([], _Queen, _Nb).
     no_attack([Y|Ys], Queen, Nb) :-
             Queen .<>. Y+Nb,
             Queen .<>. Y-Nb,
             Nb1 .=. Nb + 1,
             no_attack(Ys, Queen, Nb1).
     
     place_queens(0, _).
     place_queens(N, Q) :-
             N > 0, member(N, Q), N1 is N-1, place_queens(N1, Q).


File: ciao.info,  Node: Constraint programming over reals,  Next: Fuzzy Prolog,  Prev: Constraint programming over rationals,  Up: Top

Constraint programming over reals
*********************************

   *Author(s):* Christian Holzbaur, Daniel Cabeza.

   *Note:* This package is currently being adapted to the new
characteristics of the Ciao module system. This new version now works
right now to some extent, but it under further development at the
moment. Use with (lots of) caution.

* Menu:

* Usage and interface (clpr)::
* Other information (clpr)::


File: ciao.info,  Node: Usage and interface (clpr),  Next: Other information (clpr),  Prev: Constraint programming over reals,  Up: Constraint programming over reals

Usage and interface (`clpr')
============================

   * *Library usage:*

     `:- use_package(clpr).'

     or

     `:- module(...,...,[clpr]).'


File: ciao.info,  Node: Other information (clpr),  Prev: Usage and interface (clpr),  Up: Constraint programming over reals

Other information (`clpr')
==========================

* Menu:

* Some CLP(R) examples::


File: ciao.info,  Node: Some CLP(R) examples,  Prev: Other information (clpr),  Up: Other information (clpr)

Some CLP(R) examples
--------------------

(Other examples can be found in the source and library directories.)

   * 'Reversible' Fibonacci (clpr):

     :- module(_, [fib/2], []).
     :- use_package(clpr).
     
     fib(X,Y):- X .=. 0, Y .=. 0.
     fib(X,Y):- X .=. 1, Y .=. 1.
     fib(N,F) :-
             N .>. 1,
             N1 .=. N - 1,
             N2 .=. N - 2,
             fib(N1, F1),
             fib(N2, F2),
             F .=. F1+F2.

   * Dirichlet problem for Laplace's equation (clpr):



     %
     % Solve the Dirichlet problem for Laplace's equation using
     % Leibman's five-point finit-differenc approximation.
     % The goal ?- go1 is a normal example, while the goal ?- go2
     % shows output constraints for a small region where the boundary conditions
     % are not specified.
     %
     :- use_package(clpq).
     :- use_module(library(format)).
     
     laplace([_, _]).
     laplace([H1, H2, H3|T]):-
             laplace_vec(H1, H2, H3),
             laplace([H2, H3|T]).
     
     laplace_vec([_, _], [_, _], [_, _]).
     laplace_vec([_TL, T, TR|T1], [ML, M, MR|T2], [_BL, B, BR|T3]):-
             B + T + ML + MR - 4 * M .=. 0,
             laplace_vec([T, TR|T1], [M, MR|T2], [B, BR|T3]).
     
     printmat([]).
     printmat([H|T]):-
             printvec(H),
             printmat(T).
     
     printvec([]):- nl.
     printvec([H|T]):-
             printrat(H),
             printvec(T).
     
     printrat(rat(N,D)) :- !,
             X is N/D,
             format(" ~2f",X).
     printrat(N) :-
             X is N*100,
             format(" ~2d",X).
     
     go1:-
             X =  [
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, _, _, _, _, _, _, _, _, _, 100],
         [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]
         ],
             laplace(X),
             printmat(X).
     
     % Answer:
     % 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
     % 100.00 51.11 32.52 24.56 21.11 20.12 21.11 24.56 32.52 51.11 100.00
     % 100.00 71.91 54.41 44.63 39.74 38.26 39.74 44.63 54.41 71.91 100.00
     % 100.00 82.12 68.59 59.80 54.97 53.44 54.97 59.80 68.59 82.12 100.00
     % 100.00 87.97 78.03 71.00 66.90 65.56 66.90 71.00 78.03 87.97 100.00
     % 100.00 91.71 84.58 79.28 76.07 75.00 76.07 79.28 84.58 91.71 100.00
     % 100.00 94.30 89.29 85.47 83.10 82.30 83.10 85.47 89.29 94.30 100.00
     % 100.00 96.20 92.82 90.20 88.56 88.00 88.56 90.20 92.82 96.20 100.00
     % 100.00 97.67 95.59 93.96 92.93 92.58 92.93 93.96 95.59 97.67 100.00
     % 100.00 98.89 97.90 97.12 96.63 96.46 96.63 97.12 97.90 98.89 100.00
     % 100.00 100.00 100.00 100.00 100.00 100.00 100.00 100.00 100.00 100.00 100.00
     
     go2([B31, M32, M33, B34, B42, B43, B12, B13, B21, M22, M23, B24]) :-
             laplace([
                 [_B11, B12, B13, _B14],
                 [B21, M22, M23, B24],
                 [B31, M32, M33, B34],
                 [_B41, B42, B43, _B44]
         ]).
     
     
     % Answer:
     %
     % B34.=. -4*M22+B12+B21+4*M33-B43,
     % M23.=.4*M22-M32-B12-B21,
     % B31.=. -M22+4*M32-M33-B42,
     % B24.=.15*M22-4*M32-4*B12-4*B21-M33-B13 ?


File: ciao.info,  Node: Fuzzy Prolog,  Next: Object oriented programming,  Prev: Constraint programming over reals,  Up: Top

Fuzzy Prolog
************

   *Author(s):* Claudio Vaucheret, Sergio Guadarrama, Francisco Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#199 (2002/4/18, 18:5:46 CEST)

   This package impements an extension of prolog to deal with
uncertainty. We implement a fuzzy prolog that models interval-valued
fuzzy logic. This approach is more general than other fuzzy prologs
in two aspects:

  1. Truth values are sub-intervals on [0,1]. In fact, it could be a
     finite union of sub-intervals, as we will see below. Having a
     unique truth value is a particular case modeled with a unitary
     interval.

  2. Truth values are propagated through the rules by means of a set
     of _aggregation operators_. The definition of an _aggregation
     operator_ is a generalization that subsumes conjunctive
     operators (triangular norms as min, prod, etc.), disjunctive
     operators (triangular co-norms as max, sum, etc.), average
     operators (averages as arithmetic average, cuasi-linear average,
     etc.) and hybrid operators (combinations of previous operators).

   We add uncertainty using CLP(R) instead of implementing a new
fuzzy resolution as other fuzzy prologs. In this way, we use the
original inference mechanism of Prolog, and we use the constraints
and its operations provided by CLP(R) to handle the concept of
partial truth. We represent intervals as constrains over real numbers
and _aggregation operators_ as operations with constraints.

   Each fuzzy predicate has an additional argument which represents
its truth value. We use ":~" instead of ":-" to distinguish fuzzy
clauses from prolog clauses. In fuzzy clauses, truth values are
obtained via an aggregation operator. There is also some syntactic
sugar for defining fuzzy predicates with certain membership
functions, the fuzzy counterparts of crisp predicates, and the fuzzy
negation of a fuzzy predicate.

* Menu:

* Usage and interface (fuzzy)::
* Documentation on new declarations (fuzzy)::
* Documentation on exports (fuzzy)::
* Other information (fuzzy)::
* Known bugs and planned improvements (fuzzy)::


File: ciao.info,  Node: Usage and interface (fuzzy),  Next: Documentation on new declarations (fuzzy),  Prev: Fuzzy Prolog,  Up: Fuzzy Prolog

Usage and interface (`fuzzy')
=============================

   * *Library usage:*

     `:- use_package(fuzzy).'

     or

     `:- module(...,...,[fuzzy]).'

   * *Exports:*
        - _Predicates:_

          `:#/2', `fuzzy_predicate/1', `fuzzy/1', `fnot/1', `:~/2',
          `=>/4'.

        - _Properties:_

          `fuzzybody/1'.

        - _Regular Types:_

          `faggregator/1'.


   * *New operators defined:*

     `:~/2' [1200,xfx], `:~/1' [1200,xf], `:=/2' [1200,xfx], `:=/1'
     [1200,xf], `:#/2' [1200,xfx], `=>/1' [1175,fx], `fnot/1'
     [1150,fx], `aggr/1' [1150,fx], `##/2' [1120,xfy], `<#/2'
     [1120,xfy], `#>/2' [1120,xfy], `fuzzy/1' [1150,fx],
     `fuzzy_predicate/1' [1190,fx], `fuzzy_discrete/1' [1190,fx].

   * *New declarations defined:*

     `aggr/1'.



File: ciao.info,  Node: Documentation on new declarations (fuzzy),  Next: Documentation on exports (fuzzy),  Prev: Usage and interface (fuzzy),  Up: Fuzzy Prolog

Documentation on new declarations (`fuzzy')
===========================================

 - DECLARATION: aggr/1:
     *Usage:* :- `aggr(Name)'.
        - _Description:_ Declares `Name' an aggregator. Its binary
          definition has to be provided. For example:
               :- aggr myaggr.
               
               myaggr(X,Y,Z):- Z .=. X*Y.
          defines an aggregator identical to `prod'.

        - _The following properties hold at call time:_

          `Name' is an atomic term (an atom or a number).
          (`basic_props:constant/1')




File: ciao.info,  Node: Documentation on exports (fuzzy),  Next: Other information (fuzzy),  Prev: Documentation on new declarations (fuzzy),  Up: Fuzzy Prolog

Documentation on exports (`fuzzy')
==================================

 - PREDICATE: :#/2:
     *Usage:* `:#(Name,Decl)'
        - _Description:_ Defines fuzzy predicate `Name' from the
          declaration `Decl'.

        - _The following properties hold upon exit:_

          `Name' is a Name/Arity structure denoting a predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')

          `Decl' is one of the following three:
               fuzzydecl(fuzzy_predicate(_1)).
               fuzzydecl(fuzzy(_1)).
               fuzzydecl(fnot(_1)).

          (`user(... /fuzzy_doc):fuzzydecl/1')



 - PREDICATE: fuzzy_predicate/1:
     *Usage:* `fuzzy_predicate(Domain)'
        - _Description:_ Defines a fuzzy predicate with piecewise
          linear continuous membership function. This is given by
          `Domain', which is a list of pairs of domain-truth values,
          in increasing order and exhaustive. For example:
               young :# fuzzy_predicate([(0,1),(35,1),(45,0),(120,0)]).
          defines the predicate:
               young(X,1):- X .>=. 0, X .<. 35.
               young(X,M):- X .>=. 35, X .<. 45, 10*M .=. 45-X.
               young(X,0):- X .>=. 45, X .=<. 120.

        - _The following properties should hold at call time:_

          `Domain' is a list.   (`basic_props:list/1')



 - PREDICATE: fuzzy/1:
     *Usage:* `fuzzy(Name)'
        - _Description:_ Defines a fuzzy predicate as the fuzzy
          counterpart of a crisp predicate `Name'. For example,
               p_f :# fuzzy p/2
          defines a new fuzzy predicate `p_f/3' (the last argument is
          the truth value) with truth value equal to 0 if `p/2' fails
          and 1 otherwise.

        - _The following properties should hold at call time:_

          `Name' is a Name/Arity structure denoting a predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')



 - PREDICATE: fnot/1:
     *Usage:* `fnot(Name)'
        - _Description:_ Defines a fuzzy predicate as the fuzzy
          negation of another fuzzy predicate `Name'. For example,
               notp_f :# fnot p_f/3
          defines the predicate:
               notp_f(X,Y,M) :-
                       p_f(X,Y,Mp),
                       M .=. 1 - Mp.

        - _The following properties should hold at call time:_

          `Name' is a Name/Arity structure denoting a predicate name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')



 - PREDICATE: :~/2:
     *Usage:* `:~(Head,Body)'
        - _Description:_ Defines a fuzzy clause for a fuzzy
          predicate. The clause contains calls to either fuzzy or
          crisp predicates. Calls to crisp predicates are
          automatically fuzzified. The last argument of `Head' is the
          truth value of the clause, which is obtained as the
          aggregation of the truth values of the body goals. An
          example:
               :- module(young2,_,[fuzzy]).
               
               young_couple(X,Y,Mu) :~ min
                       age(X,X1),
                       age(Y,Y1),
                       young(X1,MuX),
                       young(Y1,MuY).
               
               age(john,37).
               age(rose,39).
               
               young :# fuzzy_predicate([(0,1),(35,1),(45,0),(120,0)]).
          so that:
               ?- young_couple(john,rose,M).
               
               M .=. 0.6 ?

        - _The following properties should hold at call time:_

          `Head' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')

          `Body' is a clause body plus an optional aggregation
          operator.   (`user(... /fuzzy_doc):fuzzybody/1')



 - PROPERTY: fuzzybody/1:
     A clause body, optionally prefixed by the name of an aggregation
     operator. The agregators currently provided are listed under
     `faggregator/1'. By default, the aggregator used is `min'.

     *Usage:* `fuzzybody(B)'
        - _Description:_ `B' is a clause body plus an optional
          aggregation operator.



 - REGTYPE: faggregator/1:
     The first three are, respectively, the T-norms: minimum,
     product, and Lukasiewicz's. The last three are their
     corresponding T-conorms. Aggregators can be defined by the user,
     see `aggr/1'.
          faggregator(min).
          faggregator(prod).
          faggregator(luka).
          faggregator(max).
          faggregator(dprod).
          faggregator(dluka).

     *Usage:* `faggregator(Aggr)'
        - _Description:_ `Aggr' is an aggregator which is cumulative,
          i.e., its application to several values by iterating
          pairwise the binary operation is safe.



 - PREDICATE: =>/4:
     *Usage:* `=>(Aggr,A,B,Truth)'
        - _Description:_ The fuzzy implication `A => B' defined by
          aggregator `Aggr', resulting in the truth value `Truth'.

        - _The following properties should hold at call time:_

          `Aggr' is an aggregator which is cumulative, i.e., its
          application to several values by iterating pairwise the
          binary operation is safe.   (`user(...
          /fuzzy_doc):faggregator/1')

          `A' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `B' is a term which represents a goal, i.e., an atom or a
          structure.   (`basic_props:callable/1')

          `Truth' is a free variable.   (`term_typing:var/1')




File: ciao.info,  Node: Other information (fuzzy),  Next: Known bugs and planned improvements (fuzzy),  Prev: Documentation on exports (fuzzy),  Up: Fuzzy Prolog

Other information (`fuzzy')
===========================

   An example program:
     :- module(dicesum5,_,[fuzzy]).
     
     % this example tries to measure which is the possibility
     % that a couple of values, obtained throwing two loaded dice, sum 5. Let
     % us suppose we only know that one die is loaded to obtain a small value
     % and the other is loaded to obtain a large value.
     %
     % the query is  ? sum(5,M)
     %
     
     small :# fuzzy_predicate([(1,1),(2,1),(3,0.7),(4,0.3),(5,0),(6,0)]).
     large :# fuzzy_predicate([(1,0),(2,0),(3,0.3),(4,0.7),(5,1),(6,1)]).
     
     die1(X,M) :~
             small(X,M).
     
     die2(X,M) :~
             large(X,M).
     
     
     two_dice(X,Y,M):~ prod
             die1(X,M1),
             die2(Y,M2).
     
     sum(2,M) :~
             two_dice(1,1,M1).
     
     
     sum(5,M) :~ dprod
             two_dice(4,1,M1),
             two_dice(1,4,M2),
             two_dice(3,2,M3),
             two_dice(2,3,M4).
   There are more examples in the subdirectory `fuzzy/examples' of
the distribution.


File: ciao.info,  Node: Known bugs and planned improvements (fuzzy),  Prev: Other information (fuzzy),  Up: Fuzzy Prolog

Known bugs and planned improvements (`fuzzy')
=============================================

   * General aggregations defined by users.

   * Inconsistent behaviour of meta-calls in fuzzy clauses.

   * Some meta-predicate constructions need be added, specially for
     'disjunctive' fuzzy clauses, e.g., `sum/2' in the dice example.


File: ciao.info,  Node: Object oriented programming,  Next: Declaring classes and interfaces,  Prev: Fuzzy Prolog,  Up: Top

Object oriented programming
***************************

   *Author(s):* Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#63 (1999/9/29, 19:54:17 MEST)

   O'Ciao is a set of libraries which allows object-oriented
programming in Ciao Prolog. It extends the Ciao Prolog module system
by introducing two new concepts:

   * Inheritance.

   * Instantiation.

   _Polymorphism_ is the third fundamental concept provided by object
oriented programming. This concept is not mentioned here since
*traditional PROLOG systems are polymorphic by nature*.

   Classes are declared in the same way as modules. However, they may
be enriched with inheritance declarations and other object-oriented
constructs. For an overview of the fundamentals of O'Ciao, see
`http://www.clip.dia.fi.upm.es/~clip/papers/ociao-tr.ps.gz'. However,
we will introduce the concepts in a tutorial way via examples.

* Menu:

* Early examples::
* Recommendations on when to use objects::
* Limitations on object usage::


File: ciao.info,  Node: Early examples,  Next: Recommendations on when to use objects,  Prev: Object oriented programming,  Up: Object oriented programming

Early examples
==============

   The following one is a very simple example which declares a class
- a simple stack. Note that if you replace _class/1_ declaration with
a _module/1_ declaration, it will compile correctly, and can be used
as a normal Prolog module.

     %%----------------------------------------------%%
     %% A class for stacks.                          %%
     %%----------------------------------------------%%
     
     %% Class declaration: the current source defines a class.
     :- class(stack,[],[]).
     
     % State declaration: storage/1 is an attribute.
     :- dynamic storage/1.
     
     % Interface declaration: the following predicates will
     % be available at run-time.
     :- export(push/1).
     :- export(pop/1).
     :- export(top/1).
     :- export(is_empty/0).
     
     % Methods
     
     push(Item) :-
             nonvar(Item),
             asserta_fact(storage(Item)).
     
     pop(Item) :-
             var(Item),
             retract_fact(storage(Item)).
     
     top(Top) :-
             storage(Top), !.
     
     is_empty :-
             storage(_), !, fail.
     is_empty.

   If we load this code at the Ciao toplevel shell:

             ?- use_package(objects).
     
             yes
             ?- use_class(library('class/examples/stack')).
     
             yes
             ?-

   we can create two stack _instances_ :

             ?- St1 new stack,St2 new stack.
     
             St1 = stack('9254074093385163'),
             St2 = stack('9254074091') ? ,

   and then, we can operate on them separately:

             1 ?- St1:push(8),St2:push(9).
     
             St1 = stack('9254074093385163'),
             St2 = stack('9254074091') ?
     
             yes
             1 ?- St1:top(I),St2:top(K).
     
             I = 8,
             K = 9,
             St1 = stack('9254074093385163'),
             St2 = stack('9254074091') ?
     
             yes
             1 ?-

   The interesting point is that there are two stacks. If the
previous example had been a normal module, we would have a stack ,
but *only one* stack.

   The next example introduces the concepts of _inheritable_
predicate, _constructor_, _destructor_ and _virtual method_. Refer to
the following sections for further explanation.

     %%----------------------------------------------%%
     %% A generic class for item storage.            %%
     %%----------------------------------------------%%
     :- class(generic).
     
     % Public interface declaration:
     :- export([set/1,get/1,callme/0]).
     
     % An attribute
     :- data datum/1.
     
     % Inheritance declaration: datum/1 will be available to
     % descendant classes (if any).
     :- inheritable(datum/1).
     
     % Attribute initialization: attributes are easily initialized
     % by writing clauses for them.
     datum(none).
     
     % Methods
     
     set(X) :-
             type_check(X),
             set_fact(datum(X)).
     
     get(X) :-
             datum(X).
     
     callme :-
             a_virtual(IMPL),
             display(IMPL),
             display(' implementation of a_virtual/0 '),
             nl.
     
     % Constructor: in this case, every time an instance
     % of this class is created, it will display a message.
     generic :-
             display(' generic class constructor '),
             nl.
     
     % Destructor: analogous to the previous constructor,
     % it will display a message every time an instance
     % of this class is eliminated.
     destructor :-
             display(' generic class destructor '),
             nl.
     
     % Predicates:
     % cannot be called as messages (X:method)
     
     % Virtual declaration: tells the system to use the most
     % descendant implementation of a_virtual/1 when calling
     % it from inside this code (see callme/0).
     % If there is no descendant implementation for it,
     % the one defined bellow will be used.
     :- virtual a_virtual/1.
     
     a_virtual(generic).
     
     :- virtual type_check/1.
     
     type_check(X) :-
             nonvar(X).

   And the following example, is an extension of previous class. This
is performed by establishing an inheritance relationship:

     %%----------------------------------------------%%
     %% This class provides additional functionality %%
     %% to the "generic" class.                      %%
     %%----------------------------------------------%%
     :- class(specific).
     
     % Establish an inheritance relationship with class "generic".
     :- inherit_class(library('class/examples/generic')).
     
     % Override inherited datum/1.
     % datum/1 is said to be overriden because there are both an
     % inherited definition (from class "generic") and a local one,
     % which overrides the one inherited.
     :- data datum/1.
     :- inheritable datum/1.
     
     % Extend the public interface inherited from "generic".
     % note that set/1 and a_virtual/0 are also overriden.
     % undo/0 is a new functionality added.
     :- export([set/1,undo/0]).
     
     % Methods
     
     set(Value) :-
             inherited datum(OldValue),
             !,
             inherited set(Value),
             asserta_fact(datum(OldValue)).
     set(Value) :-
             inherited set(Value).
     
     undo :-
             retract_fact(datum(Last)), !,
             asserta_fact(inherited(datum(Last))).
     undo :-
             retractall_fact(inherited(datum(_))).
     
     % Constructor
     specific :-
             generic,
             retractall_fact(inherited(datum(_))),
             display(' specific class constructor '),
             nl.
     
     % Destructor
     destructor :-
             display(' specific class destructor '),
             nl.
     
     % Predicates
     
     % New implementation of a_virtual/1.
     % Since this predicate was declared virtual, the
     % implementation below will be called from the inherited
     % method callme/0 instead of the version defined at "generic".
     a_virtual(specific).

   *Additional examples* may be found on the _library/class/examples_
directory relative to your Ciao Prolog instalation.


File: ciao.info,  Node: Recommendations on when to use objects,  Next: Limitations on object usage,  Prev: Early examples,  Up: Object oriented programming

Recommendations on when to use objects
======================================

   We would like to give some advice in the use of object oriented
programming, in conjunction with the declarative paradigm.

   You should reconsider using O'Ciao in the following cases:

   * The pretended "objects" have no state,i.e., no data or dynamic
     predicates. In this case, a normal module will suffice.

   * There is state, but there will be only one instance of a
     pretended class. Again, a module suffices.

   * The "objects" are data structures (list,trees,etc) already
     supported by Prolog. However, it does make sense to model, using
     objects, data structures whose change implies a side-effect such
     as drawing a particular window on the screen.


   We recommend the usage of O'Ciao in the following cases:

   * You feel you will need to have several copies of a "module".

   * Local copies of a module are needed instead of a global module
     beeing modified by several ones.

   * The "classes" are a representation of external entities to
     Prolog. For example: the X-Window system.

   * There is state or code outside the Prolog system which needs to
     be manipulated. For example: interfaces to Java or Tcl/Tk code.

   * You are not familiar with Prolog, but you know about object
     oriented programming. O'Ciao may be used as a learning tool to
     introduce yourself on the declarative programming paradigm.



File: ciao.info,  Node: Limitations on object usage,  Prev: Recommendations on when to use objects,  Up: Object oriented programming

Limitations on object usage
===========================

   O'Ciao run-time speed is limited by the usage of meta-programming
structures, for instance: `X = (Object:mymethod(25)), call(X)'.
O'Ciao will optimize static manipulation of objects (those that can
be determined at compile time).


File: ciao.info,  Node: Declaring classes and interfaces,  Next: Compile-time usage of objects,  Prev: Object oriented programming,  Up: Top

Declaring classes and interfaces
********************************

   *Author(s):* Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#162 (2001/12/4, 16:2:58 CET)

   O'Ciao classes are declared in the same way as traditional prolog
modules. The general mechanism of _source expansion_ will translate
object-oriented declarations to normal prolog code. This is done
transparently to the user.

   Abstract _interfaces_ are restricted classes which declare
exported predicates with no implementation. The implementation itselt
will be provided by some class using an `implements/1' declaration.
Only `export/1' and `data/1' declarations are allowed when declaring
an interface. Normal classes may treated as interfaces just ignoring
all exported predicate implementations.

* Menu:

* Usage and interface (class)::
* Documentation on new declarations (class)::
* Documentation on exports (class)::
* Other information (class)::
* Known bugs and planned improvements (class)::


File: ciao.info,  Node: Usage and interface (class),  Next: Documentation on new declarations (class),  Prev: Declaring classes and interfaces,  Up: Declaring classes and interfaces

Usage and interface (`class')
=============================

   * *Library usage:*

     To declare a class the compiler must be told to use the `class'
     _source expansion_. To do so, source code must start with a
     module declaration which loads the class package:
                     :- class(ClassName).

     or a `module/3' declaration, as follows:
                     :- module(ClassName,[],[class]).

     interfaces are declared in a similar way:
                     :- interface(InterfaceName).

     Please, do not use SICStus-like module declaration, with a
     non-empty export list. In other case, some non-sense errors will
     be reported by normal Ciao module system.

     Most of the regular Ciao declarations may be used when defining
     a class, such as `concurrent/1', `dynamic/1', `discontiguous/1',
     `multifile/1', and so on.

     However, there are some restrictions wich apply to those
     declarations:
        * `meta_predicate/1' declaration is not allowed to hold
          _addmodule and pred(N) meta-arguments_, except for
          previously declared multifiles.

        * Attribute and multifile predicates must be declared before
          any clause of the related predicate.

        * There is no sense in declaring an attribute as
          meta_predicate.

     It is a good practique to put all your declarations at the very
     begining of the file, just before the code itself.

   * *Exports:*
        - _Predicates:_

          `inherited/1', `self/1', `constructor/0', `destructor/0'.


   * *New declarations defined:*

     `export/1', `public/1', `inheritable/1', `data/1', `dynamic/1',
     `concurrent/1', `inherit_class/1', `implements/1', `virtual/1'.

   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on new declarations (class),  Next: Documentation on exports (class),  Prev: Usage and interface (class),  Up: Declaring classes and interfaces

Documentation on new declarations (`class')
===========================================

 - DECLARATION: export/1:
     Declares a method or attribute to be part of the _public
     interface_.

     The public interface is the set of predicates wich will be
     accesible from any code establishing an usage relationship with
     this class (see `use_class/1' for further information).

     Publishing an attribute or method is very similar to _exporting_
     a predicate in a Prolog module.

     Whether an inherited and exported predicate is overriden, it
     must be explicitly exported again.

     An inherited (but not exported) predicate may become exported,
     without overriding it by the usage of this declaration.

     *Usage:* :- `export(Spec)'.
        - _Description:_ `Spec' will be part of the public (exported)
          interface.

        - _The following properties should hold at call time:_

          `Spec' is a method or attribute specification.
          (`objects_rt:method_spec/1')



 - DECLARATION: public/1:
     Just an alias for `export/1'.

     *Usage:* :- `public(Spec)'.
        - _Description:_ This declaration may be used instead of
          `export/1'.

        - _The following properties should hold at call time:_

          `Spec' is a method or attribute specification.
          (`objects_rt:method_spec/1')



 - DECLARATION: inheritable/1:
     Declares a method or attribute to be inherited by descendant
     classes. Notice that all *public predicates are inheritable by
     default*. There is no need to mark them as inheritable.

     Traditionaly, object oriented languages makes use of the
     _protected_ concept. Inheritable/1 may be used as the same
     concept.

     The set of inheritable predicates is called the _inheritable
     interface_.

     *Usage:* :- `inheritable(MethodSpec)'.
        - _Description:_ `MethodSpec' is accessible to descendant
          classes.

        - _The following properties should hold at call time:_

          `MethodSpec' is a method or attribute specification.
          (`objects_rt:method_spec/1')



 - DECLARATION: data/1:
     Declares an _attribute_ at current class. Attributes are used to
     build the internal state of instances. So, each instance will
     own a particular copy of those attribute definitions. In this
     way, one instance may have different state from another.

     O'Ciao attributes are restricted to hold simple facts. It is not
     possible to hold a Head :- Body clause at an instance attribute.

     Notice that attributes are _multi-evaluated_ by nature, and may
     be manipulated by the habitual *assert/retract* family of
     predicates.

     Attributes may also be initialized. In order to do so, simply
     put some clauses after the attribute definition. Each time an
     instance is created, its initial state will be built from those
     _initialization clauses_.

     Note: whether a data/1 declaration appears inside an interface,
     it will be automatically exported.

     *Usage:* :- `data Spec'.
        - _Description:_ `Spec' is an attribute.

        - _The following properties should hold at call time:_

          `Spec' is a method or attribute specification.
          (`objects_rt:method_spec/1')



 - DECLARATION: dynamic/1:
     Just an alias for `data/1'.

     *Usage:* :- `dynamic Spec'.
        - _Description:_ You may use this declaration instead of
          `data/1'.

        - _The following properties should hold at call time:_

          `Spec' is a method or attribute specification.
          (`objects_rt:method_spec/1')



 - DECLARATION: concurrent/1:
     Declares a _concurrent attribute_ at current class. Concurrent
     attributes are just the same as normal attributes, those
     declared using `data/1', except for they may freeze the calling
     thread instead of failing when no more choice points are
     remaining on the concurrent attribute.

     In order to get more information about concurrent behavior take
     a look to the concurrent/1 built-in declaration on Ciao Prolog
     module system.

     *Usage:* :- `concurrent Spec'.
        - _Description:_ Declares `Spec' to be a concurrent attribute.

        - _The following properties should hold at call time:_

          `Spec' is a method or attribute specification.
          (`objects_rt:method_spec/1')



 - DECLARATION: inherit_class/1:
     Makes any public and/or inheritable predicate at inherited class
     to become accesible by any instance derived from current class.

     Inherited class is also called the _super class_.

     Only one inherit_class/1 declaration is allowed to be present at
     current source.

     Notice that inheritance is public by default. Any public and/or
     inheritable declaration will remain the same to descendant
     classes. However, any inherited predicate may be _overriden_
     (redefined).

     A predicate is said to be _overriden_ when it has been inherited
     from super class, but there are clauses (or a `data/1'
     declaration) present at current class for such a predicate.

     Whether a *public* predicate is overriden, the local definition
     must also be exported, otherwise an error is reported.

     Whether an *inheritable* predicate (not public) is overriden,
     the local definition must also be marked as inheritable or
     exported, otherwise an error is also reported.

     Note: whether inherit_class/1 appears inside an interface, it
     will be used as an `implements/1' declaration.

     *Usage:* :- `inherit_class(Source)'.
        - _Description:_ Establish an _inheritance relationship_
          between current class and the class defined at `Source'
          file.

        - _The following properties should hold at call time:_

          `Source' is a valid path to a prolog file containing a
          class declaration (without .pl extension).
          (`objects_rt:class_source/1')



 - DECLARATION: implements/1:
     Forces current source to provide an implementation for the given
     interface file. Such interface file may declare another class or
     a specific interface.

     Every public predicate present at given interface file will be
     automatically declared as public at current source, so you
     *must* provide an implementation for such predicates.

     The effect of this declaration is called _interface
     inheritance_,and there is no restriction on the number of
     implements/1 declarations present at current code.

     *Usage:* :- `implements(Interface)'.
        - _Description:_ Current source is supposed to provide an
          implementation for `Interface'.

        - _The following properties should hold at call time:_

          `Interface' is a valid path to a prolog file containing a
          class declaration or an interface declaration (without .pl
          extension).   (`objects_rt:interface_source/1')



 - DECLARATION: virtual/1:
     This declaration may be used whenever descendant classes are to
     implement different versions of a given predicate.

     _virtual_ predicates give a chance to handle, in an uniform way,
     different implementations of the same functionality.

     Whether a virtual predicate is declared as a method, there must
     be at least one clause of it present at current source. Whenever
     no special implementation is needed at current class, a
     never-fail/allways-fail clause may be defined (depending on your
     needs). For example:

             :- virtual([ test1/1 , test2/2 ]).
             test1(_).
             test2(_,_) :- fail.

     This kind of virtual methods are also known as _abstract
     methods_, since implementation is fully delegated to descendant
     classes.

     An attribute may be also declared as a virtual one, but there is
     no need to write clauses for it.

     *Usage:* :- `virtual(VirtualMethodSpec)'.
        - _Description:_ All calls to `VirtualMethodSpec' predicate
          in current source will use the most descendant
          implementation of it.

        - _The following properties should hold at call time:_

          `VirtualMethodSpec' is a method specification.
          (`objects_rt:virtual_method_spec/1')




File: ciao.info,  Node: Documentation on exports (class),  Next: Other information (class),  Prev: Documentation on new declarations (class),  Up: Declaring classes and interfaces

Documentation on exports (`class')
==================================

 - PREDICATE: inherited/1:
     This predicate qualificator may be used whenever you need to
     reference an attribute or method on the super class.

     Since methods and attributes may be redefined, this qualificator
     is need to distinguish between a locally declared predicate and
     the inherited one, which has the same name.

     There is no need to use inherited/1 if a particular inherited
     predicate has not been redefined at current class.

     *Usage:* `inherited(Goal)'
        - _Description:_ References a given `Goal' at the super class

        - _The following properties should hold at call time:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: self/1:
     Determines which instance is currently executing self/1 goal.

     Predicate will fail if argument is not a free variable.
     Otherwise, it will allways succeed, retrieving the instance
     identifier which is executing current code.

     This functionality is very usefull since an object must have
     knowledge of other object's identifier in order to send messages
     to it.For example:

     :- concurrent ack/0.

     send_data_to_object(Data,Obj) :- self(X), Obj:take_this(Data,X),
     current_fact(ack).

     acknowledge :- asserta_fact(ack).

     take_this(Data,Sender) :- validate_data(Data),
     Sender:acknowledge.

     *Usage:* `self(Variable)'
        - _Description:_ Retrieves current instance identifier in
          `Variable'

        - _The following properties should hold at call time:_

          `Variable' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Variable' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')



 - PREDICATE: constructor/0:
     A _constructor_ is a special case of method which complains the
     following conditions:

        * The constructor functor matches the current class name.

        * A constructor may hold any number of arguments.

        * If an inheritance relationship was defined, an inherited
          constructor must be manually called (see below).

        * When instance creation takes place, any of the declared
          constructors are implicitly called. The actual constructor
          called depends on the `new/2' goal specified by the user.

     This is a simple example of constructor declaration for the foo
     class:

                     foo :-
                         display('an instance was born').

     Constructor declaration is not mandatory, and there may be more
     than one constructor declarations (with different arity) at the
     source code.

     This functionality is usefull when some computation is needed at
     instance creation. For example: opening a socket, clearing the
     screen, etc.

     Whenever an inheritance relationship is established, and there
     is any constructor defined at the super class, you must call
     manually an inherited constructor. Here is an example:

                     :- class(foo).
                     :- inherit_class(myclass).
          
                     foo :-
                         myclass(0),
                         display('an instance was born').
          
                     foo(N) :- myclass(N).

     Consequences may be unpredictable, if you forget to call an
     inherited constructor. You should also take care not to call an
     inherited constructor twice.

     All defined constructors are inheritable by default. A
     constructor may also be declared as public (by the user), but it
     is not mandatory.

     *Usage:*
        - _Description:_ Constructors are implicitly declared



 - PREDICATE: destructor/0:
     A _destructor_ is a special case of method which will be
     automatically called when instance destruction takes place.

     A destructor will never be wanted to be part of the public
     interface, and there is no need to mark them as inheritable,
     since all inherited destructors are called by O'Ciao just before
     yours.

     This is a simple example of destructor declaration:

                     destructor :-
                         display('goodbye, cruel world!!!').

     Destructor declaration is not mandatory. Failure or sucess of
     destructors will be ignored by O'Ciao, and they will be called
     only once.

     This functionality is useful when some computation is need at
     instance destruction. For example: closing an open file.

     *Usage:*
        - _Description:_ Destructors are implicitly declared




File: ciao.info,  Node: Other information (class),  Next: Known bugs and planned improvements (class),  Prev: Documentation on exports (class),  Up: Declaring classes and interfaces

Other information (`class')
===========================

   This describes the errors reported when declaring a class or an
interface. The first section will explain compile-time errors, this
is, any semantic error which may be determined at compile time. The
second section will explain run-time errors, this is, any exception
that may be raisen by the incorrect usage of O'Ciao. Some of those
errors may be not reported at compile time, due to the use of
meta-programational structures. For example:

   `functor(X,my_method,0),call(X).'

   O'Ciao is not able to check whether my_method/0 is a valid method
or not. So, this kind of checking is left to run time.

* Menu:

* Class and Interface error reporting at compile time::
* Class and Interface error reporting at run time::
* Normal Prolog module system interaction::


File: ciao.info,  Node: Class and Interface error reporting at compile time,  Next: Class and Interface error reporting at run time,  Prev: Other information (class),  Up: Other information (class)

Class and Interface error reporting at compile time
---------------------------------------------------

   * *ERROR : multiple inheritance not allowed.*

     There are two or more inherit_class/1 declarations found at your
     code. Only one declaration is allowed, since there is no
     multiple code inheritance support.

   * *ERROR : invalid inheritance declaration.*

     The given parameter to inherit_class/1 declaration is not a
     valid path to a Prolog source.

   * *ERROR : sorry, addmodule meta-arg is not allowed at _F/A_. *

     You are trying to declare _F/A_ as meta-predicate, and one of
     the meta-arguments is _addmodule_. This is not allowed in O'Ciao
     due to implementation restrictions. For example:

     `:- meta_predicate example(addmodule).'

     `example(X,FromModule) :- call(FromModule:X).'

   * *ERROR : invalid attribute declaration for _Arg_. *

     Argument to data/1 or dynamic/1 declaration is not a valid
     predicate specification of the form _Functor/Arity_. For example:

     `:- data attr.'

     `:- dynamic attr(_).'

     `:- data attr/m.'

     etc,etc...

   * *ERROR : pretended attribute _F/A_ was assumed to be a method.*

     You put some clauses of _F/A_ before the corresponding data/1 or
     dynamic/1 declaration. For example:

     `attr(initial_value).'

     `:- data attr/1.'

     It is a must to declare attributes before any clause of the
     given predicate.

   * *ERROR : destructor/0 is not allowed to be an attribute.*

     There is a :- data(destructor/0) or :- dynamic(destructor/0).
     declaration in your code. This is not allowed since destructor/0
     is a reserved predicate, and must be allways a method.

   * *ERROR : _Constructor_ is not allowed to be an attribute.*

     As the previos error, you are trying to declare a constructor as
     an attribute. A constructor must be allways a method.

   * *ERROR : invalid multifile: destructor/0 is a reserved
     predicate.*

     There is a :- multifile(destructor/0). declaration in your code.
     This is not allowed since destructor/0 is a reserved predicate,
     and must be allways a method.

   * *ERROR : invalid multifile: _Constructor_ is a reserved
     predicate.*

     As the previos error, you are trying to declare a constructor as
     a multifile. Any constructor must allways be a method.

   * *ERROR : multifile declaration of _F/A_ ignored: it was assumed
     to be a method.*

     You put some clauses of _F/A_ before the corresponding
     multifile/1 declaration. For example:

     example(a,b).

     `:- multifile example/2.'

     Multifile predicates must be declared before any clause of the
     given predicate.

   * *ERROR : invalid multifile declaration: multifile(_Arg_). *

     Given argument to multifile/1 declaration is not a valid
     predicate specification, of the form _Functor/Arity_.

   * *ERROR : invalid public declaration: _Arg_. *

     Given argument _Arg_ to public/1 or export/1 declaration is not
     a valid predicate specification, of the form _Functor/Arity_.

   * *ERROR : invalid inheritable declaration: inheritable(_Arg_). *

     Given argument _Arg_ to inheritable/1 declaration is not a valid
     predicate specification, of the form _Functor/Arity_.

   * *ERROR : destructor/0 is not allowed to be virtual.*

     There is a :- virtual(destructor/0) declaration present at your
     code. Destructors and/or constructors are not allowed to be
     virtual.

   * *ERROR : _Constructor_ is not allowed to be virtual.*

     As the previous error, you are trying to declare a constructor
     as virtual. This is not allowed.

   * *ERROR : invalid virtual declaration: virtual(_Arg_). *

     Given argument to virtual/1 declaration is not a valid predicate
     specification, of the form _Functor/Arity_.

   * *ERROR : clause of _F/A_ ignored : only facts are allowed as
     initial state.*

     You declared _F/A_ as an attribute, then you put some clauses of
     that predicate in the form _Head :- Body_. For example:

     `:- data my_attribute/1.'

     `my_attribute(X) :- X>=0 , X<=2.'

     This is not allowed since attributes are assumed to hold simple
     facts. The correct usage for those _initialization clauses_ is:

     `:- data my_attribute/1.'

     `my_attribute(0).'

     `my_attribute(1).'

     `my_attribute(2).'

   * *ERROR : multifile _F/A_ is not allowed to be public.*

     The given _F/A_ predicate is both present at multifile/1 and
     public/1 declarations. For example:

     `:- public(p/1).'

     `:- multifile(p/1).'

     This is not allowed since multifile predicates are not related
     to Object Oriented Programming.

   * *ERROR : multifile _F/A_ is not allowed to be inheritable.*

     Analogous to previous error.

   * *ERROR : multifile _F/A_ is not allowed to be virtual.*

     Analogous to previous error.

   * *ERROR : virtual _F/A_ must be a method or attribute defined at
     this class.*

     There is a virtual/1 declaration for _F/A_, but there is not any
     clause of that predicate nor a `data/1' declaration. You must
     declare at least one clause for every virtual method. Virtual
     attributes does not require any clause but a `data/1'
     declaration must be present.

   * *ERROR : implemented interface _Module_ is not a valid
     interface.*

     There is an `implements/1' declaration present at your code
     where given _Module_ is not declared as class nor interface.

   * *ERROR : predicate _F/A_ is required both as method (at _Itf1_
     interface) and attribute (at _Itf2_ interface).*

     There is no chance to give a correct implementation for _F/A_
     predicate since _Itf1_ and _Itf2_ interfaces require different
     definitions. To avoid this error, you must remove one of the
     related `implements/1' declaration.

   * *ERROR : inherited _Source_ must be a class.*

     There is an :- inherit_class(_Source_) declaration, but that
     source was not declared as a class.

   * *ERROR : circular inheritance: _Source_ is not a valid
     super-class.*

     Establishing an inheritance relationship with _Source_ will
     cause current class to be present twice in the inheritance line.
     This is not allowed. The cause of this is error is simple :
     There is some inherited class from _Source_ which also
     establishes an inheritance relationship with current source.

   * *ERROR : method/attribute _F/A_ must be implemented.*

     Some of the implemented interfaces requires _F/A_ to be defined,
     but there is no definition for such predicate, even an inherited
     one.

   * *ERROR : local implementation of _F/A_ hides inheritable/public
     definition.*

     There is an inherited definition for _F/A_ which is been
     redefined at current class, but there is no valid
     inheritable/public declaration for the last one. Overriden
     public predicates must be also declared as public. Overriden
     inheritable predicates must be declared either as public or
     inheritable.

   * *ERROR : public predicate _F/A_ was not defined nor inherited.*

     There is a `public/1' declaration for _F/A_, but there is no
     definition for it at current class nor an inherited one.

   * *ERROR : argument to self/1 must be a free variable.*

     Argument to self/1 is not a variable, for example: `self(abc)'.

   * *ERROR : unknown inherited attribute in _Goal_.*

     _Goal_ belongs to assert/retract family of predicates, and given
     argument is not a valid inherited attribute. The most probable
     causes of this error are:

        * The given predicate is defined at super-class, but you
          forgot to mark it as inheritable (or public), at such class.

        * The given predicate was not defined (at super-class) as an
          attribute, just as a method.

   * *ERROR : unknown inherited goal: _Goal_.*

     The given _Goal_ was not found at super-class, or it is not
     accessible. Check whether _Goal_ was marked as inheritable (or
     public) at super-class.

   * *ERROR : invalid argument: _F/A_ is not an attribute.*

     You are trying to pass a method as an argument to any predicate
     which expect a _fact_ predicate.

   * *ERROR : unknown inherited fact: _Fact_.*

     There is a call to any predicate which expects a _fact_ argument
     (those declared as data or dynamic),but the actual argument is
     not an inherited attribute.For example:

     `asserta_fact(inherited(not_an_attribute(8)))'

     where not_an_attribute/1 was not declared as data or dynamic by
     the super-class (or corresponding ascendant).

   * *ERROR : unknown inherited spec: _F/A_.*

     There is a reference to an inherited predicate specification,
     but the involved predicate has not been inherited.

   * *WARNING : meta-predicate specification of _F/A_ ignored since
     this is an attribute.*

     You declared _F/A_ both as an attribute and a meta-predicate.
     For example:

     `:- meta_predicate attr(goal).'

     `:- data attr/1.'

     There is no sense in declaring an attribute as meta-predicate.

   * *WARNING : class destructor is public*

     There is a :- public(destructor/0) declaration present at your
     code. Marking a destructor as public is a very bad idea since
     anybody may destroy or corrupt an instance before the proper
     time.

   * *WARNING : class destructor is inheritable*

     Analogous to previous error.

   * *WARNING : There is no call to inherited constructor/s*

     You have not declared any constructor at your class, but there
     is any inherited constructor that should be called. Whenever you
     do not need constructors, but there is an inheritance
     relationship (where super-class declares a constructor), you
     should write a simple constructor as the following example:
             :- class(myclass).
             :- inherit_class(other_class).
          
             myclass :-
                     other_class.

   * *WARNING : multifile _F/A_ hides inherited predicate.*

     You declared as multifle a predicate which matches an inherited
     predicate name. Any reference to the inherited predicate must be
     done by the ways of the inherited/1 qualificator.



File: ciao.info,  Node: Class and Interface error reporting at run time,  Next: Normal Prolog module system interaction,  Prev: Class and Interface error reporting at compile time,  Up: Other information (class)

Class and Interface error reporting at run time
-----------------------------------------------

   * *EXCEPTION : error(existence_error(object_goal,_Goal_),_Mod_).*

     Called _Goal_ from module (or class) _Mod_ is unknown or has not
     been published.



File: ciao.info,  Node: Normal Prolog module system interaction,  Prev: Class and Interface error reporting at run time,  Up: Other information (class)

Normal Prolog module system interaction
---------------------------------------

   O'Ciao works in conjunction with the Ciao Prolog module system,
which also reports its own error messages. This will cause Ciao to
report a little criptic error messages due to the general mechanism
of source-to-source expansion. Those are some tips you must consider
when compiling a class:

   * Any error relative to method 'm' with arity A will be reported
     for predicate 'obj$m'/A+1. For example :

     `WARNING: (lns 28-30) [Item,Itema] - singleton variables in
     obj$remove/2'

     This error is relative to method remove/1.

   * `set_prolog_flag/1' declaration will be usefull when declaring
     multiple constructors. It will avoid some awful warnings.
     Example:

             :- class(myclass).
          
             %% Use this declaration whenever several constructors are needed.
          
             :- set_prolog_flag(multi_arity_warnings,off).
          
             myclass(_).
          
             myclass(_,_).
          
             :- set_prolog_flag(multi_arity_warnings,on).


File: ciao.info,  Node: Known bugs and planned improvements (class),  Prev: Other information (class),  Up: Declaring classes and interfaces

Known bugs and planned improvements (`class')
=============================================

   * addmodule and pred(N) meta-arguments are not allowed on
     meta-predicates.


File: ciao.info,  Node: Compile-time usage of objects,  Next: Run time usage of objects,  Prev: Declaring classes and interfaces,  Up: Top

Compile-time usage of objects
*****************************

   *Author(s):* Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#32 (2000/11/14, 13:13:15 CET)

   This package is required to enable user code to create objects and
manipulate them, as well as loading any needed class.

* Menu:

* Usage and interface (objects)::
* Documentation on new declarations (objects)::
* Other information (objects)::


File: ciao.info,  Node: Usage and interface (objects),  Next: Documentation on new declarations (objects),  Prev: Compile-time usage of objects,  Up: Compile-time usage of objects

Usage and interface (`objects')
===============================

   * *Library usage:*

     Any code which needs to use objects must include the objects
     package:
              :- module(_ModuleName_,_Exports_,[objects]).
     You can use objects even if your code is a class. Note that
     declaring a class does not automatically enables the code to
     create instances.
              :- class(_ModuleName_,[],[objects]).

     This package enables both static and dynamic usage of objects.

   * *New declarations defined:*

     ` use_class/1', ` instance_of/2', ` new/2'.

   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on new declarations (objects),  Next: Other information (objects),  Prev: Usage and interface (objects),  Up: Compile-time usage of objects

Documentation on new declarations (`objects')
=============================================

 - DECLARATION: use_class/1:
     It establishes an usage relationship between the given file
     (which is supposed to declare a class) and current source. Usage
     relationships are needed in order to enable code to create
     instances of the given class, and to make calls to instances
     derived from such class.

     Since an interface is some kind of class, they may be used
     within this declaration but only for semantic checking
     porpouses. Instances will not be derived from interfaces.

     use_class/1 is used in the same way as `use_module/1'.

     *Usage:* :- ` use_class(ClassSource)'.
        - _Description:_ Establish usage relationship with
          `ClassSource'.

        - _The following properties should hold at call time:_

          `ClassSource' is a valid path to a prolog file containing a
          class declaration (without .pl extension).
          (`objects_rt:class_source/1')



 - DECLARATION: instance_of/2:
     Statically declares an identifier to be an instance of a given
     class.

     It may be used as `new/2' predicate except for:
        * The instance identifier will not be a variable, it must be
          provided by the user, and must be unique.

        * Instance creation will never fail, even if the constructor
          fails.

     For every statically declared object the given constructor will
     be called at program startup. Those instances may be destroyed
     manually, but it is not recommended.

     When reloading the involved class from the Ciao toplevel shell.
     It may destroy statically declared instances, and create them
     again.

     Statically declared instances must be called using a
     specifically designed module-qualification:
     `ClassName(Object):Goal'. For example:
              :- module(example,[main/0],[objects]).
              :- use_class(library(counter)).
              :- cnt instance_of counter(10).
          
              main :-
                   counter(cnt):decrease(1),
                   counter(cnt):current_value(X),
                   display(X).
     But *statically written code* (only) is allowed to use
     module-style qualifications as a macro:
              main :-
                   cnt:decrease(1),
                   cnt:current_value(X),
                   display(X).
     Notice that dynamically expanded goals such as
     `X=cnt,X:decrease(1)' will not work, use
     `X=counter(cnt),X:decrease(1)' instead.

     *Usage:* :- ` instance_of(Object,Constructor)'.
        - _Description:_ Declares `Object' to be an instance of the
          class denoted by `Constructor'.

        - _The following properties should hold at call time:_

          `Object' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Constructor' is a term whose functor matches a class name.
          (`objects_rt:constructor/1')



 - DECLARATION: new/2:
     This declaration has the same effect as ` instance_of/2'.

     *Usage:* :- ` new(Object,Constructor)'.
        - _Description:_ Just an alias for ` instance_of/2'.

        - _The following properties should hold at call time:_

          `Object' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Constructor' is a term whose functor matches a class name.
          (`objects_rt:constructor/1')




File: ciao.info,  Node: Other information (objects),  Prev: Documentation on new declarations (objects),  Up: Compile-time usage of objects

Other information (`objects')
=============================

   Compile-time errors are restricted to some local analysis. Since
there is no type declaration in the Prolog language, there is no
posibility to determine whenever a given variable will hold an
instance of any class.

   However, little semantic analysis is performed. User may aid to
perform such an analysis by the usage of run time checks (which are
also detected at compile time), or static declarations. For example:

   `clause(Obj) :- Obj:a_method(334).'

   O'Ciao may be not able to determine whenever a_method/1 is a valid
method for instance Obj, unless some help is provided:

   `clause(Obj) :- Obj instance_of myclass,Obj:a_method(334).'

   In such case, O'Ciao will report any semantic error at
compile-time.

   Most of the run-time errors are related to normal Ciao Prolog
module system. Since objects are treated as normal Prolog modules at
run time, there is no further documentation here about that stuff.

* Menu:

* Error reporting at compile time (objects)::
* Error reporting at run time (objects)::


File: ciao.info,  Node: Error reporting at compile time (objects),  Next: Error reporting at run time (objects),  Prev: Other information (objects),  Up: Other information (objects)

Error reporting at compile time (objects)
-----------------------------------------

   * *ERROR : invalid instance identifier _ID_: must be an atom*

     There is a `instance_of/2' or `new/2' declaration where first
     argument _ID_ must be an unique atom, but currently it is not.
     Statically declared instances needs an identifier to be provided
     by the user.

   * *ERROR : instance identifier _ID_ already in use*

     There are two or more `instance_of/2' declarations with the same
     first argument _ID_. Instance identifiers must be unique.

   * *ERROR : invalid use_class/1 declaration: _SourceFile_ is not a
     class*

     Those are the causes for this error:

        * The given _SourceFile_ does not exist, or is not accesible.

        * The given _SourceFile_ is not a Prolog source.

        * The given _SourceFile_ is a valid Prolog source, but it
          does not declare a class.


   * *ERROR : unknown class on _ID_ instance declaration*

     The class defined on the `instance_of/2' declaration for _ID_
     instance has not been loaded by a `use_class/1' declaration.

   * *ERROR : instance identifier _ID_ is an exisisting Prolog module*

     There is an statically declared instance whose identifier may
     cause interference with the Ciao Prolog module system. Use
     another instance identifier.

   * *ERROR : unknown constructor on _ID_ instance declaration*

     The given constructor on the `instance_of/2' declaration for
     _ID_ has not been defined at the corresponding class.

   * *ERROR : constructor is needed on _ID_ instance declaration*

     No constructor was defined on the `instance_of/2' declaration
     for _ID_ and default constructor is not allowed. You must
     provide a constructor.

   * *ERROR : static instance _ID_ was derived from a different
     constructor at _AnotherModule_*

     _ID_ has been declared to be an static instance both on
     _AnotherModule_ and current source, but different constructors
     were used. The most probable causes for this error are:

        * Occasionally, there is another module using the same
          instance identifier and it was not noticed by you. Another
          different identifier may be used instead.

        * It was you intention to use the same object as declared by
          the other module. In this case, the same constructor must
          be used.


   * *ERROR : invalid first argument in call to new(_Arg_,_)*

     There is a new/1 goal in your code where first argument is not a
     free variable. For example:

     `myobj new myclass'

     First argument must be a variable in order to receive a run-time
     generated object identifier.

   * *ERROR : unknown class in call to new(?,_Constructor_) *

     The given _Constructor_ in call to new/2 does not correspond to
     any used class at current code. The most probable cause of this
     may be:

        * You forgot to include a `use_class/1' declaration in your
          code.

        * There is a spelling mistake in the constructor.For example:

          :- use_class(myclass).

          foo(X) :- X new mclass.


   * *ERROR : can not create an instance from an interface:
     new(?,_Constructor_) *

     Given _Constructor_ references an interface rather than a class.
     Instances can not be derived from interface-expanded code.

   * *ERROR : unknown constructor in call to new(?,_Constructor_) *

     As the previous error, there is a mistake in the given
     _Constructor_. This error is reported when you are trying to
     call a constructor which was not defined at the corresponding
     class. Check the class definition to find what is going on.

     Another cause for this error is the incorrect usage of the
     default constructor. Whenever there are one or more constructors
     defined at the involved class, you are restricted to chose one
     of them. This seems that default constructor will be available,
     if and only if, there are no constructors defined at the
     involved class.

   * *ERROR : call to non-public _ID:Goal_*

     You are trying to call a method which was not declared as public
     by the class specified in `instance_of/2' declaration for _ID_.

   * *ERROR : call to inaccessible predicate at instance _ID:Goal_*

     There is a call to _Goal_ at statically declared instance _ID_
     which is unknown or was not declared as public.

   * *ERROR : unknown instance _ID_ of class _Class_ at _Goal_*

     There is a call to _Goal_ where involved statically declared
     instance _ID_ is unknown or is not derived from _Class_. Check
     whether it was declared by a `instance_of/2' declaration.

   * *ERROR : inaccessible attribute _Fact_ at instance _ID_*

     There is an attempt to use _ID:Fact_ but it was not declared as
     public.

   * *ERROR : unknown attribute _Fact_ at instance _ID_*

     There is an attempt to use _ID:Fact_ but it is unknown or it is
     not an attribute (may be a method).

   * *WARNING : invalid call to new(?,_)*

     There is a call to new/2 in you code where first argument
     variable has been determined to hold any other instance. For
     example:

     `foo :- X new myclass,X new otherclass.'

     or

     `foo(X) :- X instance_of myclass, X new myclass.'

     The related call to new/2 will allways fail.

   * *WARNING : called _Goal_ is not public at any used class*

     There is a call to _Var_:_Goal_ where _Var_ has not been
     determined to be compatible with any class. However, _Goal_ is
     not public at any class specified by the `use_class/1'
     declaration.

     This is a warning (not an error) since _Var_:_Goal_ may be not
     related to Object Oriented Programing.



File: ciao.info,  Node: Error reporting at run time (objects),  Prev: Error reporting at compile time (objects),  Up: Other information (objects)

Error reporting at run time (objects)
-------------------------------------

   * *EXCEPTION : instantiation_error( '1st argument must be free
     variable')*

     Calling to new/1 requieres first argument to be a free variable.
     For example:

     `X = this_will_raise_an_exception,X new myclass.'

   * *EXCEPTION : instantiation_error('class not given')*

     You called new/2 using a free variable as second argument.

   * *EXCEPTION : instantiation_error(inaccesible_class(_Class_),
     from(_Module_)) *

     _Module_ tried to create an instance of _Class_ by the ways of
     new/2, but there is no usage relationship between _Module_ and
     _Class_.

   * *EXCEPTION : instantiation_error(invalid_constructor(
     _Constructor_)) *

     _Constructor_ was not defined by the corresponding class.



File: ciao.info,  Node: Run time usage of objects,  Next: The Ciao Remote Services Package,  Prev: Compile-time usage of objects,  Up: Top

Run time usage of objects
*************************

   *Author(s):* Angel Fernandez Pineda, Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#51 (2001/1/25, 21:33:0 CET)

   This library provides run-time support for object creation and
manipulation. Objects are also called class instances, or simply
instances.

   Objects in Ciao are treated as normal modules. This is, an object
is a run-time generated Prolog module, which may be identified by an
unique term across the whole application.

   This is a very simple example of how to create an instance, and
how to make calls to it:

                 AnObj new myclass,
                 AnObj:mymethod.

   In order to make any object accessible from code, an usage
relationship must be established between the class (from which
instances are derived) and the code itself. Refer to `use_class/1'
predicate or `use_class/1' declaration in order to do so.

* Menu:

* Usage and interface (objects_rt)::
* Documentation on exports (objects_rt)::
* Known bugs and planned improvements (objects_rt)::


File: ciao.info,  Node: Usage and interface (objects_rt),  Next: Documentation on exports (objects_rt),  Prev: Run time usage of objects,  Up: Run time usage of objects

Usage and interface (`objects_rt')
==================================

   * *Library usage:*

     This library is automatically loaded when using the _objects_
     package:
              :- module(_ModuleName_,_Exports_,[objects]).
     Nothing special needs to be done.

   * *Exports:*
        - _Predicates:_

          `new/2', `instance_of/2', `derived_from/2', `interface/2',
          `instance_codes/2', `destroy/1', `use_class/1'.

        - _Properties:_

          `constructor/1', `class_name/1', `interface_name/1',
          `instance_id/1', `class_source/1', `interface_source/1',
          `method_spec/1', `virtual_method_spec/1'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write',
          `compiler/compiler', `prolog_sys', `system'.




File: ciao.info,  Node: Documentation on exports (objects_rt),  Next: Known bugs and planned improvements (objects_rt),  Prev: Usage and interface (objects_rt),  Up: Run time usage of objects

Documentation on exports (`objects_rt')
=======================================

 - PREDICATE: new/2:
     Dynamic instance creation takes place by the ways of this
     predicate.

     It takes a free variable as first argument which will be
     instantiated to an internal object identifier.

     Second argument must be instantiated to a class constructor.
     Class constructors are designed to perform an initialization on
     the new created instance. Notice that instance initialization
     may involve some kind of computation, not only _state
     initialization_.

     A class constructor is made by a functor, which must match the
     intended class name, and any number of parameters. For example:

                      Obj new myclass(1500,'hello, world!!!')

     Those parameters depends (obviously) on the constructors defined
     at the class source. If no constructors where defined, no
     parameters are needed. This is called the default constructor.
     An example:

                      Obj new myclass

     The default constructor can not be called if there is any
     constructor available at the class source.

     Instantiation will raise an exception and fail whenever any of
     this conditions occur:
        * First argument is not a free variable.

        * Second argument functor is a class, but there is no usage
          relationship with it.

        * Second argument functor is not a class.

        * The given constructor is unknown.

        * The given constructor fails (notice that default
          constructor never fails).

     Objects may also be statically declared, refer to
     `instance_of/2' declaration.

     *Usage:* `new(InstanceVar,Constructor)'
        - _Description:_ Creates a new instance of the class
          specified by `Constructor' returning its identifier in
          `InstanceVar'

        - _The following properties should hold at call time:_

          `InstanceVar' is a free variable.   (`term_typing:var/1')

          `Constructor' is a term whose functor matches a class name.
          (`objects_rt:constructor/1')

        - _The following properties should hold upon exit:_

          `InstanceVar' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')



 - PREDICATE: instance_of/2:
     This predicate is used to perform dynamic type checking. You may
     check whether a particular instance belongs to a particular
     class or related descendants.

     instance_of/2 is used to perform static semantic analisys over
     object oriented code constructions.

     By the use of instance_of/2 you may help to perform such
     analisys.

     *Usage 1:* `instance_of(Instance,Class)'
        - _Description:_ Test whether `Instance' was derived from any
          descendant of `Class', or that class itself

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Class' is an atom denoting a class.
          (`objects_rt:class_name/1')

     *Usage 2:* `instance_of(Instance,Class)'
        - _Description:_ Retrieves, on backtracking, the inheritance
          line of `Instance' commencing on the creation class (that
          specified on call to `new/2') and continuing on the rest of
          ascendant classes, if any.

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Class' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Class' is an atom denoting a class.
          (`objects_rt:class_name/1')



 - PREDICATE: derived_from/2:
     Test whether an object identifier was derived directly from a
     class, by the usage of `new/2' or a static instance declaration (
     `instance_of/2').

     *Usage 1:* `derived_from(Instance,Class)'
        - _Description:_ Test derivation of `Instance' from `Class'

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Class' is an atom denoting a class.
          (`objects_rt:class_name/1')

     *Usage 2:* `derived_from(Instance,Class)'
        - _Description:_ Retrieves the `Class' responsable of the
          derivation of `Instance'.

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Class' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Class' is an atom denoting a class.
          (`objects_rt:class_name/1')



 - PREDICATE: interface/2:
     This predicate is used to ensure a given interface to be
     implemented by a given instance.

     *Usage 1:* `interface(Instance,Interface)'
        - _Description:_ Check whether `Instance' implements the
          given `Interface'.

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Interface' is an unique atom which identifies a public
          interface.   (`objects_rt:interface_name/1')

     *Usage 2:* `interface(Instance,Interfaces)'
        - _Description:_ Retrieves on backtracking all the
          implemented `Interfaces' of `Instance'.

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `Interfaces' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `Interfaces' is an unique atom which identifies a public
          interface.   (`objects_rt:interface_name/1')



 - PREDICATE: instance_codes/2:
     Retrieves a character string representation from an object
     identifier and vice-versa.

     *Usage 1:* `instance_codes(Instance,String)'
        - _Description:_ Retrieves a `String' representation of given
          `Instance'.

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')

          `String' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

     *Usage 2:* `instance_codes(Instance,String)'
        - _Description:_ Reproduces an `Instance' from its `String'
          representation. Such an instance must be alive across the
          application: this predicate will fail whether the involved
          instance has been destroyed.

        - _The following properties should hold at call time:_

          `Instance' is a free variable.   (`term_typing:var/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

        - _The following properties should hold upon exit:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')



 - PREDICATE: destroy/1:
     As well as instances are created, they must be destroyed when no
     longer needed in order to release system resources.

     Unfortunately, current O'Ciao implementation does not support
     automatic instance destruction, so user must manually call
     _destroy/1_ in order to do so.

     The programmer *must ensure* that no other references to the
     involved object are left in memory when destroy/1 is called. If
     not, unexpected results may be obtained.

     *Usage:* `destroy(Instance)'
        - _Description:_ Destroys the object identified by `Instance'.

        - _The following properties should hold at call time:_

          `Instance' is an unique term which identifies an object.
          (`objects_rt:instance_id/1')



 - PREDICATE: use_class/1:
     The behaviour of this predicate is identical to that provided by
     the declaration of the same name `use_class/1'. It allows user
     programs to dynamically load classes. Whether the given source
     is not a class it will perform a `use_module/1' predicate call.

     *Usage:* `use_class(ClassSource)'
        - _Description:_ Dynamically loads the given `ClassSource'

        - _The following properties should hold at call time:_

          `ClassSource' is a valid path to a prolog file containing a
          class declaration (without .pl extension).
          (`objects_rt:class_source/1')



 - PROPERTY: constructor/1:
     *Usage:* `constructor(Cons)'
        - _Description:_ `Cons' is a term whose functor matches a
          class name.



 - PROPERTY: class_name/1:
     *Usage:* `class_name(ClassName)'
        - _Description:_ `ClassName' is an atom denoting a class.



 - PROPERTY: interface_name/1:
     *Usage:* `interface_name(Interface)'
        - _Description:_ `Interface' is an unique atom which
          identifies a public interface.



 - PROPERTY: instance_id/1:
     *Usage:* `instance_id(ID)'
        - _Description:_ `ID' is an unique term which identifies an
          object.



 - PROPERTY: class_source/1:
     *Usage:* `class_source(Source)'
        - _Description:_ `Source' is a valid path to a prolog file
          containing a class declaration (without .pl extension).



 - PROPERTY: interface_source/1:
     *Usage:* `interface_source(Source)'
        - _Description:_ `Source' is a valid path to a prolog file
          containing a class declaration or an interface declaration
          (without .pl extension).



 - PROPERTY: method_spec/1:
     There is no difference between method or attribute
     specifications, and habitual predicate specifications. It is
     just a Functor/Arity term.

     *Usage:* `method_spec(Spec)'
        - _Description:_ `Spec' is a method or attribute
          specification.



 - PROPERTY: virtual_method_spec/1:
     *Usage:* `virtual_method_spec(Spec)'
        - _Description:_ `Spec' is a method specification.




File: ciao.info,  Node: Known bugs and planned improvements (objects_rt),  Prev: Documentation on exports (objects_rt),  Up: Run time usage of objects

Known bugs and planned improvements (`objects_rt')
==================================================

   * Usage of objects from the `user' module does not work properly.
     It is better to use the `objects' package in a (proper) module.

   * Not really a bug: when loading code which declares static
     instances from the toplevel shell, predicate `use_module/1')
     will not work properly: those instances may be not correctly
     created, and predicates will fail whenever they are not supposed
     to do. This may be avoided by reloading again the involved
     module, but make sure it is modified and saved to disk before
     doing so.


File: ciao.info,  Node: The Ciao Remote Services Package,  Next: *** PART VIII - Interfaces to other languages and systems,  Prev: Run time usage of objects,  Up: Top

The Ciao Remote Services Package
********************************

   *Author(s):* Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#17 (2000/9/11, 16:58:15 CEST)

* Menu:

* Usage and interface (remote)::
* Documentation on exports (remote)::
* Known bugs and planned improvements (remote)::


File: ciao.info,  Node: Usage and interface (remote),  Next: Documentation on exports (remote),  Prev: The Ciao Remote Services Package,  Up: The Ciao Remote Services Package

Usage and interface (`remote')
==============================

   * *Library usage:*

     `:- use_module(library(remote)).'

   * *Other modules used:*
        - _System library modules:_

          `remote/ciao_client_rt'.




File: ciao.info,  Node: Documentation on exports (remote),  Next: Known bugs and planned improvements (remote),  Prev: Usage and interface (remote),  Up: The Ciao Remote Services Package

Documentation on exports (`remote')
===================================

 - (: UNDOC_REEXPORT) @/2:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) @/2:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) server_stop/1:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) server_stop/1:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) server_trace/1:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) server_trace/1:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) server_notrace/1:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) server_notrace/1:
     Imported from `ciao_client_rt' (see the corresponding
     documentation for details).





File: ciao.info,  Node: Known bugs and planned improvements (remote),  Prev: Documentation on exports (remote),  Up: The Ciao Remote Services Package

Known bugs and planned improvements (`remote')
==============================================

   * Dynamic loading of code not yet implemented.

   * :- remote/1 predicate declaration not yet implemented.

   * Remote use of modules (http, ftp, ciaotp) not yet implemented.

   * Remote creation of objects not yet implemented.

   * Code migration not yet implemented (several algorithms possible).

   * Evaluation of impact of marshalling and/or attribute encoding
     not yet done.

   * Secure transactions not yet implemented.


File: ciao.info,  Node: *** PART VIII - Interfaces to other languages and systems,  Next: Foreign Language Interface,  Prev: The Ciao Remote Services Package,  Up: Top

PART VIII - Interfaces to other languages and systems
*****************************************************

   The following interfaces to/from Ciao Prolog are documented in
this part:
   * External interface (e.g., to C).

   * Socket interface.

   * Tcl/tk interface.

   * Web interface (http, html, xml, etc.);

   * Persistent predicate databases (interface between the Prolog
     internal database and the external file system).

   * SQL-like database interface (interface between the Prolog
     internal database and external SQL/ODBC systems).

   * Java interface.

   * Calling emacs from Prolog.


File: ciao.info,  Node: Foreign Language Interface,  Next: Foreign Language Interface Properties,  Prev: *** PART VIII - Interfaces to other languages and systems,  Up: Top

Foreign Language Interface
**************************

   *Author(s):* Jose Morales, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#206 (2002/4/22, 21:0:27 CEST)

   Ciao Prolog includes a high-level, flexible way to interface C and
Prolog, based on the use of assertions to declare what are the
expected types and modes of the arguments of a Prolog predicate, and
which C files contain the corresponding code. To this end, the user
provides:

   * A set of C files, or a precompiled shared library,

   * A Ciao Prolog module defining whith predicates are implemented
     in the C files and the types and modes of their arguments, and

   * an (optional) set of flags required for the compilation of the
     files.

   The Ciao Prolog compiler analyzes the Prolog code written by the
user and gathers this information in order to generate automatically
C "glue" code implementing the data translation between Prolog and C,
and to compile the C code into dynamically loadable C object files,
which are linked automatically when needed.

* Menu:

* Declaration of Types::
* Equivalence between Ciao Prolog and C types::
* Equivalence between Ciao Prolog and C modes::
* Custom access to Prolog from C::
* Examples::
* Usage and interface (foreign_interface)::


File: ciao.info,  Node: Declaration of Types,  Next: Equivalence between Ciao Prolog and C types,  Prev: Foreign Language Interface,  Up: Foreign Language Interface

Declaration of Types
====================

   Each predicate implemented as a foreign C function must have
accompanying declarations in the Ciao Prolog associated file stating
the types and modes of the C function. A sample declaration for
`prolog_predicate' which is implemented as `foreign_function_name' is:

          :- true pred prolog_predicate(m1(Arg1), ... mN(ArgN)) ::
                       type1 * ... * typeN +
                       (foreign(foreign_function_name), returns(ArgR)).
     
          :- impl_defined([..., prolog_predicate/N, ...]).

   where `m1', ..., `mN' and `type1', ..., `typeN' are respectively
the modes and types of the arguments. `foreign_function_name' is the
name of the C function implementing `prolog_predicate/N', and the
result of this function is unified with `ArgR', which must be one of
`Arg1' ... `ArgN'.

   This notation can be simplified in several ways. If the name of
the foreign function is the same as the name of the Ciao Prolog
predicate, `foreign(foreign_function_name)' can be replaced by
`foreign/0'. `returns(ArgR)' specifies that the result of the
function corresponds to the `ArgR' argument of the Ciao Prolog
predicate. If the foreign function does not return anything (or if
its value is ignored), then `returns(ArgR)' must be removed. Note
that `returns' cannot be used without `foreign'. A simplified,
minimal form is thus:

          :- true pred prolog_predicate(m1(Arg1), ... mN(ArgN)) ::
                       type1 * ... * typeN + foreign.


File: ciao.info,  Node: Equivalence between Ciao Prolog and C types,  Next: Equivalence between Ciao Prolog and C modes,  Prev: Declaration of Types,  Up: Foreign Language Interface

Equivalence between Ciao Prolog and C types
===========================================

   The automatic translation between Ciao Prolog and C types is
defined (at the moment) only for some simple but useful types. The
translation to be performed is solely defined by the types of the
arguments in the Ciao Prolog file (i.e., no inspection of the
corresponding C file is done). The names (and meaning) of the types
known for performing that translation are to be found in *Note
Foreign Language Interface Properties::; they are also summarized
below (Prolog types are on the left, and the corresponding C types on
the right):

   * num <-> double

   * int <-> int

   * atm <-> char *

   * string <-> char * (with trailing zero)

   * byte_list <-> char * (a buffer of bytes, with associated length)

   * int_list <-> int * (a buffer of integers, with associated length)

   * address <-> void *

   Strings, atoms, and lists of bytes are passed to (and from) C as
dynamically (`malloc') created arrays of characters (bytes). Those
arrays are freed by Ciao Prolog upon return of the foreign function
unless the property `do_not_free/2' is specified (see examples
below). This caters for the case in which the C files save in a
private state (either by themselves, or by a library function being
called by them) the values passed on from Prolog. The type
`byte_list/1' requires an additional property, `size_of/2', to
indicate which argument represents its size.

   Empty lists of bytes and integers are converted into C `NULL'
pointers, and vice versa. Empty strings (`[]') and null atoms (") are
converted into zero-length, zero-ended C strings (_""_). C `NULL'
strings and empty buffers (i.e., buffers with zero length) are
transformed into the empty list or the null atom (`''').

   Most of the work is performed by the predicates in the *Note
Foreign Language Interface Builder::, which can be called explicitly
by the user. Doing that is not usually needed, since the Ciao Prolog
Compiler takes care of building glue code files an of compiling and
linking whatever is necessary.


File: ciao.info,  Node: Equivalence between Ciao Prolog and C modes,  Next: Custom access to Prolog from C,  Prev: Equivalence between Ciao Prolog and C types,  Up: Foreign Language Interface

Equivalence between Ciao Prolog and C modes
===========================================

   The (prefix) `+/1' ISO mode (or, equivalently, the in/1 mode)
states that the corresponding Prolog argument is ground at the time
of the call, and therefore it is an input argument in the C part;
this groundness is automatically checked upon entry. The (prefix)
`-/1' ISO mode (or, equivalently, the go/1 mode) states that Prolog
expects the C side to generate a (ground) value for that argument.
Arguments with output mode should appear in C functions as pointers
to the corresponding base type (as it is usual with C), i.e., an
argument which is an integer generated by the C file, declared as

     :- true pred get_int(go(ThisInt)) :: int + foreign

   or as

     :- true pred get_int(-ThisInt) :: int + foreign

   should appear in the C code as

     void get_int(int *thisint)
     {
             ....
     }

   Note the type of the (single) argument of the function. Besides,
the return value of a function can always be used as an output
argument, just by specifying to which Prolog arguments it
corresponds, using the `foreing/1' property. The examples below
illustrate this point, and the use of several assertions to guide the
compilation.


File: ciao.info,  Node: Custom access to Prolog from C,  Next: Examples,  Prev: Equivalence between Ciao Prolog and C modes,  Up: Foreign Language Interface

Custom access to Prolog from C
==============================

   Automatic type conversions does not cover all the possible cases.
When the automatic type conversion is not enough (or if the user, for
any reason, does not want to go through the automatic conversion), it
is possible to instruct Ciao Prolog not to make implicit type
conversion. The strategy in that case is to pass the relevant
argument(s) with a special type (a `ciao_term') which can represent
any term which can be built in Prolog. Operations to construct,
traverse, and test this data abstraction from C are provided. The
prototypes of these operations are placed on the `"ciao_prolog.h"'
file, under the `include' subdirectory of the installation directory
(the Ciao Prolog compiler knowns where it has been installed, and
gives the C compiler the appropriate flags). This _non direct
correspondence_ mode is activated whenever a Ciao Prolog type unknown
to the foreign interface (i.e., none of these in *Note Foreign
Language Interface Properties::) or the type `any_term' (which is
explicitly recognised by the foreign language interface) is found.
The latter is preferred, as it is much more informative, and external
tools, as the the CiaoPP preprocessor, can take advantage of them.

* Menu:

* Term construction::
* Testing the Type of a Term::
* Term navigation::
* Testing for Equality and Performing Unification::
* Raising Exceptions::
* Calling Prolog from C::


File: ciao.info,  Node: Term construction,  Next: Testing the Type of a Term,  Prev: Custom access to Prolog from C,  Up: Custom access to Prolog from C

Term construction
-----------------

   All term construction primitives return an argument of type
`ciao_term', which is the result of constructing a term. All Ciao
Prolog terms can be built using the interface operations
`ciao_var()', `ciao_structure()', `ciao_integer()', and
`ciao_float()'. There are, however, variants and specialized versions
of these operations which can be freely intermixed. Using one version
or another is a matter of taste and convenience. We list below the
prototypes of the primitives in order of complexity.

   * `ciao_term ciao_var();'

     Returns a fresh, unbound variable.

   * `ciao_term ciao_integer(int i);'

     Creates a term, representing an integer from the Prolog point of
     view, from a C integer.

   * `ciao_term ciao_float(double i);'

     Creates a term, representing a floating point number, from a
     floating point number.

   * `ciao_term ciao_atom(char *name);'

     Creates an atom whose printable name is given as a C string.

   * `ciao_term ciao_structure_a(char *name, int arity, ciao_term
     *args);'

     Creates a structure with name 'name' (i.e., the functor name ),
     arity 'arity' and the components of the array 'args' as
     arguments: `args[0]' will be the first argument, `args[1]' the
     second, and so on. The 'args' array itself is not needed after
     the term is created, and can thus be a variable local to a
     procedure. An atom can be represented as a 0-arity structure
     (with `ciao_structure(name, 0)'), and a list cell can be
     constructed using the '.'/2 structure name. The `_a' suffix
     stands for _array_.

   * `ciao_term ciao_structure(char *name, int arity, ...);'

     Similar to ciao_structure_a, but the C arguments after the arity
     are used to fill in the arguments of the structure.

   * `ciao_term ciao_list(ciao_term head, ciao_term tail);'

     Creates a list from a `head' and a `tail'. It is equivalent to
     `ciao_structure(".", 2, head, tail)'.

   * `ciao_term ciao_empty_list();'

     Creates an empty list. It is equivalent to `ciao_atom("[]")'.

   * `ciao_term ciao_listn_a(int len, ciao_term *args);'

     Creates a list with 'len' elements from the array `args'. The
     _nth_ element of the list (starting at 1) is `args[n-1]'
     (starting at zero).

   * `ciao_term ciao_listn(int length, ...);'

     Like `ciao_listn_a()', but the list elements appear explicitly
     as arguments in the call.

   * `ciao_term ciao_dlist_a(int len, ciao_term *args, ciao_term
     base);'

     Like `ciao_listn_a', but a difference list is created. `base'
     whill be used as the tail of the list, instead of the empty list.

   * `ciao_term ciao_dlist(int length, ...);'

     Similar to `ciao_dlist_a()' with a variable number of arguments.
     The last one is the tail of the list.

   * `ciao_term ciao_copy_term(ciao_term src_term);'

     Returns a new copy of the `term', with fresh variables (as
     `copy_term/2' does).



File: ciao.info,  Node: Testing the Type of a Term,  Next: Term navigation,  Prev: Term construction,  Up: Custom access to Prolog from C

Testing the Type of a Term
--------------------------

   A `ciao_term' can contain _any_ Prolog term, and its
implementation is opaque to the C code. Therefore the only way to
know reliably what data is passed on is using explicit functions to
test term types. Below, `ciao_bool' is a type defined in
`"ciao_prolog.h"' which can take the values 1 (for *true*) and 0 (for
*false*).

   * `ciao_bool ciao_is_variable(ciao_term term);'

     Returns true if `term' is currently an uninstantiated variable.

   * `ciao_bool ciao_is_integer(ciao_term term);'

     Returns true if `term' is instantiated to an integer.

   * `ciao_bool ciao_is_number(ciao_term term);'

     Returns true if `term' is an integer or a floating point number.

   * `ciao_bool ciao_is_atom(ciao_term atom);'

     Returns true if `term' is an atom.

   * `ciao_bool ciao_is_list(ciao_term term);'

     Returns true if `term' is a list (actually, a `cons' cell).

   * `ciao_bool ciao_is_empty_list(ciao_term term);'

     Returns true if `term' is the atom which represents the empty
     list (i.e., `[]').

   * `ciao_bool ciao_is_structure(ciao_term term);'

     Returns true if `term' is a structure of any arity. This
     includes atoms (i.e., structures of arity zero) and lists, but
     excludes variables and numbers.



File: ciao.info,  Node: Term navigation,  Next: Testing for Equality and Performing Unification,  Prev: Testing the Type of a Term,  Up: Custom access to Prolog from C

Term navigation
---------------

   The functions below can be used to recover the value of a
`ciao_term' into C variables, or to inspect Prolog structures.

   * `int ciao_to_integer(ciao_term term); '

     Converts `term' to an integer. `ciao_is_integer(term)' must hold.

   * `double ciao_to_float(ciao_term term);'

     Converts `term' to a float value. `ciao_is_number(term)' must
     hold.

   * `char *ciao_atom_name(ciao_term atom);'

     Returns the name of the atom. The returned string _is the one
     internally used by Ciao Prolog_, and should not be changed or
     altered in any form. The advantage of using it is that it is
     fast.

   * `char *ciao_atom_name_dup(ciao_term atom);'

     Obtains a *copy* of the name of the atom. The string can be
     modified, and the programmer has the responsibility of
     deallocating it after being used. Due to the copy, it is slower
     than calling `char *ciao_atom_name()'.

   * `ciao_term ciao_list_head(ciao_term term);'

     Extracts the head of the list `term'. Requires `term' to be a
     list.

   * `ciao_term ciao_list_tail(ciao_term term);'

     Extracts the tail of the list `term'. Requires `term' to be a
     list.

   * `char *ciao_structure_name(ciao_term term);'

     Extracts the name of the structure `term'. Requires `term' to be
     a structure.

   * `int ciao_structure_arity(ciao_term term);'

     Extracts the arity of the structure `term'.

     Requires `term' to be a structure.

   * `ciao_term ciao_structure_arg(ciao_term term, int n);'

     Extracts the _nth_ argument of the structure `term'. It behaves
     like `arg/3', so the first argument has index 1. Requires `term'
     to be a structure.



File: ciao.info,  Node: Testing for Equality and Performing Unification,  Next: Raising Exceptions,  Prev: Term navigation,  Up: Custom access to Prolog from C

Testing for Equality and Performing Unification
-----------------------------------------------

   Variables of type `ciao_term' cannot be tested directly for
equality: they are (currently) implemented as a sort of pointers
which may be aliased (two different pointers may refer to the same
object). The interface provides helper functions for testing term
equality and to perform unification of terms.

   * `ciao_bool ciao_unify(ciao_term x, ciao_term y);'

     Performs the unification of the terms `x' and `y', and returns
     true if the unification was successful. This is equivalent to
     calling the (infix) Prolog predicate `=/2'. The bindings are
     trailed and undone on backtracking.

   * `ciao_bool ciao_equal(ciao_term x, ciao_term y);'

     Performs equality testing of terms, and returns true if the test
     was successful. This is equivalent to calling the (infix) Prolog
     predicate `==/2'. Equality testing does not modify the terms
     compared.



File: ciao.info,  Node: Raising Exceptions,  Next: Calling Prolog from C,  Prev: Testing for Equality and Performing Unification,  Up: Custom access to Prolog from C

Raising Exceptions
------------------

   The following functions offers a way of throwing exceptions from C
that can be caught in Prolog with `catch/3'. The term that reaches
Prolog is exactly the same which was thrown by C. The execution flow
is broken at the point where `ciao_raise_exception()' is executed,
and it returns to Prolog.

   * `void ciao_raise_exception(ciao_term ball);'

     Raises an exception an throws the term `ball'.



File: ciao.info,  Node: Calling Prolog from C,  Prev: Raising Exceptions,  Up: Custom access to Prolog from C

Calling Prolog from C
---------------------

   It is also possible to make arbitraty calls to Prolog predicates
from C. There are two basic ways of make a query, depending if only
one solution is needed (or if the predicate to be called is known to
generate only one solution), or if several solutions are required.

   When only one solution is needed `ciao_commit_call' obtains it
(obviously, the first) and discards the resources used for finding it:

   * `ciao_bool ciao_commit_call(char *name, int arity, ...);'

     Makes a call to a predicate and returns true or false depending
     on whether the query has succedeed or not. In case of success,
     the (possibly) instantiated variables are reachable from C.

   * `ciao_bool ciao_commit_call_term(ciao_term goal);'

     Like `ciao_commit_call()' but uses the previously built term
     `goal' as goal.


   If more than one solution is needed, it is necessary to use the
`ciao_query' operations. A consult begins with a `ciao_query_begin'
which returns a `ciao_query' object. Whenever an additional solution
is required, the `ciao_query_next' function can be called. The query
ends by calling `ciao_query_end' and all pending search branches are
pruned.

   * `ciao_query *ciao_query_begin(char *name, int arity, ...);'

     The predicate with the given name, arity and arguments (similar
     to the `ciao_structure()' operation) is transformed into a
     `ciao_query' object which can be used to make the actual query.

   * `ciao_query *ciao_query_begin_term(ciao_term goal);'

     Like ciao_query_begin but using the term `goal' instead.

   * `ciao_bool ciao_query_ok(ciao_query *query);'

     Determines whether the query may have pending solutions. A false
     return value means that there are no more solutions; a true
     return value means that there are more possible solutions.

   * `void ciao_query_next(ciao_query *query);'

     Ask for a new solution.

   * `void ciao_query_end(ciao_query *query);'

     Ends the query and frees the used resources.



File: ciao.info,  Node: Examples,  Next: Usage and interface (foreign_interface),  Prev: Custom access to Prolog from C,  Up: Foreign Language Interface

Examples
========

* Menu:

* Mathematical functions::
* Addresses and C pointers::
* Lists of bytes and buffers::
* Lists of integers::
* Strings and atoms::
* Arbitrary Terms::
* Exceptions::


File: ciao.info,  Node: Mathematical functions,  Next: Addresses and C pointers,  Prev: Examples,  Up: Examples

Mathematical functions
----------------------

   In this example, the standard mathematical library is accessed to
provide the _sin_, _cos_, and _fabs_ functions. Note that the library
is specified simply as

     :- use_foreign_library([m]).

   The foreign interface adds the `-lm' at compile time. Note also
how some additional options are added to optimize the compiled code
(only glue code, in this case) and mathematics (only in the case of
Linux in an Intel processor).

   The functions imported from the C file, and exported as predicates
by the Prolog module are stated as defined elsewhere by the directive

     :- impl_defined([sin/2,cos/2,fabs/2]).

   so that the Prolog compiler does not complain when examining the
Prolog file.

   *File* _math.pl_:

     :- module(math, [sin/2, cos/2, fabs/2],
                     [assertions, basicmodes, regtypes, foreign_interface]).
     
     :- true pred sin(in(X),go(Y)) :: num * num + (foreign,returns(Y)).
     :- true pred cos(in(X),go(Y)) :: num * num + (foreign,returns(Y)).
     :- true pred fabs(in(X),go(Y)) :: num * num + (foreign,returns(Y)).
     
     :- extra_compiler_opts(['-O2']).
     :- extra_compiler_opts('LINUXi86',['-ffast-math']).
     :- use_foreign_library([m]).
     
     :- impl_defined([sin/2,cos/2,fabs/2]).


File: ciao.info,  Node: Addresses and C pointers,  Next: Lists of bytes and buffers,  Prev: Mathematical functions,  Up: Examples

Addresses and C pointers
------------------------

   The `address' type designates any pointer, and provides a means to
deal with C pointers in Prolog without interpreting them whatsoever.
The C source file which implements the operations accessed from
Prolog is declared with the

     :- use_foreign_source(objects_c).

   directive.

   *File* _objects.pl_:

     :- module(objects, [object/2, show_object/1],
                        [assertions, basicmodes, regtypes, foreign_interface]).
     
     :- true pred object(in(N),go(Object)) :: int * address +
                                              (foreign,returns(Object)).
     
     :- true pred show_object(in(Object)) :: address + foreign.
     
     :- use_foreign_source(objects_c).
     :- extra_compiler_opts('-O2').
     
     :- impl_defined([object/2,show_object/1]).

   *File* _objects_c.c_:

     #include <stdio.h>
     
     struct object {
       char *name;
       char *colour;
     };
     
     #define OBJECTS 3
     
     struct object objects[OBJECTS] =
     { {"ring","golden"},
       {"table","brown"},
       {"bottle","green"} };
     
     struct object *object(int n) {
       return &objects[n % OBJECTS];
     }
     
     void show_object(struct object *o) {
       printf("I show you a %s %s\n", o->colour, o->name);
     }


File: ciao.info,  Node: Lists of bytes and buffers,  Next: Lists of integers,  Prev: Addresses and C pointers,  Up: Examples

Lists of bytes and buffers
--------------------------

   A list of bytes (c.f., a list of ints) corresponds to a byte
buffer in C. The length of the buffer is associated to that of the
list using the property `size_of/2'. The returned buffer *is freed by
Ciao Prolog* upon its recepction, unless the `do_not_free/1' property
is specified (see later). Conversely, a list of natural numbers in
the range 0 to 255 can be passed to C as a buffer.

   *File* _byte_lists.pl_:

     :- module(byte_lists, [obtain_list/3, show_list/2],
                           [assertions, basicmodes, regtypes, foreign_interface]).
     
     :- true pred obtain_list(in(N),go(Length),go(List)) ::
                  int * int * byte_list +
                  (foreign,size_of(List,Length)).
     :- true pred show_list(in(Length),in(List)) ::
                  int * byte_list +
                  (foreign,size_of(List,Length)).
     
     :- use_foreign_source(bytes_op).
     
     :- impl_defined([obtain_list/3,show_list/2]).

   *File* _bytes_op.c_:

     #include <malloc.h>
     #include <stdio.h>
     
     void obtain_list(int n, int *l, char **s) {
       int i, c;
       if (n < 0) n = 0;
       *l = n;
       *s = (char *)malloc(*l);
       for (i = 0; i < *l; i++) {
         (*s)[i] = i;
       }
     }
     
     void show_list(int l, char *s) {
       if (s) {
         int n;
         printf("From C: [");
         for (n = 0; n < l; n++) {
           printf(" %d", s[n]);
         }
         printf("]\n");
       } else {
         printf("From C: []\n");
       }
     }


File: ciao.info,  Node: Lists of integers,  Next: Strings and atoms,  Prev: Lists of bytes and buffers,  Up: Examples

Lists of integers
-----------------

   *File* _int_lists.pl_:

     :- module(int_lists, [obtain_list/3, show_list/2],
                          [assertions, basicmodes, regtypes, foreign_interface]).
     
     :- true pred obtain_list(in(N),go(Length),go(List)) ::
                  int * int * int_list +
                  (foreign,size_of(List,Length)).
     :- true pred show_list(in(Length),in(List)) ::
                  int * int_list +
                  (foreign,size_of(List,Length)).
     
     :- use_foreign_source(ints_op).
     
     :- impl_defined([obtain_list/3,show_list/2]).

   *File* _ints_op.c_:

     #include <malloc.h>
     #include <stdio.h>
     
     void obtain_list(int n, int *l, int **s) {
       int i;
       int c;
       if (n < 0) n = 0;
       *l = n;
       *s = (int *)malloc((*l) * sizeof(int));
       for (i = 0; i < *l; i++) {
         (*s)[i] = i;
       }
     }
     
     void show_list(int l, int *s) {
       if (s) {
         int n;
         printf("From C:");
         for (n = 0; n < l; n++) {
           printf(" %d", s[n]);
         }
         printf(".\n");
       } else {
         printf("From C: []\n");
       }
     }


File: ciao.info,  Node: Strings and atoms,  Next: Arbitrary Terms,  Prev: Lists of integers,  Up: Examples

Strings and atoms
-----------------

   A C string can be seen as a buffer whose end is denoted by the
trailing zero, and therefore stating its length is not needed. Two
translations are possible into Ciao Prolog: as a Prolog string (list
of bytes, with no trailing zero) and as an atom. These are selected
automatically just by choosing the corresponding type (look at the
examples below).

   Note how the `do_not_free/1' property is specified in the
`a_string/1' predicate: the string returned by C is static, and
therefore it should not be freed by Prolog.

   *File* _strings_and_atoms.pl_:

     :- module(strings_and_atoms,
               [lookup_string/2, lookup_atom/2, a_string/1,
                show_string/1, show_atom/1],
               [assertions, basicmodes, regtypes, foreign_interface]).
     
     
     :- true pred a_string(go(S)) ::	string +
                  (foreign(get_static_str),returns(S),do_not_free(S)).
     
     :- true pred lookup_string(in(N),go(S)) ::
                  int * string +
                  (foreign(get_str),returns(S)).
     :- true pred lookup_atom(in(N),go(S)) ::
     	     int * atm +
                  (foreign(get_str),returns(S)).
     
     :- true pred show_string(in(S)) :: string + foreign(put_str).
     :- true pred show_atom(in(S)) :: atm + foreign(put_str).
     
     :- use_foreign_source(str_op).
     
     :- impl_defined([lookup_string/2,lookup_atom/2,
                      show_string/1,show_atom/1, a_string/1]).

   *File* _str_op.c_:

     #include <malloc.h>
     #include <stdio.h>
     
     char *get_static_str() {
       return "this is a string Ciao Prolog should not free";
     }
     
     char *get_str(int n) {
       char *s;
       int size;
       int i;
       int c;
       if (n < 0) n = -n;
       size = (n%4) + 5;
       s = (char *)malloc(size+1);
       for (i = 0, c = ((i + n) % ('z' - 'a' + 1)) + 'a'; i < size; i++,c++) {
         if (c > 'z') c = 'a';
         s[i] = c;
       }
       s[i] = 0;
       return s;
     }
     
     void put_str(char *s) {
       if (s) {
         printf("From C: \"%s\"\n", s);
       } else {
         printf("From C: null\n");
       }
     }


File: ciao.info,  Node: Arbitrary Terms,  Next: Exceptions,  Prev: Strings and atoms,  Up: Examples

Arbitrary Terms
---------------

   This example shows how data Prolog can be passed untouched to C
code, and how it can be manipulated there.

   *File* _any_term.pl_:

     :- module(any_term, [custom_display_term/1, custom_create_term/2],
                         [assertions, basicmodes, regtypes, foreign_interface]).
     
     :- true pred custom_display_term(in(X)) :: any_term + foreign.
     :- true pred custom_create_term(in(L), go(X)) ::
                  int * any_term + (foreign,returns(X)).
     
     :- use_foreign_source(any_term_c).
     :- extra_compiler_opts('-O2').
     
     :- impl_defined([custom_display_term/1,custom_create_term/2]).

   *File* _any_term.c_:

     #include <stdio.h>
     #include "ciao_prolog.h"
     
     ciao_term custom_create_term(int n) {
       ciao_term t;
       t = ciao_empty_list();
       while (n > 0) {
         t = ciao_list(ciao_integer(n), t);
         n--;
       }
       return t;
     }
     
     void custom_display_term(ciao_term term) {
       if (ciao_is_atom(term)) {
         printf("<atom name=\"%s\"/>", ciao_atom_name(term));
       } else if (ciao_is_structure(term)) {
         int i;
         int a;
         a = ciao_structure_arity(term);
         printf("<structure name=\"%s\" arity=\"%d\">",
                ciao_structure_name(term), a);
         for (i = 1; i <= a; i++) {
           printf("<argument number=\"%d\">", i);
           custom_display_term(ciao_structure_arg(term, i));
           printf("</argument>");
         }
         printf("</structure>");
       } else if (ciao_is_list(term)) {
         printf("<list>");
         printf("<head>");
         custom_display_term(ciao_list_head(term));
         printf("</head>");
         printf("<tail>");
         custom_display_term(ciao_list_tail(term));
         printf("</tail>");
         printf("</list>");
       } else if (ciao_is_empty_list(term)) {
         printf("<empty_list/>");
       } else if (ciao_is_integer(term)) {
         printf("<integer value=\"%d\"/>", ciao_to_integer(term));
       } else if (ciao_is_number(term)) {
         printf("<float value=\"%f\"/>", ciao_to_float(term));
       } else {
         printf("<unknown/>");
       }
     }


File: ciao.info,  Node: Exceptions,  Prev: Arbitrary Terms,  Up: Examples

Exceptions
----------

   The following example defines a predicate in C that converts a
list of codes into a number using `strtol()'. If this conversion
fails, then a exception is raised.

   *File* _exceptions_example.pl_:

     :- module(exceptions_example,
               [codes_to_number_c/2, safe_codes_to_number/2],
               [assertions, basicmodes, regtypes, foreign_interface]).
     
     :- use_module(library(format)).
     
     % If the string is not a number, an exception is raised.
     :- true pred codes_to_number_c(in(X), go(Y)) ::
                  string * int + (foreign, returns(Y)).
     
     safe_codes_to_number(X, Y) :-
             catch(codes_to_number_c(X, Y), Error, handle_exception(Error)).
     
     handle_exception(Error) :- format("Exception caught ~w~n", [Error]).
     
     :- use_foreign_source(exceptions_c).
     :- extra_compiler_opts('-O2').
     
     :- impl_defined([codes_to_number_c/2]).

   *File* _exceptions_c.c_:

     #include <string.h>
     #include "ciao_prolog.h"
     
     int codes_to_number_c(char *s) {
       char *endptr;
       int n;
       n = strtol(s, &endptr, 10);
       if (endptr == NULL || *endptr != '\0') {
         ciao_raise_exception(ciao_structure("codes_to_number_exception", 1,
                              ciao_atom(s)));
       }
       return n;
     }


File: ciao.info,  Node: Usage and interface (foreign_interface),  Prev: Examples,  Up: Foreign Language Interface

Usage and interface (`foreign_interface')
=========================================

   * *Library usage:*

     The foreign interface is used by including `foreign_interface'
     in the include list of a module, or by means of an explicit `:-
     use_package(foreign_interface)'.


File: ciao.info,  Node: Foreign Language Interface Properties,  Next: Utilities for on-demand compilation of foreign files,  Prev: Foreign Language Interface,  Up: Top

Foreign Language Interface Properties
*************************************

   *Author(s):* Jose Morales, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#77 (2001/3/26, 18:45:31 CEST)

* Menu:

* Usage and interface (foreign_interface_properties)::
* Documentation on exports (foreign_interface_properties)::
* Documentation on internals (foreign_interface_properties)::
* Known bugs and planned improvements (foreign_interface_properties)::


File: ciao.info,  Node: Usage and interface (foreign_interface_properties),  Next: Documentation on exports (foreign_interface_properties),  Prev: Foreign Language Interface Properties,  Up: Foreign Language Interface Properties

Usage and interface (`foreign_interface_properties')
====================================================

   * *Library usage:*

     `:- use_module(library(foreign_interface_properties)).'

   * *Exports:*
        - _Properties:_

          `native/1', `native/2', `size_of/3', `foreign/1',
          `foreign/2', `returns/2', `do_not_free/2'.

        - _Regular Types:_

          `int_list/1', `byte_list/1', `byte/1', `null/1',
          `address/1', `any_term/1'.




File: ciao.info,  Node: Documentation on exports (foreign_interface_properties),  Next: Documentation on internals (foreign_interface_properties),  Prev: Usage and interface (foreign_interface_properties),  Up: Foreign Language Interface Properties

Documentation on exports (`foreign_interface_properties')
=========================================================

 - REGTYPE: int_list/1:
     *Usage:* `int_list(List)'
        - _Description:_ `List' is a list of integers.



 - REGTYPE: byte_list/1:
     *Usage:* `byte_list(List)'
        - _Description:_ `List' is a list of bytes.



 - REGTYPE: byte/1:
     *Usage:* `byte(Byte)'
        - _Description:_ `Byte' is a byte.



 - REGTYPE: null/1:
     *Usage:* `null(Address)'
        - _Description:_ `Address' is a null adress.



 - REGTYPE: address/1:
     *Usage:* `address(Address)'
        - _Description:_ `Address' is a memory address.



 - REGTYPE: any_term/1:
     *Usage:* `any_term(X)'
        - _Description:_ `X' is any term. The foreign interface
          passes it to C functions as a general term.



 - PROPERTY: native/1:
     *Usage:* `native(Name)'
        - _Description:_ The Prolog predicate `Name' is implemented
          using the function `Name'. The implementation is not a
          common C one, but it accesses directly the internal Ciao
          Prolog data structures and functions, and therefore no glue
          code is generated for it.



 - PROPERTY: native/2:
     *Usage:* `native(PrologName,ForeignName)'
        - _Description:_ The Prolog predicate `PrologName' is
          implemented using the function prolog_`ForeignName'. The
          same considerations as above example are to be applied.



 - PROPERTY: size_of/3:
     *Usage:* `size_of(Name,ListVar,SizeVar)'
        - _Description:_ For predicate `Name', the size of the
          argument of type `byte_list/1', `ListVar', is given by the
          argument of type integer `SizeVar'.



 - PROPERTY: foreign/1:
     *Usage:* `foreign(Name)'
        - _Description:_ The Prolog predicate `Name' is implemented
          using the foreign function `Name'.



 - PROPERTY: foreign/2:
     *Usage:* `foreign(PrologName,ForeignName)'
        - _Description:_ The Prolog predicate `PrologName' is
          implemented using the foreign function `ForeignName'.



 - PROPERTY: returns/2:
     *Usage:* `returns(Name,Var)'
        - _Description:_ The result of the foreign function that
          implements the Prolog predicate `Name' is unified with the
          Prolog variable `Var'. Cannot be used without `foreign/1' or
          `foreign/2'.



 - PROPERTY: do_not_free/2:
     *Usage:* `do_not_free(Name,Var)'
        - _Description:_ For predicate `Name', the C argument passed
          to (returned from) the foreign function will not be freed
          after calling the foreign function.




File: ciao.info,  Node: Documentation on internals (foreign_interface_properties),  Next: Known bugs and planned improvements (foreign_interface_properties),  Prev: Documentation on exports (foreign_interface_properties),  Up: Foreign Language Interface Properties

Documentation on internals (`foreign_interface_properties')
===========================================================

 - DECLARATION: use_foreign_source/1:
     *Usage:* :- `use_foreign_source(Files)'.
        - _Description:_ `Files' is the (list of) foreign file(s)
          that will be linked with the glue-code file.

        - _The following properties hold at call time:_

          `Files' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: use_foreign_source/2:
     *Usage:* :- `use_foreign_source(OsArch,Files)'.
        - _Description:_ `Files' are the OS and architecture
          dependant foreign files. This allows compiling and linking
          different files depending on the O.S. and architecture.

        - _The following properties hold at call time:_

          `OsArch' is an atom.   (`basic_props:atm/1')

          `Files' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: use_foreign_library/1:
     *Usage:* :- `use_foreign_library(Libs)'.
        - _Description:_ `Libs' is the (list of) external library(es)
          needed to link the C files. Only the short name of the
          library (i.e., what would follow the `-l' in the linker is
          needed.

        - _The following properties hold at call time:_

          `Libs' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: use_foreign_library/2:
     *Usage:* :- `use_foreign_library(OsArch,Libs)'.
        - _Description:_ `Libs' are the OS and architecture dependant
          libraries.

        - _The following properties hold at call time:_

          `OsArch' is an atom.   (`basic_props:atm/1')

          `Libs' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: extra_compiler_opts/1:
     *Usage:* :- `extra_compiler_opts(Opts)'.
        - _Description:_ `Opts' is the list of additional compiler
          options (e.g., optimization options) that will be used
          during the compilation.

        - _The following properties hold at call time:_

          `Opts' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: extra_compiler_opts/2:
     *Usage:* :- `extra_compiler_opts(OsArch,Opts)'.
        - _Description:_ `Opts' are the OS and architecture dependant
          additional compiler options.

        - _The following properties hold at call time:_

          `OsArch' is an atom.   (`basic_props:atm/1')

          `Opts' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: use_compiler/1:
     *Usage:* :- `use_compiler(Compiler)'.
        - _Description:_ `Compiler' is the compiler to use in this
          file. When this option is used, the default (Ciao-provided)
          compiler options are not used; those specified in
          `extra_compiler_options' are used instead.

        - _The following properties hold at call time:_

          `Compiler' is an atom.   (`basic_props:atm/1')



 - DECLARATION: use_compiler/2:
     *Usage:* :- `use_compiler(OsArch,Compiler)'.
        - _Description:_ `Compiler' is the compiler to use in this
          file when compiling for the architecture `OsArch'. The
          option management is the same as in `use_compiler/2'.

        - _The following properties hold at call time:_

          `OsArch' is an atom.   (`basic_props:atm/1')

          `Compiler' is an atom.   (`basic_props:atm/1')



 - DECLARATION: extra_linker_opts/1:
     *Usage:* :- `extra_linker_opts(Opts)'.
        - _Description:_ `Opts' is the list of additional linker
          options that will be used during the linkage.

        - _The following properties hold at call time:_

          `Opts' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: extra_linker_opts/2:
     *Usage:* :- `extra_linker_opts(OsArch,Opts)'.
        - _Description:_ `Opts' are the OS and architecture dependant
          additional linker options.

        - _The following properties hold at call time:_

          `OsArch' is an atom.   (`basic_props:atm/1')

          `Opts' is an atom or a list of atoms.
          (`basic_props:atm_or_atm_list/1')



 - DECLARATION: use_linker/1:
     *Usage:* :- `use_linker(Linker)'.
        - _Description:_ `Linker' is the linker to use in this file.
          When this option is used, the default (Ciao-provided)
          linker options are not used; those specified in
          `extra_linker_options/1' are used instead.

        - _The following properties hold at call time:_

          `Linker' is an atom.   (`basic_props:atm/1')



 - DECLARATION: use_linker/2:
     *Usage:* :- `use_linker(OsArch,Linker)'.
        - _Description:_ `Compiler' is the linker to use in this file
          when compiling for the architecture `OsArch'. The option
          management is the same as in `use_compiler/2'.

        - _The following properties hold at call time:_

          `OsArch' is an atom.   (`basic_props:atm/1')

          `Linker' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Known bugs and planned improvements (foreign_interface_properties),  Prev: Documentation on internals (foreign_interface_properties),  Up: Foreign Language Interface Properties

Known bugs and planned improvements (`foreign_interface_properties')
====================================================================

   * The `size_of/3' property has an empty definition


File: ciao.info,  Node: Utilities for on-demand compilation of foreign files,  Next: Foreign Language Interface Builder,  Prev: Foreign Language Interface Properties,  Up: Top

Utilities for on-demand compilation of foreign files
****************************************************

   *Author(s):* Manuel Carro, Jose Morales.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#36 (1999/7/20, 10:37:31 MEST)

   This module provides two predicates which give the user
information regarding how to compile external (C) files in order to
link them with the Ciao Prolog engine at runtime.

   These predicates are not intended to be called directly by the
end-user. Instead, a tool or module whose aim is generating
dynamically loadable files from source files should use the
predicates in this file in order to find out what are the proper
compiler and linker to use, and which options must be passed to them
in the current architecture.

* Menu:

* Usage and interface (foreign_compilation)::
* Documentation on exports (foreign_compilation)::


File: ciao.info,  Node: Usage and interface (foreign_compilation),  Next: Documentation on exports (foreign_compilation),  Prev: Utilities for on-demand compilation of foreign files,  Up: Utilities for on-demand compilation of foreign files

Usage and interface (`foreign_compilation')
===========================================

   * *Library usage:*

     `:- use_module(library(foreign_compilation)).'

   * *Exports:*
        - _Predicates:_

          `compiler_and_opts/2', `linker_and_opts/2'.


   * *Other modules used:*
        - _System library modules:_

          `system'.




File: ciao.info,  Node: Documentation on exports (foreign_compilation),  Prev: Usage and interface (foreign_compilation),  Up: Utilities for on-demand compilation of foreign files

Documentation on exports (`foreign_compilation')
================================================

 - PREDICATE: compiler_and_opts/2:
     *Usage:* `compiler_and_opts(?Compiler,?Opts)'
        - _Description:_ If you want to compile a foreign language
          file for dynamic linking in the current operating system
          and architecture, you have to use the compiler `Compiler'
          and give it the options `Opts'. A variable in `Opts' means
          that no special option is needed.

        - _The following properties should hold at call time:_

          `?Compiler' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `?Opts' is a list of `atom's.   (`basic_props:list/2')



 - PREDICATE: linker_and_opts/2:
     *Usage:* `linker_and_opts(?Linker,?Options)'
        - _Description:_ If you want to link a foreign language file
          for dynamic linking in the current operating system and
          architecture, you have to use the linker `Compiler' and
          gite it the options `Opts'. A variable in `Opts' means that
          no special option is needed.

        - _The following properties should hold at call time:_

          `?Linker' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `?Options' is a list of `atom's.   (`basic_props:list/2')




File: ciao.info,  Node: Foreign Language Interface Builder,  Next: Interface to daVinci,  Prev: Utilities for on-demand compilation of foreign files,  Up: Top

Foreign Language Interface Builder
**********************************

   *Author(s):* Jose Morales, Manuel Carro.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#212 (2002/5/6, 1:12:2 CEST)

* Menu:

* Usage and interface (build_foreign_interface)::
* Documentation on exports (build_foreign_interface)::


File: ciao.info,  Node: Usage and interface (build_foreign_interface),  Next: Documentation on exports (build_foreign_interface),  Prev: Foreign Language Interface Builder,  Up: Foreign Language Interface Builder

Usage and interface (`build_foreign_interface')
===============================================

   * *Library usage:*

     `:- use_module(library(build_foreign_interface)).'

   * *Exports:*
        - _Predicates:_

          `build_foreign_interface/1', `rebuild_foreign_interface/1',
          `build_foreign_interface_explicit_decls/2',
          `rebuild_foreign_interface_explicit_decls/2',
          `build_foreign_interface_object/1',
          `rebuild_foreign_interface_object/1', `do_interface/1'.


   * *Other modules used:*
        - _System library modules:_

          `c/c', `streams', `terms', `lists', `llists', `aggregates',
          `system', `format', `messages', `assertions/assrt_lib',
          `foreign_compilation', `compiler/c_itf', `ctrlcclean',
          `errhandle'.




File: ciao.info,  Node: Documentation on exports (build_foreign_interface),  Prev: Usage and interface (build_foreign_interface),  Up: Foreign Language Interface Builder

Documentation on exports (`build_foreign_interface')
====================================================

 - PREDICATE: build_foreign_interface/1:
     *Usage 1:* `build_foreign_interface(in(File))'
        - _Description:_ Reads assertions from `File', generates the
          gluecode for the Ciao Prolog interface, compiles the
          foreign files and the gluecode file, and links everything
          in a shared object. Checks modification times to determine
          automatically which files must be generated/compiled/linked.

        - _Call and exit should be _compatible_ with:_

          `in(File)' is a source name.
          (`streams_basic:sourcename/1')

     *Usage 2:* `build_foreign_interface(in(File))'
        - _Description:_ Like `build_foreign_interface/1', but it
          does not check the modification time of any file.

        - _Call and exit should be _compatible_ with:_

          `in(File)' is a source name.
          (`streams_basic:sourcename/1')



 - PREDICATE: rebuild_foreign_interface/1:
     No further documentation available for this predicate.




 - PREDICATE: build_foreign_interface_explicit_decls/2:
     *Usage:*
     `build_foreign_interface_explicit_decls(in(File),in(Decls))'
        - _Description:_ Like `build_foreign_interface/1', but use
          declarations in `Decls' instead of reading the declarations
          from `File'.

        - _Call and exit should be _compatible_ with:_

          `in(File)' is a source name.
          (`streams_basic:sourcename/1')

          `in(Decls)' is a list of `term's.   (`basic_props:list/2')



 - PREDICATE: rebuild_foreign_interface_explicit_decls/2:
     *Usage:*
     `rebuild_foreign_interface_explicit_decls(in(File),in(Decls))'
        - _Description:_ Like
          `build_foreign_interface_explicit_decls/1', but it does not
          check the modification time of any file.

        - _Call and exit should be _compatible_ with:_

          `in(File)' is a source name.
          (`streams_basic:sourcename/1')

          `in(Decls)' is a list of `term's.   (`basic_props:list/2')



 - PREDICATE: build_foreign_interface_object/1:
     *Usage:* `build_foreign_interface_object(in(File))'
        - _Description:_ Compiles the gluecode file with the foreign
          source files producing an unique object file.

        - _Call and exit should be _compatible_ with:_

          `in(File)' is a source name.
          (`streams_basic:sourcename/1')



 - PREDICATE: rebuild_foreign_interface_object/1:
     *Usage:* `rebuild_foreign_interface_object(in(File))'
        - _Description:_ Compiles (again) the gluecode file with the
          foreign source files producing an unique object file.

        - _Call and exit should be _compatible_ with:_

          `in(File)' is a source name.
          (`streams_basic:sourcename/1')



 - PREDICATE: do_interface/1:
     *Usage:* `do_interface(in(Decls))'
        - _Description:_ Given the declarations in `Decls', this
          predicate succeeds if these declarations involve the
          creation of the foreign interface

        - _Call and exit should be _compatible_ with:_

          `in(Decls)' is a list of `term's.   (`basic_props:list/2')




File: ciao.info,  Node: Interface to daVinci,  Next: The Tcl/Tk interface,  Prev: Foreign Language Interface Builder,  Up: Top

Interface to daVinci
********************

   *Author(s):* Francisco Bueno.

   This library allows connecting a Ciao Prolog application with
daVinci V2.X.

   The communication is based on a two-way channel: after daVinci is
started, messages are sent in to it and read in from it on demand by
different Prolog predicates. Messages are sent via writing the term
as text; messages are received by reading text and returning an atom.
Commands sent and answers received are treated as terms from the
Prolog side, since for daVinci they are text but have term syntax;
the only difficulty lies in strings, for which special Prolog syntax
is provided.

   See accompanying file `library('davinci/commands')' for examples
on the use of this library.

   daVinci is developed by U. of Bremen, Germany.

* Menu:

* Usage and interface (davinci)::
* Documentation on exports (davinci)::
* Documentation on internals (davinci)::


File: ciao.info,  Node: Usage and interface (davinci),  Next: Documentation on exports (davinci),  Prev: Interface to daVinci,  Up: Interface to daVinci

Usage and interface (`davinci')
===============================

   * *Library usage:*

     `:- use_module(library(davinci)).'

   * *Exports:*
        - _Predicates:_

          `davinci/0', `topd/0', `davinci_get/1', `davinci_get_all/1',
          `davinci_put/1', `davinci_quit/0', `davinci_ugraph/1',
          `davinci_lgraph/1', `ugraph2term/2', `formatting/2'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `prompt', `errhandle', `format', `read',
          `graphs/ugraphs', `write', `system'.




File: ciao.info,  Node: Documentation on exports (davinci),  Next: Documentation on internals (davinci),  Prev: Usage and interface (davinci),  Up: Interface to daVinci

Documentation on exports (`davinci')
====================================

 - PREDICATE: davinci/0:
     Start up a daVinci process.




 - PREDICATE: topd/0:
     A toplevel to send to daVinci commands from standard input.




 - PREDICATE: davinci_get/1:
     *Usage:* `davinci_get(Term)'
        - _Description:_ Get a message from daVinci. `Term' is a term
          corresponding to daVinci's message.



 - PREDICATE: davinci_get_all/1:
     *Usage:* `davinci_get_all(List)'
        - _Description:_ Get all pending messages. `List' is a list
          of terms as in `davinci_get/1'.

        - _The following properties should hold upon exit:_

          `List' is a list.   (`basic_props:list/1')



 - PREDICATE: davinci_put/1:
     *Usage:* `davinci_put(Term)'
        - _Description:_ Send a command to daVinci.

        - _The following properties should hold at call time:_

          `davinci:davinci_command(Term)'
          (`davinci:davinci_command/1')



 - PREDICATE: davinci_quit/0:
     Exit daVinci process. All pending answers are lost!




 - PREDICATE: davinci_ugraph/1:
     *Usage:* `davinci_ugraph(Graph)'
        - _Description:_ Send a graph to daVinci.

        - _The following properties should hold at call time:_

          `davinci:ugraph(Graph)'  (`davinci:ugraph/1')



 - PREDICATE: davinci_lgraph/1:
     *Usage:* `davinci_lgraph(Graph)'
        - _Description:_ Send a labeled graph to daVinci.

        - _The following properties should hold at call time:_

          `davinci:lgraph(Graph)'  (`davinci:lgraph/1')



 - PREDICATE: ugraph2term/2:
     No further documentation available for this predicate.




 - PREDICATE: formatting/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: Documentation on internals (davinci),  Prev: Documentation on exports (davinci),  Up: Interface to daVinci

Documentation on internals (`davinci')
======================================

 - PROPERTY: davinci_command/1:
     Syntactically, a command is a term. Semantically, it has to
     correspond to a command understood by daVinci. Two terms are
     interpreted in a special way: `string/1' and `text/1':
     `string(Term)' is given to daVinci as `"Term"'; `text(List)' is
     given as `"Term1 Term2 ...Term "' for each `Term' in `List'. If
     your term has functors `string/1' and `text/1' that you don't
     want to be interpreted this way, use it twice, i.e.,
     `string(string(Term))' is given to daVinci as `string(Term')'
     where `Term'' is the interpretation of `Term'.




 - PROPERTY: ugraph/1:
     `ugraph(Graph)'

     `Graph' is a term which denotes an ugraph as in
     `library(ugraphs)'. Vertices of the form `node/2' are
     interpreted in a special way: `node(Term,List)' is interpreted
     as a vertex `Term' with attributes `List'. `List' is a list of
     terms conforming the syntax of `davinci_put/1' and corresponding
     to daVinci's graph nodes attributes. If your vertex has functor
     `node/2' and you don't want it to be interpreted this way, use
     it twice, i.e., `node(node(T1,T2),[])' is given to daVinci as
     vertex `node(T1,T2)'. A vertex is used both as label and name of
     daVinci's graph node. daVinci's graph edges have label `V1-V2'
     where `V1' is the source and `V2' the sink of the edge. There is
     no support for multiple edges between the same two vertices.




 - PROPERTY: lgraph/1:
     `lgraph(Graph)'

     `Graph' is a term which denotes a wgraph as in
     `library(wgraphs)', except that the weights are labels, i.e.,
     they do not need to be integers. Vertices of the form `node/2'
     are interpreted in a special way. Edge labels are converted into
     special intermediate vertices. Duplicated labels are solved by
     adding dummy atoms `'''. There is no support for multiple edges
     between the same two vertices.





File: ciao.info,  Node: The Tcl/Tk interface,  Next: Low level interface library to Tcl/Tk,  Prev: Interface to daVinci,  Up: Top

The Tcl/Tk interface
********************

   *Author(s):* Montse Iglesias Urraca,
`http://www.clip.dia.fi.upm.es/', The CLIP Group, Facultad de
Informa'tica, Universidad Polite'cnica de Madrid.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#123 (2001/9/2, 14:13:25 CEST)

   The `tcltk' library package is a bidirectional interface to the
_Tcl_ (pronounced Tickle) language and _Tk_ toolkit. Tcl is an
interpreter scripting language with many extension packages, in
particular the graphical interface toolkit Tk. The interaction
between both languages is implemented as an interface between two
processes, a Tcl/Tk process and a Prolog process. The approach allows
programmers to program both in Tcl/Tk and Prolog.

*Prolog - Tcl/Tk interface structure*

   The interface is made up of two parts: a Prolog part and a Tcl/Tk
part. The Prolog part encodes the requests from a Prolog program and
sends them to the Tcl/Tk part via a socket. The Tcl/Tk part receives
from this socket and performs the actions included implied by the
requests.

*Prolog side of the Prolog - Tcl/Tk interface*

   The Prolog side receives the actions to perform in the Tcl/Tk side
from the user program and sends them to the Tcl/Tk side through the
socket connection. When the action is finished in the Tcl/Tk side,
the result is returned to the user program, or the action fails if
any problem occurs.

*Tcl/Tk side of the Prolog - Tcl/Tk interface*

   The Tcl/Tk side waits for requests from the Prolog side, executes
the Tcl/Tk code sent from the Prolog side. At the same time, the
Tcl/Tk side handles the events and exceptions raised in the Tcl/Tk
side, possibly passing on control to the Prolog side.

* Menu:

* Usage and interface (tcltk)::
* Documentation on exports (tcltk)::


File: ciao.info,  Node: Usage and interface (tcltk),  Next: Documentation on exports (tcltk),  Prev: The Tcl/Tk interface,  Up: The Tcl/Tk interface

Usage and interface (`tcltk')
=============================

   * *Library usage:*

     `:- use_module(library(tcltk)).'

   * *Exports:*
        - _Predicates:_

          `tcl_new/1', `tcl_eval/3', `tcl_delete/1', `tcl_event/3',
          `tk_event_loop/1', `tk_loop/1', `tk_new/2',
          `tk_next_event/2'.

        - _Regular Types:_

          `tclInterpreter/1', `tclCommand/1'.


   * *Other modules used:*
        - _System library modules:_

          `tcltk/tcltk_low_level', `write', `strings', `lists'.




File: ciao.info,  Node: Documentation on exports (tcltk),  Prev: Usage and interface (tcltk),  Up: The Tcl/Tk interface

Documentation on exports (`tcltk')
==================================

 - REGTYPE: tclInterpreter/1:
     To use Tcl, you must create a _Tcl interpreter_ object and send
     commands to it.

     *Usage:* `tclInterpreter(I)'
        - _Description:_ `I' is a reference to a _Tcl_ interpreter.



 - REGTYPE: tclCommand/1:
     A _Tcl_ command is specified as follows:
                Command         --> Atom  { other than [] }
                                  | Number
                                  | chars(PrologString)
                                  | write(Term)
                                  | format(Fmt,Args)
                                  | dq(Command)
                                  | br(Command)
                                  | sqb(Command)
                                  | min(Command)
                                  | ListOfCommands
                ListOfCommands  --> []
                                  |[Command|ListOfCommands]

     where:

    `Atom'
          denotes the printed representation of the atom.

    `Number'
          denotes their printed representations.

    `chars(PrologString)'
          denotes the string represented by _PrologString_ (a list of
          character codes).

    `write(Term)'
          denotes the string that is printed by the corresponding
          built-in predicate.

    `format(Term)'
          denotes the string that is printed by the corresponding
          built-in predicate.

    `dq(Command)'
          denotes the string specified by _Command_, enclosed in
          double quotes.

    `br(Command)'
          denotes the string specified by _Command_, enclosed in
          braces.

    `sqb(Command)'
          denotes the string specified by _Command_, enclosed in
          square brackets.

    `min(Command)'
          denotes the string specified by _Command_, immediately
          preceded by a hyphen.

    `ListOfCommands'
          denotes the strings denoted by each element, separated by
          spaces.

     *Usage:* `tclCommand(C)'
        - _Description:_ `C' is a _Tcl_ command.



 - PREDICATE: tcl_new/1:
     *Usage:* `tcl_new(-TclInterpreter)'
        - _Description:_ Creates a new interpreter, initializes it,
          and returns a handle to it in `TclInterpreter'.

        - _Call and exit should be _compatible_ with:_

          `-TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')



 - PREDICATE: tcl_eval/3:
     *Usage:* `tcl_eval(+TclInterpreter,+Command,-Result)'
        - _Description:_ Evaluates the commands given in `Command' in
          the Tcl interpreter `TclInterpreter'. The result will be
          stored as a string in `Result'. If there is an error in
          _Command_ an exception is raised. The error messages will
          be _Tcl Exception:_ if the error is in the syntax of the
          tcltk code or _Prolog Exception:_, if the error is in the
          prolog term.

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')

          `+Command' is a _Tcl_ command.   (`tcltk:tclCommand/1')

          `-Result' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: tcl_delete/1:
     *Usage:* `tcl_delete(+TclInterpreter)'
        - _Description:_ Given a handle to a Tcl interpreter in
          variable `TclInterpreter', it deletes the interpreter from
          the system.

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')



 - PREDICATE: tcl_event/3:
     *Usage:* `tcl_event(+TclInterpreter,+Command,-Events)'
        - _Description:_ Evaluates the commands given in `Command' in
          the Tcl interpreter whose handle is provided in
          `TclInterpreter'. `Events' is a list of terms stored from
          Tcl by _prolog_event_. Blocks until there is something on
          the event queue

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')

          `+Command' is a _Tcl_ command.   (`tcltk:tclCommand/1')

          `-Events' is a list.   (`basic_props:list/1')



 - PREDICATE: tk_event_loop/1:
     *Usage:* `tk_event_loop(+TclInterpreter)'
        - _Description:_ Waits for an event and executes the goal
          associated to it. Events are stored from Tcl with the
          _prolog_ command. The unified term is sent to the Tcl
          interpreter in order to obtain the value of the tcl array
          of _prolog_variables_. If the term received does not have
          the form `execute(Goal)', the predicate silently exits. If
          the execution of `Goal' raises a Prolog error, the
          interpreter is deleted and an error message is given.

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')



 - PREDICATE: tk_loop/1:
     *Usage:* `tk_loop(+TclInterpreter)'
        - _Description:_ Passes control to Tk until all windows are
          gone.

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')



 - PREDICATE: tk_new/2:
     *Usage:* `tk_new(+Options,-TclInterpreter)'
        - _Description:_ Performs basic Tcl and Tk initialization and
          creates the main window of a Tk application.`Options' is a
          list of optional elements according to:

         `name(+ApplicationName)'
               Sets the Tk main window title to `ApplicationName'. It
               is also used for communicating between Tcl/Tk
               applications via the Tcl _send_ command. Default name
               is an empty string.

         `display(+Display)'
               Gives the name of the screen on which to create the
               main window. Default is normally determined by the
               `DISPLAY' environment variable.

         `file'
               Opens the sript `file'. Commands will not be read from
               standard input and the execution returns back to
               Prolog only after all windows (and the interpreter)
               have been deleted.

        - _Call and exit should be _compatible_ with:_

          `+Options' is a list.   (`basic_props:list/1')

          `-TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')



 - PREDICATE: tk_next_event/2:
     *Usage:* `tk_next_event(+TclInterpreter,-Event)'
        - _Description:_ Processes events until there is at least one
          Prolog event associated with `TclInterpreter'. `Event' is
          the term correspondig to the head of a queue of events
          stored from Tcl with the _prolog_event_ command.

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk:tclInterpreter/1')

          `-Event' is a string (a list of character codes).
          (`basic_props:string/1')




File: ciao.info,  Node: Low level interface library to Tcl/Tk,  Next: The Tcl/Tk Class Interface,  Prev: The Tcl/Tk interface,  Up: Top

Low level interface library to Tcl/Tk
*************************************

   *Author(s):* Montse Iglesias Urraca.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#124 (2001/9/2, 14:14:25 CEST)

   The `tcltk_low_level' library defines the low level interface used
by the `tcltk' library. Essentially it includes all the code related
directly to the handling of sockets and processes. This library
should normally not be used directly by user programs, which use
`tcltk' instead. On the other hand in some cases it may be useful to
undertand how this library works in order to understand possible
problems in programs that use the `tcltk' library.

* Menu:

* Usage and interface (tcltk_low_level)::
* Documentation on exports (tcltk_low_level)::
* Documentation on internals (tcltk_low_level)::
* Other information (tcltk_low_level)::


File: ciao.info,  Node: Usage and interface (tcltk_low_level),  Next: Documentation on exports (tcltk_low_level),  Prev: Low level interface library to Tcl/Tk,  Up: Low level interface library to Tcl/Tk

Usage and interface (`tcltk_low_level')
=======================================

   * *Library usage:*

     `:- use_module(library(tcltk_low_level)).'

   * *Exports:*
        - _Predicates:_

          `new_interp/1', `new_interp/2', `new_interp_file/2',
          `tcltk/2', `tcltk_raw_code/2', `receive_result/2',
          `send_term/2', `receive_event/2', `receive_list/2',
          `receive_confirm/2', `delete/1'.


   * *Other modules used:*
        - _System library modules:_

          `terms', `sockets/sockets', `system', `write', `read',
          `strings', `lists', `format'.




File: ciao.info,  Node: Documentation on exports (tcltk_low_level),  Next: Documentation on internals (tcltk_low_level),  Prev: Usage and interface (tcltk_low_level),  Up: Low level interface library to Tcl/Tk

Documentation on exports (`tcltk_low_level')
============================================

 - PREDICATE: new_interp/1:
     *Usage:* `new_interp(-TclInterpreter)'
        - _Description:_ Creates two sockets to connect to the _wish_
          process, the term socket and the event socket, and opens a
          pipe to process _wish_ in a new shell.

        - _Call and exit should be _compatible_ with:_

          `-TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: new_interp/2:
     *Usage:* `new_interp(-TclInterpreter,+Options)'
        - _Description:_ Creates two sockets, the term socket and the
          event socket, and opens a pipe to process _wish_ in a new
          shell invoked with the `Options'.

        - _Call and exit should be _compatible_ with:_

          `-TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')

          `+Options' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: new_interp_file/2:
     *Usage:* `new_interp_file(+FileName,-TclInterpreter)'
        - _Description:_ Creates two sockets, the term socket and the
          event socket, and opens a pipe to process _wish_ in a new
          shell invoked with a `FileName'. `FileName' is treated as a
          name of a sript file

        - _Call and exit should be _compatible_ with:_

          `+FileName' is a string (a list of character codes).
          (`basic_props:string/1')

          `-TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: tcltk/2:
     *Usage:* `tcltk(+Code,+TclInterpreter)'
        - _Description:_ Sends the `Code' converted to string to the
          `TclInterpreter'

        - _Call and exit should be _compatible_ with:_

          `+Code' is a _Tcl_ command.
          (`tcltk_low_level:tclCommand/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: tcltk_raw_code/2:
     *Usage:* `tcltk_raw_code(+String,+TclInterpreter)'
        - _Description:_ Sends the tcltk code items of the `Stream'
          to the `TclInterpreter'

        - _Call and exit should be _compatible_ with:_

          `+String' is a string (a list of character codes).
          (`basic_props:string/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: receive_result/2:
     *Usage:* `receive_result(-Result,+TclInterpreter)'
        - _Description:_ Receives the `Result' of the last
          _TclCommand_ into the `TclInterpreter'. If the _TclCommand_
          is not correct the _wish_ process is terminated and a
          message appears showing the error

        - _Call and exit should be _compatible_ with:_

          `-Result' is a string (a list of character codes).
          (`basic_props:string/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: send_term/2:
     *Usage:* `send_term(+String,+TclInterpreter)'
        - _Description:_ Sends the goal executed to the
          `TclInterpreter'. `String' has the predicate with unified
          variables

        - _Call and exit should be _compatible_ with:_

          `+String' is a string (a list of character codes).
          (`basic_props:string/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: receive_event/2:
     *Usage:* `receive_event(-Event,+TclInterpreter)'
        - _Description:_ Receives the `Event' from the event socket
          of the `TclInterpreter'.

        - _Call and exit should be _compatible_ with:_

          `-Event' is a list.   (`basic_props:list/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: receive_list/2:
     *Usage:* `receive_list(-List,+TclInterpreter)'
        - _Description:_ Receives the `List' from the event socket of
          the `TclInterpreter'.The `List' has all the predicates that
          have been inserted from Tcl/Tk with the command
          prolog_event. It is a list of terms.

        - _Call and exit should be _compatible_ with:_

          `-List' is a list.   (`basic_props:list/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: receive_confirm/2:
     *Usage:* `receive_confirm(-String,+TclInterpreter)'
        - _Description:_ Receives the `String' from the event socket
          of the `TclInterpreter' when a term inserted into the event
          queue is managed.

        - _Call and exit should be _compatible_ with:_

          `-String' is a string (a list of character codes).
          (`basic_props:string/1')

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')



 - PREDICATE: delete/1:
     *Usage:* `delete(+TclInterpreter)'
        - _Description:_ Terminates the _wish_ process and closes the
          pipe, term socket and event socket. Deletes the interpreter
          `TclInterpreter' from the system

        - _Call and exit should be _compatible_ with:_

          `+TclInterpreter' is a reference to a _Tcl_ interpreter.
          (`tcltk_low_level:tclInterpreter/1')




File: ciao.info,  Node: Documentation on internals (tcltk_low_level),  Next: Other information (tcltk_low_level),  Prev: Documentation on exports (tcltk_low_level),  Up: Low level interface library to Tcl/Tk

Documentation on internals (`tcltk_low_level')
==============================================

 - PREDICATE: core/1:
     *Usage:* `core(+String)'
        - _Description:_ `core/1' is a set of facts which contain
          `String's to be sent to the Tcl/Tk interpreter on startup.
          They implement miscelaneous Tcl/Tk procedures which are
          used by the Tcl/Tk interface.

        - _Call and exit should be _compatible_ with:_

          `+String' is a string (a list of character codes).
          (`basic_props:string/1')




File: ciao.info,  Node: Other information (tcltk_low_level),  Prev: Documentation on internals (tcltk_low_level),  Up: Low level interface library to Tcl/Tk

Other information (`tcltk_low_level')
=====================================

   Two sockets are created to connect the _TclInterpreter_ and the
prolog process: the _event_socket_ and the _term_socket_. There are
two global variables: _prolog_variables_ and _terms_. The value of
any of the variables in the goal that is bound to a term will be
stored in the array `prolog_variables' with the variable name as
index. The string which contains the printed representation of prolog
_terms_ is _Terms_. These are the Tcl/Tk procedures which implement
the interface (the code is inside the `tcltk_low_level' library):

`prolog'
     Sends to _term_socket_ the predicate tcl_result which contains
     the goal to execute. Returns the string executes and the goal.

`prolog_event'
     Adds the new _term_ to the _terms_ queue.

`prolog_delete_event'
     Deletes the first _term_ of the _terms_ queue.

`prolog_list_events'
     Sends all the _terms_ of the _terms_ queue by the
     _event_socket_. The last element will be _end_of_event_list_.

`prolog_cmd'
     Receives as an argument the tcltk code. Evaluates the code and
     returns through the _term_socket_ the term _tcl_error_ if there
     was a mistake in the code or the predicate _tcl_result_ with the
     result of the command executed. If the argument is _prolog_ with
     a goal to execute, before finishing, the predicate evaluated by
     prolog is received. In order to get the value of the variables,
     predicates are compared using the _unify_term_ procedure. Returs
     0 when the sript runs without errors, and 1 if there is an error.

`prolog_one_event'
     Receives as an argument the _term_ which is associated with one
     of the tk events. Sends through the _event_socket_ the _term_
     and waits the unificated _term_ by prolog. After that it calls
     the _unify_term_ procedure to obtain the value of the
     _prolog_variables_.

`prolog_thread_event'
     Receives as an argument the _term_ which is associated with one
     of the tk events. Sends through the _event_socket_ the _term_
     and waits for the _term_ unified by prolog. After that the
     _unify_term_ procedure is called to obtain the value of the
     _prolog_variables_. In this case the _term_socket_ is non
     blocking.

`convert_variables'
     Receives as an argument a string which contains symbols that
     can't be sent by the sockets. This procedure deletes them from
     the input string and returns the new string.

`unify_term'
     Receives as argument a prolog term.


File: ciao.info,  Node: The Tcl/Tk Class Interface,  Next: widget_class (library),  Prev: Low level interface library to Tcl/Tk,  Up: Top

The Tcl/Tk Class Interface
**************************

   *Author(s):* Montserrat Iglesias Urraca,
`http://www.clip.dia.fi.upm.es/', The CLIP Group, Facultad de
Informa'tica, Universidad Polite'cnica de Madrid.

   This library implements an object-orented graphical library with a
number of predefined objects, using the Prolog Tcl/Tk interface. This
interface allows creating and destroying objects and modifying their
properties. The `window_class' contains three clases: widget class,
menu class, and canvas class. The constructor class is window_class.

   *Note:* This library (and the documentation) are still under
development.

* Menu:

* Usage and interface (window_class)::
* Documentation on exports (window_class)::


File: ciao.info,  Node: Usage and interface (window_class),  Next: Documentation on exports (window_class),  Prev: The Tcl/Tk Class Interface,  Up: The Tcl/Tk Class Interface

Usage and interface (`window_class')
====================================

   * *Library usage:*

     `:- use_module(library(window_class)).'

   * *Exports:*
        - _Predicates:_

          `window_class/0', `window_class/3', `destructor/0',
          `show/0', `hide_/0', `title/1', `maxsize/2', `minsize/2',
          `withdraw/0', `event_loop/0'.

        - _Regular Types:_

          `widget/1', `option/1', `menu/1', `canvas/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `system', `strings', `lists',
          `tcltk/tcltk', `tcltk/tcltk_low_level', `aggregates'.




File: ciao.info,  Node: Documentation on exports (window_class),  Prev: Usage and interface (window_class),  Up: The Tcl/Tk Class Interface

Documentation on exports (`window_class')
=========================================

 - REGTYPE: widget/1:
     Each `Widget' type is characterized in two ways: first, the form
     of the create command used to create instances of the type; and
     second, a set of configuration options for items of that type,
     which may be used in the create and itemconfigure widget
     commands.

     *Usage:* `widget(W)'
        - _Description:_ `W' is a reference to one type of the widget
          widgets.



 - REGTYPE: option/1:
     *Usage:* `option(O)'
        - _Description:_ `O' is _hidden_ if the Widget is not visible
          or _shown_ if its visible.



 - REGTYPE: menu/1:
     *Usage:* `menu(M)'
        - _Description:_ `M' is a reference to one type of the menu.



 - REGTYPE: canvas/1:
     *Usage:* `canvas(C)'
        - _Description:_ `C' is a reference to one type of the canvas.



 - PREDICATE: window_class/0:
     *Usage:*
        - _Description:_ Creates a new interpreter, asserting the
          predicate _interp(I)_, and the widgets, menus and canvases
          objects.



 - PREDICATE: window_class/3:
     *Usage:* `window_class(+WidgetList,+MenusList,+CanvasList)'
        - _Description:_ Adds the widgets, menus and canvases in the
          list to the window object.

        - _Call and exit should be _compatible_ with:_

          `+WidgetList' is a list.   (`basic_props:list/1')

          `+MenusList' is a list.   (`basic_props:list/1')

          `+CanvasList' is a list.   (`basic_props:list/1')



 - PREDICATE: destructor/0:
     *Usage:*
        - _Description:_ Deletes the widgets, menus and canvases of
          the window object and the window object.



 - PREDICATE: show/0:
     *Usage:*
        - _Description:_ Adds widgets, menus and canvas to the window
          object.



 - PREDICATE: hide_/0:
     *Usage:*
        - _Description:_ Removes widgets, menus and canvas from the
          window object.



 - PREDICATE: title/1:
     *Usage:* `title(+X)'
        - _Description:_ `X' specifies the title for window. The
          default window title is the name of the window.

        - _Call and exit should be _compatible_ with:_

          `+X' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: maxsize/2:
     *Usage:* `maxsize(+X,+Y)'
        - _Description:_ `X' specifies the maximum width and `Y' the
          maximum height for the window.

        - _Call and exit should be _compatible_ with:_

          `+X' is an integer.   (`basic_props:int/1')

          `+Y' is an integer.   (`basic_props:int/1')



 - PREDICATE: minsize/2:
     *Usage:* `minsize(+X,+Y)'
        - _Description:_ `X' specifies the minimum width and `Y' the
          minimum height for the window.

        - _Call and exit should be _compatible_ with:_

          `+X' is an integer.   (`basic_props:int/1')

          `+Y' is an integer.   (`basic_props:int/1')



 - PREDICATE: withdraw/0:
     *Usage:*
        - _Description:_ Arranges for window to be withdrawn from the
          screen.



 - PREDICATE: event_loop/0:
     *Usage:*
        - _Description:_ Waits for a _Tcl/Tk_ event.




File: ciao.info,  Node: widget_class (library),  Next: menu_class (library),  Prev: The Tcl/Tk Class Interface,  Up: Top

widget_class (library)
**********************

* Menu:

* Usage and interface (widget_class)::
* Documentation on exports (widget_class)::


File: ciao.info,  Node: Usage and interface (widget_class),  Next: Documentation on exports (widget_class),  Prev: widget_class (library),  Up: widget_class (library)

Usage and interface (`widget_class')
====================================

   * *Library usage:*

     `:- use_module(library(widget_class)).'

   * *Exports:*
        - _Predicates:_

          `text_characters/1', `font_type/1', `background_color/1',
          `borderwidth_value/1', `foreground_color/1',
          `highlightbackground_color/1', `highlight_color/1',
          `width_value/1', `relief_type/1', `side_type/1',
          `expand_value/1', `fill_type/1', `padx_value/1',
          `pady_value/1', `row_value/1', `rowspan_value/1',
          `column_value/1', `columnspan_value/1',
          `event_type_widget/1', `action_widget/3', `action_widget/1',
          `creation_options/1', `creation_position/1',
          `creation_position_grid/1', `creation_bind/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (widget_class),  Prev: Usage and interface (widget_class),  Up: widget_class (library)

Documentation on exports (`widget_class')
=========================================

 - PREDICATE: text_characters/1:
     *Usage 1:* `text_characters(+Text)'
        - _Description:_ Indicates the `Text' to be displayed in the
          widget.

        - _Call and exit should be _compatible_ with:_

          `+Text' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `text_characters(-Text)'
        - _Description:_ `Text' which is displayed in the widget.

        - _Call and exit should be _compatible_ with:_

          `-Text' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: font_type/1:
     *Usage 1:* `font_type(+Font)'
        - _Description:_ Indicates the `Font' of the widget's text.

        - _Call and exit should be _compatible_ with:_

          `+Font' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `font_type(-Font)'
        - _Description:_ Gets the `Font' of the widget's text.

        - _Call and exit should be _compatible_ with:_

          `-Font' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: background_color/1:
     *Usage 1:* `background_color(+Background)'
        - _Description:_ Indicates the `Background' color. Default to
          gray.

        - _Call and exit should be _compatible_ with:_

          `+Background' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `background_color(-Background)'
        - _Description:_ Returns the `Background' color.

        - _Call and exit should be _compatible_ with:_

          `-Background' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: borderwidth_value/1:
     *Usage 1:* `borderwidth_value(+BorderWidth)'
        - _Description:_ Indicates the width's border. Default to 2.

        - _Call and exit should be _compatible_ with:_

          `+BorderWidth' is a number.   (`basic_props:num/1')

     *Usage 2:* `borderwidth_value(-BorderWidth)'
        - _Description:_ Gets the width's border.

        - _Call and exit should be _compatible_ with:_

          `-BorderWidth' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: foreground_color/1:
     *Usage 1:* `foreground_color(+Foreground)'
        - _Description:_ Indicates the `Foreground' color. Default to
          black

        - _Call and exit should be _compatible_ with:_

          `+Foreground' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `foreground_color(-Foreground)'
        - _Description:_ Gets the `Foreground' color.

        - _Call and exit should be _compatible_ with:_

          `-Foreground' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: highlightbackground_color/1:
     *Usage 1:* `highlightbackground_color(+Color)'
        - _Description:_ `Color' specifies the highlight background
          color. Default to white

        - _Call and exit should be _compatible_ with:_

          `+Color' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `highlightbackground_color(-Color)'
        - _Description:_ Gets the `Color' of the highlight background.

        - _Call and exit should be _compatible_ with:_

          `-Color' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: highlight_color/1:
     *Usage 1:* `highlight_color(+Color)'
        - _Description:_ `Color' specifies the highlight color.
          Default to white

        - _Call and exit should be _compatible_ with:_

          `+Color' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `highlight_color(-Color)'
        - _Description:_ Gets the `Color' of the highlight.

        - _Call and exit should be _compatible_ with:_

          `-Color' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: width_value/1:
     *Usage 1:* `width_value(+Width)'
        - _Description:_ Specifies the `Width' for the widget.
          Default to 0

        - _Call and exit should be _compatible_ with:_

          `+Width' is an integer.   (`basic_props:int/1')

     *Usage 2:* `width_value(+Width)'
        - _Description:_ Gets the `Width' specified for the widget.

        - _Call and exit should be _compatible_ with:_

          `+Width' is an integer.   (`basic_props:int/1')



 - PREDICATE: relief_type/1:
     *Usage 1:* `relief_type(+Relief)'
        - _Description:_ Specifies a desired `Relief' for the widget.
          Default to sunken

        - _Call and exit should be _compatible_ with:_

          `+Relief' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `relief_type(-Relief)'
        - _Description:_ Gets the `Relief' of the widget.

        - _Call and exit should be _compatible_ with:_

          `-Relief' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: side_type/1:
     *Usage 1:* `side_type(+Side)'
        - _Description:_ Specifies which `Side' of the master, the
          slave(s) will be packed against. Must be left, right, top
          or bottom. Defaults to top

        - _Call and exit should be _compatible_ with:_

          `+Side' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `side_type(-Side)'
        - _Description:_ Gets the position of the canvas.

        - _Call and exit should be _compatible_ with:_

          `-Side' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: expand_value/1:
     *Usage 1:* `expand_value(+Value)'
        - _Description:_ Specifies whether the slaves should be
          expanded to consume extra space in their master. `Value'
          may have any proper boolean value, such as 1 or 0. Defaults
          to 0

        - _Call and exit should be _compatible_ with:_

          `+Value' is an integer.   (`basic_props:int/1')

     *Usage 2:* `expand_value(-Value)'
        - _Description:_ Gets the boolean value which indicates if
          the slaves should be expanded or no.

        - _Call and exit should be _compatible_ with:_

          `-Value' is an integer.   (`basic_props:int/1')



 - PREDICATE: fill_type/1:
     *Usage 1:* `fill_type(+Option)'
        - _Description:_ If a slave's parcel is larger than its
          requested dimensions, this option may be used to stretch
          the slave. `Option' must have one of the following values:
          none ( this is the default), x, y, both

        - _Call and exit should be _compatible_ with:_

          `+Option' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `fill_type(-Option)'
        - _Description:_ Gets the fill value of the canvas

        - _Call and exit should be _compatible_ with:_

          `-Option' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: padx_value/1:
     *Usage 1:* `padx_value(+Amount)'
        - _Description:_ `Amount' specifies how much horizontal
          external padding to leave on each side of the slave(s).
          Amount defaults to 0

        - _Call and exit should be _compatible_ with:_

          `+Amount' is an integer.   (`basic_props:int/1')

     *Usage 2:* `padx_value(-Amount)'
        - _Description:_ Gets the `Amount' which specifies how much
          horizontal external padding to leave on each side of the
          slaves.

        - _Call and exit should be _compatible_ with:_

          `-Amount' is an integer.   (`basic_props:int/1')



 - PREDICATE: pady_value/1:
     *Usage 1:* `pady_value(+Amount)'
        - _Description:_ `Amount' specifies how much vertical
          external padding to leave on each side of the slave(s).
          Amount defaults to 0

        - _Call and exit should be _compatible_ with:_

          `+Amount' is an integer.   (`basic_props:int/1')

     *Usage 2:* `pady_value(-Amount)'
        - _Description:_ Gets the `Amount' which specifies how much
          vertical external padding to leave on each side of the
          slaves.

        - _Call and exit should be _compatible_ with:_

          `-Amount' is an integer.   (`basic_props:int/1')



 - PREDICATE: row_value/1:
     *Usage 1:* `row_value(+Row)'
        - _Description:_ Indicates the `Row' in which the widget
          should be allocated.

        - _Call and exit should be _compatible_ with:_

          `+Row' is an integer.   (`basic_props:int/1')

     *Usage 2:* `row_value(-Row)'
        - _Description:_ Gets the `Row' in which the widget is
          allocated.

        - _Call and exit should be _compatible_ with:_

          `-Row' is an integer.   (`basic_props:int/1')



 - PREDICATE: rowspan_value/1:
     *Usage 1:* `rowspan_value(+Row)'
        - _Description:_ Indicates the number of `Row' which are
          going to be occupied in the grid.

        - _Call and exit should be _compatible_ with:_

          `+Row' is an integer.   (`basic_props:int/1')

     *Usage 2:* `rowspan_value(-Row)'
        - _Description:_ Gets the number of `Row' which are occupied
          by the widget in the grid.

        - _Call and exit should be _compatible_ with:_

          `-Row' is an integer.   (`basic_props:int/1')



 - PREDICATE: column_value/1:
     *Usage 1:* `column_value(+Column)'
        - _Description:_ Indicates the `Column' in which the widget
          should be allocated.

        - _Call and exit should be _compatible_ with:_

          `+Column' is an integer.   (`basic_props:int/1')

     *Usage 2:* `column_value(-Column)'
        - _Description:_ Gets the `Column' in which the widget is
          allocated.

        - _Call and exit should be _compatible_ with:_

          `-Column' is an integer.   (`basic_props:int/1')



 - PREDICATE: columnspan_value/1:
     *Usage 1:* `columnspan_value(+Column)'
        - _Description:_ Indicates the number of `Column' which are
          going to be occupied in the grid.

        - _Call and exit should be _compatible_ with:_

          `+Column' is an integer.   (`basic_props:int/1')

     *Usage 2:* `columnspan_value(-Column)'
        - _Description:_ Gets the number of `Column' which are
          occupied by the widget in the grid.

        - _Call and exit should be _compatible_ with:_

          `-Column' is an integer.   (`basic_props:int/1')



 - PREDICATE: event_type_widget/1:
     *Usage 1:* `event_type_widget(+EventType)'
        - _Description:_ The event `EventType' is going to be manage
          by the interface.

        - _Call and exit should be _compatible_ with:_

          `+EventType' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `event_type_widget(-EventType)'
        - _Description:_ Gets the event `EventType' which is going to
          be manage by the interface.

        - _Call and exit should be _compatible_ with:_

          `-EventType' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: action_widget/3:
     *Usage 1:* `action_widget(+Input,+Output,+Term)'
        - _Description:_ Executes `Term' with `Input' value and
          `Output' variable.

        - _Call and exit should be _compatible_ with:_

          `+Input' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `+Output' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `+Term' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `action_widget(+Input,+Output,-Term)'
        - _Description:_ `Term' is associated to the action of the
          object indicated with the operacion _event_type_widget_.

        - _Call and exit should be _compatible_ with:_

          `+Input' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `+Output' is currently instantiated to an atom.
          (`term_typing:atom/1')

          `-Term' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: action_widget/1:
     *Usage 1:* `action_widget(+Term)'
        - _Description:_ `Term' is going to be associated to the
          action of the object indicated with the operacion
          _event_type_widget_.

        - _Call and exit should be _compatible_ with:_

          `+Term' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `action_widget(-Term)'
        - _Description:_ `Term' is associated to the action of the
          object indicated with the operacion _event_type_widget_.

        - _Call and exit should be _compatible_ with:_

          `-Term' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: creation_options/1:
     *Usage:* `creation_options(-OptionsList)'
        - _Description:_ Creates a list with the options supported by
          the widget.

        - _Call and exit should be _compatible_ with:_

          `-OptionsList' is a list.   (`basic_props:list/1')



 - PREDICATE: creation_position/1:
     *Usage:* `creation_position(-OptionsList)'
        - _Description:_ Creates a list with the options supported by
          the pack command.

        - _Call and exit should be _compatible_ with:_

          `-OptionsList' is a list.   (`basic_props:list/1')



 - PREDICATE: creation_position_grid/1:
     *Usage:* `creation_position_grid(-OptionsList)'
        - _Description:_ Creates a list with the options supported by
          the grid command.

        - _Call and exit should be _compatible_ with:_

          `-OptionsList' is a list.   (`basic_props:list/1')



 - PREDICATE: creation_bind/1:
     *Usage:* `creation_bind(-BindList)'
        - _Description:_ Creates a list with the event to be manage
          and the action associated to this event.

        - _Call and exit should be _compatible_ with:_

          `-BindList' is a list.   (`basic_props:list/1')




File: ciao.info,  Node: menu_class (library),  Next: canvas_class (library),  Prev: widget_class (library),  Up: Top

menu_class (library)
********************

* Menu:

* Usage and interface (menu_class)::
* Documentation on exports (menu_class)::


File: ciao.info,  Node: Usage and interface (menu_class),  Next: Documentation on exports (menu_class),  Prev: menu_class (library),  Up: menu_class (library)

Usage and interface (`menu_class')
==================================

   * *Library usage:*

     `:- use_module(library(menu_class)).'

   * *Exports:*
        - _Predicates:_

          `name_menu/1', `menu_data/1', `label_value/1',
          `tearoff_value/1', `tcl_name/1', `creation_options/1',
          `creation_options_entry/1', `creation_menu_name/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `tcltk_obj/window_class',
          `tcltk_obj/menu_entry_class', `tcltk/tcltk',
          `tcltk/tcltk_low_level', `lists'.




File: ciao.info,  Node: Documentation on exports (menu_class),  Prev: Usage and interface (menu_class),  Up: menu_class (library)

Documentation on exports (`menu_class')
=======================================

 - PREDICATE: name_menu/1:
     *Usage:* `name_menu(+Name)'
        - _Description:_ Indicates the `Name' of the menubutton
          associated.

        - _Call and exit should be _compatible_ with:_

          `+Name' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: menu_data/1:
     *Usage 1:* `menu_data(+Menu)'
        - _Description:_ `Menu' posted when cascade entry is invoked.

        - _Call and exit should be _compatible_ with:_

          `+Menu' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `menu_data(-Menu)'
        - _Description:_ Gets the `Menu' asociated to the cascade
          entry.

        - _Call and exit should be _compatible_ with:_

          `-Menu' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: label_value/1:
     *Usage 1:* `label_value(+Value)'
        - _Description:_ `Value' specifies a string to be displayed
          as an identifying label in the menu entry.

        - _Call and exit should be _compatible_ with:_

          `+Value' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `label_value(-Value)'
        - _Description:_ Gets the string which identify the menu
          entry.

        - _Call and exit should be _compatible_ with:_

          `-Value' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: tearoff_value/1:
     *Usage 1:* `tearoff_value(+Tearoff)'
        - _Description:_ `Tearoff' must have a proper boolean value,
          which specifies wheter or not the menu should include a
          tear-off entry at the top. Defaults to 1.

        - _Call and exit should be _compatible_ with:_

          `+Tearoff' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `tearoff_value(-Tearoff)'
        - _Description:_ Gets the `Tearoff' value

        - _Call and exit should be _compatible_ with:_

          `-Tearoff' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: tcl_name/1:
     *Usage:* `tcl_name(-Widget)'
        - _Description:_ Specifies the name of the `Widget'. In this
          case is menu.

        - _Call and exit should be _compatible_ with:_

          `-Widget' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: creation_options/1:
     *Usage:* `creation_options(-OptionsList)'
        - _Description:_ Creates a list with the options supported by
          the menu.

        - _Call and exit should be _compatible_ with:_

          `-OptionsList' is a list.   (`basic_props:list/1')



 - PREDICATE: creation_options_entry/1:
     *Usage:* `creation_options_entry(-OptionsList)'
        - _Description:_ Creates a list with the options of the menu
          entry.

        - _Call and exit should be _compatible_ with:_

          `-OptionsList' is a list.   (`basic_props:list/1')



 - PREDICATE: creation_menu_name/1:
     *Usage:* `creation_menu_name(-OptionsList)'
        - _Description:_ Creates a list with the name of the menu.

        - _Call and exit should be _compatible_ with:_

          `-OptionsList' is a list.   (`basic_props:list/1')




File: ciao.info,  Node: canvas_class (library),  Next: button_class (library),  Prev: menu_class (library),  Up: Top

canvas_class (library)
**********************

* Menu:

* Usage and interface (canvas_class)::
* Documentation on exports (canvas_class)::


File: ciao.info,  Node: Usage and interface (canvas_class),  Next: Documentation on exports (canvas_class),  Prev: canvas_class (library),  Up: canvas_class (library)

Usage and interface (`canvas_class')
====================================

   * *Library usage:*

     `:- use_module(library(canvas_class)).'

   * *Exports:*
        - _Predicates:_

          `canvas_class/0', `canvas_class/1', `destructor/0',
          `show/0', `hide_/0', `width_value/1', `height_value/1',
          `side_type/1', `expand_value/1', `fill_type/1',
          `padx_value/1', `pady_value/1'.

        - _Regular Types:_

          `shape/1', `option/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `tcltk_obj/window_class',
          `tcltk_obj/shape_class', `system', `strings', `lists',
          `tcltk/tcltk', `tcltk/tcltk_low_level'.




File: ciao.info,  Node: Documentation on exports (canvas_class),  Prev: Usage and interface (canvas_class),  Up: canvas_class (library)

Documentation on exports (`canvas_class')
=========================================

 - REGTYPE: shape/1:
     Each item type is characterized in two ways: first, the form of
     the create command used to create instances of the type; and
     second, a set of configuration options for items of that type,
     which may be used in the create and itemconfigure widget
     commands.

     *Usage:* `shape(S)'
        - _Description:_ `S' is a reference to one type of the items
          supported by canvas widgets.



 - REGTYPE: option/1:
     *Usage:* `option(O)'
        - _Description:_ `O' is _hidden_ if the Shape is not visible
          or _shown_ if its visible.



 - PREDICATE: canvas_class/0:
     *Usage:*
        - _Description:_  Creates a new interpreter, asserting the
          predicate _interp(I)_ and the canvas object.



 - PREDICATE: canvas_class/1:
     *Usage:* `canvas_class(+ItemsList)'
        - _Description:_ Adds items of the list to the canvas object.

        - _Call and exit should be _compatible_ with:_

          `+ItemsList' is a list.   (`basic_props:list/1')



 - PREDICATE: destructor/0:
     *Usage:*
        - _Description:_ Deletes the shapes of the canvas object and
          the object.



 - PREDICATE: show/0:
     *Usage:*
        - _Description:_ Adds shapes to the canvas object.



 - PREDICATE: hide_/0:
     *Usage:*
        - _Description:_ Hides shapes from the canvas object.



 - PREDICATE: width_value/1:
     *Usage 1:* `width_value(+Width)'
        - _Description:_ Sets the `Width' of the canvas. Default 100.

        - _Call and exit should be _compatible_ with:_

          `+Width' is a number.   (`basic_props:num/1')

     *Usage 2:* `width_value(-Width)'
        - _Description:_ Gets the `Width' of the canvas.

        - _Call and exit should be _compatible_ with:_

          `-Width' is a number.   (`basic_props:num/1')



 - PREDICATE: height_value/1:
     *Usage 1:* `height_value(+Height)'
        - _Description:_ Sets the `Height' of the canvas. Default 50.

        - _Call and exit should be _compatible_ with:_

          `+Height' is a number.   (`basic_props:num/1')

     *Usage 2:* `height_value(-Height)'
        - _Description:_ Gets the `Height' of the canvas.

        - _Call and exit should be _compatible_ with:_

          `-Height' is a number.   (`basic_props:num/1')



 - PREDICATE: side_type/1:
     *Usage 1:* `side_type(+Side)'
        - _Description:_ Specifies which `Side' of the master, the
          slave(s) will be packed against. Must be left, right, top
          or bottom. Defaults to top.

        - _Call and exit should be _compatible_ with:_

          `+Side' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `side_type(-Side)'
        - _Description:_ Gets the `Side' of the canvas.

        - _Call and exit should be _compatible_ with:_

          `-Side' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: expand_value/1:
     *Usage 1:* `expand_value(+Value)'
        - _Description:_ Specifies whether the slaves should be
          expanded to consume extra space in their master. `Value'
          may have any proper boolean value, such as 1 or no.
          Defaults to 0

        - _Call and exit should be _compatible_ with:_

          `+Value' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `expand_value(-Value)'
        - _Description:_ Gets the boolean `Value' which indicates if
          the slaves should be expanded or no.

        - _Call and exit should be _compatible_ with:_

          `-Value' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: fill_type/1:
     *Usage 1:* `fill_type(+Option)'
        - _Description:_ If a slave's parcel is larger than its
          requested dimensions, this option may be used to stretch
          the slave. Style must have one of the following values:
          none ( this is the default), x, y, both

        - _Call and exit should be _compatible_ with:_

          `+Option' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `fill_type(-Option)'
        - _Description:_ Gets the fill value of the canvas

        - _Call and exit should be _compatible_ with:_

          `-Option' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: padx_value/1:
     *Usage 1:* `padx_value(+Amount)'
        - _Description:_ `Amount' specifies how much horizontal
          external padding to leave on each side of the slave(s).
          Amount defaults to 0.

        - _Call and exit should be _compatible_ with:_

          `+Amount' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `padx_value(-Amount)'
        - _Description:_ Gets the `Amount' which specifies how much
          horizontal external padding to leave on each side of the
          slaves.

        - _Call and exit should be _compatible_ with:_

          `-Amount' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: pady_value/1:
     *Usage 1:* `pady_value(+Amount)'
        - _Description:_ `Amount' specifies how much vertical
          external padding to leave on each side of the slave(s).
          Amount defaults to 0.

        - _Call and exit should be _compatible_ with:_

          `+Amount' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `pady_value(-Amount)'
        - _Description:_ Gets the `Amount' which specifies how much
          vertical external padding to leave on each side of the
          slaves.

        - _Call and exit should be _compatible_ with:_

          `-Amount' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: button_class (library),  Next: checkbutton_class (library),  Prev: canvas_class (library),  Up: Top

button_class (library)
**********************

* Menu:

* Usage and interface (button_class)::
* Documentation on exports (button_class)::


File: ciao.info,  Node: Usage and interface (button_class),  Next: Documentation on exports (button_class),  Prev: button_class (library),  Up: button_class (library)

Usage and interface (`button_class')
====================================

   * *Library usage:*

     `:- use_module(library(button_class)).'

   * *Exports:*
        - _Predicates:_

          `command_button/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (button_class),  Prev: Usage and interface (button_class),  Up: button_class (library)

Documentation on exports (`button_class')
=========================================

 - PREDICATE: command_button/1:
     *Usage 1:* `command_button(+Command)'
        - _Description:_ Sets a Tcl `Command' to be associated with
          the button. This `Command' is typically invoked when mouse
          button 1 is released over the button window.

        - _Call and exit should be _compatible_ with:_

          `+Command' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `command_button(-Command)'
        - _Description:_ Gets the Tcl `Command' associated with the
          button.

        - _Call and exit should be _compatible_ with:_

          `-Command' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: checkbutton_class (library),  Next: radiobutton_class (library),  Prev: button_class (library),  Up: Top

checkbutton_class (library)
***************************

* Menu:

* Usage and interface (checkbutton_class)::
* Documentation on exports (checkbutton_class)::


File: ciao.info,  Node: Usage and interface (checkbutton_class),  Next: Documentation on exports (checkbutton_class),  Prev: checkbutton_class (library),  Up: checkbutton_class (library)

Usage and interface (`checkbutton_class')
=========================================

   * *Library usage:*

     `:- use_module(library(checkbutton_class)).'

   * *Exports:*
        - _Predicates:_

          `variable_value/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (checkbutton_class),  Prev: Usage and interface (checkbutton_class),  Up: checkbutton_class (library)

Documentation on exports (`checkbutton_class')
==============================================

 - PREDICATE: variable_value/1:
     *Usage 1:* `variable_value(+Variable)'
        - _Description:_ Sets the value of global `Variable' to
          indicate whether or not this button is selected.

        - _Call and exit should be _compatible_ with:_

          `+Variable' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `variable_value(-Variable)'
        - _Description:_ Gets the value of global `Variable' which
          indicates if the button is selected.

        - _Call and exit should be _compatible_ with:_

          `-Variable' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: radiobutton_class (library),  Next: entry_class (library),  Prev: checkbutton_class (library),  Up: Top

radiobutton_class (library)
***************************

* Menu:

* Usage and interface (radiobutton_class)::
* Documentation on exports (radiobutton_class)::


File: ciao.info,  Node: Usage and interface (radiobutton_class),  Next: Documentation on exports (radiobutton_class),  Prev: radiobutton_class (library),  Up: radiobutton_class (library)

Usage and interface (`radiobutton_class')
=========================================

   * *Library usage:*

     `:- use_module(library(radiobutton_class)).'

   * *Exports:*
        - _Predicates:_

          `variable_value/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (radiobutton_class),  Prev: Usage and interface (radiobutton_class),  Up: radiobutton_class (library)

Documentation on exports (`radiobutton_class')
==============================================

 - PREDICATE: variable_value/1:
     *Usage 1:* `variable_value(+Variable)'
        - _Description:_ Specifies the value of global `Variable' to
          set whenever this button is selected.

        - _Call and exit should be _compatible_ with:_

          `+Variable' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `variable_value(-Variable)'
        - _Description:_ Gets the value of global `Variable' which
          indicates if this button is selected.

        - _Call and exit should be _compatible_ with:_

          `-Variable' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: entry_class (library),  Next: label_class (library),  Prev: radiobutton_class (library),  Up: Top

entry_class (library)
*********************

* Menu:

* Usage and interface (entry_class)::
* Documentation on exports (entry_class)::


File: ciao.info,  Node: Usage and interface (entry_class),  Next: Documentation on exports (entry_class),  Prev: entry_class (library),  Up: entry_class (library)

Usage and interface (`entry_class')
===================================

   * *Library usage:*

     `:- use_module(library(entry_class)).'

   * *Exports:*
        - _Predicates:_

          `textvariable_entry/1', `textvariablevalue_string/1',
          `textvariablevalue_number/1', `justify_entry/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `lists', `tcltk/examples/tk_test_aux',
          `tcltk/tcltk'.




File: ciao.info,  Node: Documentation on exports (entry_class),  Prev: Usage and interface (entry_class),  Up: entry_class (library)

Documentation on exports (`entry_class')
========================================

 - PREDICATE: textvariable_entry/1:
     *Usage 1:* `textvariable_entry(+Variable)'
        - _Description:_ `Variable' specifies the name of the Tcl
          variable

        - _Call and exit should be _compatible_ with:_

          `+Variable' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `textvariable_entry(-Variable)'
        - _Description:_ Gets the name of the Tcl `Variable'
          associated to the entry

        - _Call and exit should be _compatible_ with:_

          `-Variable' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: textvariablevalue_string/1:
     *Usage 1:* `textvariablevalue_string(+Value)'
        - _Description:_ Specifies the `Value' of the Tcl variable
          associated to the entry.

        - _Call and exit should be _compatible_ with:_

          `+Value' is a number.   (`basic_props:num/1')

     *Usage 2:* `textvariablevalue_string(-Value)'
        - _Description:_ `Value' is the value of the Tcl variable
          associated to the entry.

        - _Call and exit should be _compatible_ with:_

          `-Value' is a number.   (`basic_props:num/1')



 - PREDICATE: textvariablevalue_number/1:
     *Usage 1:* `textvariablevalue_number(+Value)'
        - _Description:_ Specifies the `Value' of the Tcl variable
          associated to the entry.

        - _Call and exit should be _compatible_ with:_

          `+Value' is a number.   (`basic_props:num/1')

     *Usage 2:* `textvariablevalue_number(-Value)'
        - _Description:_ `Value' is the value of the Tcl variable
          associated to the entry.

        - _Call and exit should be _compatible_ with:_

          `-Value' is a number.   (`basic_props:num/1')



 - PREDICATE: justify_entry/1:
     *Usage 1:* `justify_entry(+How)'
        - _Description:_ `How' specifies how to justify the text in
          the entry. `How' must be one of the values left, right or
          center. This option defaluts to left.

        - _Call and exit should be _compatible_ with:_

          `+How' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `justify_entry(-How)'
        - _Description:_ Gets `How' is justified the text.

        - _Call and exit should be _compatible_ with:_

          `-How' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: label_class (library),  Next: menubutton_class (library),  Prev: entry_class (library),  Up: Top

label_class (library)
*********************

* Menu:

* Usage and interface (label_class)::
* Documentation on exports (label_class)::


File: ciao.info,  Node: Usage and interface (label_class),  Next: Documentation on exports (label_class),  Prev: label_class (library),  Up: label_class (library)

Usage and interface (`label_class')
===================================

   * *Library usage:*

     `:- use_module(library(label_class)).'

   * *Exports:*
        - _Predicates:_

          `textvariable_label/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (label_class),  Prev: Usage and interface (label_class),  Up: label_class (library)

Documentation on exports (`label_class')
========================================

 - PREDICATE: textvariable_label/1:
     No further documentation available for this predicate.





File: ciao.info,  Node: menubutton_class (library),  Next: menu_entry_class (library),  Prev: label_class (library),  Up: Top

menubutton_class (library)
**************************

* Menu:

* Usage and interface (menubutton_class)::
* Documentation on exports (menubutton_class)::


File: ciao.info,  Node: Usage and interface (menubutton_class),  Next: Documentation on exports (menubutton_class),  Prev: menubutton_class (library),  Up: menubutton_class (library)

Usage and interface (`menubutton_class')
========================================

   * *Library usage:*

     `:- use_module(library(menubutton_class)).'

   * *Exports:*
        - _Predicates:_

          `menu_name/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `lists'.




File: ciao.info,  Node: Documentation on exports (menubutton_class),  Prev: Usage and interface (menubutton_class),  Up: menubutton_class (library)

Documentation on exports (`menubutton_class')
=============================================

 - PREDICATE: menu_name/1:
     *Usage 1:* `menu_name(+Menu)'
        - _Description:_ `Menu' posted when menubutton is clicked.

        - _Call and exit should be _compatible_ with:_

          `+Menu' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `menu_name(-Menu)'
        - _Description:_ Gets the name of the `Menu' asociated to the
          menubutton.

        - _Call and exit should be _compatible_ with:_

          `-Menu' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: menu_entry_class (library),  Next: shape_class (library),  Prev: menubutton_class (library),  Up: Top

menu_entry_class (library)
**************************

* Menu:

* Usage and interface (menu_entry_class)::
* Documentation on exports (menu_entry_class)::


File: ciao.info,  Node: Usage and interface (menu_entry_class),  Next: Documentation on exports (menu_entry_class),  Prev: menu_entry_class (library),  Up: menu_entry_class (library)

Usage and interface (`menu_entry_class')
========================================

   * *Library usage:*

     `:- use_module(library(menu_entry_class)).'

   * *Exports:*
        - _Predicates:_

          `set_name/1', `set_action/1', `label_value/1',
          `menu_name/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `tcltk_obj/menu_class', `lists'.




File: ciao.info,  Node: Documentation on exports (menu_entry_class),  Prev: Usage and interface (menu_entry_class),  Up: menu_entry_class (library)

Documentation on exports (`menu_entry_class')
=============================================

 - PREDICATE: set_name/1:
     *Usage:* `set_name(+Name)'
        - _Description:_ `Name' of the menubutton associated.

        - _Call and exit should be _compatible_ with:_

          `+Name' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: set_action/1:
     *Usage:* `set_action(+Predicate)'
        - _Description:_ Specifies `Predicate' asociated to the menu
          entry.

        - _Call and exit should be _compatible_ with:_

          `+Predicate' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: label_value/1:
     *Usage 1:* `label_value(+Value)'
        - _Description:_ `Value' specifies a value to be displayed as
          an identifying label in the menu entry.

        - _Call and exit should be _compatible_ with:_

          `+Value' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `label_value(-Value)'
        - _Description:_ Gets the string which identify label in the
          menu entry.

        - _Call and exit should be _compatible_ with:_

          `-Value' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: menu_name/1:
     *Usage 1:* `menu_name(+Menu)'
        - _Description:_ `Menu' posted when cascade entry is invoked.

        - _Call and exit should be _compatible_ with:_

          `+Menu' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `menu_name(-Menu)'
        - _Description:_ Gets the `Menu' asociated to the cascade
          entry.

        - _Call and exit should be _compatible_ with:_

          `-Menu' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: shape_class (library),  Next: arc_class (library),  Prev: menu_entry_class (library),  Up: Top

shape_class (library)
*********************

* Menu:

* Usage and interface (shape_class)::
* Documentation on exports (shape_class)::


File: ciao.info,  Node: Usage and interface (shape_class),  Next: Documentation on exports (shape_class),  Prev: shape_class (library),  Up: shape_class (library)

Usage and interface (`shape_class')
===================================

   * *Library usage:*

     `:- use_module(library(shape_class)).'

   * *Exports:*
        - _Predicates:_

          `bg_color/1', `border_width/1', `shape_class/0',
          `shape_class/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `tcltk_obj/canvas_class'.




File: ciao.info,  Node: Documentation on exports (shape_class),  Prev: Usage and interface (shape_class),  Up: shape_class (library)

Documentation on exports (`shape_class')
========================================

 - PREDICATE: bg_color/1:
     *Usage 1:* `bg_color(+BackgroundColor)'
        - _Description:_ `Background Color' specifies the color to
          use for drawing the shape's outline. This option defaults
          to black.

        - _Call and exit should be _compatible_ with:_

          `+BackgroundColor' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `bg_color(-BackgroundColor)'
        - _Description:_ Gets the shape `Background Color'.

        - _Call and exit should be _compatible_ with:_

          `-BackgroundColor' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: border_width/1:
     *Usage 1:* `border_width(+Width)'
        - _Description:_ Specifies the `Width' that the canvas widget
          should request from its geometry manager.

        - _Call and exit should be _compatible_ with:_

          `+Width' is a number.   (`basic_props:num/1')

     *Usage 2:* `border_width(-Width)'
        - _Description:_ Gets the `Width' of the canvas widget.

        - _Call and exit should be _compatible_ with:_

          `-Width' is a number.   (`basic_props:num/1')



 - PREDICATE: shape_class/0:
     *Usage:*
        - _Description:_  Creates a new shape object.



 - PREDICATE: shape_class/1:
     *Usage:* `shape_class(+ShapeList)'
        - _Description:_ Adds shapes of the list to the canvas object.

        - _Call and exit should be _compatible_ with:_

          `+ShapeList' is a list.   (`basic_props:list/1')




File: ciao.info,  Node: arc_class (library),  Next: oval_class (library),  Prev: shape_class (library),  Up: Top

arc_class (library)
*******************

* Menu:

* Usage and interface (arc_class)::
* Documentation on exports (arc_class)::


File: ciao.info,  Node: Usage and interface (arc_class),  Next: Documentation on exports (arc_class),  Prev: arc_class (library),  Up: arc_class (library)

Usage and interface (`arc_class')
=================================

   * *Library usage:*

     `:- use_module(library(arc_class)).'

   * *Exports:*
        - _Predicates:_

          `coord/4', `width/1', `height/1', `center/2',
          `angle_start/1', `style_type/1', `outline_color/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (arc_class),  Prev: Usage and interface (arc_class),  Up: arc_class (library)

Documentation on exports (`arc_class')
======================================

 - PREDICATE: coord/4:
     *Usage:* `coord(+X1,+Y1,+X2,+Y2)'
        - _Description:_ `X1', `Y1', `X2', and `Y2' give the
          coordinates of two diagonally opposite corners of a
          rectangular region enclosing the oval that defines the arc.

        - _Call and exit should be _compatible_ with:_

          `+X1' is an integer.   (`basic_props:int/1')

          `+Y1' is an integer.   (`basic_props:int/1')

          `+X2' is an integer.   (`basic_props:int/1')

          `+Y2' is an integer.   (`basic_props:int/1')



 - PREDICATE: width/1:
     *Usage 1:* `width(+Width)'
        - _Description:_ Specifies shape's `Width'.

        - _Call and exit should be _compatible_ with:_

          `+Width' is an integer.   (`basic_props:int/1')

     *Usage 2:* `width(-Width)'
        - _Description:_ Gets shape's `Width'.

        - _Call and exit should be _compatible_ with:_

          `-Width' is an integer.   (`basic_props:int/1')



 - PREDICATE: height/1:
     *Usage 1:* `height(+Height)'
        - _Description:_ Specifies shape's `Height'.

        - _Call and exit should be _compatible_ with:_

          `+Height' is an integer.   (`basic_props:int/1')

     *Usage 2:* `height(-Height)'
        - _Description:_ Gets shape's `Height'.

        - _Call and exit should be _compatible_ with:_

          `-Height' is an integer.   (`basic_props:int/1')



 - PREDICATE: center/2:
     *Usage 1:* `center(+X,+Y)'
        - _Description:_ Specifies shape's center with `X' and `Y'.

        - _Call and exit should be _compatible_ with:_

          `+X' is an integer.   (`basic_props:int/1')

          `+Y' is an integer.   (`basic_props:int/1')

     *Usage 2:* `center(-X,-Y)'
        - _Description:_ Gets shape's center with `X' and `Y'.

        - _Call and exit should be _compatible_ with:_

          `-X' is an integer.   (`basic_props:int/1')

          `-Y' is an integer.   (`basic_props:int/1')



 - PREDICATE: angle_start/1:
     *Usage 1:* `angle_start(+Angle)'
        - _Description:_ `Angle' specifies the beginning of the
          angular range occupied by the arc. Degrees are given in
          units of degrees measured counter-clockwise from the
          3-o'clock position; it may be either positive or negative.

        - _Call and exit should be _compatible_ with:_

          `+Angle' is an integer.   (`basic_props:int/1')

     *Usage 2:* `angle_start(-Angle)'
        - _Description:_ Gets the value of the `Angle'.

        - _Call and exit should be _compatible_ with:_

          `-Angle' is an integer.   (`basic_props:int/1')



 - PREDICATE: style_type/1:
     *Usage 1:* `style_type(+Style)'
        - _Description:_ `Style' specifies how to draw the arc. If
          type is pieslice (the default) then the arc's region is
          defined by a section of the oval's perimeter plus two line
          segments, one between the center of the oval and each end
          of the perimeter section. If type is chord then the arc's
          region is defined by a section of the oval's perimeter plus
          a single line segment connecting the two end points of the
          perimeter section. If type is arc then the arc's region
          consists of a section of the perimeter alone. In this last
          case the -fill option is ignored.

        - _Call and exit should be _compatible_ with:_

          `+Style' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `style_type(-Style)'
        - _Description:_ Gets the `Style' of the arc.

        - _Call and exit should be _compatible_ with:_

          `-Style' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: outline_color/1:
     *Usage 1:* `outline_color(+Color)'
        - _Description:_ `Color' specifies the color used for drawing
          the arc's outline. This option defaults to black.

        - _Call and exit should be _compatible_ with:_

          `+Color' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `outline_color(-Color)'
        - _Description:_ It gets arc's outline `Color'.

        - _Call and exit should be _compatible_ with:_

          `-Color' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: oval_class (library),  Next: poly_class (library),  Prev: arc_class (library),  Up: Top

oval_class (library)
********************

* Menu:

* Usage and interface (oval_class)::
* Documentation on exports (oval_class)::


File: ciao.info,  Node: Usage and interface (oval_class),  Next: Documentation on exports (oval_class),  Prev: oval_class (library),  Up: oval_class (library)

Usage and interface (`oval_class')
==================================

   * *Library usage:*

     `:- use_module(library(oval_class)).'

   * *Exports:*
        - _Predicates:_

          `coord/4', `width/1', `height/1', `center/2',
          `outline_color/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (oval_class),  Prev: Usage and interface (oval_class),  Up: oval_class (library)

Documentation on exports (`oval_class')
=======================================

 - PREDICATE: coord/4:
     *Usage:* `coord(+X1,+Y1,+X2,+Y2)'
        - _Description:_ `X1', `Y1', `X2', and `Y2' give the
          coordinates of two diagonally opposite corners of a
          rectangular region enclosing the oval.

        - _Call and exit should be _compatible_ with:_

          `+X1' is an integer.   (`basic_props:int/1')

          `+Y1' is an integer.   (`basic_props:int/1')

          `+X2' is an integer.   (`basic_props:int/1')

          `+Y2' is an integer.   (`basic_props:int/1')



 - PREDICATE: width/1:
     *Usage 1:* `width(+Width)'
        - _Description:_ Specifies shape's `Width'.

        - _Call and exit should be _compatible_ with:_

          `+Width' is an integer.   (`basic_props:int/1')

     *Usage 2:* `width(-Width)'
        - _Description:_ Gets shape's `Width'.

        - _Call and exit should be _compatible_ with:_

          `-Width' is an integer.   (`basic_props:int/1')



 - PREDICATE: height/1:
     *Usage 1:* `height(+Height)'
        - _Description:_ Specifies shape's `Heigh'.

        - _Call and exit should be _compatible_ with:_

          `+Height' is an integer.   (`basic_props:int/1')

     *Usage 2:* `height(-Height)'
        - _Description:_ Gets shape's `Height'.

        - _Call and exit should be _compatible_ with:_

          `-Height' is an integer.   (`basic_props:int/1')



 - PREDICATE: center/2:
     *Usage 1:* `center(+X,+Y)'
        - _Description:_ Specifies shape's center with `X' and `Y'.

        - _Call and exit should be _compatible_ with:_

          `+X' is an integer.   (`basic_props:int/1')

          `+Y' is an integer.   (`basic_props:int/1')

     *Usage 2:* `center(-X,-Y)'
        - _Description:_ Gets shape's center with `X' and `Y'.

        - _Call and exit should be _compatible_ with:_

          `-X' is an integer.   (`basic_props:int/1')

          `-Y' is an integer.   (`basic_props:int/1')



 - PREDICATE: outline_color/1:
     *Usage 1:* `outline_color(+Color)'
        - _Description:_ `Color' specifies the color to be used for
          drawing the oval's outline. This option defaults to black.

        - _Call and exit should be _compatible_ with:_

          `+Color' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `outline_color(-Color)'
        - _Description:_ Gets oval's outline `Color'.

        - _Call and exit should be _compatible_ with:_

          `-Color' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: poly_class (library),  Next: line_class (library),  Prev: oval_class (library),  Up: Top

poly_class (library)
********************

* Menu:

* Usage and interface (poly_class)::
* Documentation on exports (poly_class)::


File: ciao.info,  Node: Usage and interface (poly_class),  Next: Documentation on exports (poly_class),  Prev: poly_class (library),  Up: poly_class (library)

Usage and interface (`poly_class')
==================================

   * *Library usage:*

     `:- use_module(library(poly_class)).'

   * *Exports:*
        - _Predicates:_

          `vertices/1', `outline_color/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `lists'.




File: ciao.info,  Node: Documentation on exports (poly_class),  Prev: Usage and interface (poly_class),  Up: poly_class (library)

Documentation on exports (`poly_class')
=======================================

 - PREDICATE: vertices/1:
     *Usage 1:* `vertices(+ListofPoints)'
        - _Description:_ The arguments of the list specify the
          coordinates for three or more points that define a closed
          polygon. The first and last points may be the same. After
          the coordinates there may be any number of option-value
          pairs, each of which sets one of the configu- ration
          options for the item.

        - _Call and exit should be _compatible_ with:_

          `+ListofPoints' is a list.   (`basic_props:list/1')

     *Usage 2:* `vertices(-ListofPoints)'
        - _Description:_ Gets the list of vertices of the polygon.

        - _Call and exit should be _compatible_ with:_

          `-ListofPoints' is a list.   (`basic_props:list/1')



 - PREDICATE: outline_color/1:
     *Usage 1:* `outline_color(+Color)'
        - _Description:_ `Color' specifies the color to be used for
          drawing the polygon's outline. This option defaults to
          black.

        - _Call and exit should be _compatible_ with:_

          `+Color' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `outline_color(-Color)'
        - _Description:_ Gets poly's outline `Color'.

        - _Call and exit should be _compatible_ with:_

          `-Color' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: line_class (library),  Next: text_class (library),  Prev: poly_class (library),  Up: Top

line_class (library)
********************

* Menu:

* Usage and interface (line_class)::
* Documentation on exports (line_class)::


File: ciao.info,  Node: Usage and interface (line_class),  Next: Documentation on exports (line_class),  Prev: line_class (library),  Up: line_class (library)

Usage and interface (`line_class')
==================================

   * *Library usage:*

     `:- use_module(library(line_class)).'

   * *Exports:*
        - _Predicates:_

          `vertices/1', `arrowheads/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt', `lists'.




File: ciao.info,  Node: Documentation on exports (line_class),  Prev: Usage and interface (line_class),  Up: line_class (library)

Documentation on exports (`line_class')
=======================================

 - PREDICATE: vertices/1:
     *Usage 1:* `vertices(+ListofPoints)'
        - _Description:_ The arguments of the list specify the
          coordinates for two or more points that describe a serie of
          connected line segments.

        - _Call and exit should be _compatible_ with:_

          `+ListofPoints' is a list.   (`basic_props:list/1')

     *Usage 2:* `vertices(-ListofPoints)'
        - _Description:_ Gets the list of points of the line.

        - _Call and exit should be _compatible_ with:_

          `-ListofPoints' is a list.   (`basic_props:list/1')



 - PREDICATE: arrowheads/1:
     *Usage 1:* `arrowheads(+Where)'
        - _Description:_ `Where' indicates whether or not arrowheads
          are to be drawn at one or both ends of the line. `Where'
          must have one of the next values: none ( for no arrowheads
          ), first (for an arrowhead at the first point of the line),
          last (for an arrowhead at the last point of the line), or
          both (for arrowheads at both ends). This option defaults to
          none.

        - _Call and exit should be _compatible_ with:_

          `+Where' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `arrowheads(-Where)'
        - _Description:_ Gets position of the arrowheads.

        - _Call and exit should be _compatible_ with:_

          `-Where' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: text_class (library),  Next: The PiLLoW Web programming library,  Prev: line_class (library),  Up: Top

text_class (library)
********************

* Menu:

* Usage and interface (text_class)::
* Documentation on exports (text_class)::


File: ciao.info,  Node: Usage and interface (text_class),  Next: Documentation on exports (text_class),  Prev: text_class (library),  Up: text_class (library)

Usage and interface (`text_class')
==================================

   * *Library usage:*

     `:- use_module(library(text_class)).'

   * *Exports:*
        - _Predicates:_

          `coord/2', `point/2', `text_characters/1', `anchor/1',
          `font_type/1', `justify_text/1'.


   * *Other modules used:*
        - _System library modules:_

          `objects/objects_rt'.




File: ciao.info,  Node: Documentation on exports (text_class),  Prev: Usage and interface (text_class),  Up: text_class (library)

Documentation on exports (`text_class')
=======================================

 - PREDICATE: coord/2:
     *Usage:* `coord(+X,+Y)'
        - _Description:_ `X' and `Y' specify the coordinates of a
          point used to position the text on the display.

        - _Call and exit should be _compatible_ with:_

          `+X' is an integer.   (`basic_props:int/1')

          `+Y' is an integer.   (`basic_props:int/1')



 - PREDICATE: point/2:
     *Usage:* `point(+X,+Y)'
        - _Description:_ `X' and `Y' change the coordinates of a
          point used to position the text on the display.

        - _Call and exit should be _compatible_ with:_

          `+X' is an integer.   (`basic_props:int/1')

          `+Y' is an integer.   (`basic_props:int/1')



 - PREDICATE: text_characters/1:
     *Usage 1:* `text_characters(+Text)'
        - _Description:_ `Text' specifies the characters to be
          displayed in the text item. This option defaults to an
          empty string.

        - _Call and exit should be _compatible_ with:_

          `+Text' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `text_characters(-Text)'
        - _Description:_ Gets the text displayed in the text item.

        - _Call and exit should be _compatible_ with:_

          `-Text' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: anchor/1:
     *Usage 1:* `anchor(+AnchorPos)'
        - _Description:_ `AnchorPos' tells how to position the text
          relative to the positioning point for the text. This option
          defaluts to center.

        - _Call and exit should be _compatible_ with:_

          `+AnchorPos' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `anchor(-AnchorPos)'
        - _Description:_ Gets the position of the text relative to
          the positioning point.

        - _Call and exit should be _compatible_ with:_

          `-AnchorPos' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: font_type/1:
     *Usage 1:* `font_type(+Font)'
        - _Description:_ `Font' specifies the font to use for the
          text item. This option defaluts to arial.

        - _Call and exit should be _compatible_ with:_

          `+Font' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `font_type(-Font)'
        - _Description:_ Gets the value of the `Font' used for the
          text item.

        - _Call and exit should be _compatible_ with:_

          `-Font' is currently instantiated to an atom.
          (`term_typing:atom/1')



 - PREDICATE: justify_text/1:
     *Usage 1:* `justify_text(+How)'
        - _Description:_ `How' specifies how to justify the text
          within its bounding region. `How' must be one of the values
          left, right or center. This option defaluts to left.

        - _Call and exit should be _compatible_ with:_

          `+How' is currently instantiated to an atom.
          (`term_typing:atom/1')

     *Usage 2:* `justify_text(-How)'
        - _Description:_ Gets `How' is justified the text.

        - _Call and exit should be _compatible_ with:_

          `-How' is currently instantiated to an atom.
          (`term_typing:atom/1')




File: ciao.info,  Node: The PiLLoW Web programming library,  Next: HTML/XML/CGI programming,  Prev: text_class (library),  Up: Top

The PiLLoW Web programming library
**********************************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo,
<clip@clip.dia.fi.upm.es>, `http://www.clip.dia.fi.upm.es/', The CLIP
Group, School of Computer Science, Technical University of Madrid.

   This package implements the PiLLoW library [CHV96a]. The following
three chapters document, respectively, the predicates for
HTML/XML/CGI programming, the predicate for HTTP conectivity, and the
types used in the definition of the predicates (key for fully
understanding the other predicates). You can find a paper and some
additional information in the `library/pillow/doc' directory of the
distribution, and in the WWW at
`http://clip.dia.fi.upm.es/Software/pillow/pillow.html'. There is
also a _PiLLoW on-line tutorial_ (slides) at
`http://clip.dia.fi.upm.es/logalg/slides/C_pillow/C_pillow.html'
which illustrates the basic features and provides a number of
examples of PiLLoW use.

* Menu:

* Installing PiLLoW::
* Usage and interface (pillow)::


File: ciao.info,  Node: Installing PiLLoW,  Next: Usage and interface (pillow),  Prev: The PiLLoW Web programming library,  Up: The PiLLoW Web programming library

Installing PiLLoW
=================

   To correctly install PiLLoW, first, make sure you downloaded the
right version of PiLLoW (there are different versions for different
LP/CLP systems; the version that comes with Ciao is of course the
right one for Ciao). Then, please follow these steps:

  1. Copy the files in the `images' directory to a WWW accessible
     directory in your server.

  2. Edit the file `icon_address.pl' and change the fact to point to
     the URL to be used to access the images above.

  3. In the Ciao system the files are in the correct place, in other
     systems copy the files `pillow.pl' and `icon_address.pl' to a
     suitable directory so that your Prolog system will find them.



File: ciao.info,  Node: Usage and interface (pillow),  Prev: Installing PiLLoW,  Up: The PiLLoW Web programming library

Usage and interface (`pillow')
==============================

   * *Library usage:*

     `:- use_package(pillow).'

     or

     `:- module(...,...,[pillow]).'

   * *New operators defined:*

     `$/2' [150,xfx], `$/1' [150,fx].

   * *Other modules used:*
        - _System library modules:_

          `pillow/http', `pillow/html'.




File: ciao.info,  Node: HTML/XML/CGI programming,  Next: HTTP conectivity,  Prev: The PiLLoW Web programming library,  Up: Top

HTML/XML/CGI programming
************************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo, Sacha Varma.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#131 (2001/10/29, 20:47:56 CET)

   This module implements the predicates of the PiLLoW package
related to HTML/ XML generation and parsing, CGI and form handlers
programming, and in general all the predicates which do not imply the
use of the HTTP protocol.

* Menu:

* Usage and interface (html)::
* Documentation on exports (html)::
* Documentation on multifiles (html)::
* Other information (html)::


File: ciao.info,  Node: Usage and interface (html),  Next: Documentation on exports (html),  Prev: HTML/XML/CGI programming,  Up: HTML/XML/CGI programming

Usage and interface (`html')
============================

   * *Library usage:*

     `:- use_module(library(html)).'

   * *Exports:*
        - _Predicates:_

          `output_html/1', `html2terms/2', `xml2terms/2',
          `html_template/3', `html_report_error/1',
          `get_form_input/1', `get_form_value/3',
          `form_empty_value/1', `form_default/3', `set_cookie/2',
          `get_cookies/1', `url_query/2', `my_url/1', `url_info/2',
          `url_info_relative/3', `form_request_method/1',
          `icon_address/2', `html_protect/1', `http_lines/3'.

        - _Multifiles:_

          `html_expansion/2'.


   * *Other modules used:*
        - _System library modules:_

          `strings', `lists', `system', `pillow/pillow_aux',
          `pillow/pillow_types'.




File: ciao.info,  Node: Documentation on exports (html),  Next: Documentation on multifiles (html),  Prev: Usage and interface (html),  Up: HTML/XML/CGI programming

Documentation on exports (`html')
=================================

 - PREDICATE: output_html/1:
     `output_html(HTMLTerm)'

     Outputs `HTMLTerm', interpreted as an `html_term/1', to current
     output stream.




 - PREDICATE: html2terms/2:
     `html2terms(String,Terms)'

     `String' is a character list containing HTML code and `Terms' is
     its prolog structured representation.

     *Usage 1:* `html2terms(-string,+html_term)'
        - _Description:_ Translates an HTML-term into the HTML code
          it represents.

     *Usage 2:* `html2terms(+string,?canonic_html_term)'
        - _Description:_ Translates HTML code into a structured
          HTML-term.



 - PREDICATE: xml2terms/2:
     `xml2terms(String,Terms)'

     `String' is a character list containing XML code and `Terms' is
     its prolog structured representation.

     *Usage 1:* `xml2terms(-string,+html_term)'
        - _Description:_ Translates a XML-term into the XML code it
          represents.

     *Usage 2:* `xml2terms(+string,?canonic_xml_term)'
        - _Description:_ Translates XML code into a structured
          XML-term.



 - PREDICATE: html_template/3:
     `html_template(Chars,Terms,Dict)'

     Interprets `Chars' as an HTML template returning in `Terms' the
     corresponding structured HTML-term, which includes variables,
     and unifying `Dict' with a dictionary of those variables (an
     incomplete list of _name_`='_Var_ pairs). An HTML template is
     standard HTML code, but in which "slots" can be defined and
     given an identifier. These slots represent parts of the HTML
     code in which other HTML code can be inserted, and are
     represented in the HTML-term as free variables. There are two
     kinds of variables in templates:
        * Variables representing page contents. A variable with name
          _name_ is defined with the special tag `<V>'_name_`</V>'.

        * Variables representing tag attributes. They occur as an
          attribute or an attribute value starting with `_', followed
          by its name, which must be formed by alphabetic characters.


     As an example, suposse the following HTML template:
          <html>
          <body bgcolor=_bgcolor>
          <v>content</v>
          </body>
          </html>
     The following query in the Ciao toplevel shows how the template
     is parsed, and the dictionary returned:
          ?- file_to_string('template.html',_S), html_template(_S,Terms,Dict).
          
          Dict = [bgcolor=_A,content=_B|_],
          Terms = [env(html,[],["
          ",env(body,[bgcolor=_A],["
          ",_B,"
          "]),"
          "]),"
          "] ?
          
          yes
     If a dictionary with values is supplied at call time, then
     variables are unified accordingly inside the template:
          ?- file_to_string('template.html',_S),
             html_template(_S,Terms,[content=b("hello world!"),bgcolor="white"]).
          
          Terms = [env(html,[],["
          ",env(body,[bgcolor="white"],["
          ",b("hello world!"),"
          "]),"
          "]),"
          "] ?
          
          yes




 - PREDICATE: html_report_error/1:
     *Usage:* `html_report_error(Error)'
        - _Description:_ Outputs error `Error' as a standard HTML
          page.



 - PREDICATE: get_form_input/1:
     `get_form_input(Dict)'

     Translates input from the form (with either the POST or GET
     methods, and even with CONTENT_TYPE multipart/form-data) to a
     dictionary `Dict' of _attribute_=_value_ pairs. It translates
     empty values (which indicate only the presence of an attribute)
     to the atom `'$empty'', values with more than one line (from
     text areas or files) to a list of lines as strings, the rest to
     atoms or numbers (using `name/2').




 - PREDICATE: get_form_value/3:
     `get_form_value(Dict,Var,Val)'

     Unifies `Val' with the value for attribute `Var' in dictionary
     `Dict'. Does not fail: value is `''' if not found (this
     simplifies the programming of form handlers when they can be
     accessed directly).




 - PREDICATE: form_empty_value/1:
     *Usage:* `form_empty_value(Term)'
        - _Description:_ Checks that `Term', a value comming from a
          text area is empty (can have spaces, newlines and
          linefeeds).



 - PREDICATE: form_default/3:
     *Usage:* `form_default(+Val,+Default,-NewVal)'
        - _Description:_ Useful when a form is only partially filled,
          or when the executable can be invoked either by a link or
          by a form, to set form defaults. If the value of `Val' is
          empty then `NewVal'=`Default', else `NewVal'=`Val'.



 - PREDICATE: set_cookie/2:
     `set_cookie(Name,Value)'

     Sets a cookie of name `Name' and value `Value'. Must be invoked
     before outputting any data, including the `cgi_reply' html-term.




 - PREDICATE: get_cookies/1:
     `get_cookies(Cookies)'

     Unifies `Cookies' with a dictionary of _attribute_=_value_ pairs
     of the active cookies for this URL.




 - PREDICATE: url_query/2:
     `url_query(Dict,URLArgs)'

     Translates a dictionary `Dict' of parameter values into a string
     `URLArgs' for appending to a URL pointing to a form handler.




 - PREDICATE: my_url/1:
     `my_url(URL)'

     Unifies `URL' with the Uniform Resource Locator (WWW address) of
     this cgi executable.




 - PREDICATE: url_info/2:
     `url_info(URL,URLTerm)'

     Translates a URL `URL' to a Prolog structure `URLTerm' which
     details its various components, and vice-versa. For now non-HTTP
     URLs make the predicate fail.




 - PREDICATE: url_info_relative/3:
     `url_info_relative(URL,BaseURLTerm,URLTerm)'

     Translates a relative URL `URL' which appears in the HTML page
     refered to by `BaseURLTerm' into `URLTerm', a Prolog structure
     containing its absolute parameters. Absolute URLs are translated
     as with `url_info/2'. E.g.
          url_info_relative("dadu.html",
                            http('www.foo.com',80,"/bar/scoob.html"), Info)
     gives `Info = http('www.foo.com',80,"/bar/dadu.html")'.




 - PREDICATE: form_request_method/1:
     *Usage:* `form_request_method(Method)'
        - _Description:_ Unifies `Method' with the method of
          invocation of the form handler (`GET' or `POST').

        - _The following properties hold upon exit:_

          `Method' is an atom.   (`basic_props:atm/1')



 - PREDICATE: icon_address/2:
     `icon_address(Img,IAddress)'

     The PiLLoW image `Img' has URL `IAddress'.




 - PREDICATE: html_protect/1:
     `html_protect(Goal)'

     Calls `Goal'. If an error occurs during its execution, or it
     fails, an HTML page is output informing about the incident.
     Normaly the whole execution of a CGI is protected thus.

     _Meta-predicate_ with arguments: `html_protect(goal)'.

     *Usage:*
        - _Calls should, and exit will be compatible with:_

          `Goal' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: http_lines/3:
     *Usage:* `http_lines(Lines,String,Tail)'
        - _Description:_ `Lines' is a list of the lines with occur in
          `String' until `Tail'. The lines may end UNIX-style or
          DOS-style in `String', in `Lines' they have not end of line
          characters. Suitable to be used in DCGs.

        - _Calls should, and exit will be compatible with:_

          `Lines' is a list of `string's.   (`basic_props:list/2')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

          `Tail' is a string (a list of character codes).
          (`basic_props:string/1')




File: ciao.info,  Node: Documentation on multifiles (html),  Next: Other information (html),  Prev: Documentation on exports (html),  Up: HTML/XML/CGI programming

Documentation on multifiles (`html')
====================================

 - PREDICATE: html_expansion/2:
     The predicate is _multifile_.

     *Usage:* `html_expansion(Term,Expansion)'
        - _Description:_ Hook predicate to define macros. Expand
          occurrences of `Term' into `Expansion', in `output_html/1'.
          Take care to not transform something into itself!




File: ciao.info,  Node: Other information (html),  Prev: Documentation on multifiles (html),  Up: HTML/XML/CGI programming

Other information (`html')
==========================

   The code uses input from from L. Naish's forms and F. Bueno's
previous Chat interface. Other people who have contributed is (please
inform us if we leave out anybody): Markus Fromherz, Samir Genaim.


File: ciao.info,  Node: HTTP conectivity,  Next: PiLLoW types,  Prev: HTML/XML/CGI programming,  Up: Top

HTTP conectivity
****************

   *Author(s):* Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#114 (1999/11/24, 0:57:16 MET)

   This module implements the HTTP protocol, which allows retrieving
data from HTTP servers.

* Menu:

* Usage and interface (http)::
* Documentation on exports (http)::


File: ciao.info,  Node: Usage and interface (http),  Next: Documentation on exports (http),  Prev: HTTP conectivity,  Up: HTTP conectivity

Usage and interface (`http')
============================

   * *Library usage:*

     `:- use_module(library(http)).'

   * *Exports:*
        - _Predicates:_

          `fetch_url/3'.


   * *Other modules used:*
        - _System library modules:_

          `strings', `lists', `pillow/pillow_aux',
          `pillow/pillow_types', `pillow/http_ll'.




File: ciao.info,  Node: Documentation on exports (http),  Prev: Usage and interface (http),  Up: HTTP conectivity

Documentation on exports (`http')
=================================

 - PREDICATE: fetch_url/3:
     `fetch_url(URL,Request,Response)'

     Fetches the document pointed to by `URL' from Internet, using
     request parameters `Request', and unifies `Response' with the
     parameters of the response. Fails on timeout. Note that
     redirections are not handled automatically, that is, if
     `Response' contains terms of the form
     `status(redirection,301,_)' and `location(NewURL)', the program
     should in most cases access location `NewURL'.

     *Usage:* `fetch_url(URL,Request,Response)'
        - _The following properties should hold at call time:_

          `URL' specifies a URL.   (`pillow_types:url_term/1')

          `Request' is a list of `http_request_param's.
          (`basic_props:list/2')

        - _The following properties hold upon exit:_

          `Response' is a list of `http_response_param's.
          (`basic_props:list/2')




File: ciao.info,  Node: PiLLoW types,  Next: Persistent predicate database,  Prev: HTTP conectivity,  Up: Top

PiLLoW types
************

   *Author(s):* Daniel Cabeza.

   Here are defined the regular types used in the documentation of
the predicates of the PiLLoW package.

* Menu:

* Usage and interface (pillow_types)::
* Documentation on exports (pillow_types)::


File: ciao.info,  Node: Usage and interface (pillow_types),  Next: Documentation on exports (pillow_types),  Prev: PiLLoW types,  Up: PiLLoW types

Usage and interface (`pillow_types')
====================================

   * *Library usage:*

     `:- use_module(library(pillow_types)).'

   * *Exports:*
        - _Regular Types:_

          `canonic_html_term/1', `canonic_xml_term/1', `html_term/1',
          `form_dict/1', `form_assignment/1', `form_value/1',
          `value_dict/1', `url_term/1', `http_request_param/1',
          `http_response_param/1', `http_date/1', `weekday/1',
          `month/1', `hms_time/1'.




File: ciao.info,  Node: Documentation on exports (pillow_types),  Prev: Usage and interface (pillow_types),  Up: PiLLoW types

Documentation on exports (`pillow_types')
=========================================

 - REGTYPE: canonic_html_term/1:
     A term representing HTML code in canonical, structured way. It
     is a list of terms defined by the following predicate:
          canonic_html_item(comment(S)) :-
                  string(S).
          canonic_html_item(declare(S)) :-
                  string(S).
          canonic_html_item(env(Tag,Atts,Terms)) :-
                  atm(Tag),
                  list(Atts,tag_attrib),
                  canonic_html_term(Terms).
          canonic_html_item($(Tag,Atts)) :-
                  atm(Tag),
                  list(Atts,tag_attrib).
          canonic_html_item(S) :-
                  string(S).

          tag_attrib(Att) :-
                  atm(Att).
          tag_attrib(Att=Val) :-
                  atm(Att),
                  string(Val).
     Each structure represents one HTML construction:
    *env(*_tag_*,*_attribs_*,*_terms_*)*
          An HTML environment, with name _tag_, list of attributes
          _attribs_ and contents _terms_.

    *$(*_tag_*,*_attribs_*)*
          An HTML element of name _tag_ and list of attributes
          _attribs_. `($)/2' is defined by the pillow package as an
          infix, binary operator.

    *comment(*_string_*)*
          An HTML comment (translates to/from `<!--'_string_`-->').

    *declare(*_string_*)*
          An HTML declaration, they are used only in the header
          (translates to/from `<!'_string_`>').

    _string_
          Normal text is represented as a list of character codes.

     For example, the term
          env(a,[href="www.therainforestsite.com"],
                ["Visit ",img$[src="TRFS.gif"]])
     is output to (or parsed from):
          <a href="www.therainforestsite.com">Visit <img src="TRFS.gif"></a>

     *Usage:* `canonic_html_term(HTMLTerm)'
        - _Description:_ `HTMLTerm' is a term representing HTML code
          in canonical form.



 - REGTYPE: canonic_xml_term/1:
     A term representing XML code in canonical, structured way. It is
     a list of terms defined by the following predicate (see
     `tag_attrib/1' definition in `canonic_html_term/1'):
          canonic_xml_item(Term) :-
                  canonic_html_item(Term).
          canonic_xml_item(xmldecl(Atts)) :-
                  list(Atts,tag_attrib).
          canonic_xml_item(env(Tag,Atts,Terms)) :-
                  atm(Tag),
                  list(Atts,tag_attrib),
                  canonic_xml_term(Terms).
          canonic_xml_item(elem(Tag,Atts)) :-
                  atm(Tag),
                  list(Atts,tag_attrib).
     In addition to the structures defined by `canonic_html_term/1'
     (the `($)/2' structure appears only in malformed XML code), the
     following structures can be used:
    *elem(*_tag_*,*_atts_*)*
          Specifies an XML empty element of name _tag_ and list of
          attributes _atts_. For example, the term
               elem(arc,[weigh="3",begin="n1",end="n2"])
          is output to (or parsed from):
               <arc weigh="3" begin="n1" end="n2"/>

    *xmldecl(*_atts_*)*
          Specifies an XML declaration with attributes _atts_
          (translates to/from `<?xml '_atts_`?>')

     *Usage:* `canonic_xml_term(XMLTerm)'
        - _Description:_ `XMLTerm' is a term representing XML code in
          canonical form.



 - REGTYPE: html_term/1:
     A term which represents HTML or XML code in a structured way. In
     addition to the structures defined by `canonic_html_term/1' or
     `canonic_xml_term/1', the following structures can be used:
    *begin(*_tag_*,*_atts_*)*
          It translates to the start of an HTML environment of name
          _tag_ and attributes _atts_. There exists also a
          *begin(_tag_)* structure. Useful, in conjunction with the
          next structure, when including in a document output
          generated by an existing piece of code (e.g. _tag_ =
          `pre'). Its use is otherwise discouraged.

    *end(*_tag_*)*
          Translates to the end of an HTML environment of name _tag_.

    *start*
          Used at the beginning of a document (translates to
          `<html>').

    *end*
          Used at the end of a document (translates to `</html>').

    `--'
          Produces a horizontal rule (translates to `<hr>').

    *\\*
          Produces a line break (translates to `<br>').

    *$*
          Produces a paragraph break (translates to `<p>').

    *image(*_address_*)*
          Used to include an image of address (URL) _address_
          (equivalent to `img$[src='_address_`]').

    *image(*_address_*,*_atts_*)*
          As above with the list of attributes _atts_.

    *ref(*_address_*,*_text_*)*
          Produces a hypertext link, _address_ is the URL of the
          referenced resource, _text_ is the text of the reference
          (equivalent to `a([href='_address_`],'_text_`)').

    *label(*_name_*,*_text_*)*
          Labels _text_ as a target destination with label _name_
          (equivalent to `a([name='_name_`],'_text_`)').

    *heading(*_n_*,*_text_*)*
          Produces a heading of level _n_ (between 1 and 6), _text_
          is the text to be used as heading. Useful when one wants a
          heading level relative to another heading (equivalent to
          `h'_n_`('_text_`)').

    *itemize(*_items_*)*
          Produces a list of bulleted items, _items_ is a list of
          corresponding HTML terms (translates to a `<ul>'
          environment).

    *enumerate(*_items_*)*
          Produces a list of numbered items, _items_ is a list of
          corresponding HTML terms (translates to a `<ol>'
          environment).

    *description(*_defs_*)*
          Produces a list of defined items, _defs_ is a list whose
          elements are definitions, each of them being a Prolog
          sequence (composed by `','/2' operators). The last element
          of the sequence is the definition, the other (if any) are
          the defined terms (translates to a `<dl>' environment).

    *nice_itemize(*_img_*,*_items_*)*
          Produces a list of bulleted items, using the image _img_ as
          bullet. The predicate `icon_address/2' provides a colored
          bullet.

    *preformatted(*_text_*)*
          Used to include preformatted text, _text_ is a list of HTML
          terms, each element of the list being a line of the
          resulting document (translates to a `<pre>' environment).

    *verbatim(*_text_*)*
          Used to include text verbatim, special HTML characters
          (`<,>,&,"' and space) are translated into its quoted HTML
          equivalent.

    *prolog_term(*_term_*)*
          Includes any prolog term _term_, represented in functional
          notation. Variables are output as `_'.

    *nl*
          Used to include a newline in the HTML source (just to
          improve human readability).

    *entity(*_name_*)*
          Includes the entity of name _name_ (ISO-8859-1 special
          character).

    *start_form(*_addr_*,*_atts_*)*
          Specifies the beginning of a form. _addr_ is the address
          (URL) of the program that will handle the form, and _atts_
          other attributes of the form, as the method used to invoke
          it. If _atts_ is not present (there is only one argument)
          the method defaults to POST.

    *start_form*
          Specifies the beginning of a form without assigning address
          to the handler, so that the form handler will be the
          cgi-bin executable producing the form.

    *end_form*
          Specifies the end of a form.

    *checkbox(*_name_*,*_state_*)*
          Specifies an input of type `checkbox' with name _name_,
          _state_ is `on' if the checkbox is initially checked.

    *radio(*_name_*,*_value_*,*_selected_*)*
          Specifies an input of type `radio' with name _name_
          (several radio buttons which are interlocked must share
          their name), _value_ is the the value returned by the
          button, if _selected_=_value_ the button is initially
          checked.

    *input(*_type_*,*_atts_*)*
          Specifies an input of type _type_ with a list of attributes
          _atts_. Possible values of _type_ are `text', `hidden',
          `submit', `reset', ldots

    *textinput(*_name_*,*_atts_*,*_text_*)*
          Specifies an input text area of name _name_. _text_
          provides the default text to be shown in the area, _atts_ a
          list of attributes.

    *option(*_name_*,*_val_*,*_options_*)*
          Specifies a simple option selector of name _name_,
          _options_ is the list of available options and _val_ is the
          initial selected option (if _val_ is not in _options_ the
          first item is selected by default) (translates to a
          `<select>' environment).

    *menu(*_name_*,*_atts_*,*_items_*)*
          Specifies a menu of name _name_, list of attributes _atts_
          and list of options _items_. The elements of the list
          _items_ are marked with the prefix operator `$' to indicate
          that they are selected (translates to a `<select>'
          environment).

    *form_reply*

    *cgi_reply*
          This two are equivalent, they do not generate HTML, rather,
          the CGI protocol requires this content descriptor to be
          used at the beginning by CGI executables (including form
          handlers) when replying (translates to `Content-type:
          text/html').

    *pr*
          Includes in the page a graphical logo with the message
          "Developed using the PiLLoW Web programming library", which
          points to the manual and library source.

    _name_*(*_text_*)*
          A term with functor _name_/1, different from the special
          functors defined herein, represents an HTML environment of
          name _name_ and included text _text_. For example, the term
                  address('clip@clip.dia.fi.upm.es')
          is translated into the HTML source
                  <address>clip@clip.dia.fi.upm.es</address>

    _name_*(*_atts_*,*_text_*)*
          A term with functor _name_/2, different from the special
          functors defined herein, represents an HTML environment of
          name _name_, attributes _atts_ and included text _text_.
          For example, the term

                  a([href='http://www.clip.dia.fi.upm.es/'],"Clip home")
          represents the HTML source
                  <a href="http://www.clip.dia.fi.upm.es/">Clip home</a>

     *Usage:* `html_term(HTMLTerm)'
        - _Description:_ `HTMLTerm' is a term representing HTML code.



 - REGTYPE: form_dict/1:
     *Usage:* `form_dict(Dict)'
        - _Description:_ `Dict' is a dictionary of values of the
          attributes of a form. It is a list of `form_assignment'



 - REGTYPE: form_assignment/1:
     *Usage:* `form_assignment(Eq)'
        - _Description:_ `Eq' is an assignment of value of an
          attribute of a form. It is defined by:
               form_assignment(A=V) :-
                       atm(A),
                       form_value(V).

               form_value(A) :-
                       atm(A).
               form_value(N) :-
                       num(N).
               form_value(L) :-
                       list(L,string).




 - REGTYPE: form_value/1:
     *Usage:* `form_value(V)'
        - _Description:_ `V' is a value of an attribute of a form.



 - REGTYPE: value_dict/1:
     *Usage:* `value_dict(Dict)'
        - _Description:_ `Dict' is a dictionary of values. It is a
          list of pairs _atom_=_constant_.



 - REGTYPE: url_term/1:
     A term specifying an Internet Uniform Resource Locator.
     Currently only HTTP URLs are supported. Example:
     `http('www.clip.dia.fi.upm.es',80,"/Software/Ciao/")'. Defined as
          url_term(http(Host,Port,Document)) :-
                  atm(Host),
                  int(Port),
                  string(Document).

     *Usage:* `url_term(URL)'
        - _Description:_ `URL' specifies a URL.



 - REGTYPE: http_request_param/1:
     A parameter of an HTTP request:
        * *head:* Specify that the document content is not wanted.

        * *timeout(*_T_*):* _T_ specifies the time in seconds to wait
          for the response. Default is 300 seconds.

        * *if_modified_since(*_Date_*):* Get document only if newer
          than _Date_. _Date_ has the format defined by `http_date/1'.

        * *user_agent(*_Agent_*):* Provides a user-agent field,
          _Agent_ is an atom. The string `"PiLLoW/1.1"' (or whatever
          version of PiLLoW is used) is appended.

        * *authorization(*_Scheme_,_Params_*):* To provide
          credentials. See RFC 1945 for details.

        * *_option_(*_Value_*):* Any unary term, being _Value_ an
          atom, can be used to provide another valid option (e.g.
          `from('user@machine')').

     *Usage:* `http_request_param(Request)'
        - _Description:_ `Request' is a parameter of an HTTP request.



 - REGTYPE: http_response_param/1:
     A parameter of an HTTP response:
        * *content(*_String_*):* _String_ is the document content
          (list of bytes). If the `head' parameter of the HTTP
          request is used, an empty list is get here.

        * *status(*_Type,Code,Reason_*):* _Type_ is an atom denoting
          the response type, _Code_ is the status code (an integer),
          and _Reason_ is a string holding the reason phrase.

        * *message_date(*_Date_*):* _Date_ is the date of the
          response, with format defined by `http_date/1'.

        * *location(*_Loc_*):* This parameter appears when the
          document has moved, _Loc_ is an atom holding the new
          location.

        * *http_server(*_Server_*):* _Server_ is the server
          responding, as a string.

        * *authenticate(*_Params_*):* Returned if document is
          protected, _Params_ is a list of chagenges. See RFC 1945
          for details.

        * *allow(*_Methods_*):* _Methods_ are the methods allowed by
          the server, as a list of atoms.

        * *content_encoding(*_Encoding_*):* _Encoding_ is an atom
          defining the encoding.

        * *content_length(*_Length_*):* _Length_ is the length of the
          document (an integer).

        * *content_type(*_Type,Subtype,Params_*):* Specifies the
          document content type, _Type_ and _Subtype_ are atoms,
          _Params_ a list of parameters (e.g.
          `content_type(text,html,[])').

        * *expires(*_Date_*):* _Date_ is the date after which the
          entity should be considered stale. Format defined by
          `http_date/1'.

        * *last_modified(*_Date_*):* _Date_ is the date at which the
          sender believes the resource was last modified. Format
          defined by `http_date/1'.

        * *pragma(*_String_*):* Miscellaneous data.

        * *_header_(*_String_*):* Any other functor _header_/1 is an
          extension header.

     *Usage:* `http_response_param(Response)'
        - _Description:_ `Response' is a parameter of an HTTP
          response.



 - REGTYPE: http_date/1:
     `http_date(Date)'

     `Date' is a term defined as
          http_date(date(WeekDay,Day,Month,Year,Time)) :-
                  weekday(WeekDay),
                  int(Day),
                  month(Month),
                  int(Year),
                  hms_time(Time).
     .

     *Usage:* `http_date(Date)'
        - _Description:_ `Date' is a term denoting a date.



 - REGTYPE: weekday/1:
     A regular type, defined as follows:
               weekday('Monday').
               weekday('Tuesday').
               weekday('Wednesday').
               weekday('Thursday').
               weekday('Friday').
               weekday('Saturday').
               weekday('Sunday').




 - REGTYPE: month/1:
     A regular type, defined as follows:
               month('January').
               month('February').
               month('March').
               month('April').
               month('May').
               month('June').
               month('July').
               month('August').
               month('September').
               month('October').
               month('November').
               month('December').




 - REGTYPE: hms_time/1:
     *Usage:* `hms_time(Time)'
        - _Description:_ `Time' is an atom of the form `hh:mm:ss'




File: ciao.info,  Node: Persistent predicate database,  Next: Using the persdb library,  Prev: PiLLoW types,  Up: Top

Persistent predicate database
*****************************

   *Author(s):* J.M. Gomez, D. Cabeza, and M. Hermenegildo,
`clip@dia.fi.upm.es', `http://www.clip.dia.fi.upm.es/', The CLIP
Group, Facultad de Informa'tica, Universidad Polite'cnica de Madrid.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#96 (2001/5/2, 12:29:31 CEST)

* Menu:

* Introduction to persistent predicates::
* Persistent predicates::
* Using file-based persistent predicates::
* Implementation Issues::
* Defining an initial database::
* Using persistent predicates from the top level::
* Usage and interface (persdbrt)::
* Documentation on exports (persdbrt)::
* Documentation on multifiles (persdbrt)::
* Documentation on internals (persdbrt)::
* Known bugs and planned improvements (persdbrt)::


File: ciao.info,  Node: Introduction to persistent predicates,  Next: Persistent predicates,  Prev: Persistent predicate database,  Up: Persistent predicate database

Introduction to persistent predicates
=====================================

   This library implements a _generic persistent predicate database_.
The basic notion implemented by the library is that of a persistent
predicate. The persistent predicate concept provides a simple, yet
powerful generic persistent data access method [CHGT98,Par97]. A
persistent predicate is a special kind of dynamic, data predicate
that "resides" in some persistent medium (such as a set of files, a
database, etc.) that is typically external to the program using such
predicates. The main effect is that any changes made to to a
persistent predicate from a program "survive" across executions.
I.e., if the program is halted and restarted the predicate that the
new process sees is in precisely the same state as it was when the
old process was halted (provided no change was made in the meantime
to the storage by other processes or the user).

   Persistent predicates appear to a program as ordinary predicates,
and calls to these predicates can appear in clause bodies in the
usual way. However, the definitions of these predicates do not appear
in the program. Instead, the library maintains automatically the
definitions of predicates which have been declared as persistent in
the persistent storage.

   Updates to persistent predicates can be made using enhanced
versions of `asserta_fact/1', `assertz_fact/1' and `retract_fact/1'.
The library makes sure that each update is a transactional update, in
the sense that if the update terminates, then the permanent storage
has definitely been modified. For example, if the program making the
updates is halted just after the update and then restarted, then the
updated state of the predicate will be seen. This provides security
against possible data loss due to, for example, a system crash. Also,
due to the atomicity of the transactions, persistent predicates allow
concurrent updates from several programs.


File: ciao.info,  Node: Persistent predicates,  Next: Using file-based persistent predicates,  Prev: Introduction to persistent predicates,  Up: Persistent predicate database

Persistent predicates, files, and relational databases
======================================================

   The concept of persistent predicates provided by this library
essentially implements a light-weight, simple, and at the same time
powerful form of relational database (a deductive database), and
which is standalone, in the sense that it does not require external
support, other than the file management capabilities provided by the
operating system. This is due to the fact that the persistent
predicates are in fact stored in one or more auxiliary files below a
given directory.

   This type of database is specially useful when building small to
medium-sized standalone applications in Prolog which require
persistent storage. In many cases it provides a much easier way of
implementing such storage than using files under direct program
control. For example, interactive applications can use persistent
predicates to represent their internal state in a way that is close
to the application. The persistence of such predicates then allows
automatically restoring the state to that at the end of a previous
session. Using persistent predicates amounts to simply declaring some
predicates as such and eliminates having to worry about opening
files, closing them, recovering from system crashes, etc.

   In other cases, however, it may be convenient to use a relational
database as persistent storage. This may be the case, for example,
when the data already resides in such a database (where it is perhaps
accessed also by other applications) or the volume of data is very
large.  `persdb_sql' [CCG98] is a companion library which implements
the same notion of persistent predicates used herein, but keeping the
storage in a relational database. This provides a very natural and
transparent way to access SQL database relations from a Prolog
program. In that library, facilities are also provided for reflecting
more complex _views_ of the database relations as predicates. Such
views can be constructed as conjunctions, disjunctions, projections,
etc. of database relations, and may include SQL-like aggregation
operations.

   A nice characteristic of the notion of persistent predicates used
in both of these libraries is that it abstracts away how the
predicate is actually stored. Thus, a program can use persistent
predicates stored in files or in external relational databases
interchangeably, and the type of storage used for a given predicate
can be changed without having to modify the program (except for
replacing the corresponding `persistent/2' declarations).

   An example application of the `persdb' and `persdb_sql' libraries
(and also the `pillow' library [CH97]), is `WebDB' [GCH98].  `WebDB'
is a generic, highly customizable _deductive database engine_ with an
_html interface_.  `WebDB' allows creating and maintaining
Prolog-based databases as well as relational databases (residing in
conventional relational database engines) using any standard WWW
browser.


File: ciao.info,  Node: Using file-based persistent predicates,  Next: Implementation Issues,  Prev: Persistent predicates,  Up: Persistent predicate database

Using file-based persistent predicates
======================================

   Persistent predicates can be declared statically, using
`persistent/2' declarations (which is the preferred method, when
possible), or dynamically via calls to `make_persistent/2'.
Currently, persistent predicates may only contain facts, i.e., they
are _dynamic_ predicates of type `data/1'.

   Predicates declared as persistent are linked to directory, and the
persistent state of the predicate will be kept in several files below
that directory. The files in which the persistent predicates are
stored are in readable, plain ASCII format, and in Prolog syntax. One
advantage of this approach is that such files can also be created or
edited by hand, in a text editor, or even by other applications.

   An example definition of a persistent predicate implemented by
files follows:

     :- persistent(p/3,dbdir).
     
     persistent_dir(dbdir, '/home/clip/public_html/db').

   The first line declares the predicate `p/3' persistent. The
argument `dbdir' is a key used to index into a fact of the relation
`persistent_dir/2', which specifies the directory where the
corresponding files will be kept. The effect of the declaration,
together with the `persistent_dir/2' fact, is that, although the
predicate is handled in the same way as a normal data predicate, in
addition the system will create and maintain efficiently a persistent
version of `p/3' via files in the directory
`/home/clip/public_html/db'.

   The level of indirection provided by the `dbdir' argument makes it
easy to place the storage of several persistent predicates in a
common directory, by specifying the same key for all of them. It also
allows changing the directory for several such persistent predicates
by modifying only one fact in the program. Furthermore, the
`persistent_dir/2' predicate can even be dynamic and specified at
run-time.


File: ciao.info,  Node: Implementation Issues,  Next: Defining an initial database,  Prev: Using file-based persistent predicates,  Up: Persistent predicate database

Implementation Issues
=====================

   We outline the current implementation approach. This
implementation attempts to provide at the same time efficiency and
security. To this end, up to three files are used for each predicate
(the persistence set): the data file, the operations file, and the
backup file. In the updated state the facts (tuples) that define the
predicate are stored in the data file and the operations file is
empty (the backup file, which contains a security copy of the data
file, may or may not exist).

   While a program using a persistent predicate is running, any
insertion (assert) or deletion (retract) operations on the predicate
are performed on both the program memory and on the persistence set.
However, in order to incurr only a small overhead in the execution,
rather than changing the data file directly, a record of each of the
insertion and deletion operations is _appended_ to the operations
file. The predicate is then in a transient state, in that the
contents of the data file do not reflect exactly the current state of
the corresponding predicate. However, the complete persistence set
does.

   When a program starts, all pending operations in the operations
file are performed on the data file. A backup of the data file is
created first to prevent data loss if the system crashes during this
operation. The order in which this updating of files is done ensures
that, if at any point the process dies, on restart the data will be
completely recovered. This process of updating the persistence set
can also be triggered at any point in the execution of the program
(for example, when halting) by calling `update_files'.


File: ciao.info,  Node: Defining an initial database,  Next: Using persistent predicates from the top level,  Prev: Implementation Issues,  Up: Persistent predicate database

Defining an initial database
============================

   It is possible to define an initial database by simply including
in the program code facts of persistent predicates. They will be
included in the persistent database when it is created. They are
ignored in successive executions.


File: ciao.info,  Node: Using persistent predicates from the top level,  Next: Usage and interface (persdbrt),  Prev: Defining an initial database,  Up: Persistent predicate database

Using persistent predicates from the top level
==============================================

   Special care must be taken when loading into the top level modules
or user files which use persistent predicates. Beforehand, a goal
`use_module(library('persdb/persdbrt'))' must be issued. Furthermore,
since persistent predicates defined by the loaded files are in this
way defined dynamically, a call to `initialize_db/0' is commonly
needed after loading and before calling predicates of these files.


File: ciao.info,  Node: Usage and interface (persdbrt),  Next: Documentation on exports (persdbrt),  Prev: Using persistent predicates from the top level,  Up: Persistent predicate database

Usage and interface (`persdbrt')
================================

   * *Library usage:*

     There are two packages which implement persistence: `persdb' and
     `'persdb/ll'' (for low level). In the first, the standard
     builtins `asserta_fact/1', `assertz_fact/1', and
     `retract_fact/1' are replaced by new versions which handle
     persistent data predicates, behaving as usual for normal data
     predicates. In the second package, predicates with names
     starting with `p' are defined, so that there is not overhead in
     calling the standard builtins. In any case, each package is used
     as usual: including it in the package list of the module, or
     using the `use_package/1' declaration.

   * *Exports:*
        - _Predicates:_

          `passerta_fact/1', `passertz_fact/1', `pretract_fact/1',
          `asserta_fact/1', `assertz_fact/1', `retract_fact/1',
          `initialize_db/0', `make_persistent/2', `update_files/0',
          `update_files/1'.

        - _Multifiles:_

          `persistent_dir/2'.


   * *Other modules used:*
        - _System library modules:_

          `terms', `lists', `streams', `read', `aggregates', `system',
          `file_locks/file_locks'.




File: ciao.info,  Node: Documentation on exports (persdbrt),  Next: Documentation on multifiles (persdbrt),  Prev: Usage and interface (persdbrt),  Up: Persistent predicate database

Documentation on exports (`persdbrt')
=====================================

 - PREDICATE: passerta_fact/1:
     _Meta-predicate_ with arguments: `passerta_fact(fact)'.

     *Usage:* `passerta_fact(Fact)'
        - _Description:_ Persistent version of `asserta_fact/1': the
          current instance of `Fact' is interpreted as a fact (i.e.,
          a relation tuple) and is added at the beginning of the
          definition of the corresponding predicate. The predicate
          concerned must be declared `persistent'. Any uninstantiated
          variables in the `Fact' will be replaced by new, private
          variables. Defined in the `'persdb/ll'' package.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: passertz_fact/1:
     _Meta-predicate_ with arguments: `passertz_fact(fact)'.

     *Usage:* `passertz_fact(Fact)'
        - _Description:_ Persistent version of `assertz_fact/1': the
          current instance of `Fact' is interpreted as a fact (i.e.,
          a relation tuple) and is added at the end of the definition
          of the corresponding predicate. The predicate concerned
          must be declared `persistent'. Any uninstantiated variables
          in the `Fact' will be replaced by new, private variables.
          Defined in the `'persdb/ll'' package.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: pretract_fact/1:
     _Meta-predicate_ with arguments: `pretract_fact(fact)'.

     *Usage:* `pretract_fact(Fact)'
        - _Description:_ Persistent version of `retract_fact/1':
          deletes on backtracking all the facts which unify with
          `Fact'. The predicate concerned must be declared
          `persistent'. Defined in the `'persdb/ll'' package.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: asserta_fact/1:
     _Meta-predicate_ with arguments: `asserta_fact(fact)'.

     *Usage:* `asserta_fact(Fact)'
        - _Description:_ Same as `passerta_fact/1', but if the
          predicate concerned is not persistent then behaves as the
          builtin of the same name. Defined in the `persdb' package.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: assertz_fact/1:
     _Meta-predicate_ with arguments: `assertz_fact(fact)'.

     *Usage:* `assertz_fact(Fact)'
        - _Description:_ Same as `passertz_fact/1', but if the
          predicate concerned is not persistent then behaves as the
          builtin of the same name. Defined in the `persdb' package.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: retract_fact/1:
     _Meta-predicate_ with arguments: `retract_fact(fact)'.

     *Usage:* `retract_fact(Fact)'
        - _Description:_ Same as `pretract_fact/1', but if the
          predicate concerned is not persistent then behaves as the
          builtin of the same name. Defined in the `persdb' package.

        - _The following properties should hold at call time:_

          `Fact' is a term which represents a goal, i.e., an atom or
          a structure.   (`basic_props:callable/1')



 - PREDICATE: initialize_db/0:
     *Usage:*
        - _Description:_ Initializes the whole database, updating the
          state of the declared persistent predicates. Must be called
          explicitly after dynamically defining clauses for
          `persistent_dir/2'.



 - PREDICATE: make_persistent/2:
     _Meta-predicate_ with arguments: `make_persistent(spec,?)'.

     *Usage:* `make_persistent(PredDesc,Keyword)'
        - _Description:_ Dynamic version of the `persistent'
          declaration.

        - _The following properties should hold at call time:_

          `PredDesc' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')

          `Keyword' is an atom corresponding to a directory
          identifier.   (`persdbrt:keyword/1')



 - PREDICATE: update_files/0:
     *Usage:*
        - _Description:_ Updates the files comprising the persistence
          set of all persistent predicates defined in the application.



 - PREDICATE: update_files/1:
     _Meta-predicate_ with arguments: `update_files(list(spec))'.

     *Usage:* `update_files(PredSpecList)'
        - _Description:_ Updates the files comprising the persistence
          set of the persistent predicates in `PredSpecList'.

        - _Call and exit should be _compatible_ with:_

          `PredSpecList' is a list of `predname's.
          (`basic_props:list/2')




File: ciao.info,  Node: Documentation on multifiles (persdbrt),  Next: Documentation on internals (persdbrt),  Prev: Documentation on exports (persdbrt),  Up: Persistent predicate database

Documentation on multifiles (`persdbrt')
========================================

 - PREDICATE: persistent_dir/2:
     The predicate is _multifile_.

     The predicate is of type _data_.

     *Usage:* `persistent_dir(Keyword,Location_Path)'
        - _Description:_ Relates identifiers of locations (the
          `Keyword's) with descriptions of such locations
          (`Location_Path's). `Location_Path' is *a directory* and it
          means that the definition for the persistent predicates
          associated with `Keyword' is kept in files below that
          directory (which must previously exist). These files, in
          the updated state, contain the actual definition of the
          predicate in Prolog syntax (but with module names resolved).

        - _The following properties should hold at call time:_

          `Keyword' is an atom corresponding to a directory
          identifier.   (`persdbrt:keyword/1')

          `Location_Path' is an atom, the name of a directory.
          (`persdbrt:directoryname/1')




File: ciao.info,  Node: Documentation on internals (persdbrt),  Next: Known bugs and planned improvements (persdbrt),  Prev: Documentation on multifiles (persdbrt),  Up: Persistent predicate database

Documentation on internals (`persdbrt')
=======================================

 - DECLARATION: persistent/2:
     *Usage:* :- `persistent(PredDesc,Keyword)'.
        - _Description:_ Declares the predicate `PredDesc' as
          persistent. `Keyword' is the identifier of a location where
          the persistent storage for the predicate is kept. The
          location `Keyword' is described in the `persistent_dir'
          predicate, which must contain a fact in which the first
          argument unifies with `Keyword'.

        - _The following properties should hold upon exit:_

          `PredDesc' is a Name/Arity structure denoting a predicate
          name:
               predname(P/A) :-
                       atm(P),
                       nnegint(A).

          (`basic_props:predname/1')

          `Keyword' is an atom corresponding to a directory
          identifier.   (`persdbrt:keyword/1')



 - REGTYPE: keyword/1:
     An atom which identifies a fact of the `persistent_dir/2'
     relation. This fact relates this atom to a directory in which
     the persistent storage for one or more persistent predicates is
     kept.

     *Usage:* `keyword(X)'
        - _Description:_ `X' is an atom corresponding to a directory
          identifier.



 - REGTYPE: directoryname/1:
     *Usage:* `directoryname(X)'
        - _Description:_ `X' is an atom, the name of a directory.




File: ciao.info,  Node: Known bugs and planned improvements (persdbrt),  Prev: Documentation on internals (persdbrt),  Up: Persistent predicate database

Known bugs and planned improvements (`persdbrt')
================================================

   * To load in the toplevel a file which uses this package, module
     `library('persdb/persdbrt')' has to be previously loaded.


File: ciao.info,  Node: Using the persdb library,  Next: SQL persistent database interface,  Prev: Persistent predicate database,  Up: Top

Using the persdb library
************************

   Through the following examples we will try to illustrate the two
mains ways of declaring and using persistent predicates: statically
(the preferred method) and dynamically (necessary when the new
persistent predicates have to be defined at run-time). The final
example is a small application implementing a simple persistent queue.

* Menu:

* An example of persistent predicates (static version)::
* An example of persistent predicates (dynamic version)::
* A simple application / a persistent queue::


File: ciao.info,  Node: An example of persistent predicates (static version),  Next: An example of persistent predicates (dynamic version),  Prev: Using the persdb library,  Up: Using the persdb library

An example of persistent predicates (static version)
====================================================

     :- use_package(iso).
     :- use_package(persdb).
     
     %% Declare the directory associated to the key "db" where the
     %% persistence sets of the persistent predicates are stored:
     persistent_dir(db,'./').
     
     %% Declare a persistent predicate:
     :- persistent(bar/1, db).
     
     %% Read a term, storing it in a new fact of the persistent predicate
     %% and list all the current facts of that predicate
     main:-
          read(X),
          assertz_fact(bar(X)),
          findall(Y,bar(Y),L),
          write(L).


File: ciao.info,  Node: An example of persistent predicates (dynamic version),  Next: A simple application / a persistent queue,  Prev: An example of persistent predicates (static version),  Up: Using the persdb library

An example of persistent predicates (dynamic version)
=====================================================

     :- use_package(iso).
     :- use_package(persdb).
     
     
     main([X]):-
     %%   Declare the directory associated to the key "db"
          asserta_fact(persistent_dir(db,'./')),
     %%   Declare the predicate bar/1 as dynamic (and data) at run-time
          data(bar/1),
     %%   Declare the predicate bar/1 as persistent at run-time
          make_persistent(bar/1, db),
          assertz_fact(bar(X)),
          findall(Y, bar(Y), L),
          write(L).


File: ciao.info,  Node: A simple application / a persistent queue,  Prev: An example of persistent predicates (dynamic version),  Up: Using the persdb library

A simple application / a persistent queue
=========================================

     :- module(queue, [main/0],[persdb]).
     
     :- use_package(iso).
     
     :- use_module(library(read)).
     :- use_module(library(write)).
     :- use_module(library(aggregates)).
     
     persistent_dir(queue_dir,'./pers').
     
     :- persistent(queue/1, queue_dir).
     
     queue(first).
     queue(second).
     
     main:-
          write('Action ( in(Term). | slip(Term) | out. | list. | halt. ): '),
          read(A),
          (  handle_action(A)
          -> true
          ;  write('Unknown command.'), nl ),
          main.
     
     handle_action(end_of_file) :-
          halt.
     handle_action(halt) :-
          halt.
     handle_action(in(Term)) :-
          assertz_fact(queue(Term)),
          main.
     handle_action(slip(Term)) :-
          asserta_fact(queue(Term)),
          main.
     handle_action(out) :-
          (  retract_fact(queue(Term))
          -> write('Out '), write(Term)
          ;  write('FIFO empty.') ),
          nl,
          main.
     handle_action(list) :-
          findall(Term,queue(Term),Terms),
          write('Contents: '), write(Terms), nl,
          main.


File: ciao.info,  Node: SQL persistent database interface,  Next: Prolog to SQL translator,  Prev: Using the persdb library,  Up: Top

SQL persistent database interface
*********************************

   *Author(s):* I. Caballero, D. Cabeza, J.M. Go'mez, M.
Hermenegildo, J. F. Morales, and M. Carro, `clip@dia.fi.upm.es',
`http://www.clip.dia.fi.upm.es/', The CLIP Group, Facultad de
Informa'tica, Universidad Polite'cnica de Madrid.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#126 (2001/10/26, 14:51:32 CEST)

   The purpose of this library is to implement an instance of the
generic concept of persistent predicates, where external relational
databases are used for storage (see the documentation of the `persdb'
library and [CHGT98,Par97] for details). To this end, this library
exports SQL persistent versions of the `assertz_fact/1',
`retract_fact/1' and `retractall_fact/1' builtin predicates.
Persistent predicates also allow concurrent updates from several
programs, since each update is atomic.

   The notion of persistence provides a very natural and transparent
way to access database relations from a Prolog program. Stub
definitions are provided for such predicates which access the
database when the predicate is called (using the `db_client'
library). A Prolog to SQL translator is used to generate the required
SQL code dynamically (see library `pl2sql').

   This library also provides facilities for reflecting more complex
views of the database relations as Prolog predicates. Such views can
be constructed as conjunctions, disjunctions, projections, etc. of
database relations. Also, SQL-like aggregation operations are
supported.

* Menu:

* Implementation of the Database Interface::
* Example(s)::
* Usage and interface (persdbrt_mysql)::
* Documentation on exports (persdbrt_mysql)::
* Documentation on multifiles (persdbrt_mysql)::
* Documentation on internals (persdbrt_mysql)::
* Known bugs and planned improvements (persdbrt_mysql)::


File: ciao.info,  Node: Implementation of the Database Interface,  Next: Example(s),  Prev: SQL persistent database interface,  Up: SQL persistent database interface

Implementation of the Database Interface
========================================

   The architecture of the low-level implementation of the database
interface was defined with two goals in mind:

   * to simplify the communication between the Prolog system and the
     relational database engines as much as possible, and

   * to give as much flexibility as possible to the overall system.
     This includes simultaneous access to several databases, allowing
     both the databases and clients to reside on the same physical
     machine or different machines, and allowing the clients to
     reside in Win95/NT or Unix machines.

   In order to allow the flexibility mentioned above, a client-sever
architecture was chosen. At the server side, a MySQL server connects
to the databases using the MySQL. At the client side, a MySQL client
interface connects to this server. The server daemon (mysqld) should
be running in the server machine; check your MySQL documentation on
how to do that.

   After the connection is established a client can send commands to
the mediator server which will pass them to the corresponding
database server, and then the data will traverse in the opposite
direction. These messages include logging on and off from the
database, sending SQL queries, and receiving the responses.

   The low level implementation of the current library is
accomplished by providing abstraction levels over the MySQL interface
library. These layers of abstraction implement the persistent
predicate view, build the appropriate commands for the database using
a translator of Prolog goals to SQL commands, issue such commands
using the mediator send/receive procedures, parse the responses, and
present such responses to the Prolog engine via backtracking.


File: ciao.info,  Node: Example(s),  Next: Usage and interface (persdbrt_mysql),  Prev: Implementation of the Database Interface,  Up: SQL persistent database interface

Example(s)
==========

     :- module(_, _, [persdb_mysql, functions]).
     
     
     
     :- use_module(library(write)).
     :- use_module(library(format)).
     
     :- use_module(user_and_password).
     
     sql_persistent_location(people, db(people, User, Password, HP)):-
             mysql_host_and_port(HP),
             mysql_user(User),
             mysql_password(Password).
     
     :- sql_persistent(
             people(string, string, int),   %% Prolog predicate and types
             people(name, sex, age),        %% Table name and attributes
             people).                       %% Database local id
     
     % Low level MySQL interface.
     
     :- use_module(library('persdb_mysql/mysql_client')).
     
     
     main :-
             nl,
             display('Creating database'), nl,nl,
             create_people_db,
             nl,
             display('Inserting people'), nl,nl,
             insert_people,
             nl,
             display('Showing people'), nl,nl,
             show_people.
     
     % Create a database and a table of people.  Still needs to be ironed out.
     
     create_people_db :-
             mysql_user(User),
             mysql_password(Password),
             mysql_host_and_port(HP),
             mysql_connect(HP, '', User, Password, DbConnection),
     
             write(~mysql_query(DbConnection, "drop database if exists people")), nl,
             write(~mysql_query(DbConnection, "create database people")), nl,
             write(~mysql_query(DbConnection, "use people")), nl,
             write(~mysql_query(DbConnection, "create table people(name char(16) not null, sex text, age int, primary key(name))")), nl,
             mysql_disconnect(DbConnection).
     
     % Inserts people into the 'people' table.
     
     male(john, 15).
     male(peter, 24).
     male(ralph, 24).
     male(bart, 50).
     female(kirsten, 24).
     female(mary, 17).
     female(jona, 12).
     female(maija, 34).
     
     
     %% Tuples are inserted as in the local Prolog dynamic database
     insert_people :-
             (
                 male(N, A),
                 display('Inserting '),
                 display(male(N, A)),
                 nl,
                 dbassertz_fact(people(N, male, A)),
                 fail
             ;
                 true
             ),
             (
                 female(N, A),
                 display('Inserting '),
                 display(female(N, A)),
                 nl,
                 dbassertz_fact(people(N, female, A)),
                 fail
             ;
                 true
             ).
     
     
     
      %% Removes people from the 'people' table.
     
      %% Still not working in MySQL due to differences in SQL: working on it.
     
     remove_people(A, B, C) :-
             dbretractall_fact(people(A, B, C)).
     
     remove_people_2(A, B, C) :-
             dbretract_fact(people(A, B, C)),
             display('Removed row '), display(people(A, B, C)), nl,
             fail.
     remove_people_2(_, _, _) :-
              display('No more rows'), nl.
     
     
     show_people :-
             people(Name, Sex, Age),
             display(people(Name, Sex, Age)),
             nl,
             fail.
     show_people :-
             display('No more rows'), nl.


File: ciao.info,  Node: Usage and interface (persdbrt_mysql),  Next: Documentation on exports (persdbrt_mysql),  Prev: Example(s),  Up: SQL persistent database interface

Usage and interface (`persdbrt_mysql')
======================================

   * *Library usage:*

     Typically, this library is used including the 'persdb_mysql'
     package into the package list of the module, or using the
     `use_package/1' declaration:
    In a module:
               	:- module(bar, [main/1], [persdb_mysql]).
          or
                       :- module(bar, [main/1]).
                       :- include(library(persdb_mysql)).

    In a _user_ file:
               	:- use_package([persdb_mysql]).
          or
                       :- include(library(persdb_mysql)).
          This loads the run-time and compile-time versions of the
     library (`persdbtr_mysql.pl' and `persdbrt_mysql.pl') and
     includes some needed declarations.

   * *Exports:*
        - _Predicates:_

          `init_sql_persdb/0', `dbassertz_fact/1', `dbretract_fact/1',
          `dbcurrent_fact/1', `dbretractall_fact/1',
          `make_sql_persistent/3', `dbfindall/4', `dbcall/2',
          `sql_query/3', `sql_get_tables/2', `sql_table_types/3'.

        - _Multifiles:_

          `sql_persistent_location/2'.


   * *Other modules used:*
        - _System library modules:_

          `det_hook/det_hook_rt', `persdb_mysql/db_client_types',
          `persdb_mysql/pl2sql', `persdb_sql_common/sqltypes',
          `dynamic', `terms', `terms_vars', `messages', `lists',
          `aggregates', `persdb_mysql/mysql_client',
          `persdb_sql_common/pl2sqlinsert',
          `persdb_mysql/delete_compiler/pl2sqldelete'.




File: ciao.info,  Node: Documentation on exports (persdbrt_mysql),  Next: Documentation on multifiles (persdbrt_mysql),  Prev: Usage and interface (persdbrt_mysql),  Up: SQL persistent database interface

Documentation on exports (`persdbrt_mysql')
===========================================

 - PREDICATE: init_sql_persdb/0:
     *Usage:*
        - _Description:_ Internal predicate, used to transform
          predicates statically declared as persistent (see
          `sql_persistent/3') into real persistent predicates.



 - PREDICATE: dbassertz_fact/1:
     *Usage:* `dbassertz_fact(+Fact)'
        - _Description:_ Persistent extension of `assertz_fact/1':
          the current instance of `Fact' is interpreted as a fact
          (i.e., a relation tuple) and is added to the end of the
          definition of the corresponding predicate. If any integrity
          constraint violation is done (database stored predicates),
          an error will be displayed. The predicate concerned must be
          statically ( `sql_persistent/3') or dinamically (
          `make_sql_persistent/3') declared. Any uninstantiated
          variables in the `Fact' will be replaced by new, private
          variables. *Note:* _assertion of facts with uninstantiated
          variables not implemented at this time._

        - _Call and exit should be _compatible_ with:_

          `+Fact' is a fact (a term whose main functor is not
          `':-'/2').   (`persdbrt_mysql:fact/1')



 - PREDICATE: dbretract_fact/1:
     *Usage:* `dbretract_fact(+Fact)'
        - _Description:_ Persistent extension of `retract_fact/1':
          deletes on backtracking all the facts which unify with
          `Fact'. The predicate concerned must be statically (
          `sql_persistent/3') or dinamically (
          `make_sql_persistent/3') declared.

        - _Call and exit should be _compatible_ with:_

          `+Fact' is a fact (a term whose main functor is not
          `':-'/2').   (`persdbrt_mysql:fact/1')



 - PREDICATE: dbcurrent_fact/1:
     *Usage:* `dbcurrent_fact(+Fact)'
        - _Description:_ Persistent extension of `current_fact/1':
          the fact `Fact' exists in the current database. The
          predicate concerned must be declared `sql_persistent/3'.
          Provides on backtracking all the facts (tuples) which unify
          with `Fact'.

        - _Call and exit should be _compatible_ with:_

          `+Fact' is a fact (a term whose main functor is not
          `':-'/2').   (`persdbrt_mysql:fact/1')



 - PREDICATE: dbretractall_fact/1:
     *Usage:* `dbretractall_fact(+Fact)'
        - _Description:_ Persistent extension of `retractall_fact/1':
          when called deletes all the facts which unify with `Fact'.
          The predicate concerned must be statically (
          `sql_persistent/3') or dinamically (
          `make_sql_persistent/3') declared.

        - _Call and exit should be _compatible_ with:_

          `+Fact' is a fact (a term whose main functor is not
          `':-'/2').   (`persdbrt_mysql:fact/1')



 - PREDICATE: make_sql_persistent/3:
     _Meta-predicate_ with arguments:
     `make_sql_persistent(addmodule,?,?)'.

     *Usage:*
     `make_sql_persistent(PrologPredTypes,TableAttributes,Keyword)'
        - _Description:_ Dynamic version of the `sql_persistent/3'
          declaration.

        - _The following properties should hold upon exit:_

          `PrologPredTypes' is a structure describing a Prolog
          predicate name with its types.
          (`persdbrt_mysql:prologPredTypes/1')

          `TableAttributes' is a structure describing a table name
          and some attributes.   (`persdbrt_mysql:tableAttributes/1')

          `Keyword' is the name of a persistent storage location.
          (`persdbrt_mysql:persLocId/1')



 - PREDICATE: dbfindall/4:
     _Meta-predicate_ with arguments: `dbfindall(?,?,goal,?)'.

     *Usage:* `dbfindall(+DBId,+Pattern,+ComplexGoal,-Results)'
        - _Description:_ Similar to `findall/3', but `Goal' is
          executed in database `DBId'. Certain restrictions and
          extensions apply to both `Pattern' and `ComplexGoal'
          stemming from the Prolog to SQL translation involved (see
          the corresponding type definitions for details).

        - _Call and exit should be _compatible_ with:_

          `+DBId' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+Pattern' is a database projection term.
          (`pl2sql:projterm/1')

          `+ComplexGoal' is a database query goal.
          (`pl2sql:querybody/1')

          `-Results' is a list.   (`basic_props:list/1')



 - PREDICATE: dbcall/2:
     *Usage:* `dbcall(+DBId,+ComplexGoal)'
        - _Description:_ Internal predicate, used by the transformed
          versions of the persistent predicates. Not meant to be
          called directly by users. It is exported by the library so
          that it can be used by the transformed versions of the
          persistent predicates in the modules in which they reside.
          Sends `ComplexGoal' to database `DBId' for evaluation.
          `ComplexGoal' must be a call to a persistent predicate
          which resides in database `DBId'.

        - _Call and exit should be _compatible_ with:_

          `+DBId' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+ComplexGoal' is a database query goal.
          (`pl2sql:querybody/1')



 - PREDICATE: sql_query/3:
     *Usage:* `sql_query(+DBId,+SQLString,AnswerTableTerm)'
        - _Description:_ `ResultTerm' is the response from database
          `DBId' to the SQL query in `SQLString' to database `DBId'.
          `AnswerTableTerm' can express a set of tuples, an error
          answer or a 'ok' response (see `answertableterm/1' for
          details). At the moment, `sql_query/3' log in and out for
          each query. This should be changed to log in only the first
          time and log out on exit and/or via a timer in the standard
          way.

        - _Call and exit should be _compatible_ with:_

          `+DBId' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+SQLString' is a string containing SQL code.
          (`pl2sql:sqlstring/1')

          `AnswerTableTerm' is a response from the ODBC database
          interface.   (`persdbrt_mysql:answertableterm/1')



 - PREDICATE: sql_get_tables/2:
     *Usage 1:* `sql_get_tables(+Location,-Tables)'
        - _Description:_ `Tables' contains the tables available in
          `Location'.

        - _Call and exit should be _compatible_ with:_

          `persdbrt_mysql:persLocation(+Location)'
          (`persdbrt_mysql:persLocation/1')

          `-Tables' is a list of `atm's.   (`basic_props:list/2')

     *Usage 2:* `sql_get_tables(+DbConnection,-Tables)'
        - _Description:_ `Tables' contains the tables available in
          `DbConnection'.

        - _Call and exit should be _compatible_ with:_

          `+DbConnection' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `-Tables' is a list of `atm's.   (`basic_props:list/2')



 - PREDICATE: sql_table_types/3:
     *Usage 1:* `sql_table_types(+Location,+Table,-AttrTypes)'
        - _Description:_ `AttrTypes' are the attributes and types of
          `Table' in `Location'.

        - _Call and exit should be _compatible_ with:_

          `persdbrt_mysql:persLocation(+Location)'
          (`persdbrt_mysql:persLocation/1')

          `+Table' is an atom.   (`basic_props:atm/1')

          `-AttrTypes' is a list.   (`basic_props:list/1')

     *Usage 2:* `sql_table_types(+DbConnection,+Table,-AttrTypes)'
        - _Description:_ `AttrTypes' are the attributes and types of
          `Table' in `DbConnection'.

        - _Call and exit should be _compatible_ with:_

          `+DbConnection' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+Table' is an atom.   (`basic_props:atm/1')

          `-AttrTypes' is a list.   (`basic_props:list/1')



 - REGTYPE: socketname/1:
     *Usage:* `socketname(IPP)'
        - _Description:_ `IPP' is a structure describing a complete
          TCP/IP port address.



 - REGTYPE: dbname/1:
     *Usage:* `dbname(DBId)'
        - _Description:_ `DBId' is the identifier of an database.



 - REGTYPE: user/1:
     *Usage:* `user(User)'
        - _Description:_ `User' is a user name in the database.



 - REGTYPE: passwd/1:
     *Usage:* `passwd(Passwd)'
        - _Description:_ `Passwd' is the password for the user name
          in the database.



 - REGTYPE: projterm/1:
     *Usage:* `projterm(DBProjTerm)'
        - _Description:_ `DBProjTerm' is a database projection term.



 - REGTYPE: querybody/1:
     *Usage:* `querybody(DBGoal)'
        - _Description:_ `DBGoal' is a database query goal.



 - (: UNDOC_REEXPORT) sqltype/1:
     Imported from `sqltypes' (see the corresponding documentation
     for details).





File: ciao.info,  Node: Documentation on multifiles (persdbrt_mysql),  Next: Documentation on internals (persdbrt_mysql),  Prev: Documentation on exports (persdbrt_mysql),  Up: SQL persistent database interface

Documentation on multifiles (`persdbrt_mysql')
==============================================

 - PREDICATE: sql_persistent_location/2:
     Relates names of locations (the `Keyword's) with descriptions of
     such locations (`Location's).

     The predicate is _multifile_.

     The predicate is of type _data_.

     *Usage 1:* `sql_persistent_location(Keyword,Location)'
        - _Description:_ `Keyword' is an identifier for the
          persistent data location `Location'.

        - _Call and exit should be _compatible_ with:_

          `Keyword' is the name of a persistent storage location.
          (`persdbrt_mysql:persLocId/1')

          `persdbrt_mysql:persLocation(Location)'
          (`persdbrt_mysql:persLocation/1')

     *Usage 2:* `sql_persistent_location(Keyword,DBLocation)'
        - _Description:_ In this usage, `DBLocation' is a _relational
          database_, in which case the predicate is stored as tuples
          in the database.

        - _The following properties should hold upon exit:_

          `Keyword' is the name of a persistent storage location.
          (`persdbrt_mysql:persLocId/1')

          `DBLocation' is a structure describing a database.
          (`persdbrt_mysql:database_desc/1')




File: ciao.info,  Node: Documentation on internals (persdbrt_mysql),  Next: Known bugs and planned improvements (persdbrt_mysql),  Prev: Documentation on multifiles (persdbrt_mysql),  Up: SQL persistent database interface

Documentation on internals (`persdbrt_mysql')
=============================================

 - DECLARATION: sql_persistent/3:
     *Usage:* :-
     `sql_persistent(PrologPredTypes,TableAttributes,Keyword)'.
        - _Description:_ Declares the predicate corresponding to the
          main functor of `PrologPredTypes' as SQL persistent.
          `Keyword' is the name of a location where the persistent
          storage for the predicate is kept, which in this case must
          be an external relational database. The description of this
          database is given through the `sql_persistent_location'
          predicate, which must contain a fact in which the first
          argument unifies with `Keyword'. `TableAttributes' provides
          the table name and attributes in the database corresponding
          respectively to the predicate name and arguments of the
          (virtual) Prolog predicate.

          *Example:*

               :- sql_persistent(product( integer,    integer, string, string ),
                             product( quantity,   id,      name,   size   ),
                             radiowebdb).
               
               sql_persistent_location(radiowebdb,
                  db('SQL Anywhere 5.0 Sample', user, pass,
                     'r2d5.dia.fi.upm.es':2020)).

        - _The following properties should hold upon exit:_

          `PrologPredTypes' is a structure describing a Prolog
          predicate name with its types.
          (`persdbrt_mysql:prologPredTypes/1')

          `TableAttributes' is a structure describing a table name
          and some attributes.   (`persdbrt_mysql:tableAttributes/1')

          `Keyword' is the name of a persistent storage location.
          (`persdbrt_mysql:persLocId/1')



 - PREDICATE: db_query/4:
     *Usage:* `db_query(+DBId,+ProjTerm,+Goal,ResultTerm)'
        - _Description:_ `ResultTerm' contains all the tuples which
          are the response from database `DBId' to the Prolog query
          `Goal', projected onto `ProjTerm'. Uses `pl2sqlstring/3'
          for the Prolog to SQL translation and `sql_query/3' for
          posing the actual query.

        - _Call and exit should be _compatible_ with:_

          `+DBId' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+ProjTerm' is a database projection term.
          (`pl2sql:projterm/1')

          `+Goal' is a database query goal.   (`pl2sql:querybody/1')

          `ResultTerm' is a tuple of values from the ODBC database
          interface.   (`persdbrt_mysql:tuple/1')



 - PREDICATE: db_query_one_tuple/4:
     *Usage:* `db_query_one_tuple(+DBId,+ProjTerm,+Goal,ResultTerm)'
        - _Description:_ `ResultTerm' is one of the tuples which are
          the response from database `DBId' to the Prolog query
          `Goal', projected onto `ProjTerm'. Uses `pl2sqlstring/3'
          for the Prolog to SQL translation and
          `sql_query_one_tuple/3' for posing the actual query. After
          last tuple has been reached, a null tuple is unified with
          ResultTerm, and the connection to the database finishes.

        - _Call and exit should be _compatible_ with:_

          `+DBId' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+ProjTerm' is a database projection term.
          (`pl2sql:projterm/1')

          `+Goal' is a database query goal.   (`pl2sql:querybody/1')

          `ResultTerm' is a predicate containing a tuple.
          (`persdbrt_mysql:answertupleterm/1')



 - PREDICATE: sql_query_one_tuple/3:
     *Usage:* `sql_query_one_tuple(+DBId,+SQLString,ResultTuple)'
        - _Description:_ `ResultTuple' contains an element from the
          set of tuples which represents the response in `DBId' to the
          SQL query `SQLString'. If the connection is kept, succesive
          calls return consecutive tuples, until the last tuple is
          reached. Then a null tuple is unified with `ResultTuple'
          and the connection is finished (calls to
          `mysql_disconnect/1').

        - _Call and exit should be _compatible_ with:_

          `+DBId' a unique identifier of a database session
          connection.   (`mysql_client:dbconnection/1')

          `+SQLString' is a string containing SQL code.
          (`pl2sql:sqlstring/1')

          `ResultTuple' is a tuple of values from the ODBC database
          interface.   (`persdbrt_mysql:tuple/1')



 - REGTYPE: dbconnection/1:
     *Usage:* `dbconnection(H)'
        - _Description:_ `H' a unique identifier of a database
          session connection.



 - REGTYPE: tuple/1:
          tuple(T) :-
                  list(T,atm).
          tuple(T) :-
                  list(T,atm).

     *Usage:* `tuple(T)'
        - _Description:_ `T' is a tuple of values from the ODBC
          database interface.




File: ciao.info,  Node: Known bugs and planned improvements (persdbrt_mysql),  Prev: Documentation on internals (persdbrt_mysql),  Up: SQL persistent database interface

Known bugs and planned improvements (`persdbrt_mysql')
======================================================

   * At least in the shell, reloading a file after changing the
     definition of a persistent predicate does not eliminate the old
     definition...

   * Functionality missing: some questions need to be debugged.

   * Warning: still using kludgey string2term and still using some
     non-uniquified temp files.

   * Needs to be unified with the file-based library.


File: ciao.info,  Node: Prolog to SQL translator,  Next: Low-level socket interface to SQL/ODBC databases,  Prev: SQL persistent database interface,  Up: Top

Prolog to SQL translator
************************

   *Author(s):* C. Draxler. Adapted by M. Hermenegildo and I.
Caballero.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.9#96 (1999/5/21, 19:53:48 MEST)

   This library performs translation of Prolog queries into SQL. The
code is an adaptation for Ciao of the Prolog to SQL compiler written
by Christoph Draxler, CIS Centre for Information and Speech
Processing, Ludwig-Maximilians-University Munich,
`draxler@cis.uni-muenchen.de', Version 1.1. Many thanks to Christoph
for allowing us to include this adaptation of his code with Ciao.

   The translator needs to know the correspondence between Prolog
predicates and the SQL tables in the database. To this end this
module exports two multifile predicates, `relation/3' and
`attribute/4'. See the description of these predicates for details on
how such correspondance is specified.

   The main entry points to the translator are `pl2sqlstring/3' and
`pl2sqlterm/3'. Details on the types of queries allowed can be found
in the description of these predicates.

   *Example:* the following program would print out a term
representing the SQL query corresponding to the given Prolog query:

     :- use_module(library('persdb_sql/pl2sql')).
     :- use_module(library(strings)).
     
     :- multifile [relation/3,attribute/4].
     :- data [relation/3,attribute/4].
     
     relation(product,3,'PRODUCT').
     attribute(1,'PRODUCT','ID',int).
     attribute(2,'PRODUCT','QUANTITY',int).
     attribute(3,'PRODUCT','NAME',string).
     
     main :-
          pl2sqlstring( f(L,K),
               ((product(L,N,a); product(L,N,b)),
                \+ product(2,3,b),
                L + 2 > avg(Y, Z^product(Z,Y,a)),
                K is N + max(X, product(X,2,b))
                ), T),
          write_string(T).
     
     %%     printqueries(T).

   *Note:* while the translator can be used directly in programs, it
is more convenient to use a higher-level abstraction: persistent
predicates (implemented in the `persdb' library). The notion of
persistent predicates provides a completely transparent interface
between Prolog and relational databases. When using this library, the
Prolog to SQL translation is called automatically as needed.

* Menu:

* Usage and interface (pl2sql)::
* Documentation on exports (pl2sql)::
* Documentation on multifiles (pl2sql)::
* Documentation on internals (pl2sql)::
* Known bugs and planned improvements (pl2sql)::


File: ciao.info,  Node: Usage and interface (pl2sql),  Next: Documentation on exports (pl2sql),  Prev: Prolog to SQL translator,  Up: Prolog to SQL translator

Usage and interface (`pl2sql')
==============================

   * *Library usage:*

     `:- use_module(library(pl2sql)).'

   * *Exports:*
        - _Predicates:_

          `pl2sqlstring/3', `pl2sqlterm/3', `sqlterm2string/2'.

        - _Regular Types:_

          `querybody/1', `projterm/1', `sqlstring/1'.

        - _Multifiles:_

          `relation/3', `attribute/4'.


   * *Other modules used:*
        - _System library modules:_

          `persdb_sql_common/sqltypes', `iso_misc', `lists',
          `aggregates', `messages'.




File: ciao.info,  Node: Documentation on exports (pl2sql),  Next: Documentation on multifiles (pl2sql),  Prev: Usage and interface (pl2sql),  Up: Prolog to SQL translator

Documentation on exports (`pl2sql')
===================================

 - PREDICATE: pl2sqlstring/3:
     *Usage:*
     `pl2sqlstring(+ProjectionTerm,+DatabaseGoal,-SQLQueryString)'
        - _Description:_ This is the top level predicate which
          translates complex Prolog goals into the corresponding SQL
          code.

          The query code is prepared in such a way that the result is
          projected onto the term `ProjectionTerm' (also in a similar
          way to the first argument of `setof/3')). See the predicate
          `translate_projection/3' for restrictions on this term.

          `SQLQueryString' contains the code of the SQL query, ready
          to be sent to an SQL server.

        - _Call and exit should be _compatible_ with:_

          `+ProjectionTerm' is a database projection term.
          (`pl2sql:projterm/1')

          `+DatabaseGoal' is a database query goal.
          (`pl2sql:querybody/1')

          `-SQLQueryString' is a string containing SQL code.
          (`pl2sql:sqlstring/1')



 - REGTYPE: querybody/1:
     `DBGoal' is a goal meant to be executed in the external
     database. It can be a complex term containing conjunctions,
     disjunctions, and negations, of:

        * Atomic goals, which must have been defined via `relation/3'
          and `attribute/4' and reside in the (same) database. Their
          arguments must be either ground or free variables. If they
          are ground, they must be bound to constants of the type
          declared for that argument. If an argument is a free
          variable, it may _share_ with (i.e., be the same variable
          as) other free variables in other goal arguments.

        * Database comparison goals, whose main functor must be a
          database comparison operator (see `pl2sql': `comparison/2')
          and whose arguments must be _database arithmetic
          expressions_.

        * Database calls to is/2. The left side of such a call may be
          either unbound, in which case it is bound to the result of
          evaluating the right side, or bound in which case an
          equality condition is tested. The right side must be a
          _database arithmetic expression_.


     The binding of variables follows Prolog rules:

        * variables are bound by positive base goals and on the left
          side of the `is/2' predicate.

        * Comparison operations, negated goals, and right sides of the
          `is/2' predicate do not return variable bindings and may
          even require all arguments to be bound for a safe
          evaluation.


     Database arithmetic expressions may contain:

        * Numeric constants (i.e., integers, reals, etc.).

        * Bound variables, i.e., variables which will be bound during
          execution through occurrence within a positive database
          goal, or by a preceding arithmetic function.

        * Database arithmetic functions, which are a subset of those
          typically accepted within `is/2' (see `pl2sql':
          `arithmetic_functor/2').

        * Database aggregation functions, each of which has two
          arguments: a variable indicating the argument over which
          the function is to be computed, and a goal argument which
          must contain in at least one argument position the variable
          (e.g. `avg(Seats, plane(Type, Seats))'). The goal argument
          may only be a conjunction of (positive or negative) base
          goals. See `pl2sql': `aggregate_functor/2' for the
          admissible aggregate functions.


     In addition, variables can be existentially quantified using
     `^/2' (in a similar way to how it is done in `setof/3').

     Note that it is assumed that the arithmetic operators in Prolog
     and SQL are the same, i.e., `+' is addition in Prolog and in
     SQL, etc.

     *Usage:* `querybody(DBGoal)'
        - _Description:_ `DBGoal' is a database query goal.



 - REGTYPE: projterm/1:
     `DBProjTerm' is a term onto which the result of a database query
     code is (in a similar way to the first argument of `setof/3')).

     A `ProjectionTerm' must meet the following restrictions:

        * The functor of `ProjectionTerm' may not be one of the
          built-in predicates, i.e. ',', ';', etc. are not allowed.

        * Only variables and constants are allowed as arguments,
          i.e., no structured terms may appear.


     *Usage:* `projterm(DBProjTerm)'
        - _Description:_ `DBProjTerm' is a database projection term.



 - REGTYPE: sqlstring/1:
          sqlstring(S) :-
                  string(S).

     *Usage:* `sqlstring(S)'
        - _Description:_ `S' is a string containing SQL code.



 - PREDICATE: pl2sqlterm/3:
     *Usage:*
     `pl2sqlterm(+ProjectionTerm,+DatabaseGoal,-SQLQueryTerm)'
        - _Description:_ Similar to `pl2sqlstring/3' except that
          `SQLQueryTerm' is a representation of the SQL query as a
          Prolog term.

        - _Call and exit should be _compatible_ with:_

          `+ProjectionTerm' is a database projection term.
          (`pl2sql:projterm/1')

          `+DatabaseGoal' is a database query goal.
          (`pl2sql:querybody/1')

          `-SQLQueryTerm' is a list of `sqlterm's.
          (`basic_props:list/2')



 - PREDICATE: sqlterm2string/2:
     *Usage:* `sqlterm2string(+Queries,-QueryString)'
        - _Description:_ `QueryString' is a string representation of
          the list of queries in Prolog-term format in `Queries'.

        - _Call and exit should be _compatible_ with:_

          `+Queries' is a list of `sqlterm's.   (`basic_props:list/2')

          `-QueryString' is a string containing SQL code.
          (`pl2sql:sqlstring/1')



 - (: UNDOC_REEXPORT) sqltype/1:
     Imported from `sqltypes' (see the corresponding documentation
     for details).





File: ciao.info,  Node: Documentation on multifiles (pl2sql),  Next: Documentation on internals (pl2sql),  Prev: Documentation on exports (pl2sql),  Up: Prolog to SQL translator

Documentation on multifiles (`pl2sql')
======================================

 - PREDICATE: relation/3:
     The predicate is _multifile_.

     The predicate is of type _data_.

     *Usage:* `relation(PredName,Arity,TableName)'
        - _Description:_ This predicate, together with `attribute/4',
          defines the correspondence between Prolog predicates and the
          SQL tables in the database. These two relations constitute
          an extensible meta-database which maps Prolog predicate
          names to SQL table names, and Prolog predicate argument
          positions to SQL attributes.

          `PredName' is the chosen Prolog name for an SQL table.
          `Arity' is the number of arguments of the predicate.
          `TableName' is the name of the SQL table in the Database
          Management System.

        - _Call and exit should be _compatible_ with:_

          `PredName' is an atom.   (`basic_props:atm/1')

          `Arity' is an integer.   (`basic_props:int/1')

          `TableName' is an atom.   (`basic_props:atm/1')



 - PREDICATE: attribute/4:
     The predicate is _multifile_.

     The predicate is of type _data_.

     *Usage:* `attribute(ANumber,TblName,AName,AType)'
        - _Description:_ This predicate maps the argument positions
          of a Prolog predicate to the SQL attributes of its
          corresponding table. The types of the arguments need to be
          specified, and this information is used for consistency
          checking during the translation and for output formatting.
          A minimal type system is provided to this end. The
          allowable types are given by `sqltype/1'.

          `ANumber' is the argument number in the Prolog relation.
          `TblName' is the name of the SQL table in the Database
          Management System. `AName' is the name of the corresponding
          attribute in the table. `AType' is the (translator) data
          type of the attribute.

        - _Call and exit should be _compatible_ with:_

          `ANumber' is an integer.   (`basic_props:int/1')

          `TblName' is an atom.   (`basic_props:atm/1')

          `AName' is an atom.   (`basic_props:atm/1')

          `AType' is an SQL data type supported by the translator.
          (`sqltypes:sqltype/1')




File: ciao.info,  Node: Documentation on internals (pl2sql),  Next: Known bugs and planned improvements (pl2sql),  Prev: Documentation on multifiles (pl2sql),  Up: Prolog to SQL translator

Documentation on internals (`pl2sql')
=====================================

 - PREDICATE: query_generation/3:
     *Usage:*
     `query_generation(+ListOfConjunctions,+ProjectionTerm,-ListOfQueries)'
        - _Description:_ For each Conjunction in
          `ListOfConjunctions', translate the pair `(ProjectionTerm,
          Conjunction)' to an SQL query and connect each such query
          through a UNION-operator to result in the `ListOfQueries'.

          A Conjunction consists of positive or negative subgoals.
          Each subgoal is translated as follows:

             * the functor of a goal that is not a comparison
               operation is translated to a relation name with a
               range variable,

             * negated goals are translated to NOT EXISTS-subqueries
               with * projection,

             * comparison operations are translated to comparison
               operations in the WHERE-clause,

             * aggregate function terms are translated to aggregate
               function (sub)queries.


          The arguments of a goal are translated as follows:

             * `variables of a goal' are translated to qualified
               attributes,

             * variables occurring in several goals are translated to
               equality comparisons (equi join) in the WHERE-clause,

             * constant arguments are translated to equality
               comparisons in the WHERE-clause.


          Arithmetic functions are treated specially (
          `translate_arithmetic_function/5'). See also `querybody/1'
          for details on the syntax accepted and restrictions.




 - PREDICATE: translate_conjunction/5:
     *Usage:*
     `translate_conjunction(Conjunction,SQLFrom,SQLWhere,Dict,NewDict)'
        - _Description:_ Translates a conjunction of goals
          (represented as a list of goals preceeded by existentially
          quantified variables) to FROM-clauses and WHERE-clauses of
          an SQL query. A dictionary containing the associated SQL
          table and attribute names is built up as an accumulator
          pair (arguments `Dict' and `NewDict').



 - PREDICATE: translate_goal/5:
     *Usage:* `translate_goal(Goal,SQLFrom,SQLWhere,Dict,NewDict)'
        - _Description:_ Translates:

             * a positive database goal to the associated FROM- and
               WHERE clause of an SQL query,

             * a negated database goal to a negated existential
               subquery,

             * an arithmetic goal to an arithmetic expression or an
               aggregate function query,

             * a comparison goal to a comparison expression, and

             * a negated comparison goal to a comparison expression
               with the opposite comparison operator.





 - PREDICATE: translate_arithmetic_function/5:
     *Usage:*
     `translate_arithmetic_function(Result,Expression,SQLWhere,Dict,NewDict)'
        - _Description:_ Arithmetic functions (left side of is/2
          operator is bound to value of expression on right side) may
          be called with either:

             * `Result' unbound: then `Result' is bound to the value
               of the evaluation of `Expression',

             * `Result' bound: then an equality condition is returned
               between the value of `Result' and the value of the
               evaluation of `Expression'.

               Only the equality test shows up in the WHERE clause of
               an SQLquery.




 - PREDICATE: translate_comparison/5:
     *Usage:*
     `translate_comparison(LeftArg,RightArg,CompOp,Dict,SQLComparison)'
        - _Description:_ Translates the left and right arguments of a
          comparison term into the appropriate comparison operation
          in SQL. The result type of each argument expression is
          checked for type compatibility.



 - PREDICATE: aggregate_function/3:
     *Usage:*
     `aggregate_function(AggregateFunctionTerm,Dict,AggregateFunctionQuery)'
        - _Description:_ Supports the Prolog aggregate function terms
          listed in `aggregate_functor/2' within arithmetic
          expressions. Aggregate functions are translated to the
          corresponding SQL built-in aggregate functions.



 - PREDICATE: comparison/2:
     *Usage:* `comparison(PrologOperator,SQLOperator)'
        - _Description:_ Defines the mapping between Prolog operators
          and SQL operators:
               comparison(=,=).
               comparison(<,<).
               comparison(>,>).
               comparison(@<,<).
               comparison(@>,>).

        - _Call and exit should be _compatible_ with:_

          `PrologOperator' is an atom.   (`basic_props:atm/1')

          `SQLOperator' is an atom.   (`basic_props:atm/1')



 - PREDICATE: negated_comparison/2:
     *Usage:* `negated_comparison(PrologOperator,SQLOperator)'
        - _Description:_ Defines the mapping between Prolog operators
          and the complementary SQL operators:
               negated_comparison(=,<>).
               negated_comparison(\==,=).
               negated_comparison(>,=<).
               negated_comparison(=<,>).
               negated_comparison(<,>=).
               negated_comparison(>=,<).

        - _Call and exit should be _compatible_ with:_

          `PrologOperator' is an atom.   (`basic_props:atm/1')

          `SQLOperator' is an atom.   (`basic_props:atm/1')



 - PREDICATE: arithmetic_functor/2:
     *Usage:* `arithmetic_functor(PrologFunctor,SQLFunction)'
        - _Description:_ Defines the admissible arithmetic functions
          on the Prolog side and their correspondence on the SQL side:
               arithmetic_functor(+,+).
               arithmetic_functor(-,-).
               arithmetic_functor(*,*).
               arithmetic_functor(/,/).

        - _Call and exit should be _compatible_ with:_

          `PrologFunctor' is an atom.   (`basic_props:atm/1')

          `SQLFunction' is an atom.   (`basic_props:atm/1')



 - PREDICATE: aggregate_functor/2:
     *Usage:* `aggregate_functor(PrologFunctor,SQLFunction)'
        - _Description:_ Defines the admissible aggregate functions
          on the Prolog side and their correspondence on the SQL side:
               aggregate_functor(avg,'AVG').
               aggregate_functor(min,'MIN').
               aggregate_functor(max,'MAX').
               aggregate_functor(sum,'SUM').
               aggregate_functor(count,'COUNT').

        - _Call and exit should be _compatible_ with:_

          `PrologFunctor' is an atom.   (`basic_props:atm/1')

          `SQLFunction' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Known bugs and planned improvements (pl2sql),  Prev: Documentation on internals (pl2sql),  Up: Prolog to SQL translator

Known bugs and planned improvements (`pl2sql')
==============================================

   * Need to separate db predicate names by module.


File: ciao.info,  Node: Low-level socket interface to SQL/ODBC databases,  Next: Types for the Low-level interface to SQL databases,  Prev: Prolog to SQL translator,  Up: Top

Low-level socket interface to SQL/ODBC databases
************************************************

   *Author(s):* Jose Morales.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#209 (2002/4/24, 14:50:46 CEST)

   This library provides a low-level interface to MySQL using the
MySQL C API and the Ciao foreign interface to C.

* Menu:

* Usage and interface (mysql_client)::
* Documentation on exports (mysql_client)::


File: ciao.info,  Node: Usage and interface (mysql_client),  Next: Documentation on exports (mysql_client),  Prev: Low-level socket interface to SQL/ODBC databases,  Up: Low-level socket interface to SQL/ODBC databases

Usage and interface (`mysql_client')
====================================

   * *Library usage:*

     `:- use_module(library(mysql_client)).'

   * *Exports:*
        - _Predicates:_

          `mysql_connect/5', `mysql_query/3',
          `mysql_query_one_tuple/3', `mysql_free_query_connection/1',
          `mysql_fetch/2', `mysql_get_tables/2',
          `mysql_table_types/3', `mysql_disconnect/1'.

        - _Regular Types:_

          `dbconnection/1', `dbqueryconnection/1'.


   * *Other modules used:*
        - _System library modules:_

          `foreign_interface/foreign_interface_properties',
          `persdb_mysql/db_client_types'.




File: ciao.info,  Node: Documentation on exports (mysql_client),  Prev: Usage and interface (mysql_client),  Up: Low-level socket interface to SQL/ODBC databases

Documentation on exports (`mysql_client')
=========================================

 - PREDICATE: mysql_connect/5:
     No further documentation available for this predicate.




 - REGTYPE: dbconnection/1:
          dbconnection(_1) :-
                  address(_1).

     *Usage:* `dbconnection(H)'
        - _Description:_ `H' a unique identifier of a database
          session connection.



 - PREDICATE: mysql_query/3:
     No further documentation available for this predicate.




 - PREDICATE: mysql_query_one_tuple/3:
     No further documentation available for this predicate.




 - REGTYPE: dbqueryconnection/1:
          dbqueryconnection(_1) :-
                  address(_1).

     *Usage:* `dbqueryconnection(H)'
        - _Description:_ `H' is a unique identifier of a query answer
          in a database session connection.



 - PREDICATE: mysql_free_query_connection/1:
     No further documentation available for this predicate.




 - PREDICATE: mysql_fetch/2:
     No further documentation available for this predicate.




 - PREDICATE: mysql_get_tables/2:
     No further documentation available for this predicate.




 - PREDICATE: mysql_table_types/3:
     No further documentation available for this predicate.




 - PREDICATE: mysql_disconnect/1:
     No further documentation available for this predicate.





File: ciao.info,  Node: Types for the Low-level interface to SQL databases,  Next: *** PART IX - Abstract data types,  Prev: Low-level socket interface to SQL/ODBC databases,  Up: Top

Types for the Low-level interface to SQL databases
**************************************************

   *Author(s):* D. Cabeza, M. Carro, I. Caballero, and M.
Hermenegildo..

* Menu:

* Usage and interface (db_client_types)::
* Documentation on exports (db_client_types)::


File: ciao.info,  Node: Usage and interface (db_client_types),  Next: Documentation on exports (db_client_types),  Prev: Types for the Low-level interface to SQL databases,  Up: Types for the Low-level interface to SQL databases

Usage and interface (`db_client_types')
=======================================

   * *Library usage:*

     `:- use_module(library(db_client_types)).'

   * *Exports:*
        - _Regular Types:_

          `socketname/1', `dbname/1', `user/1', `passwd/1',
          `answertableterm/1', `tuple/1', `answertupleterm/1',
          `sqlstring/1'.




File: ciao.info,  Node: Documentation on exports (db_client_types),  Prev: Usage and interface (db_client_types),  Up: Types for the Low-level interface to SQL databases

Documentation on exports (`db_client_types')
============================================

 - REGTYPE: socketname/1:
          socketname(IPAddress:PortNumber) :-
                  atm(IPAddress),
                  int(PortNumber).

     *Usage:* `socketname(IPP)'
        - _Description:_ `IPP' is a structure describing a complete
          TCP/IP port address.



 - REGTYPE: dbname/1:
          dbname(DBId) :-
                  atm(DBId).

     *Usage:* `dbname(DBId)'
        - _Description:_ `DBId' is the identifier of an database.



 - REGTYPE: user/1:
          user(User) :-
                  atm(User).

     *Usage:* `user(User)'
        - _Description:_ `User' is a user name in the database.



 - REGTYPE: passwd/1:
          passwd(Passwd) :-
                  atm(Passwd).

     *Usage:* `passwd(Passwd)'
        - _Description:_ `Passwd' is the password for the user name
          in the database.



 - REGTYPE: answertableterm/1:
     Represents the types of responses that will be returned from the
     database interface. These can be a set of answer tuples, or the
     atom `ok' in case of a successful addition or deletion.

     *Usage:* `answertableterm(AT)'
        - _Description:_ `AT' is a response from the database
          interface.



 - REGTYPE: tuple/1:
          tuple(T) :-
                  list(T,atm).

     *Usage:* `tuple(T)'
        - _Description:_ `T' is a tuple of values from the database
          interface.



 - REGTYPE: answertupleterm/1:
          answertupleterm([]).
          answertupleterm(tup(T)) :-
                  tuple(T).

     *Usage:* `answertupleterm(X)'
        - _Description:_ `X' is a predicate containing a tuple.



 - REGTYPE: sqlstring/1:
          sqlstring(S) :-
                  string(S).

     *Usage:* `sqlstring(S)'
        - _Description:_ `S' is a string of SQL code.




File: ciao.info,  Node: *** PART IX - Abstract data types,  Next: counters (library),  Prev: Types for the Low-level interface to SQL databases,  Up: Top

PART IX - Abstract data types
*****************************

   This part includes libraries which implement some generic data
structures (abstract data types) that are used frequently in programs
or in the Ciao system itself.


File: ciao.info,  Node: counters (library),  Next: Identity lists,  Prev: *** PART IX - Abstract data types,  Up: Top

counters (library)
******************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (counters)::
* Documentation on exports (counters)::


File: ciao.info,  Node: Usage and interface (counters),  Next: Documentation on exports (counters),  Prev: counters (library),  Up: counters (library)

Usage and interface (`counters')
================================

   * *Library usage:*

     `:- use_module(library(counters)).'

   * *Exports:*
        - _Predicates:_

          `setcounter/2', `getcounter/2', `inccounter/2'.




File: ciao.info,  Node: Documentation on exports (counters),  Prev: Usage and interface (counters),  Up: counters (library)

Documentation on exports (`counters')
=====================================

 - PREDICATE: setcounter/2:
     No further documentation available for this predicate.




 - PREDICATE: getcounter/2:
     No further documentation available for this predicate.




 - PREDICATE: inccounter/2:
     No further documentation available for this predicate.





File: ciao.info,  Node: Identity lists,  Next: Lists of numbers,  Prev: counters (library),  Up: Top

Identity lists
**************

   *Author(s):* Francisco Bueno.

   *Version:* 0.4#5 (1998/2/24)

   The operations in this module handle lists by performing equality
checks via identity instead of unification.

* Menu:

* Usage and interface (idlists)::
* Documentation on exports (idlists)::


File: ciao.info,  Node: Usage and interface (idlists),  Next: Documentation on exports (idlists),  Prev: Identity lists,  Up: Identity lists

Usage and interface (`idlists')
===============================

   * *Library usage:*

     `:- use_module(library(idlists)).'

   * *Exports:*
        - _Predicates:_

          `member_0/2', `memberchk/2', `list_insert/2', `add_after/4',
          `add_before/4', `delete/3', `subtract/3', `union_idlists/3'.




File: ciao.info,  Node: Documentation on exports (idlists),  Prev: Usage and interface (idlists),  Up: Identity lists

Documentation on exports (`idlists')
====================================

 - PREDICATE: member_0/2:
     No further documentation available for this predicate.




 - PREDICATE: memberchk/2:
     `memberchk(X,Xs)'

     Checks that `X' is an element of (list) `Xs'.




 - PREDICATE: list_insert/2:
     *Usage:* `list_insert(-List,+Term)'
        - _Description:_ Adds `Term' to the end of (tail-opened)
          `List' if there is not an element in `List' identical to
          `Term'.



 - PREDICATE: add_after/4:
     *Usage:* `add_after(+L0,+E0,+E,-L)'
        - _Description:_ Adds element `E' after the first element
          identical to `E0' (or at end) of list `L0', returning in
          `L' the new list.



 - PREDICATE: add_before/4:
     *Usage:* `add_before(+L0,+E0,+E,-L)'
        - _Description:_ Adds element `E' before the first element
          identical to `E0' (or at start) of list `L0', returning in
          `L' the new list.



 - PREDICATE: delete/3:
     *Usage:* `delete(+List,+Element,-Rest)'
        - _Description:_ `Rest' has the same elements of `List'
          except for all the occurrences of elements identical to
          `Element'.



 - PREDICATE: subtract/3:
     *Usage:* `subtract(+Set,+Set0,-Difference)'
        - _Description:_ `Difference' has the same elements of `Set'
          except those which have an identical occurrence in `Set0'.



 - PREDICATE: union_idlists/3:
     *Usage:* `union_idlists(+List1,+List2,-List)'
        - _Description:_ `List' has the elements which are in `List1'
          but are not identical to an element in `List2' followed by
          the elements in `List2'.




File: ciao.info,  Node: Lists of numbers,  Next: Pattern (regular expression) matching,  Prev: Identity lists,  Up: Top

Lists of numbers
****************

   *Version:* 0.9#99 (1999/5/26, 11:33:15 MEST)

* Menu:

* Usage and interface (numlists)::
* Documentation on exports (numlists)::


File: ciao.info,  Node: Usage and interface (numlists),  Next: Documentation on exports (numlists),  Prev: Lists of numbers,  Up: Lists of numbers

Usage and interface (`numlists')
================================

   * *Library usage:*

     `:- use_module(library(numlists)).'

   * *Exports:*
        - _Predicates:_

          `get_primes/2', `sum_list/2', `sum_list/3',
          `sum_list_of_lists/2', `sum_list_of_lists/3'.

        - _Regular Types:_

          `intlist/1', `numlist/1'.


   * *Other modules used:*
        - _System library modules:_

          `lists'.




File: ciao.info,  Node: Documentation on exports (numlists),  Prev: Usage and interface (numlists),  Up: Lists of numbers

Documentation on exports (`numlists')
=====================================

 - PREDICATE: get_primes/2:
     *Usage:* `get_primes(N,Primes)'
        - _Description:_ Computes the `N'th first prime numbers in
          ascending order.

        - _The following properties should hold at call time:_

          `N' is an integer.   (`basic_props:int/1')

        - _The following properties should hold upon exit:_

          `Primes' is a list of integers.   (`numlists:intlist/1')



 - REGTYPE: intlist/1:
     *Usage:* `intlist(X)'
        - _Description:_ `X' is a list of integers.



 - REGTYPE: numlist/1:
     *Usage:* `numlist(X)'
        - _Description:_ `X' is a list of numbers.



 - PREDICATE: sum_list/2:
     *Usage:* `sum_list(List,N)'
        - _Description:_ `N' is the total sum of the elements of
          `List'.

        - _The following properties should hold at call time:_

          `List' is a list of numbers.   (`numlists:numlist/1')

        - _The following properties should hold upon exit:_

          `N' is a number.   (`basic_props:num/1')



 - PREDICATE: sum_list/3:
     *Usage:* `sum_list(List,N0,N)'
        - _Description:_ `N' is the total sum of the elements of
          `List' plus `N0'.

        - _The following properties should hold at call time:_

          `List' is a list of numbers.   (`numlists:numlist/1')

          `N0' is a number.   (`basic_props:num/1')

        - _The following properties should hold upon exit:_

          `N' is a number.   (`basic_props:num/1')



 - PREDICATE: sum_list_of_lists/2:
     *Usage:* `sum_list_of_lists(Lists,N)'
        - _Description:_ `N' is the total sum of the elements of the
          lists of `Lists'.

        - _The following properties should hold at call time:_

          `List' is a list of `numlist's.   (`basic_props:list/2')

        - _The following properties should hold upon exit:_

          `N' is a number.   (`basic_props:num/1')



 - PREDICATE: sum_list_of_lists/3:
     *Usage:* `sum_list_of_lists(Lists,N0,N)'
        - _Description:_ `N' is the total sum of the elements of the
          lists of `Lists' plus `N0'.

        - _The following properties should hold at call time:_

          `List' is a list of `numlist's.   (`basic_props:list/2')

          `N0' is a number.   (`basic_props:num/1')

        - _The following properties should hold upon exit:_

          `N' is a number.   (`basic_props:num/1')




File: ciao.info,  Node: Pattern (regular expression) matching,  Next: Graphs,  Prev: Lists of numbers,  Up: Top

Pattern (regular expression) matching
*************************************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.3#49 (1999/9/8, 21:8:9 MEST)

   This library provides facilities for matching strings and terms
against _patterns_ (i.e., _regular expressions_).

* Menu:

* Usage and interface (patterns)::
* Documentation on exports (patterns)::


File: ciao.info,  Node: Usage and interface (patterns),  Next: Documentation on exports (patterns),  Prev: Pattern (regular expression) matching,  Up: Pattern (regular expression) matching

Usage and interface (`patterns')
================================

   * *Library usage:*

     `:- use_module(library(patterns)).'

   * *Exports:*
        - _Predicates:_

          `match_pattern/2', `match_pattern/3',
          `case_insensitive_match/2', `letter_match/2',
          `match_pattern_pred/2'.

        - _Regular Types:_

          `pattern/1'.


   * *Other modules used:*
        - _System library modules:_

          `lists'.




File: ciao.info,  Node: Documentation on exports (patterns),  Prev: Usage and interface (patterns),  Up: Pattern (regular expression) matching

Documentation on exports (`patterns')
=====================================

 - PREDICATE: match_pattern/2:
     *Usage:* `match_pattern(Pattern,String)'
        - _Description:_ Matches `String' against `Pattern'. For
          example, `match_pattern("*.pl","foo.pl")' succeeds.

        - _The following properties should hold at call time:_

          `Pattern' is a pattern to match against.
          (`patterns:pattern/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: match_pattern/3:
     *Usage:* `match_pattern(Pattern,String,Tail)'
        - _Description:_ Matches `String' against `Pattern'. `Tail'
          is the remainder of the string after the match. For
          example, `match_pattern("??*","foo.pl",Tail)' succeeds,
          instantiating `Tail' to `"o.pl"'.

        - _The following properties should hold at call time:_

          `Pattern' is a pattern to match against.
          (`patterns:pattern/1')

          `String' is a string (a list of character codes).
          (`basic_props:string/1')

          `Tail' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: case_insensitive_match/2:
     *Usage:* `case_insensitive_match(Pred1,Pred2)'
        - _Description:_ Tests if two predicates `Pred1' and `Pred2'
          match in a case-insensitive way.



 - PREDICATE: letter_match/2:
     No further documentation available for this predicate.




 - REGTYPE: pattern/1:
     Special characters for `Pattern' are:
    *
          Matches any string, including the null string.

    ?
          Matches any single character.

    [...]
          Matches any one of the enclosed characters. A pair of
          characters separated by a minus sign denotes a range; any
          character lexically between those two characters,
          inclusive, is matched. If the first character following the
          [ is a ^ then any character not enclosed is matched. No
          other character is special inside this construct. To
          include a ] in a character set, you must make it the first
          character. To include a `-', you must use it in a context
          where it cannot possibly indicate a range: that is, as the
          first character, or immediately after a range.

    |
          specifies an alternative. Two regular expressions A and B
          with | in between form an expression that matches anything
          that either A or B will match.

    {...}
          groups alternatives inside larger patterns.

    \
          Quotes a special character (including itself).

     *Usage:* `pattern(P)'
        - _Description:_ `P' is a pattern to match against.



 - PREDICATE: match_pattern_pred/2:
     *Usage:* `match_pattern_pred(Pred1,Pred2)'
        - _Description:_ Tests if two predicates `Pred1' and `Pred2'
          match using regular expressions.




File: ciao.info,  Node: Graphs,  Next: Unweighted graph-processing utilities,  Prev: Pattern (regular expression) matching,  Up: Top

Graphs
******

   *Author(s):* F. Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#83 (2000/3/23, 19:23:58 CET)

* Menu:

* Usage and interface (graphs)::
* Documentation on exports (graphs)::
* Documentation on internals (graphs)::


File: ciao.info,  Node: Usage and interface (graphs),  Next: Documentation on exports (graphs),  Prev: Graphs,  Up: Graphs

Usage and interface (`graphs')
==============================

   * *Library usage:*

     `:- use_module(library(graphs)).'

   * *Exports:*
        - _Predicates:_

          `dgraph_to_ugraph/2', `dlgraph_to_lgraph/2',
          `edges_to_ugraph/2', `edges_to_lgraph/2'.

        - _Regular Types:_

          `dgraph/1', `dlgraph/1'.


   * *Other modules used:*
        - _System library modules:_

          `sort', `graphs/ugraphs', `graphs/lgraphs'.




File: ciao.info,  Node: Documentation on exports (graphs),  Next: Documentation on internals (graphs),  Prev: Usage and interface (graphs),  Up: Graphs

Documentation on exports (`graphs')
===================================

 - REGTYPE: dgraph/1:
     `dgraph(Graph)'

     A directed graph is a term `graph(V,E)' where `V' is a list of
     vertices and `E' is a list of edges (none necessarily sorted).
     Edges are pairs of vertices which are directed, i.e., `(a,b)'
     represents `a->b'. Two vertices `a' and `b' are equal only if
     `a==b'.

     *Usage:* `dgraph(Graph)'
        - _Description:_ `Graph' is a directed graph.



 - REGTYPE: dlgraph/1:
     `dlgraph(Graph)'

     A labeled directed graph is a directed graph where edges are
     triples of the form `(a,l,b)' where `l' is the label of the edge
     `(a,b)'.

     *Usage:* `dlgraph(Graph)'
        - _Description:_ `Graph' is a directed labeled graph.



 - PREDICATE: dgraph_to_ugraph/2:
     *Usage:* `dgraph_to_ugraph(+Graph,-UGraph)'
        - _Description:_ Converts `Graph' to `UGraph'.

        - _The following properties should hold at call time:_

          `+Graph' is a directed graph.   (`graphs:dgraph/1')

          `-UGraph' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `+Graph' is a directed graph.   (`graphs:dgraph/1')

          `-UGraph' is an ugraph.   (`ugraphs:ugraph/1')



 - PREDICATE: dlgraph_to_lgraph/2:
     *Usage:* `dlgraph_to_lgraph(+Graph,-LGraph)'
        - _Description:_ Converts `Edges' to `LGraph'.

        - _The following properties should hold at call time:_

          `+Graph' is a directed labeled graph.   (`graphs:dlgraph/1')

          `-LGraph' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `+Graph' is a directed labeled graph.   (`graphs:dlgraph/1')

          `-LGraph' is a labeled graph of `term' terms.
          (`lgraphs:lgraph/2')



 - PREDICATE: edges_to_ugraph/2:
     *Usage:* `edges_to_ugraph(+Edges,-UGraph)'
        - _Description:_ Converts `Graph' to `UGraph'.

        - _The following properties should hold at call time:_

          `+Edges' is a list of `pair's.   (`basic_props:list/2')

          `-UGraph' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `+Edges' is a list of `pair's.   (`basic_props:list/2')

          `-UGraph' is an ugraph.   (`ugraphs:ugraph/1')



 - PREDICATE: edges_to_lgraph/2:
     *Usage:* `edges_to_lgraph(+Edges,-LGraph)'
        - _Description:_ Converts `Edges' to `LGraph'.

        - _The following properties should hold at call time:_

          `+Edges' is a list of `triple's.   (`basic_props:list/2')

          `-LGraph' is a free variable.   (`term_typing:var/1')

        - _The following properties should hold upon exit:_

          `+Edges' is a list of `triple's.   (`basic_props:list/2')

          `-LGraph' is a labeled graph of `term' terms.
          (`lgraphs:lgraph/2')




File: ciao.info,  Node: Documentation on internals (graphs),  Prev: Documentation on exports (graphs),  Up: Graphs

Documentation on internals (`graphs')
=====================================

 - REGTYPE: pair/1:
     *Usage:* `pair(P)'
        - _Description:_ `P' is a pair `(_,_)'.



 - REGTYPE: triple/1:
     *Usage:* `triple(P)'
        - _Description:_ `P' is a triple `(_,_,_)'.




File: ciao.info,  Node: Unweighted graph-processing utilities,  Next: wgraphs (library),  Prev: Graphs,  Up: Top

Unweighted graph-processing utilities
*************************************

   *Author(s):* M. Carlsson, adapted from shared code written by
Richard A O'Keefe. Mods by F.Bueno and M.Carro..

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.9#105 (1999/6/4, 12:24:49 MEST)

   An unweighted directed graph (ugraph) is represented as a list of
(vertex-neighbors) pairs, where the pairs are in standard order (as
produced by keysort with unique keys) and the neighbors of each
vertex are also in standard order (as produced by sort), and every
neighbor appears as a vertex even if it has no neighbors itself.

   An undirected graph is represented as a directed graph where for
each edge `(U,V)' there is a symmetric edge `(V,U)'.

   An edge `(U,V)' is represented as the term `U-V'.

   A vertex can be any term. Two vertices are distinct iff they are
not identical ( `==/2').

   A path is represented as a list of vertices. No vertex can appear
twice in a path.

* Menu:

* Usage and interface (ugraphs)::
* Documentation on exports (ugraphs)::


File: ciao.info,  Node: Usage and interface (ugraphs),  Next: Documentation on exports (ugraphs),  Prev: Unweighted graph-processing utilities,  Up: Unweighted graph-processing utilities

Usage and interface (`ugraphs')
===============================

   * *Library usage:*

     `:- use_module(library(ugraphs)).'

   * *Exports:*
        - _Predicates:_

          `vertices_edges_to_ugraph/3', `neighbors/3', `edges/2',
          `del_vertices/3', `vertices/2', `add_vertices/3',
          `add_edges/3', `transpose/2', `point_to/3'.

        - _Regular Types:_

          `ugraph/1'.


   * *Other modules used:*
        - _System library modules:_

          `sets', `sort'.




File: ciao.info,  Node: Documentation on exports (ugraphs),  Prev: Usage and interface (ugraphs),  Up: Unweighted graph-processing utilities

Documentation on exports (`ugraphs')
====================================

 - PREDICATE: vertices_edges_to_ugraph/3:
     No further documentation available for this predicate.




 - PREDICATE: neighbors/3:
     *Usage:* `neighbors(+Vertex,+Graph,-Neighbors)'
        - _Description:_ Is true if `Vertex' is a vertex in `Graph'
          and `Neighbors' are its neighbors.



 - PREDICATE: edges/2:
     *Usage:* `edges(+Graph,-Edges)'
        - _Description:_ Unifies `Edges' with the edges in `Graph'.



 - PREDICATE: del_vertices/3:
     *Usage:* `del_vertices(+Graph1,+Vertices,-Graph2)'
        - _Description:_ Is true if `Graph2' is `Graph1' with
          `Vertices' and all edges to and from `Vertices' removed
          from it.



 - PREDICATE: vertices/2:
     *Usage:* `vertices(+Graph,-Vertices)'
        - _Description:_ Unifies `Vertices' with the vertices in
          `Graph'.



 - PREDICATE: add_vertices/3:
     *Usage:* `add_vertices(+Graph1,+Vertices,-Graph2)'
        - _Description:_ Is true if `Graph2' is `Graph1' with
          `Vertices' added to it.



 - PREDICATE: add_edges/3:
     *Usage:* `add_edges(+Graph1,+Edges,-Graph2)'
        - _Description:_ Is true if `Graph2' is `Graph1' with `Edges'
          and their 'to' and 'from' vertices added to it.



 - PREDICATE: transpose/2:
     *Usage:* `transpose(+Graph,-Transpose)'
        - _Description:_ Is true if `Transpose' is the graph computed
          by replacing each edge `(u,v)' in `Graph' by its symmetric
          edge `(v,u)'. It can only be used one way around. The cost
          is O(N^2).



 - PREDICATE: point_to/3:
     *Usage:* `point_to(+Vertex,+Graph,-Point_to)'
        - _Description:_ Is true if `Point_to' is the list of nodes
          which go directly to `Vertex' in `Graph'.



 - REGTYPE: ugraph/1:
     *Usage:* `ugraph(Graph)'
        - _Description:_ `Graph' is an ugraph.




File: ciao.info,  Node: wgraphs (library),  Next: Labeled graph-processing utilities,  Prev: Unweighted graph-processing utilities,  Up: Top

wgraphs (library)
*****************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (wgraphs)::
* Documentation on exports (wgraphs)::


File: ciao.info,  Node: Usage and interface (wgraphs),  Next: Documentation on exports (wgraphs),  Prev: wgraphs (library),  Up: wgraphs (library)

Usage and interface (`wgraphs')
===============================

   * *Library usage:*

     `:- use_module(library(wgraphs)).'

   * *Exports:*
        - _Predicates:_

          `vertices_edges_to_wgraph/3'.


   * *Other modules used:*
        - _System library modules:_

          `sets', `sort'.




File: ciao.info,  Node: Documentation on exports (wgraphs),  Prev: Usage and interface (wgraphs),  Up: wgraphs (library)

Documentation on exports (`wgraphs')
====================================

 - PREDICATE: vertices_edges_to_wgraph/3:
     No further documentation available for this predicate.





File: ciao.info,  Node: Labeled graph-processing utilities,  Next: queues (library),  Prev: wgraphs (library),  Up: Top

Labeled graph-processing utilities
**********************************

   *Author(s):* F. Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   See the comments for the `ugraphs' library.

* Menu:

* Usage and interface (lgraphs)::
* Documentation on exports (lgraphs)::


File: ciao.info,  Node: Usage and interface (lgraphs),  Next: Documentation on exports (lgraphs),  Prev: Labeled graph-processing utilities,  Up: Labeled graph-processing utilities

Usage and interface (`lgraphs')
===============================

   * *Library usage:*

     `:- use_module(library(lgraphs)).'

   * *Exports:*
        - _Predicates:_

          `vertices_edges_to_lgraph/3'.

        - _Regular Types:_

          `lgraph/2'.


   * *Other modules used:*
        - _System library modules:_

          `sort', `sets'.




File: ciao.info,  Node: Documentation on exports (lgraphs),  Prev: Usage and interface (lgraphs),  Up: Labeled graph-processing utilities

Documentation on exports (`lgraphs')
====================================

 - REGTYPE: lgraph/2:
     *Usage:* `lgraph(Graph,Type)'
        - _Description:_ `Graph' is a labeled graph of `Type' terms.



 - PREDICATE: vertices_edges_to_lgraph/3:
     No further documentation available for this predicate.





File: ciao.info,  Node: queues (library),  Next: Random numbers,  Prev: Labeled graph-processing utilities,  Up: Top

queues (library)
****************

   *Version:* 0.4#5 (1998/2/24)

* Menu:

* Usage and interface (queues)::
* Documentation on exports (queues)::


File: ciao.info,  Node: Usage and interface (queues),  Next: Documentation on exports (queues),  Prev: queues (library),  Up: queues (library)

Usage and interface (`queues')
==============================

   * *Library usage:*

     `:- use_module(library(queues)).'

   * *Exports:*
        - _Predicates:_

          `q_empty/1', `q_insert/3', `q_member/2', `q_delete/3'.




File: ciao.info,  Node: Documentation on exports (queues),  Prev: Usage and interface (queues),  Up: queues (library)

Documentation on exports (`queues')
===================================

 - PREDICATE: q_empty/1:
     No further documentation available for this predicate.




 - PREDICATE: q_insert/3:
     No further documentation available for this predicate.




 - PREDICATE: q_member/2:
     No further documentation available for this predicate.




 - PREDICATE: q_delete/3:
     No further documentation available for this predicate.





File: ciao.info,  Node: Random numbers,  Next: sets (library),  Prev: queues (library),  Up: Top

Random numbers
**************

   *Author(s):* Daniel Cabeza.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#194 (2002/4/4, 21:8:41 CEST)

   This module provides predicates for generating pseudo-random
numbers

* Menu:

* Usage and interface (random)::
* Documentation on exports (random)::


File: ciao.info,  Node: Usage and interface (random),  Next: Documentation on exports (random),  Prev: Random numbers,  Up: Random numbers

Usage and interface (`random')
==============================

   * *Library usage:*

     `:- use_module(library(random)).'

   * *Exports:*
        - _Predicates:_

          `random/1', `random/3', `srandom/1'.




File: ciao.info,  Node: Documentation on exports (random),  Prev: Usage and interface (random),  Up: Random numbers

Documentation on exports (`random')
===================================

 - PREDICATE: random/1:
     `random(Number)'

     `Number' is a (pseudo-) random number in the range [0.0,1.0]




 - PREDICATE: random/3:
     `random(Low,Up,Number)'

     `Number' is a (pseudo-) random number in the range [`Low', `Up']

     *Usage 1:* `random(+int,+int,-int)'
        - _Description:_ If `Low' and `Up' are integers, `Number' is
          an integer.



 - PREDICATE: srandom/1:
     `srandom(Seed)'

     Changes the sequence of pseudo-random numbers according to
     `Seed'. The stating sequence of numbers generated can be
     duplicated by calling the predicate with `Seed' unbound (the
     sequence depends on the OS).





File: ciao.info,  Node: sets (library),  Next: Variable name dictionaries,  Prev: Random numbers,  Up: Top

sets (library)
**************

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.9#17 (1999/3/23, 20:57:20 MET)

   This module implements set operations. Sets are just ordered lists.

* Menu:

* Usage and interface (sets)::
* Documentation on exports (sets)::


File: ciao.info,  Node: Usage and interface (sets),  Next: Documentation on exports (sets),  Prev: sets (library),  Up: sets (library)

Usage and interface (`sets')
============================

   * *Library usage:*

     `:- use_module(library(sets)).'

   * *Exports:*
        - _Predicates:_

          `insert/3', `ord_delete/3', `ord_member/2',
          `ord_test_member/3', `ord_subtract/3', `ord_intersection/3',
          `ord_intersection_diff/4', `ord_intersect/2',
          `ord_subset/2', `ord_subset_diff/3', `ord_union/3',
          `ord_union_diff/4', `ord_union_symdiff/4',
          `ord_union_change/3', `merge/3', `ord_disjoint/2',
          `setproduct/3'.


   * *Other modules used:*
        - _System library modules:_

          `sort'.




File: ciao.info,  Node: Documentation on exports (sets),  Prev: Usage and interface (sets),  Up: sets (library)

Documentation on exports (`sets')
=================================

 - PREDICATE: insert/3:
     *Usage:* `insert(+Set1,+Element,-Set2)'
        - _Description:_ It is true when `Set2' is `Set1' with
          `Element' inserted in it, preserving the order.



 - PREDICATE: ord_delete/3:
     *Usage:* `ord_delete(+Set0,+X,-Set)'
        - _Description:_ It succeeds if `Set' is `Set0' without
          element `X'.



 - PREDICATE: ord_member/2:
     *Usage:* `ord_member(+X,+Set)'
        - _Description:_ It succeeds if `X' is member of `Set'.



 - PREDICATE: ord_test_member/3:
     *Usage:* `ord_test_member(+Set,+X,-Result)'
        - _Description:_ If `X' is member of `Set' then
          `Result'=`yes'. Otherwise `Result'=`no'.



 - PREDICATE: ord_subtract/3:
     *Usage:* `ord_subtract(+Set1,+Set2,?Difference)'
        - _Description:_ It is true when `Difference' contains all
          and only the elements of `Set1' which are not also in
          `Set2'.



 - PREDICATE: ord_intersection/3:
     *Usage:* `ord_intersection(+Set1,+Set2,?Intersection)'
        - _Description:_ It is true when `Intersection' is the
          ordered representation of `Set1' and `Set2', provided that
          `Set1' and `Set2' are ordered lists.



 - PREDICATE: ord_intersection_diff/4:
     *Usage:*
     `ord_intersection_diff(+Set1,+Set2,-Intersect,-NotIntersect)'
        - _Description:_ `Intersect' contains those elements which
          are both in `Set1' and `Set2', and `NotIntersect' those
          which are in `Set1' but not in `Set2'.



 - PREDICATE: ord_intersect/2:
     *Usage:* `ord_intersect(+Xs,+Ys)'
        - _Description:_ Succeeds when the two ordered lists have at
          least one element in common.



 - PREDICATE: ord_subset/2:
     *Usage:* `ord_subset(+Xs,+Ys)'
        - _Description:_ Succeeds when every element of `Xs' appears
          in `Ys'.



 - PREDICATE: ord_subset_diff/3:
     *Usage:* `ord_subset_diff(+Set1,+Set2,-Difference)'
        - _Description:_ It succeeds when every element of `Set1'
          appears in `Set2' and `Difference' has the elements of
          `Set2' which are not in `Set1'.



 - PREDICATE: ord_union/3:
     *Usage:* `ord_union(+Set1,+Set2,?Union)'
        - _Description:_ It is true when `Union' is the union of
          `Set1' and `Set2'. When some element occurs in both sets,
          `Union' retains only one copy.



 - PREDICATE: ord_union_diff/4:
     *Usage:* `ord_union_diff(+Set1,+Set2,-Union,-Difference)'
        - _Description:_ It succeeds when `Union' is the union of
          `Set1' and `Set2', and `Difference' is `Set2' set-minus
          `Set1'.



 - PREDICATE: ord_union_symdiff/4:
     *Usage:* `ord_union_symdiff(+Set1,+Set2,-Union,-Diff)'
        - _Description:_ It is true when Diff is the symmetric
          difference of Set1 and Set2, and Union is the union of Set1
          and Set2.



 - PREDICATE: ord_union_change/3:
     *Usage:* `ord_union_change(+Set1,+Set2,-Union)'
        - _Description:_ `Union' is the union of `Set1' and `Set2'
          and `Union' is different from `Set2'.



 - PREDICATE: merge/3:
     *Usage:* `merge(+Set1,+Set2,?Union)'
        - _Description:_ See `ord_union/3'.



 - PREDICATE: ord_disjoint/2:
     *Usage:* `ord_disjoint(+Set1,+Set2)'
        - _Description:_ `Set1' and `Set2' have no element in common.



 - PREDICATE: setproduct/3:
     *Usage:* `setproduct(+Set1,+Set2,-Product)'
        - _Description:_ `Product' has all two element sets such that
          one element is in `Set1' and the other in `set2', except
          that if the same element belongs to both, then the
          corresponding one element set is in `Product'.




File: ciao.info,  Node: Variable name dictionaries,  Next: *** PART X - Miscellaneous standalone utilities,  Prev: sets (library),  Up: Top

Variable name dictionaries
**************************

   *Author(s):* Francisco Bueno.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 0.8#19 (1998/12/3, 12:53:16 MET)

* Menu:

* Usage and interface (vndict)::
* Documentation on exports (vndict)::


File: ciao.info,  Node: Usage and interface (vndict),  Next: Documentation on exports (vndict),  Prev: Variable name dictionaries,  Up: Variable name dictionaries

Usage and interface (`vndict')
==============================

   * *Library usage:*

     `:- use_module(library(vndict)).'

   * *Exports:*
        - _Predicates:_

          `create_dict/2', `complete_dict/3', `complete_vars_dict/3',
          `prune_dict/3', `dict2varnamesl/2', `varnamesl2dict/2',
          `find_name/4', `rename/2', `vars_names_dict/3'.

        - _Regular Types:_

          `null_dict/1', `varname/1', `varnamesl/1', `varnamedict/1'.


   * *Other modules used:*
        - _System library modules:_

          `idlists', `terms_vars', `sets', `sort'.




File: ciao.info,  Node: Documentation on exports (vndict),  Prev: Usage and interface (vndict),  Up: Variable name dictionaries

Documentation on exports (`vndict')
===================================

 - REGTYPE: null_dict/1:
     *Usage:* `null_dict(D)'
        - _Description:_ `D' is an empty dictionary.



 - PREDICATE: create_dict/2:
     *Usage:* `create_dict(Term,Dict)'
        - _Description:_ `Dict' has names for all variables in `Term'.

        - _The following properties should hold at call time:_

          `Term' is any term.   (`basic_props:term/1')

        - _The following properties should hold upon exit:_

          `Dict' is a dictionary of variable names.
          (`vndict:varnamedict/1')



 - PREDICATE: complete_dict/3:
     *Usage:* `complete_dict(+Dict,+Term,-NewDict)'
        - _Description:_ `NewDict' is `Dict' augmented with the
          variables of `Term' not yet in `Dict'.



 - PREDICATE: complete_vars_dict/3:
     *Usage:* `complete_vars_dict(+Dict,+Vars,-NewDict)'
        - _Description:_ `NewDict' is `Dict' augmented with the
          variables of the list `Vars' not yet in `Dict'.



 - PREDICATE: prune_dict/3:
     *Usage:* `prune_dict(+Term,+Dict,-NewDict)'
        - _Description:_ `NewDict' is `Dict' reduced to just the
          variables of `Term'.



 - PREDICATE: dict2varnamesl/2:
     *Usage:* `dict2varnamesl(Dict,VNs)'
        - _Description:_ Translates `Dict' to `VNs'.

        - _The following properties should hold at call time:_

          `Dict' is a dictionary of variable names.
          (`vndict:varnamedict/1')

        - _The following properties should hold upon exit:_

          `VNs' is a list of `Name=Var', for a variable `Var' and its
          name `Name'.   (`vndict:varnamesl/1')



 - PREDICATE: varnamesl2dict/2:
     *Usage:* `varnamesl2dict(VNs,Dict)'
        - _Description:_ Translates `VNs' to `Dict'.

        - _The following properties should hold at call time:_

          `VNs' is a list of `Name=Var', for a variable `Var' and its
          name `Name'.   (`vndict:varnamesl/1')

        - _The following properties should hold upon exit:_

          `Dict' is a dictionary of variable names.
          (`vndict:varnamedict/1')



 - PREDICATE: find_name/4:
     `find_name(Vars,Names,V,Name)'

     Given that `vars_names_dict(Dict,Vars,Names)' holds, it acts as
     `rename(X,Dict)', but the name of `X' is given as `Name' instead
     of unified with it.




 - PREDICATE: rename/2:
     *Usage:* `rename(Term,Dict)'
        - _Description:_ Unifies each variable in `Term' with its
          name in `Dict'. If no name is found, a new name is created.

        - _The following properties should hold at call time:_

          `Dict' is a dictionary of variable names.
          (`vndict:varnamedict/1')



 - REGTYPE: varname/1:
     *Usage:* `varname(N)'
        - _Description:_ `N' is term representing a variable name.



 - REGTYPE: varnamesl/1:
     *Usage:* `varnamesl(D)'
        - _Description:_ `D' is a list of `Name=Var', for a variable
          `Var' and its name `Name'.



 - REGTYPE: varnamedict/1:
     *Usage:* `varnamedict(D)'
        - _Description:_ `D' is a dictionary of variable names.



 - PREDICATE: vars_names_dict/3:
     *Usage:* `vars_names_dict(Dict,Vars,Names)'
        - _Description:_ `Varss' is a sorted list of variables, and
          `Names' is a list of their names, which correspond in the
          same order.

        - _Call and exit should be _compatible_ with:_

          `Dict' is a dictionary of variable names.
          (`vndict:varnamedict/1')

          `Vars' is a list.   (`basic_props:list/1')

          `Names' is a list.   (`basic_props:list/1')




File: ciao.info,  Node: *** PART X - Miscellaneous standalone utilities,  Next: A Program to Help Cleaning your Directories,  Prev: Variable name dictionaries,  Up: Top

PART X - Miscellaneous standalone utilities
*******************************************

   *Author(s):* <clip@clip.dia.fi.upm.es>,
`http://www.clip.dia.fi.upm.es/', The CLIP Group, School of Computer
Science, Technical University of Madrid.

   This is the documentation for a set of miscellaneous standalone
utilities contained in the `etc' directory of the Ciao distribution.


File: ciao.info,  Node: A Program to Help Cleaning your Directories,  Next: Printing the declarations and code in a file,  Prev: *** PART X - Miscellaneous standalone utilities,  Up: Top

A Program to Help Cleaning your Directories
*******************************************

   *Author(s):* Manuel Carro.

   *Version:* 0.1#3 (2001/10/25, 14:31:59 CEST)

   A simple program for traversing a directory tree and deciding
which files may be deleted in order to save space and not to loose
information.

* Menu:

* Usage (cleandirs)::
* Known bugs and planned improvements (cleandirs)::


File: ciao.info,  Node: Usage (cleandirs),  Next: Known bugs and planned improvements (cleandirs),  Prev: A Program to Help Cleaning your Directories,  Up: A Program to Help Cleaning your Directories

Usage (cleandirs)
=================


     cleandirs: <initial_dir> <delete_options> <backup_options>
     cleandirs explores <initial_dir> (which should be an absolute path)
     and looks for backup files and files which can be generated from other
     files, using a plausible heuristic aimed at retaining the same amount
     of information while recovering some disk space.  The heuristic is
     based on the extension of the filename.
     
     Delete options is one of:
        --list: just list the files/directories which are amenable to be deleted,
                but do not delete them. SAFE.
         --ask: list the files/directories and ask for deletion. UNSAFE if you
                make a mistake.
      --delete: just delete the files/directories without asking.  I envy your
                brave soul if you choose this option.
     
     Backup options is one of:
      --includebackups: include backup files in the list of files to check.
      --excludebackups: do not include backup files in the list of files to check.
         --onlybackups: include only backup files in the list of files to check.
     
     Symbolic links are not traversed.  Special files are not checked.

   Invoking the program with no arguments will return an up-to-date
information on the options.


File: ciao.info,  Node: Known bugs and planned improvements (cleandirs),  Prev: Usage (cleandirs),  Up: A Program to Help Cleaning your Directories

Known bugs and planned improvements (`cleandirs')
=================================================

   * Recursive removal of subdirectories relies on the existence of a
     recursive /bin/rm command in your system.


File: ciao.info,  Node: Printing the declarations and code in a file,  Next: Printing the contents of a bytecode file,  Prev: A Program to Help Cleaning your Directories,  Up: Top

Printing the declarations and code in a file
********************************************

   *Author(s):* Manuel Hermenegildo.

   *Version:* 0.5#6 (1999/4/15, 20:33:6 MEST)

   A simple program for printing assertion information ( predicate
declarations, property declarations, type declarations, etc.) and
printing code-related information ( imports, exports, libraries used,
etc.) on a file. The file should be a single CIAO or Prolog source
file. It uses the CIAO compiler's pass one to do it. This program is
specially useful for example to check what the compiler is actually
seeing after syntactic expansions, as well as for checking what
assertions the assertion normalizer is producing from the original
assertions in the file.

* Menu:

* Usage (fileinfo)::
* More detailed explanation of options (fileinfo)::


File: ciao.info,  Node: Usage (fileinfo),  Next: More detailed explanation of options (fileinfo),  Prev: Printing the declarations and code in a file,  Up: Printing the declarations and code in a file

Usage (fileinfo)
================


         fileinfo -asr <filename.asr>
            : pretty prints the contents of <filename.asr>
     
         fileinfo [-v] [-m] <-a|-c|-e> <filename> [libdir1] ... [libdirN]
         -v : verbose output (e.g., lists all files read)
         -m : restrict info to current module
         -a : print assertions
         -c : print code and interface (imports/exports, etc.)
         -e : print only errors - useful to check syntax of assertions in file
     
         fileinfo -h
            : print this information


File: ciao.info,  Node: More detailed explanation of options (fileinfo),  Prev: Usage (fileinfo),  Up: Printing the declarations and code in a file

More detailed explanation of options (fileinfo)
===============================================

   * If the `-a' option is selected, `fileinfo' prints the assertions
     (only code-oriented assertions - not comment-oriented
     assertions) in the file _after normalization_. If the `-c'
     option is selected `fileinfo' prints the file interface, the
     declarations contained in the file, and the actual code. If the
     `-e' option is selected `fileinfo' prints only any sintactic and
     import-export errors found in the file, including the assertions.

   * `filename' must be the name of a Prolog or CIAO source file.

   * This filename can be followed by other arguments which will be
     taken to be library directory paths in which to look for files
     used by the file being analyzed.

   * If the `-m' option is selected, only the information related to
     the current module is printed.

   * The `-v' option produces verbose output. This is very useful for
     debugging, since all the files accessed during assertion
     normalization are listed.

   * In the `-asr' usage, `fileinfo' can be used to print the
     contents of a `.asr' file in human-readable form.



File: ciao.info,  Node: Printing the contents of a bytecode file,  Next: Crossed-references of a program,  Prev: Printing the declarations and code in a file,  Up: Top

Printing the contents of a bytecode file
****************************************

   *Author(s):* Daniel Cabeza.

   *Version:* 0.5#2 (1999/11/11, 19:20:50 MET)

   This simple program takes as an argument a bytecode (.po) file and
prints out in symbolic form the information contained in the file. It
uses compiler and engine builtins to do so, so that it keeps track
with changes in bytecode format.

* Menu:

* Usage (viewpo)::


File: ciao.info,  Node: Usage (viewpo),  Prev: Printing the contents of a bytecode file,  Up: Printing the contents of a bytecode file

Usage (viewpo)
==============


     	viewpo <file1>.po
     	   : print .po contents in symbolic form
     
     	viewpo -h
     	   : print this information


File: ciao.info,  Node: Crossed-references of a program,  Next: Gathering the dependent files for a file,  Prev: Printing the contents of a bytecode file,  Up: Top

Crossed-references of a program
*******************************

   *Author(s):* Francisco Bueno.

   The `xrefs' crossed-references Ciao library includes several
modules which allow displaying crossed-references of the code in a
program. Crossed-references identify modules which import code from
other modules, or files (be them modules or not) which use code in
other files. Crossed-references can be obtained as a term
representing a graph, displayed graphically (using daVinci, a graph
displayer developed by U. of Bremen, Germany), or printed as a list.

   The libraries involved are as follows:
   * `etc(xmrefs)' displays a graph of crossed-references between
     modules using daVinci,

   * `etc(xfrefs)' displays a graph of crossed-references between
     files using daVinci,

   * `library(xrefs)' obtains a graph of crossed-references between
     files,

   * `library('xrefs/mrefs')' obtains a graph of crossed-references
     between modules,

   * `library('xrefs/pxrefs')' prints a list of crossed-references
     between files.
   The first two are intended to be used by loading in `ciaosh'. The
other three are intended to be used as modules within an application.

   The following is an example graph of the library modules involved
in the crossed-references application. It has been obtained with:
     [ciao/etc]> ciaosh
     Ciao-Prolog 1.5 #24: Tue Dec 28 14:12:11 CET 1999
     ?- use_module(xmrefs).
     
     yes
     ?- set_flag(X).
     
     X = 3 ?
     
     yes
     ?- set_files([xfrefs, xmrefs,
                   library(xrefs),
                   library('xrefs/mrefs'),
                   library('xrefs/pxrefs'),
                   library('xrefs/xrefs2graph'),
                   library('xrefs/xrefsbuild'),
                   library('xrefs/xrefsread')
     	     ]).
     
     yes
     ?- xmrefs.

so that it is displayed by daVinci as:


[Image file: autofigxmgraph.eps]

   The following is an example graph of the same module files, where
crossed-references have been obtained with `xfrefs:xfrefs(whodefs)'
instead of `xmrefs:xmrefs':


[Image file: autofigxfgraph.eps]

   For more information refer to the xrefs documentation
(`xrefs_doc.dvi') in the source library of the Ciao distribution.


File: ciao.info,  Node: Gathering the dependent files for a file,  Next: Finding differences between two Prolog files,  Prev: Crossed-references of a program,  Up: Top

Gathering the dependent files for a file
****************************************

   *Author(s):* Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.0#6 (1998/11/5, 13:56:58 MET)

   This simple program takes a single Ciao or Prolog source filename
(which is typically the main file of an application). It prints out
the list of all the dependent files, i.e., all files needed in order
to build the application, including those which reside in libraries.
This is particularly useful in Makefiles, for building standalone
distributions (e.g., .tar files) automatically.

   The filename should be followed by other arguments which will be
taken to be library directory paths in which to look for files used
by the file being analyzed.

* Menu:

* Usage (get_deps)::


File: ciao.info,  Node: Usage (get_deps),  Prev: Gathering the dependent files for a file,  Up: Gathering the dependent files for a file

Usage (get_deps)
================


     	get_deps [-u <filename>] <filename> [lib_dir1] ... [lib_dirN]
                : return dependent files for <filename>
                  found in [lib_dir1] ... [lib_dirN]
     
     	get_deps -h
                : print this information


File: ciao.info,  Node: Finding differences between two Prolog files,  Next: The Ciao lpmake scripting facility,  Prev: Gathering the dependent files for a file,  Up: Top

Finding differences between two Prolog files
********************************************

   *Author(s):* Francisco Bueno.

   This simple program works like the good old diff but for files
that contain Prolog code. It prints out the clauses that it finds are
different in the files. Its use avoids textual differences such as
different variable names and different formatting of the code in the
files.

* Menu:

* Usage (pldiff)::
* Known bugs and planned improvements (pldiff)::


File: ciao.info,  Node: Usage (pldiff),  Next: Known bugs and planned improvements (pldiff),  Prev: Finding differences between two Prolog files,  Up: Finding differences between two Prolog files

Usage (pldiff)
==============


     	pldiff <file1> <file2>
     	   : find differences
     
     	pldiff -h
     	   : print this information

   but you can also use the program as a library and invoke the
predicate:

        pldiff( <filename> , <filename> )


File: ciao.info,  Node: Known bugs and planned improvements (pldiff),  Prev: Usage (pldiff),  Up: Finding differences between two Prolog files

Known bugs and planned improvements (`pldiff')
==============================================

   * Currently uses variant/2 to compare clauses. This is useful, but
     there should be an option to select the way clauses are
     compared, e.g., some form of equivalence defined by the user.


File: ciao.info,  Node: The Ciao lpmake scripting facility,  Next: Find out which architecture we are running on,  Prev: Finding differences between two Prolog files,  Up: Top

The Ciao lpmake scripting facility
**********************************

   *Author(s):* Manuel Hermenegildo, `clip@dia.fi.upm.es',
`http://www.clip.dia.fi.upm.es/', The CLIP Group, Facultad de
Informa'tica, Universidad Polite'cnica de Madrid.

   *Note:* `lpmake' and the `make' library are still under active
development, and they may change substantially in future releases.

   `lpmake' is a Ciao application which uses the Ciao `make' library
to implement a dependency-driven scripts in a similar way to the Un*x
`make' facility.

   The original purpose of the Un*x `make' utility is to determine
automatically which pieces of a large program needed to be
recompiled, and issue the commands to recompile them. In practice,
`make' is often used for many other purposes: it can be used to
describe any task where some files must be updated automatically from
others whenever the others change.  `lpmake' can be used for the same
types of applications as `make', and also for some new ones, and
offers a number of advantages over `make'. The first one is
_portability_. When compiled to a bytecode executable `lpmake' runs
on any platform where a Ciao engine is available. Also, the fact that
typically many of the operations are programmed in Prolog within the
makefile, not needing external applications, improves portability
further. The second advantage of `lpmake' is _improved programming
capabilities_. While `lpmake' is simpler than `make', `lpmake' allows
using the Ciao Prolog language within the scripts. This allows
establising more complex dependencies and programming powerful
operations within the make file, and without resorting to external
packages (e.g., operating system commands), which also helps
portability. A final advantage of `lpmake' is that it supports a form
of _autodocumentation_: comments associated to targets can be
included in the configuration files. Calling `lpmake' in a directory
which has such a configuration file explains what commands the
configuration file support and what these commands will do.

* Menu:

* General operation::
* lpmake usage::
* Acknowledgments (lpmake)::


File: ciao.info,  Node: General operation,  Next: lpmake usage,  Prev: The Ciao lpmake scripting facility,  Up: The Ciao lpmake scripting facility

General operation
=================

   To prepare to use `lpmake', and in a similar way to `make', you
must write a file (typically called `Makefile.pl') that describes the
relationships among files in your program or application, and states
the commands for updating each file. In a program, typically the
executable file is updated from object files, which are in turn made
by compiling source files. Another example is running `latex' and
`dvips' on a set of source `.tex' files to generate a document in
`dvi' and `postscript' formats. Once a suitable makefile exists, each
time you change some source files, simply typing `lpmake' suffices to
perform all necessary operations (recompilations, processing text
files, etc.). The `lpmake' program uses the dependency rules in the
makefile and the last modification times of the files to decide which
of the files need to be updated. For each of those files, it issues
the commands recorded in the makefile. For example, in the `latex'/
`dvips' case one rule states that the `.dvi' file whould be updated
from the `.tex' files whenever one of them changes and another rule
states that the `.ps' file needs to be updated from a `.dvi' file
every time it changes. The rule also describe the commands to be
issued to update the files.

   So, the general process is as follows: `lpmake' executes commands
in the `Makefile.pl' to update one or more target _names_, where
_name_ is often a program, but can also be a file to be generated or
even a "virtual" target. If no `-l' or `-m' options are present,
`lpmake' will look for the makefile `Makefile.pl'.  `lpmake' updates
a target if it depends on prerequisite files that have been modified
since the target was last modified, or if the target does not exist.
You can provide command line arguments to `lpmake' to control which
files should be regenerated, or how.


File: ciao.info,  Node: lpmake usage,  Next: Acknowledgments (lpmake),  Prev: General operation,  Up: The Ciao lpmake scripting facility

lpmake usage
============



     Supported command line options:
     
     [-v] [-u <.../Configfile.pl>] <command1> ... <commandn>
     
       Process commands <command1> ... <commandn>, using user
       file <.../Configfile.pl> as configuration file. If no
       configuration file is specified a file 'Makefile.pl' in
       the current directory will be used.
     
     [-v] [-m <.../Configfile.pl>] <command1> ... <commandn>
     
       Same as above, but the configuration file is a module.
       Making this file a module is useful to implement
       inherintance across diferent configuration files, i.e.,
       the values declared in a configuration file can be
       easily made to override those defined in another.
     
       Optional argument '-v' produces verbose output, reporting
       on the processing of the dependency rules. Very useful
       for debugging Makefiles.
     
     -h     [ -u <.../Configfile.pl> ]
     -h     [ -m <.../Configfile.pl> ]
     -help  [ -u <.../Configfile.pl> ]
     -help  [ -m <.../Configfile.pl> ]
     
       Print this help message. If a configuration file is given,
       and the commands in it are commented, then information on
       these commands is also printed.


File: ciao.info,  Node: Acknowledgments (lpmake),  Prev: lpmake usage,  Up: The Ciao lpmake scripting facility

Acknowledgments (`lpmake')
==========================

   Some parts of the documentation are taken from the documentation
of GNU's `gmake'.


File: ciao.info,  Node: Find out which architecture we are running on,  Next: *** PART XI - Contributed libraries,  Prev: The Ciao lpmake scripting facility,  Up: Top

Find out which architecture we are running on
*********************************************

   *Author(s):* Manuel Carro, Robert Manchek.

   *Version:* 0.0#6 (2001/3/26, 13:56:52 CEST)

   The architecure and operating system the engine is compiled for
determines whether we can use or not certain libraries. This script,
taken from a PVM distribution, uses a heuristic (which may need to be
tuned from time to time) to find out the platform. It returns a
string which is used throughout the engine (in #ifdefs) to
enable/disable certain characteristics.

* Menu:

* Usage (ciao_get_arch)::
* More details::


File: ciao.info,  Node: Usage (ciao_get_arch),  Next: More details,  Prev: Find out which architecture we are running on,  Up: Find out which architecture we are running on

Usage (ciao_get_arch)
=====================

        Usage: ciao_get_arch


File: ciao.info,  Node: More details,  Prev: Usage (ciao_get_arch),  Up: Find out which architecture we are running on

More details
============

   Look at the script itself...


File: ciao.info,  Node: *** PART XI - Contributed libraries,  Next: Programming MYCIN rules,  Prev: Find out which architecture we are running on,  Up: Top

PART XI - Contributed libraries
*******************************

   This part includes a number of libraries which have contributed by
users of the Ciao system. Over time, some of these libraries are
moved to the main library directories of the system.


File: ciao.info,  Node: Programming MYCIN rules,  Next: A Chart Library,  Prev: *** PART XI - Contributed libraries,  Up: Top

Programming MYCIN rules
***********************

   *Author(s):* Angel Fernandez Pineda.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#59 (2000/2/29, 14:51:54 CET)

   MYCIN databases are declared as Prolog modules containing mycin
rules. Those rules are given a _certainty factor_ (_CF_) which
denotates an expert's credibility on that rule:
   * A value of -1 stands for _surely not_.

   * A value of 1 stands for _certainly_.

   * A value of 0 stands for _I don't know_.


   Intermediate values are allowed.

   Mycin rules work on a different way as Prolog clauses: a rule will
never fail (in the Prolog sense), it will return a certainty value
instead. As a consequence *all* mycin rules will be explored during
inference, so the order in which rules are written is not
significant. For this reason, the usage of the Prolog _cut_ (!) is
discouraged.

* Menu:

* Usage and interface (mycin)::
* Documentation on new declarations (mycin)::
* Known bugs and planned improvements (mycin)::


File: ciao.info,  Node: Usage and interface (mycin),  Next: Documentation on new declarations (mycin),  Prev: Programming MYCIN rules,  Up: Programming MYCIN rules

Usage and interface (`mycin')
=============================

   * *Library usage:*

     In order to declare a mycin database you must include the
     following declaration as the first one in your file:
                     :- mycin(MycinDataBaseName).

   * *New declarations defined:*

     `export/1'.



File: ciao.info,  Node: Documentation on new declarations (mycin),  Next: Known bugs and planned improvements (mycin),  Prev: Usage and interface (mycin),  Up: Programming MYCIN rules

Documentation on new declarations (`mycin')
===========================================

 - DECLARATION: export/1:
     This directive allows a given mycin predicate to be called from
     Prolog programs. The way in which mycin rules are called departs
     from Prolog ones. For instance, the followin mycin predicate:
          :- export p/1.

     must be called from Prolog Programs as: `mycin(p(X),CF)', where
     CF will be binded to the resulting certainty factor. Obviously,
     the variables on _P/1_ may be instantiated as you wish. Since
     the Prolog predicate _mycin/2_ may be imported from several
     mycin databases, it is recommended to fully qualify those
     predicate goals. For example : `mydatabase:mycin(p(X),CF)'.

     *Usage:* :- `export(Spec)'.
        - _Description:_ `Spec' will be a callable mycin predicate.




File: ciao.info,  Node: Known bugs and planned improvements (mycin),  Prev: Documentation on new declarations (mycin),  Up: Programming MYCIN rules

Known bugs and planned improvements (`mycin')
=============================================

   * Not fully implemented.

   * Dynamic mycin predicates not implemented: open question.

   * Importation of user-defined mycin predicates requires further
     design. This includes importation of mycin databases from
     another mycin database.


File: ciao.info,  Node: A Chart Library,  Next: Low level Interface between Prolog and blt,  Prev: Programming MYCIN rules,  Up: Top

A Chart Library
***************

   *Author(s):* Isabel Marti'n Garci'a.

   This library is intended to eaose the task of displaying some
graphical results. This library allows the programmer to visualize
different graphs and tables without knowing anything about specific
graphical packages.

   You need to install the BLT package in your computer. BLT is an
extension to the Tk toolkit and it does not require any patching of
the Tcl or Tk source files. You can find it in
`http://www.tcltk.com/blt/index.html'

   Basically, when the user invokes a predicate, the library
(internally) creates a bltwish interpreter and passes the information
through a socket to display the required widget. The interpreter
parses the received commands and executes them.

   The predicates exported by this library can be classified in four
main groups, according to the types of representation they provide.

   * bar charts

   * line graphs

   * scatter graphs

   * tables

   To represent graphs, the Cartesian coordinate system is used. I
have tried to show simple samples for every library exported
predicate in order to indicate how to call them.

* Menu:

* Bar charts::
* Line graphs::
* Scatter graphs::
* Tables::
* Overview of widgets::
* Usage and interface (chartlib)::
* Documentation on exports (chartlib)::


File: ciao.info,  Node: Bar charts,  Next: Line graphs,  Prev: A Chart Library,  Up: A Chart Library

Bar charts
==========

   In this section we shall introduce the general issues about the
set of barchart predicates. By calling the predicates that pertain to
this group a bar chart for plotting two-dimensional data (X-Y
coordinates) can be created. A bar chart is a graphic means of
comparing numbers by displaying bars of lengths proportional to the
y-coordinates they represented. The barchart widget has many
configurable options such as title, header text, legend and so on.
You can configure the appearance of the bars as well. The bar chart
widget has the following components:

Header text
     The text displayed at the top of the window. If it is `''' no
     text will be displayed.

Save button
     The button placed below the header text. Pops up a dialog box
     for the user to select a file to save the graphic in PostScript
     format.(1)

Bar chart title
     The title of the graph. It is displayed at the top of the bar
     chart graph. If text is `''' no title will be displayed.

X axis title
     X axis title. If text is `''' no x axis title will be displayed.

Y axis title
     Y axis title. If text is `''' no y axis title will be displayed.

X axis
     X coordinate axis. The x axis is drawn at the bottom margin of
     the bar chart graph. The x axis consists of the axis line, ticks
     and tick labels. Tick labels can be numbers or plain text. If
     the labels are numbers, they could be displayed at uniform
     intervals (the numbers are treated as normal text) or depending
     on its x-coodinate value. You can also set limits (maximum and
     minimum) for the x axis, but only if the tick labels are numeric.

Y axis
     Y coordinate axis. You can set limits (maximum and minimum) for
     the y axis. The y axis is drawn at the right margin of the bar
     chart graph.The y axis consists of the axis line, ticks and tick
     labels. The tick labels are numeric values determined from the
     data and are drawn at uniform intervals.

Bar chart graph
     This is the plotting area, placed in the center of the window
     and surrounded by the axes, the axis titles and the legend (if
     any). The range of the axes controls what region of the data is
     plotted. By default, the minimum and maximum limits are
     determined from the data, but you can set them (as mentioned
     before). Data points outside the minimum and maximum value of
     the axes are not plotted.

Legend
     The legend displays the name and symbol of each bar. The legend
     is placed in the right margin of the Bar chart graph.

Footer text
     Text displayed at the lower part of the window. If text is `'''
     no header text will be displayed.

Quit button
     Button placed below the footer text. Click it to close the
     window.

   All of them are arranged in a window. However you can, for
example, show a bar chart window without legend or header text. Other
configuration options will be explained later.

   In addition to the window appearance there is another important
issue about the bar chart window, namely its behaviour in response to
user actions. The association user actions to response is called
_bindings_. The main bindings currently specified are the following:

Default bindings
     Those are well known by most users. They are related to the
     frame displayed around the window. As you know, you can
     interactively move, resize, close, iconify, deiconify, send to
     another desktop etc. a window.

Bindings related to bar chart graph and its legend
     Clicking the left mouse key over a legend element, the
     corresponding bar turns out into red. After clicking again, the
     bar toggles to its original look. In addition, you can do
     zoom-in by pressing the left mouse key over the bar chart graph
     and dragging to select an area. To zoom out simply press the
     right mouse button.

     When the pointer passes over the plotting area the cross hairs
     are drawn. The cross hairs consists of two intersecting lines
     (one vertical and one horizontal). Besides, if the pointer is
     over a legend element, its background changes.

Bindings related to buttons
     There are two buttons in the main widget. Clicking the mouse on
     the Save button a "Save as" dialog box is popped up. The user
     can select a file to save the graph. If the user choose a file
     that already exists, the dialog box prompts the user for
     confirmation on whether the existing file should be overwritten
     or not. Furthermore, you can close the widget by clicking on the
     Quit button.

     When the pointer passes over a button the button color changes.

   The predicates that belong to this group are those whose names
begin with *barchart* and *genmultibar*. If you take a look at the
predicate names that pertain to this group, you will notice that they
are not self-explanatory. It would have been better to name the
predicates in a way that allows the user to identify the predicate
features by its name, but it would bring about very long names (i.e
barchart_WithoutLegend_BarsAtUniformIntervals_RandomBarsColors). For
this reason I decided to simply add a number after barchart to name
them.

   ---------- Footnotes ----------

   (1) Limitation: Some printers can have problems if the PostScript
file is too complex (i.e. too many points/lines appear in the
picture).


File: ciao.info,  Node: Line graphs,  Next: Scatter graphs,  Prev: Bar charts,  Up: A Chart Library

Line graphs
===========

   It is frequently the case that several datasets need to be
displayed on the same plot. If so, you may wish to distinguish the
points in different datasets by joining them by lines of different
color, or by plotting with symbols of different types. This set of
predicates allows the programmer to represent two-dimensional data
(X-Y coordinates). Each dataset contains x and y vectors containing
the coordinates of the data. You can configure the appearance of the
points and the lines which the points are connected with. The
configurable line graph components are:

line graph
     This is the plotting area, placed in the center of the window
     and surrounded by the axes, the axes titles and the legend (if
     any). The range of the axes controls what region of the data is
     plotted. By default, the minimum and maximum limits are
     determined from the data, but you can set them. Data points
     outside the minimum and maximum value of the axes are not
     plotted. You can specify how connecting line segments joining
     successive datapoints are drawn by setting the `Smooth'
     argument. Smooth can be either linear, step, natural and
     quadratic. Furthermore, you can select the appearance of the
     points and lines.

Legend
     The legend displays the name and symbol of each line. The legend
     is placed in the right margin of the graph.

   The elements header, footer, quit and save buttons, the titles and
the axes are quite similar to those in barchart graphs, except in
that the tick labels will be numbers. All of them are arranged in a
window by the geometry manager. However you can, as we mentioned in
the above paragraphs, show a line graph window without any titles or
footer text. Other configuration options will be explained later in
this section or in the corresponding modules.

   Related to the behaviour of the widgets in response to user
actions (bindings) we will remark the following features:

Bindings related to line graph and its legend
     Clicking the left mouse key over a legend element, the
     corresponding line turns out into blue. Repeating the action
     reverts the line to its original color. Moreover, you can do
     zoom-in by clicking the left mouse key over the bar chart graph
     and dragging a rectangle defining the area you want to zoom in.
     To zoom out simply press the right mouse button.

     When the pointer passes over the plotting area the cross hairs
     are drawn. The cross hairs consists of two intersecting lines
     (one vertical and one horizontal). Besides, if the pointer is
     over a legend element, its background changes.

Other bindings
     The default bindings and the bindings related to the save and
     quit buttons are similar to those in the bar chart graphs.

   The predicates that belong to this group are those whose names
begin with *graph_*.


File: ciao.info,  Node: Scatter graphs,  Next: Tables,  Prev: Line graphs,  Up: A Chart Library

Scatter graphs
==============

   The challenge of this section is to introduce some general aspects
about the scatter graph predicates group. By invoking the scatter
graph predicates the user can represent two-dimensional point
datasets. Often you need to display one or several point datasets on
the same plot. If so, you may wish to distinguish the points that
pertain to different datasets by using plotting symbols of different
types, or by displaying them in different colors. This set of
predicates allows you to represent two-dimensional data (X-Y
coordinates). Each dataset contains x and y vectors containing the
coordinates of the data. You can configure the appearance of the
points. The configurable scatter graph components are:

scatter graph
     This is the plotting area, placed in the center of the window
     and surrounded by the axes, the axes titles and the legend (if
     any). The range of the axes controls what region of the data is
     plotted. By default, the minimum and maximum limits are
     determined from the data, but you can set them (as we mentioned
     before). Data points outside the minimum and maximum value of
     the axes are not plotted. The user can select the appearance of
     the points.

Legend
     The legend displays the name and symbol of each point dataset.
     The legend is drawn in the right margin of the graph.

   The elements header, footer, quit and save buttons, the titles and
the axes are similar to those in barchart graphs except for that, as
in line graphs, the tick labels will be numbers. All of them are
arranged in a window by the geometry manager. However you can, for
example, show a scatter graph window without titles or footer text,
as we mentioned before. Other configuration options will be explained
later, in the corresponding modules.

   Related to the behaviour of the widgets in response to user
actions (bindings) the following features are:

Bindings related to scatter graph and its legend
     Clicking the left mouse key over a legend element, the points
     which belong to the corresponding dataset turn out into blue.
     Repeating the action toggles the point dataset to its original
     color. Moreover, you can do zoom-in by clicking the left mouse
     key over the bar chart graph and dragging a rectangle defining
     the area you want to zoom-in on. To do zoom-out simply press the
     right mouse button.

     When the pointer passes over the plotting area the cross hairs
     are drawn. The cross hairs consists of two intersecting lines
     (one vertical and one horizontal). Besides, if the pointer is
     over a legend element, its background changes.

Other bindings
     The default bindings and the bindings related to the save and
     quit buttons are similar to those in the bar chart graphs.

   The predicates that belong to this group are those whose names
began with *scattergraph_*.


File: ciao.info,  Node: Tables,  Next: Overview of widgets,  Prev: Scatter graphs,  Up: A Chart Library

Tables
======

   The purpose of this section is to allow the user to display
results in a table. A table is a regular structure in which:

   * Every row has the same number of columns, or

   * Every column has the same number of rows.


   The widget configurable components are as follows:

Title
     Title of the widget, it is displayed centered at the top of the
     canvas. If text is `''' no title will be displayed.

Header text
     Left centered text displayed bellow the title. If text is `'''
     no header text will be displayed.

Table
     Is placed in the center of the window. The table is composed by
     cells ordered in rows and columns. The cell values can be either
     any kind of text or numbers and they can be empty as well (see
     the type definition in the corresponding chapter module). A
     table is a list of lists. Each sublist is a row, so every
     sublist in the table must contain the same number of alements.

Footer text
     Left centered text displayed at the lower part of the window. If
     text is `''' no header text will be displayed.

Quit button
     Button placed below the footer text. You can click it to close
     the window.

   If the arguments are not in a correct format an exception will be
thrown. Moreover, these widgets have the default bindings and the
binding related to the quit button:

   The set of predicates that belongs to this group are those which
names begin with *table_widget*.


File: ciao.info,  Node: Overview of widgets,  Next: Usage and interface (chartlib),  Prev: Tables,  Up: A Chart Library

Overview of widgets
===================

   Although you don't have to worry about how to arrange the widgets,
here is an overview of how Tcl-tk, the underlying graphical system
currently used by chartlib, performs this task. Quoting from the book
_Tcl and Tk toolkit_, John K. Ousterhout.

   The X Window System provides many facilities for manipulating
windows in displays. The root window may have any number of child
windows, each of wich is called a top-level window. Top-level windows
may have children of their own, wich may have also children, and so
on. The descendants of top-level windows are called internal windows.
Internal windows are usedfor individual controls such as buttons,
text entries, and for grouping controls together. An X-application
tipically manages several top-level windows. Tk uses X to implement a
set of controls with the Motif look and feel. These controls are
called widgets. Each widget is implemented using one X window, and
the terms "window" and "widget" will be used interchangeably in this
document. As with windows, widgets are nested in hierarchical
structures. In this library top-level widgets (nonleaf or main) are
just containers for organizing and arranging the leaf widgets
(components). Thereby, the barchart widget is a top-level window wich
contains some widget components.

   Probably the most painstaking aspect of building a graphical
application is getting the placement and size of the widgets just
right. It usually takes many iterations to align widgets and adjust
their spacing. That's because managing the geometry of widgets is
simply not a packing problem, but also graphical design problem.
Attributes such as alignment, symmetry, and balance are more
important than minimizing the amount of space used for packing. Tk is
similar to other X toolkits in that it does not allow widgets to
determine their own geometries. A widget will not even appeared
unless it is managed by a geometry manager. This separation of
geometry management from internal widget behaviour allows multiple
geometry managers to exist simultaneously and permits any widget to
be used with any geometry manager. A geometry manager's job is to
arrange one or more _slave_ widgets relative to a _master_ widgets.
There are some geometry managers in Tk such as pack, place and canvas
widget. We will use another one call table.

   The table geometry manager arranges widgets in a table. It's easy
to align widgets (horizontally and vertically) or to create empty
space to balance the arrangement of the widgets. Widgets (called
slaves in the Tk parlance) are arranged inside a containing widget
(called the master). Widgets are positioned at row,column locations
and may span any number of rows or columns. More than one widget can
occupy a single location. The placement of widget windows determines
both the size and arrangement of the table. The table queries the
requested size of each widget. The requested size of a widget is the
natural size of the widget (before the widget is shrunk or expanded).
The height of each row and the width of each column is the largest
widget spanning that row or column. The size of the table is in turn
the sum of the row and column sizes. This is the table's normal size.
The total number of rows and columns in a table is determined from
the indices specified. The table grows dynamically as windows are
added at larger indices.


File: ciao.info,  Node: Usage and interface (chartlib),  Next: Documentation on exports (chartlib),  Prev: Overview of widgets,  Up: A Chart Library

Usage and interface (`chartlib')
================================

   * *Library usage:*

     `:- use_module(library(chartlib)).'

   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/genbar2', `chartlib/genbar3',
          `chartlib/genbar4', `chartlib/genmultibar',
          `chartlib/table_widget1', `chartlib/table_widget2',
          `chartlib/table_widget3', `chartlib/table_widget4',
          `chartlib/gengraph1', `chartlib/gengraph2',
          `chartlib/chartlib_errhandle'.




File: ciao.info,  Node: Documentation on exports (chartlib),  Prev: Usage and interface (chartlib),  Up: A Chart Library

Documentation on exports (`chartlib')
=====================================

 - (: UNDOC_REEXPORT) barchart1/7:
     Imported from `genbar1' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart1/9:
     Imported from `genbar1' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) percentbarchart1/7:
     Imported from `genbar1' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart2/7:
     Imported from `genbar2' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart2/11:
     Imported from `genbar2' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) percentbarchart2/7:
     Imported from `genbar2' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart3/7:
     Imported from `genbar3' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart3/9:
     Imported from `genbar3' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) percentbarchart3/7:
     Imported from `genbar3' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart4/7:
     Imported from `genbar4' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) barchart4/11:
     Imported from `genbar4' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) percentbarchart4/7:
     Imported from `genbar4' (see the corresponding documentation for
     details).




 - (: UNDOC_REEXPORT) multibarchart/8:
     Imported from `genmultibar' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) multibarchart/10:
     Imported from `genmultibar' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) tablewidget1/4:
     Imported from `table_widget1' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget1/5:
     Imported from `table_widget1' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget2/4:
     Imported from `table_widget2' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget2/5:
     Imported from `table_widget2' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget3/4:
     Imported from `table_widget3' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget3/5:
     Imported from `table_widget3' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget4/4:
     Imported from `table_widget4' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) tablewidget4/5:
     Imported from `table_widget4' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) graph_b1/9:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_b1/13:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_w1/9:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_w1/13:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_b1/8:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_b1/12:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_w1/8:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_w1/12:
     Imported from `gengraph1' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_b2/9:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_b2/13:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_w2/9:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) graph_w2/13:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_b2/8:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_b2/12:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_w2/8:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) scattergraph_w2/12:
     Imported from `gengraph2' (see the corresponding documentation
     for details).




 - (: UNDOC_REEXPORT) chartlib_text_error_protect/1:
     Imported from `chartlib_errhandle' (see the corresponding
     documentation for details).




 - (: UNDOC_REEXPORT) chartlib_visual_error_protect/1:
     Imported from `chartlib_errhandle' (see the corresponding
     documentation for details).





File: ciao.info,  Node: Low level Interface between Prolog and blt,  Next: chartlib_errhandle (library),  Prev: A Chart Library,  Up: Top

Low level Interface between Prolog and blt
******************************************

   This module exports some predicates to interact with Tcl-tk,
particularly with the bltwish program. Bltwish is a windowing shell
consisting of the Tcl command languaje, the Tk toolkit plus the
additional commands that comes with the BLT library and a main
program that reads commands. It creates a main window and then
processes Tcl commands.

* Menu:

* Usage and interface (bltclass)::
* Documentation on exports (bltclass)::


File: ciao.info,  Node: Usage and interface (bltclass),  Next: Documentation on exports (bltclass),  Prev: Low level Interface between Prolog and blt,  Up: Low level Interface between Prolog and blt

Usage and interface (`bltclass')
================================

   * *Library usage:*

     `:- use_module(library(bltclass)).'

   * *Exports:*
        - _Predicates:_

          `new_interp/1', `tcltk_raw_code/2', `interp_file/2'.

        - _Regular Types:_

          `bltwish_interp/1'.


   * *Other modules used:*
        - _System library modules:_

          `sockets/sockets', `system', `write', `read', `strings',
          `format', `terms'.




File: ciao.info,  Node: Documentation on exports (bltclass),  Prev: Usage and interface (bltclass),  Up: Low level Interface between Prolog and blt

Documentation on exports (`bltclass')
=====================================

 - PREDICATE: new_interp/1:
     `new_interp(Interp)'

     Creates a bltwish interprter and returns a socket. The socket
     allows the comunication between Prolog and Tcl-tk. Thus, bltwish
     receives the commands through the socket.




 - PREDICATE: tcltk_raw_code/2:
     `tcltk_raw_code(Command_Line,Interp)'

     Sends a command line to the interpreter. Tcl-tk parses and
     executes it.




 - REGTYPE: bltwish_interp/1:
     `bltwish_interp(Interp)'

     This type defines a bltwish interpreter. In fact, the bltwish
     interpreter receives the commands through the socket created.
          bltwish_interp(Interp) :-
                  stream(Interp).




 - PREDICATE: interp_file/2:
     `interp_file(File,Interp)'

     Sends the script file (File) to the interpreter through the
     socket. A script file is a file that contains commands that
     Tcl-tk can execute.





File: ciao.info,  Node: chartlib_errhandle (library),  Next: Color and Pattern Library,  Prev: Low level Interface between Prolog and blt,  Up: Top

chartlib_errhandle (library)
****************************

   This module is an error handler. If the format of the arguments is
not correct in a call to a chartlib predicate an exception will be
thrown . You can wrap the chartlib predicates with the predicates
exported by this module to handle automatically the errors if any.

* Menu:

* Usage and interface (chartlib_errhandle)::
* Documentation on exports (chartlib_errhandle)::
* Documentation on internals (chartlib_errhandle)::


File: ciao.info,  Node: Usage and interface (chartlib_errhandle),  Next: Documentation on exports (chartlib_errhandle),  Prev: chartlib_errhandle (library),  Up: chartlib_errhandle (library)

Usage and interface (`chartlib_errhandle')
==========================================

   * *Library usage:*

     `:- use_module(library(chartlib_errhandle)).'

   * *Exports:*
        - _Predicates:_

          `chartlib_text_error_protect/1',
          `chartlib_visual_error_protect/1'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/bltclass', `chartlib/install_utils'.




File: ciao.info,  Node: Documentation on exports (chartlib_errhandle),  Next: Documentation on internals (chartlib_errhandle),  Prev: Usage and interface (chartlib_errhandle),  Up: chartlib_errhandle (library)

Documentation on exports (`chartlib_errhandle')
===============================================

 - PREDICATE: chartlib_text_error_protect/1:
     `chartlib_text_error_protect(G)'

     This predicate catches the thrown exception and sends it to the
     appropiate handler. The handler will show the error message in
     the standard output.

     _Meta-predicate_ with arguments:
     `chartlib_text_error_protect(goal)'.




 - PREDICATE: chartlib_visual_error_protect/1:
     `chartlib_visual_error_protect(G)'

     This predicate catches the thrown exception and sends it to the
     appropiate handler. The handler will pop up a message box.

     _Meta-predicate_ with arguments:
     `chartlib_visual_error_protect(goal)'.





File: ciao.info,  Node: Documentation on internals (chartlib_errhandle),  Prev: Documentation on exports (chartlib_errhandle),  Up: chartlib_errhandle (library)

Documentation on internals (`chartlib_errhandle')
=================================================

 - REGTYPE: handler_type/1:
     `handler_type(X)'

     The library chartlib includes two error handlers already
     programmed.
          handler_type(text).
          handler_type(visual).




 - PREDICATE: error_message/2:
     `error_message(ErrorCode,ErrorMessage)'

     Binds the error code with its corresponding text message.




 - PREDICATE: error_file/2:
     `error_file(ErrorCode,ErrorFile)'

     Binds the error code with its corresponding script error file.





File: ciao.info,  Node: Color and Pattern Library,  Next: genbar1 (library),  Prev: chartlib_errhandle (library),  Up: Top

Color and Pattern Library
*************************

   This module contains predicates to access and check conformance to
the available colors and patterns.

* Menu:

* Usage and interface (color_pattern)::
* Documentation on exports (color_pattern)::


File: ciao.info,  Node: Usage and interface (color_pattern),  Next: Documentation on exports (color_pattern),  Prev: Color and Pattern Library,  Up: Color and Pattern Library

Usage and interface (`color_pattern')
=====================================

   * *Library usage:*

     `:- use_module(library(color_pattern)).'

   * *Exports:*
        - _Predicates:_

          `color/2', `pattern/2', `random_color/1',
          `random_lightcolor/1', `random_darkcolor/1',
          `random_pattern/1'.

        - _Regular Types:_

          `color/1', `pattern/1'.


   * *Other modules used:*
        - _System library modules:_

          `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (color_pattern),  Prev: Usage and interface (color_pattern),  Up: Color and Pattern Library

Documentation on exports (`color_pattern')
==========================================

 - REGTYPE: color/1:
     `color(Color)'

          color('GreenYellow').
          color('Yellow').
          color('White').
          color('Wheat').
          color('BlueViolet').
          color('Violet').
          color('MediumTurquoise').
          color('DarkTurquoise').
          color('Turquoise').
          color('Thistle').
          color('Tan').
          color('Sienna').
          color('Salmon').
          color('VioletRed').
          color('OrangeRed').
          color('MediumVioletRed').
          color('IndianRed').
          color('Red').
          color('Plum').
          color('Pink').
          color('MediumOrchid').
          color('DarkOrchid').
          color('Orchid').
          color('Orange').
          color('Maroon').
          color('Magenta').
          color('Khaki').
          color('Grey').
          color('LightGray').
          color('DimGray').
          color('DarkSlateGray').
          color('YellowGreen').
          color('SpringGreen').
          color('SeaGreen').
          color('PaleGreen').
          color('MediumSpringGreen').
          color('MediumSeaGreen').
          color('LimeGreen').
          color('ForestGreen').
          color('DarkOliveGreen').
          color('DarkGreen').
          color('Green').
          color('Goldenrod').
          color('Gold').
          color('Brown').
          color('Firebrick').
          color('Cyan').
          color('Coral').
          color('SteelBlue').
          color('SlateBlue').
          color('SkyBlue').
          color('Navy').
          color('MidnightBlue').
          color('MediumSlateBlue').
          color('MediumBlue').
          color('LightSteelBlue').
          color('LightBlue').
          color('DarkSlateBlue').
          color('CornflowerBlue').
          color('CadetBlue').
          color('Blue').
          color('Black').
          color('MediumAquamarine').
          color('Aquamarine').
     Defines available colors for elements such as points, lines or
     bars.




 - PREDICATE: color/2:
     *Usage:* `color(C1,C2)'
        - _Description:_ Test whether the color `C1' is a valid color
          or not. If `C1' is a variable the predicate will choose a
          valid color randomly. If `C1' is a ground term that is not
          a valid color an exception (error9) will be thrown

        - _The following properties should hold at call time:_

          `color_pattern:color(C1)'  (`color_pattern:color/1')

        - _The following properties should hold upon exit:_

          `color_pattern:color(C2)'  (`color_pattern:color/1')



 - REGTYPE: pattern/1:
     `pattern(Pattern)'

          pattern(pattern1).
          pattern(pattern2).
          pattern(pattern3).
          pattern(pattern4).
          pattern(pattern5).
          pattern(pattern6).
          pattern(pattern7).
          pattern(pattern8).
          pattern(pattern9).
     Defines valid patterns used in the stipple style bar attribute.




 - PREDICATE: pattern/2:
     *Usage:* `pattern(P1,P2)'
        - _Description:_ Test whether the pattern `P1' is a valid
          pattern or not. If `P1' is a variable the predicate will
          choose a valid pattern randomly. If `P1' is a ground term
          that is not a valid pattern an exception (error10) will be
          thrown.

        - _The following properties should hold at call time:_

          `color_pattern:pattern(P1)'  (`color_pattern:pattern/1')

        - _The following properties should hold upon exit:_

          `color_pattern:pattern(P2)'  (`color_pattern:pattern/1')



 - PREDICATE: random_color/1:
     `random_color(Color)'

     This predicate choose a valid color among the availables
     randomly.




 - PREDICATE: random_lightcolor/1:
     `random_lightcolor(Color)'

     This predicate choose a valid light color among the availables
     randomly.




 - PREDICATE: random_darkcolor/1:
     `random_darkcolor(Color)'

     This predicate choose a valid dark color among the availables
     randomly.




 - PREDICATE: random_pattern/1:
     `random_pattern(Pattern)'

     This predicate choose a valid pattern among the availables
     randomly.





File: ciao.info,  Node: genbar1 (library),  Next: genbar2 (library),  Prev: Color and Pattern Library,  Up: Top

genbar1 (library)
*****************

   This module defines predicates to show barchart widgets. The three
predicates exported by this module plot two-variable data as regular
bars in a window. They all share the following features:

   * No numeric values for the `x' axis are needed because they will
     be interpreted as labels. See `xbarelement1/1' definition type.

   * The bars will be displayed at uniform intervals.

   * The user can either select the appearance of the bars
     (background color, foreground color and stipple style) or not.
     See the `xbarelement1' type definition. Thus, the user can call
     each predicate in two ways.

   * The bar chart has a legend. One entry (symbol and label) per bar.

   * If you don't want to display text in the elements header,
     barchart title, x axis title, y axis title or footer, simply
     type `''' as the value of the argument.

   * The predicates test whether the format of the arguments is
     correct. If one or both vectors are empty, the exception
     `error2' will be thrown. If the vectors contains elements but
     are not correct, the exception `error1' or `error3' will be
     thrown, depending on the error type. `error1' means that
     `XVector' and `YVector' do not contain the same number of
     elements and `error3' indicates that not all the `XVector'
     elements contain a correct number of attributes .


Particular features will be pointed out in the corresponding
predicate.

* Menu:

* Usage and interface (genbar1)::
* Documentation on exports (genbar1)::
* Documentation on internals (genbar1)::


File: ciao.info,  Node: Usage and interface (genbar1),  Next: Documentation on exports (genbar1),  Prev: genbar1 (library),  Up: genbar1 (library)

Usage and interface (`genbar1')
===============================

   * *Library usage:*

     `:- use_module(library(genbar1)).'

   * *Exports:*
        - _Predicates:_

          `barchart1/7', `barchart1/9', `percentbarchart1/7'.

        - _Regular Types:_

          `yelement/1', `axis_limit/1', `header/1', `title/1',
          `footer/1'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/bltclass', `chartlib/test_format',
          `chartlib/color_pattern', `chartlib/install_utils', `lists',
          `random/random'.




File: ciao.info,  Node: Documentation on exports (genbar1),  Next: Documentation on internals (genbar1),  Prev: Usage and interface (genbar1),  Up: genbar1 (library)

Documentation on exports (`genbar1')
====================================

 - PREDICATE: barchart1/7:
     `barchart1(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)'

     The `y' axis range is determined from the limits of the data.
     Two examples are given to demonstrate clearly how to call the
     predicates. In the first example the user sets the bar
     appearance, in the second one the appearance features will be
     chosen by the system and the colors that have been assigned to
     the variables Color1, Color2 and Pattern will be shown also.

     Example 1:

          barchart1('This is the header text',
            'Barchart title',
            'xaxistitle',
            [ ['bar1','legend_element1','Blue','Yellow','pattern1'],
                     ['bar2','legend_element2','Plum','SeaGreen','pattern2'],
                     ['bar3','legend_element3','Turquoise','Yellow','pattern5'] ],
            'yaxixtitle',
            [20,10,59],
            'footer').

     Example 2:

          barchart1('This is the header text',
            'Barchart title',
            'xaxistitle',
            [ ['element1','legend_element1',Color1,Color2,Pattern],
                      ['element2','legend_element2'],
                      ['element3','legend_element3'] ],
            'yaxixtitle',
            [20,10,59],
            'footer').




 - PREDICATE: barchart1/9:
     `barchart1(Header,BTitle,XTitle,XVector,YTitle,YVector,YMax,YMin,Footer)'

     You can set the minimum and maximum limits of the `y' axis. Data
     outside the limits will not be plotted. Each limit, as you can
     check by looking at the `axis_limit/1' definition, is a number.
     If the argument is a variable the limit will be calculated from
     the data (i.e., if `YMax' value is YValueMax the maximum y axis
     limit will calculated using the largest data value).

     Example:

          barchart1('This is the header text',
            'Barchart title',
            'xaxistitle',
            [ ['element1','e1','Blue','Yellow','pattern1'],
                ['element2','e2','Turquoise','Plum','pattern5'],
                ['element3','e3','Turquoise','Green','pattern5'] ],
            'yaxixtitle',
            [20,10,59],
            70,
            _,
            'footer').




 - PREDICATE: percentbarchart1/7:
     `percentbarchart1(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)'

     The y axis maximum coordinate value is 100. The `x' axis limits
     are automatically worked out.

     Example:

          percentbarchart1('This is a special barchart to represent percentages',
            'Barchart with legend',
            'My xaxistitle',
            [ [1,'bar1','Blue','Yellow','pattern1'],
                 [8,'bar2','MediumTurquoise','Plum','pattern5'] ],
            'My yaxixtitle',
            [80,10],
            'This is the footer text').




 - REGTYPE: yelement/1:
          yelement(Y) :-
                  number(Y).

     Y is the bar lenght, so it must be a numeric value.

     Both Prolog and Tcl-Tk support integers and floats. Integers are
     usually specified in decimal, but if the first character is 0
     the number is read in octal (base 8), and if the first two
     characters are 0x, the number is read in hexadecimal (base16).
     Float numbers may be specified using most of the forms defined
     for ANSI C, including the following examples:

        * 9.56

        * 5.88e-2

        * 5.1E2

     Note: Be careful when using floats. While 8. or 7.e4 is
     interpreted by Tcl-tk as 8.0 and 7.0e4, Prolog will not read
     them as float numbers. Example:
                  ?- number(8.e+5).
                  {SYNTAX ERROR: (lns 130-130) , or ) expected in arguments
                  number ( 8
                  ** here **
                  . e + 5 ) .
                  }
          
                  no
                  ?- number(8.).
                  {SYNTAX ERROR: (lns 138-138) , or ) expected in arguments
                  number ( 8
                  ** here **
                  . ) .
                  }
          
                  no
          
                  ?- number(8.0e+5).
          
                  yes
                  ?- number(8.0).
          
                  yes

     Precision: Tcl-tk internally represents integers with the C type
     `int', which provides at least 32 bits of precision on most
     machines. Since Prolog integers can (in some implementations)
     exceed 32 bits but the precision in Tcl-tk depends on the
     machine, it is up to the progammer to ensure that the values fit
     into the maximum precision of the machine for integers. Real
     numbers are represented with the C type `double', which is
     usually represented with 64-bit values (about 15 decimal digits
     of precision) using the IEEE Floating Point Standard.

     Conversion: If the list is composed by integers and floats,
     Tcl-tk will convert integers to floats.




 - REGTYPE: axis_limit/1:
          axis_limit(X) :-
                  number(X).
          axis_limit(_1).

     This type is defined in order to set the minimum and maximum
     limits of the axes. Data outside the limits will not be plotted.
     Each limit, is a number or a variable. If the argument is not a
     number the limit will be calculated from the data (i.e., if YMax
     value is `Var' the maximum y axis limit will be calculated using
     the largest data value).




 - REGTYPE: header/1:
     *Usage:* `header(X)'
        - _Description:_ `X' is a text (an atom) describing the
          header of the graph.



 - REGTYPE: title/1:
     *Usage:* `title(X)'
        - _Description:_ `X' is a text (an atom) to be used as label,
          usually not very long.



 - REGTYPE: footer/1:
     *Usage:* `footer(X)'
        - _Description:_ `X' is a text (an atom) describing the
          footer of the graph.




File: ciao.info,  Node: Documentation on internals (genbar1),  Prev: Documentation on exports (genbar1),  Up: genbar1 (library)

Documentation on internals (`genbar1')
======================================

 - REGTYPE: xbarelement1/1:
          xbarelement1([XValue,LegendElement]) :-
                  atomic(XValue),
                  atomic(LegendElement).
          xbarelement1([XValue,LegendElement,ForegColor,BackgColor,SPattern]) :-
                  atomic(XValue),
                  atomic(LegendElement),
                  color(ForegColor),
                  color(BackgColor),
                  pattern(SPattern).

     Defines the attributes of the bar.
    `XValue'
          bar label. Although `XValue' values may be numbers, the
          will be treated as labels. Different elements with the same
          label will produce different bars.

    `LegendElement'
          Legend element name. It may be a number or an atom and
          equal or different to the XValue. Every `LegendElement'
          value of the list must be unique.

    `ForegColor'
          It sets the Foreground color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `BackgColor'
          It sets the Background color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `SPattern'
          It sets the stipple of the bar. Its value must be a valid
          pattern, otherwise the system will throw an exception. If
          the argument value is a variable, it gets instantiated to a
          pattern chosen by the library.





File: ciao.info,  Node: genbar2 (library),  Next: genbar3 (library),  Prev: genbar1 (library),  Up: Top

genbar2 (library)
*****************

   This module defines predicates which show barchart widgets. The
three predicates exported by this module plot two-variable data as
regular bars in a window. They all share the following features:

   * Numeric values for the x axis are needed, otherwise it does not
     work properly. See `xbarelement2/1' definition type.

   * The bar position is proportional to the x-coordinate value.

   * The user can either select the appearance of the bars
     (background color, foreground color and stipple style) or not.
     See the `xbarelement2/1' type definition. Thus, the user can
     call each predicate in two ways.

   * The bar chart has a legend and one entry (symbol and label) per
     bar.

   * If you do not want to display text in the elements header,
     barchart title, x axis title, y axis title or footer, simply
     type `''' as the value of the argument.

   * The predicates test whether the format of the arguments is
     correct. If one or both vectors are empty, the exception
     `error2' will be thrown. If the vectors contain elements but are
     not correct, the exception `error1' or `error3' will be thrown,
     depending on the error type. `error1' means that `XVector' and
     `YVector' does not contain the same number of elements and
     `error3' indicates that not all the `XVector' elements contain a
     correct number of attributes .


   Particular features will be pointed out in the corresponding
predicate.

* Menu:

* Usage and interface (genbar2)::
* Documentation on exports (genbar2)::


File: ciao.info,  Node: Usage and interface (genbar2),  Next: Documentation on exports (genbar2),  Prev: genbar2 (library),  Up: genbar2 (library)

Usage and interface (`genbar2')
===============================

   * *Library usage:*

     `:- use_module(library(genbar2)).'

   * *Exports:*
        - _Predicates:_

          `barchart2/7', `barchart2/11', `percentbarchart2/7'.

        - _Regular Types:_

          `xbarelement2/1'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/color_pattern', `chartlib/test_format',
          `chartlib/install_utils', `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (genbar2),  Prev: Usage and interface (genbar2),  Up: genbar2 (library)

Documentation on exports (`genbar2')
====================================

 - PREDICATE: barchart2/7:
     `barchart2(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)'

     The maximum and minimum limits for axes are determined from the
     data.

     Example:

          barchart2('This is the header text',
            'Barchart with legend',
            'My xaxistitle',
            [ [1,'bar1','Blue','Yellow','pattern1'],
                 [2,'bar2','MediumTurquoise','Plum','pattern5'] ],
            'My yaxixtitle',
            [20,10],
            'This is the footer text').




 - PREDICATE: barchart2/11:
     `barchart2(Header,BT,XT,XVector,XMax,XMin,YT,YVector,YMax,YMin,Footer)'

     You can set the minimum and maximum limits of the axes. Data
     outside the limits will not be plotted. Each limit, as you can
     check looking at the `axis_limit/1' definition, is a number. If
     the argument is a variable the limit will be calculated from the
     data (i.e., if `YMax' value is YValueMax the maximum y axis
     limit will calculated using the largest data value).

     Example:

          barchart2('This is the header text',
            'Barchart with legend',
            'My xaxistitle',
            [ [1,'bar1',Color1,Color2,Pattern1],
                   [2,'bar2',Color3,Color4,Pattern2] ],
            10,
            -10,
            'My yaxixtitle',
            [20,10],
            100,
            -10,
            'The limits for the axes are set by the user').




 - PREDICATE: percentbarchart2/7:
     `percentbarchart2(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)'

     The y axis maximum coordinate value is 100. The x axis limits
     are autoarrange.

     Example:

          percentbarchart2('This is a special barchart to represent percentages',
            'Barchart with legend',
            'My xaxistitle',
            [ [1,'bar1','Blue','Yellow','pattern1'],
                    [2,'bar2','MediumTurquoise','Plum','pattern5'] ],
            'My yaxixtitle',
            [80,10],
            'This is the footer text').




 - REGTYPE: xbarelement2/1:
          xbarelement2([XValue,LegendElement]) :-
                  number(XValue),
                  atomic(LegendElement).
          xbarelement2([XValue,LegendElement,ForegColor,BackgColor,SPattern]) :-
                  number(XValue),
                  atomic(LegendElement),
                  color(ForegColor),
                  color(BackgColor),
                  pattern(SPattern).
     Defines the attributes of the bar.

    `XValue'
          x-coordinate position of the bar. Different elements with
          the same abscissas will produce overlapped bars.

    `LegendElement'
          Element legend name. It may be a number or an atom and
          equal or different to the XValue. Every `LegendElement'
          value of the list must be unique.

    `ForegColor'
          Is the Foreground color of the bar. Its value must be a
          valid color, otherwise the system will throw an exception.
          If the argument value is a variable, it gets instantiated
          to a color chosen by the library.

    `BackgColor'
          Is the Background color of the bar. Its value must be a
          valid color, otherwise the system will throw an exception.
          If the argument value is a variable, it gets instantiated
          to a color chosen by the library.

    `SPattern'
          Is the stipple of the bar. Its value must be a valid
          pattern, otherwise the system will throw an exception. If
          the argument value is a variable, it gets instantiated to a
          pattern chosen by the library.





File: ciao.info,  Node: genbar3 (library),  Next: genbar4 (library),  Prev: genbar2 (library),  Up: Top

genbar3 (library)
*****************

   This module defines predicates which depict barchart widgets. The
three predicates exported by this module plot two-variable data as
regular bars in a window and are similar to those exported in the
genbar1 module except in that these defined in this module do not
display a legend. Thus, not all the argument types are equal.

   The predicates test whether the format of the arguments is
correct. If one or both vectors are empty, the exception `error2'
will be thrown. If the vectors contain elements but are not correct,
the exception `error1' or `error3' will be thrown, depending on the
error type. `error1' means that `XVector' and `YVector' do not
contain the same number of elements and `error3' indicates that not
all the `XVector' elements contain a correct number of attributes .

* Menu:

* Usage and interface (genbar3)::
* Documentation on exports (genbar3)::
* Documentation on internals (genbar3)::


File: ciao.info,  Node: Usage and interface (genbar3),  Next: Documentation on exports (genbar3),  Prev: genbar3 (library),  Up: genbar3 (library)

Usage and interface (`genbar3')
===============================

   * *Library usage:*

     `:- use_module(library(genbar3)).'

   * *Exports:*
        - _Predicates:_

          `barchart3/7', `barchart3/9', `percentbarchart3/7'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/color_pattern', `chartlib/test_format',
          `chartlib/install_utils', `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (genbar3),  Next: Documentation on internals (genbar3),  Prev: Usage and interface (genbar3),  Up: genbar3 (library)

Documentation on exports (`genbar3')
====================================

 - PREDICATE: barchart3/7:
     `barchart3(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)'

     As we mentioned in the above paragraph, this predicate is
     comparable to `barchart1/8' except in the `XVector' argument
     type.

     Example:
          barchart3('This is the header text',
            'Barchart without legend',
            'My xaxistitle',
            [['bar1'],['bar2']],
            'My yaxixtitle',
            [20,10],
            'This is the footer text').




 - PREDICATE: barchart3/9:
     `barchart3(Header,BTitle,XTitle,XVector,YTitle,YVector,YMax,YMin,Footer)'

     As we mentioned, this predicate is quite similar to the
     `barchart1/10' except in the `XVector' argument type, because
     the yielded bar chart lacks of legend.

     Example:
          barchart3('This is the header text',
            'Barchart without legend',
            'My xaxistitle',
            [['bar1'],['bar2']],
            'My yaxixtitle',
            30,
            5,
            [20,10],
            'This is the footer text').




 - PREDICATE: percentbarchart3/7:
     `percentbarchart3(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)'

     The `y' axis maximum coordinate value is 100. The x axis limits
     are autoarrange.

     Example:

          percentbarchart3('This is a special barchart to represent percentages',
                    'Barchart without legend',
                    'My xaxistitle',
                    [ ['pr1','Blue','Yellow','pattern1'],
                      ['pr2','MediumTurquoise','Plum','pattern5'] ],
                    'My yaxixtitle',
                    [80,10],
                    'This is the footer text').





File: ciao.info,  Node: Documentation on internals (genbar3),  Prev: Documentation on exports (genbar3),  Up: genbar3 (library)

Documentation on internals (`genbar3')
======================================

 - REGTYPE: xbarelement3/1:
          xbarelement3([XValue]) :-
                  atomic(XValue).
          xbarelement3([XValue,ForegColor,BackgColor,StipplePattern]) :-
                  atomic(XValue),
                  color(ForegColor),
                  color(BackgColor),
                  pattern(StipplePattern).

     Defines the attributes of the bar.
    `XValue'
          bar label. Although `XValue' values may be numbers, the
          will be treated as labels. Different elements with the same
          label will produce different bars.

    `ForegColor'
          It sets the Foreground color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `BackgColor'
          It sets the Background color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `SPattern'
          It sets the stipple of the bar. Its value must be a valid
          pattern, otherwise the system will throw an exception. If
          the argument value is a variable, it gets instantiated to a
          pattern chosen by the library.





File: ciao.info,  Node: genbar4 (library),  Next: gengraph1 (library),  Prev: genbar3 (library),  Up: Top

genbar4 (library)
*****************

   This module defines predicates which depict barchart widgets. The
three predicates exported by this module plot two-variable data as
regular bars in a window and are similar to those exported in genbar2
module except in that those defined in this module doesn't display a
legend. Thus, the user does not have to define legend element names.

   The predicates test whether the format of the arguments is
correct. If one or both vectors are empty, the exception `error2'
will be thrown. If the vectors contains elements but are not correct,
the exception `error1' or `error3' will be thrown, depending on the
error type. `error1' means that `XVector' and `YVector' do not
contain the same number of elements and `error3' indicates that not
all the `XVector' elements contain a correct number of attributes .

* Menu:

* Usage and interface (genbar4)::
* Documentation on exports (genbar4)::
* Documentation on internals (genbar4)::


File: ciao.info,  Node: Usage and interface (genbar4),  Next: Documentation on exports (genbar4),  Prev: genbar4 (library),  Up: genbar4 (library)

Usage and interface (`genbar4')
===============================

   * *Library usage:*

     `:- use_module(library(genbar4)).'

   * *Exports:*
        - _Predicates:_

          `barchart4/7', `barchart4/11', `percentbarchart4/7'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/color_pattern', `chartlib/test_format',
          `chartlib/install_utils', `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (genbar4),  Next: Documentation on internals (genbar4),  Prev: Usage and interface (genbar4),  Up: genbar4 (library)

Documentation on exports (`genbar4')
====================================

 - PREDICATE: barchart4/7:
     `barchart4(Header,BarchartTitle,XTitle,XVector,YTitle,YVector,Footer)'

     As we mentioned in the above paragraph, this predicate is
     comparable to `barchart2/8' except in the `XVector' argument
     type.

     Example:
          barchart4('This is the header text',
            'Barchart without legend',
            'My xaxistitle',
            [[2],[5],[6]],
            'My yaxixtitle',
            [20,10,59],
            'Numeric values in the xaxis').




 - PREDICATE: barchart4/11:
     `barchart4(Hder,BT,XT,XVector,XMax,XMin,YT,YVector,YMax,YMin,Fter)'

     As we stated before, this predicate is quite similar to
     `barchart2/10' except in the following aspects:

        * The `XVector' argument type, because the yielded bar chart
          lacks the legend.

        * The user can set limits for both `x' axis and `y' axis.


     Example:
          barchart4('This is the header text, you can write a graph description',
            'Barchart without legend',
            'My xaxistitle',
            [[2,'Blue','Yellow','pattern1'],
                 [20,'MediumTurquoise','Plum','pattern5'],
                 [30,'MediumTurquoise','Green','pattern5']],
            50,
            -10,
            'My yaxixtitle',
            [20,10,59],
            100,
            -10,
            'Numeric values in the xaxis').




 - PREDICATE: percentbarchart4/7:
     `percentbarchart4(Header,BTitle,XTitle,XVector,YTitle,YVector,Footer)'

     The y axis maximum coordinate value is 100. The x axis limits
     are automatically worked out. This predicate is useful when the
     bar height represents percentages.

     Example:

          percentbarchart4('This is the header text',
            'Barchart without legend',
            'My xaxistitle',
            [[2,'Blue','Yellow','pattern1'],[5,'Yellow','Plum','pattern5'],
                 [6,'MediumTurquoise','Green','pattern5']],
            'My yaxixtitle',
            [20,10,59],
            'Numeric values in the xaxis').





File: ciao.info,  Node: Documentation on internals (genbar4),  Prev: Documentation on exports (genbar4),  Up: genbar4 (library)

Documentation on internals (`genbar4')
======================================

 - REGTYPE: xbarelement4/1:
     Defines the attributes of the bar.
    `XValue'
          x-coordinate position of the bar. Different elements with
          the same abscissas will produce overlapped bars.

    `ForegColor'
          It sets the Foreground color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `BackgColor'
          It sets the Background color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `SPattern'
          It sets the stipple of the bar. Its value must be a valid
          pattern, otherwise the system will throw an exception. If
          the argument value is a variable, it gets instantiated to a
          pattern chosen by the library.





File: ciao.info,  Node: gengraph1 (library),  Next: gengraph2 (library),  Prev: genbar4 (library),  Up: Top

gengraph1 (library)
*******************

   This module defines predicates which depict line graph and scatter
graph widgets. All eigth predicates exported by this module plot
two-variable data. Each point is defined by its X-Y coordinate
values. A dataset is defined by two lists xvector and yvector, which
contain the points coordinates. As you might guess, the values placed
in the the same position in both lists are the coordinates of a
point. They both share the following features:

   * Numeric values for vector elements are needed. We'll use two
     vectors to represent the X-Y coordinates of each set of plotted
     data, but in this case every dataset shares the X-vector, i.e.,
     x-coordinate of points with the same index (1) in different
     datasets is the same. Thus, the numbers of points in each
     yvector must be equal to the number of points in the xvector.

   * The active element color is navyblue, which means that when you
     select a legend element, the corresponding line or point dataset
     turns into navyblue.

   * The user can either select the appearance of the lines and/or
     points of each dataset or not. If not, the system will choose
     the colors for the lines and the points among the available ones
     in accordance with the plot background color and it will also
     set the points size and symbol to the default. If the plot
     background color is black, the system will choose a lighter
     color, and the system will select a darker color when the plot
     background color is white. Thus, the user can define the
     appearanse attributes of each dataset in four different ways.
     Take a look at the `attributes/1' type definition and see the
     examples to understand it clearly.

   * The graph has a legend and one entry (symbol and label) per
     dataset.

   * If you do not want to display text in the element header,
     barchart title, xaxis title, yaxis title or footer, simply give
     `''' as the value of the argument.

   * The predicates check whether the format of the arguments is
     correct as well. The testing process involves some
     verifications. If one or both vectors are empty, the exception
     `error2' will be thrown. If the vectors contains elements but
     are not correct, the exception `error4' will be thrown.


   The names of the line graph predicates begin with *graph_* and
those corresponding to the scatter graph group begin with
*scattergraph_*.

* Menu:

* Usage and interface (gengraph1)::
* Documentation on exports (gengraph1)::

   ---------- Footnotes ----------

   (1) It should be pointed out that I am refering to an index as the
position of an element in a list.


File: ciao.info,  Node: Usage and interface (gengraph1),  Next: Documentation on exports (gengraph1),  Prev: gengraph1 (library),  Up: gengraph1 (library)

Usage and interface (`gengraph1')
=================================

   * *Library usage:*

     `:- use_module(library(gengraph1)).'

   * *Exports:*
        - _Predicates:_

          `graph_b1/9', `graph_b1/13', `graph_w1/9', `graph_w1/13',
          `scattergraph_b1/8', `scattergraph_b1/12',
          `scattergraph_w1/8', `scattergraph_w1/12'.

        - _Regular Types:_

          `vector/1', `smooth/1', `attributes/1', `symbol/1',
          `size/1'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/bltclass', `chartlib/genbar1',
          `chartlib/color_pattern', `chartlib/test_format',
          `chartlib/install_utils', `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (gengraph1),  Prev: Usage and interface (gengraph1),  Up: gengraph1 (library)

Documentation on exports (`gengraph1')
======================================

 - PREDICATE: graph_b1/9:
     `graph_b1(Header,GTitle,XTitle,XVector,YTitle,YVectors,LAtts,Footer,Smooth)'

     Besides the features mentioned at the begining of the chapter,
     the displayed graph generated when calling this predicate has
     the following distinguishing characteristics:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * The axes limits are determined from the data.


     Example:

          graph_b1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,59],
            'yaxixtitle',
            [ [10,35,40],[25,50,60] ],
            [ ['element1','Blue','Yellow','plus',6],['element2',Outline,Color] ],
            'footer',
            'linear').




 - PREDICATE: graph_b1/13:
     `graph_b1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)'

     The particular features related to this predicate are described
     below:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * You can set the minimum and maximum limits of the axes.
          Data outside the limits will not be plotted.


     Example:
          graph_b1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,59],
            50,
            _,
            'yaxixtitle',
            [[10,35,40],[25,50,60]],
            50,
            _,
            [['line1','circle',4],['line2',OutlineColor,Color]],
            'footer',
            'step').




 - PREDICATE: graph_w1/9:
     `graph_w1(Header,GTitle,XTitle,XVector,YTitle,YVectors,LAtts,Footer,Smooth)'

     This predicate is quite similar to `graph_b1/9'. The differences
     lies in the plot background color and in the cross hairs color,
     which are white and black respectively.

     Example:
          graph_w1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,40,50],
            'yaxixtitle',
            [ [10,35,40,50],[25,20,60,40] ],
            [['line1','Blue','DarkOrchid'],['line2','circle',3]],
            'footer',
            'quadratic').




 - PREDICATE: graph_w1/13:
     `graph_w1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)'

     This predicate is quite similar to `graph_b1/13', the
     differences between them are listed below:

        * The plotting area background color is white.

        * The cross hairs color is black.


     Example:
          graph_w1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,59],
            100,
            10,
            'yaxixtitle',
            [[10,35,40],[25,20,60]],
            _,
            _,
            [['element1','Blue','Yellow'],['element2','Turquoise','Plum']],
            'footer',
            'quadratic').




 - PREDICATE: scattergraph_b1/8:
     `scattergraph_b1(Header,GTitle,XTitle,XVector,YTitle,YVectors,PAtts,Footer)'

     Apart from the features brought up at the beginning of the
     chapter, the scatter graph displayed invoking this predicate has
     the following characteristics:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * The axes limits are determined from the data.


     Example:
          scattergraph_b1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [10,15,20],
            'yaxixtitle',
            [[10,35,20],[15,11,21]],
            [['element1','Blue','Yellow'],['element2','Turquoise','Plum']],
            'footer').




 - PREDICATE: scattergraph_b1/12:
     `scattergraph_b1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)'

     The particular features related to this predicate are described
     below:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * You can set the minimum and maximum limits of the axes.
          Data outside the limits will not be plotted.


     Example:
          scattergraph_b1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,59],
            50,
            _,
            'yaxixtitle',
            [[10,35,40],[25,50,60]],
            50,
            _,
            [['point dataset1','Blue','Yellow'],['point dataset2']],
            'footer').




 - PREDICATE: scattergraph_w1/8:
     `scattergraph_w1(Header,GT,XT,XVector,YT,YVectors,PAtts,Footer)'

     This predicate is quite similar to `scattergraph_b1/8' except in
     the following:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * If the user does not fix the points colors, they will be
          chosen among the lighter ones.


     Example:
          scattergraph_w1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,59],
            'yaxixtitle',
            [[10,35,40],[25,20,60]],
            [['e1','Blue','Green'],['e2','MediumVioletRed','Plum']],
            'footer').




 - PREDICATE: scattergraph_w1/12:
     `scattergraph_w1(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)'

     This predicate is quite similar to `scattergraph1_b1/13', the
     differences between them are listed below:

        * The plotting area background color is white.

        * The cross hairs color is black.


     Example:
          scattergraph_w1('This is the header text',
            'Graph_title',
            'xaxistitle',
            [20,10,59],
            150,
            5,
            'yaxixtitle',
            [[10,35,40],[25,20,60]],
            _,
            -10,
            [['e1','Blue','Yellow'],['e2','MediumTurquoise','Plum']],
            'footer').




 - REGTYPE: vector/1:
          vector(X) :-
                  list(X,number).
     The type vector defines a list of numbers (integers or floats).




 - REGTYPE: smooth/1:
     `smooth(Smooth)'

          smooth(linear).
          smooth(cubic).
          smooth(quadratic).
          smooth(step).

     Specifies how connecting segments are drawn between data points.
     If `Smooth' is `linear', a single line segment is drawn,
     connecting both data points. When `Smooth' is `step', two line
     segments will be drawn, the first line is a horizontal line
     segment that steps the next X-coordinate and the second one is a
     vertical line, moving to the next Y-coordinate. Both `cubic' and
     `quadratic' generate multiple segments between data points. If
     `cubic'is used, the segments are generated using a cubic spline.
     If `quadratic', a quadratic spline is used. The default is
     linear.




 - REGTYPE: attributes/1:
          attributes([ElementName]) :-
                  atomic(ElementName).
          attributes([ElementName,OutLine,Color]) :-
                  atomic(ElementName),
                  color(OutLine),
                  color(Color).
          attributes([ElementName,Symbol,Size]) :-
                  atomic(ElementName),
                  symbol(Symbol),
                  size(Size).
          attributes([ElementName,OutLine,Color,Symbol,Size]) :-
                  atomic(ElementName),
                  color(OutLine),
                  color(Color),
                  symbol(Symbol),
                  size(Size).

     Each line or point dataset in the graph has its own attributes,
     which are defined by this type. The name of the dataset,
     specified in the `ElementName' argument, may be either a number
     or an atom. The second argument is the color of a thin line
     around each point in the dataset and the Color argument is the
     points and lines color. Both `OutLine' and `Color' must be a
     valid color (see available values in `color/1'), otherwise a
     random color according to the plot background color will be
     selected. The `Symbol' must be a valid symbol and the `Size'
     must be a number. Be careful if you want to especify the
     `Symbol' and the `Size', otherwise the predicate will not work
     as you expect. If you don't select a symbol and a size for a
     dataset the default values will be square and 1 pixel.




 - REGTYPE: symbol/1:
     `symbol(Symbol)'

          symbol(square).
          symbol(circle).
          symbol(diamond).
          symbol(plus).
          symbol(cross).
          symbol(splus).
          symbol(scross).
          symbol(triangle).
     `Symbol' stands for the shape of the points whether in scatter
     graphs or in line graphs.




 - REGTYPE: size/1:
     `size(Size)'

          size(Size) :-
                  number(Size).
     `Size' stands for the size in pixels of the points whether in
     scatter graphs or in line graphs.





File: ciao.info,  Node: gengraph2 (library),  Next: genmultibar (library),  Prev: gengraph1 (library),  Up: Top

gengraph2 (library)
*******************

   This module defines predicates which show line graph widgets. All
eight predicates exported by this module plot two-variable data. Each
point is defined by its X-Y coordinate values. Every predicate share
the following features:

   * A dataset is defined by three lists xvector, yvector and
     attributes. The arguments named `XVectors' (or `XVs'),
     `YVectors' (or `YVs') and `LAtts'(1) contain this information.
     Those arguments must be lists whose elements are also lists. The
     first dataset is defined by the firts element of the three
     lists, the second dataset is defined by the second element of
     the three lists and so on.

   * Numeric values for the vector elements are needed. We will use
     two vectors to represent the X-Y coordinates of each set of data
     plotted. In these predicates the vectors can have different
     number of points. However, the number of elements in xvector and
     yvector that pertain to a certain dataset must be, obviously,
     equal.

   * The active line color is blue, which means that when you select
     a legend element, the corresponding line turns into navyblue.

   * The user can either select the appearance for the lines and the
     points or not. See the `attributes/1' type definition. Thus, the
     user can call each predicate in different ways ways.

   * The graph has a legend and one entry (symbol and label) per
     dataset.

   * If you do not want to display text in the elements header,
     barchart title, xaxis title, yaxis title or footer, simply give
     `''' as the value of the argument.

   * The predicates check whether the format of the arguments is
     correct as well. The testing process involves some
     verifications. If one or both vectors are empty, the exception
     `error2' will be thrown. If the vectors contains elements but
     are not correct, the exception `error4' will be thrown.


* Menu:

* Usage and interface (gengraph2)::
* Documentation on exports (gengraph2)::

   ---------- Footnotes ----------

   (1) In scatter graphs the attibute that contains the features of a
point dataset is `PAtts'.


File: ciao.info,  Node: Usage and interface (gengraph2),  Next: Documentation on exports (gengraph2),  Prev: gengraph2 (library),  Up: gengraph2 (library)

Usage and interface (`gengraph2')
=================================

   * *Library usage:*

     `:- use_module(library(gengraph2)).'

   * *Exports:*
        - _Predicates:_

          `graph_b2/9', `graph_b2/13', `graph_w2/9', `graph_w2/13',
          `scattergraph_b2/8', `scattergraph_b2/12',
          `scattergraph_w2/8', `scattergraph_w2/12'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/gengraph1', `chartlib/genbar1',
          `chartlib/bltclass', `chartlib/color_pattern',
          `chartlib/test_format', `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (gengraph2),  Prev: Usage and interface (gengraph2),  Up: gengraph2 (library)

Documentation on exports (`gengraph2')
======================================

 - PREDICATE: graph_b2/9:
     `graph_b2(Header,GTitle,XTitle,XVectors,YTitle,YVectors,LAtts,Footer,Sm)'

     Besides the features mentioned at the begining of the module
     chapter, the displayed graph generated calling this predicate
     has the following distinguish characteristics:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * The axis limits are determined from the data.


     Example:

          graph_b2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[20,30,59],[25,50]],
            'yaxixtitle',
            [[10,35,40],[25,50]],
            [['line1','Blue','Yellow'],['line2']],
            'footer',
            'natural').




 - PREDICATE: graph_b2/13:
     `graph_b2(Header,GT,XT,XVs,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)'

     In addition to the features brought up at the begining of the
     module chapter, this graph has the following:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * You can set the maximum and minimum values for the graph
          axes.


     Example:

          graph_b2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[20,10,59],[15,30,35]],
            50,
            _,
            'yaxixtitle',
            [[10,35,40],[25,50,60]],
            50.5,
            _,
            [['line1','Blue','Yellow'],['line','MediumTurquoise','Plum']],
            'footer',
            'step').




 - PREDICATE: graph_w2/9:
     `graph_w2(Header,GT,XT,XVectors,YTitle,YVectors,LAtts,Footer,Smooth)'

     This predicate is quite similar to `graph_b2/9'. The difference
     lies in the graph appearance, as you can see below.

        * The plotting area background color is white.

        * The cross hairs color is black.


     Example:

          graph_w2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[10,30,59],[25,50]],
            'yaxixtitle',
            [[10,35,40],[25,40]],
            [['element1','Blue','DarkOrchid'],['element2','DarkOliveGreen',
              'Firebrick']],
            'footer',
            'natural').




 - PREDICATE: graph_w2/13:
     `graph_w2(Header,GT,XT,XV,XMax,XMin,YT,YVs,YMax,YMin,LAtts,Footer,Smooth)'

     This predicate is comparable to `graph_b2/13'. The differences
     lie in the plot background color and in the cross hairs color,
     wich are white and black respectively.

     Example:
          graph_w2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[10,30,59],[10,35,40]],
            80,
            _,
            'yaxixtitle',
            [[10,35,40],[25,50,60]],
            50,
            _,
            [['element1','Blue','Green'],['element2','Turquoise','Black']],
            'footer',
            'linear').




 - PREDICATE: scattergraph_b2/8:
     `scattergraph_b2(Header,GT,XT,XVectors,YT,YVectors,PAtts,Footer)'

     Apart from the features brought up at the beginning of the
     chapter, the scatter graph displayed when invoking this
     predicate has the following features:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * The axis limits are determined from the data.


     Example:
          scattergraph_b2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[10,15,20],[8,30,40]],
            'yaxixtitle',
            [[10,35,20],[15,11,21]],
            [['element1','Blue','Yellow'],['element2','MediumTurquoise','Plum']],
            'footer').




 - PREDICATE: scattergraph_b2/12:
     `scattergraph_b2(Header,GT,XT,XVs,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)'

     The particular features related to this predicate are described
     below:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * You can set the minimum and maximum limits of the axes.
          Data outside the limits will not be plotted.


     Example:
          scattergraph_b2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[20,30,50],[18,40,59]],
            50,
            _,
            'yaxixtitle',
            [[10,35,40],[25,50,60]],
            50,
            _,
            [['point dataset1'],['point dataset2']],
            'footer').




 - PREDICATE: scattergraph_w2/8:
     `scattergraph_w2(Header,GTitle,XTitle,XVs,YTitle,YVs,PAtts,Footer)'

     This predicate is quite similar to `scattergraph_w1/8' except in
     the following:

        * The plotting area background color is black.

        * The cross hairs color is white.

        * If the user do not provide the colors of the points, they
          will be chosen among the lighter ones.


     Example:
          scattergraph_w2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[20,30,40,15,30,35,20,30]],
            'yaxixtitle',
            [[10,30,40,25,20,25,20,25]],
            [['set1','cross',4]],
            'footer').




 - PREDICATE: scattergraph_w2/12:
     `scattergraph_w2(Header,GT,XT,XVs,XMax,XMin,YT,YVs,YMax,YMin,PAtts,Footer)'

     This predicate is comparable to `scattergraph_w2/13', the
     differences between them are listed below:

        * The plotting area background color is white.

        * The cross hairs color is black.


     Example:
          scattergraph_w2('This is the header text',
            'Graph_title',
            'xaxistitle',
            [[20,10,59],[15,30,50]],
            150,
            5,
            'yaxixtitle',
            [[10,35,40],[25,20,60]],
            _,
            -10,
            [['e1','Blue','Yellow'],['e2','MediumTurquoise','Plum']],
            'footer').





File: ciao.info,  Node: genmultibar (library),  Next: table_widget1 (library),  Prev: gengraph2 (library),  Up: Top

genmultibar (library)
*********************

   This module defines predicates which show barchart widgets. These
bar charts are somewhat different from the bar charts generated by
the predicates in modules genbar1, genbar2, genbar3 and genbar4.
Predicates in the present module show different features of each
dataset element in one chart at the same time. Each bar chart element
is a group of bars, and the element features involve three vectors
defined as follows:

   * xvector is a list containing the names (atoms) of the bars (n
     elements). Each bar group will be displayed at uniform intervals.

   * yvector is a list that contains m sublists, each one is composed
     of n elements. The i-sublist contains the y-values of the
     i-BarAttribute element for all of the XVector elements.

   * bar_attributtes is a list containing the appearance features of
     the bars (m elements). Each element of the list can be partial
     or complete, which means that you can define as bar attributes
     only the element name or by setting the element name, its
     background and foreground color and its stipple pattern.


   Other relevant aspects about this widgets are:

   * If you don't want to display text in the elements header,
     barchart title, xaxis title, yaxis title or footer, simply type
     `''' as the value of the argument.

   * The bar chart has a legend, and one entry (symbol and label) per
     feature group bar.

   * The user can either select the appearance of the bars
     (background color, foreground color and stipple style) or not.
     See the multibar_attribute type definition.

   * Data points can have their bar segments displayed in one of the
     following modes: stacked, aligned, overlapped or overlayed. They
     user can change the mode clicking in the checkboxes associated
     to each mode.

   * The predicates test whether the format of the arguments is
     correct. If one or both vectors are empty, the exception
     `error2' will be thrown. If the vectors contains elements but
     are not correct, the exception `error5' or `error6' will be
     thrown, depending on what is incorrect. `error5' means that
     `XVector' and each element of `YVector' do not contain the same
     number of elements or that `YVector' and `BarsAtt' do not
     contain the same number of elements, while `error6' indicates
     that not all the `BarsAtt' elements contain a correct number of
     attributes.


   The examples will help you to understand how these predicates
should be called.

* Menu:

* Usage and interface (genmultibar)::
* Documentation on exports (genmultibar)::
* Documentation on internals (genmultibar)::


File: ciao.info,  Node: Usage and interface (genmultibar),  Next: Documentation on exports (genmultibar),  Prev: genmultibar (library),  Up: genmultibar (library)

Usage and interface (`genmultibar')
===================================

   * *Library usage:*

     `:- use_module(library(genmultibar)).'

   * *Exports:*
        - _Predicates:_

          `multibarchart/8', `multibarchart/10'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/color_pattern', `chartlib/test_format',
          `chartlib/install_utils', `lists', `random/random'.




File: ciao.info,  Node: Documentation on exports (genmultibar),  Next: Documentation on internals (genmultibar),  Prev: Usage and interface (genmultibar),  Up: genmultibar (library)

Documentation on exports (`genmultibar')
========================================

 - PREDICATE: multibarchart/8:
     `multibarchart(Header,BTitle,XTitle,XVector,YTitle,BarsAtts,YVector,Footer)'

     The x axis limits are autoarrange. The user can call the
     predicate in two ways. In the first example the user sets the
     appearance of the bars, in the second one the appearance
     features will be chosen by the library.

     Example1:
          multibarchart('This is the Header text',
          	'My BarchartTitle',
          	'Processors',
          	['processor1','processor2','processor3','processor4'],
          	'Time (seconds)',
          	[['setup time','MediumTurquoise','Plum','pattern2'],
          	    ['sleep time','Blue','Green','pattern5'],
          	    ['running time','Yellow','Plum','pattern1']],
          	[[20,30,40,50],[10,8,5,35],[60,100,20,50]],
          	'This is the Footer text').
     Example2:
          multibarchart('This is the Header text',
          	'My BarchartTitle',
          	'Processors',
          	['processor1','processor2','processor3','processor4'],
          	'Time (seconds)',
          	[['setup time'],['sleep time'],['running time']],
          	[[20,30,40,50],[10,8,5,35],[60,100,20,50]],
          	'This is the Footer text').




 - PREDICATE: multibarchart/10:
     `multibarchart(Header,BT,XT,XVector,YT,BAtts,YVector,YMax,YMin,Footer)'

     This predicate is quite similar to `multibarchart/8', except in
     that you can choose limits in the y axis. The part of the bars
     placed outside the limits will not be plotted.

     Example2:
          multibarchart('This is the Header text',
          	'My BarchartTitle',
          	'Processors',
          	['processor1','processor2','processor3','processor4'],
          	'Time (seconds)',
          	[['setup time'],['sleep time'],['running time']],
          	[[20,30,40,50],[10,8,5,35],[60,100,20,50]],
          	[80],
          	[0],
          	'This is the Footer text').





File: ciao.info,  Node: Documentation on internals (genmultibar),  Prev: Documentation on exports (genmultibar),  Up: genmultibar (library)

Documentation on internals (`genmultibar')
==========================================

 - REGTYPE: multibar_attribute/1:
          multibar_attribute([LegendElement]) :-
                  atomic(LegendElement).
          multibar_attribute([LegendElement,ForegroundColor,BackgroundColor,StipplePattern]) :-
                  atom(LegendElement),
                  color(ForegroundColor),
                  color(BackgroundColor),
                  pattern(StipplePattern).

     Defines the attributes of each feature bar along the different
     datasets.

    LegendElement
          Legend element name. It may be a number or an atom. Every
          `LegendElement' value of the list must be unique.

    `ForegColor'
          It sets the Foreground color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `BackgColor'
          It sets the Background color of the bar. Its value must be
          a valid color, otherwise the system will throw an
          exception. If the argument value is a variable, it gets
          instantiated to a color chosen by the library.

    `SPattern'
          It sets the stipple of the bar. Its value must be a valid
          pattern, otherwise the system will throw an exception. If
          the argument value is a variable, it gets instantiated to a
          pattern chosen by the library.




 - REGTYPE: xelement/1:
          xelement(Label) :-
                  atomic(Label).
     This type defines a dataset label. Although `Label' values may
     be numbers, the will be treated as atoms, So it will be
     displayed at uniform intervals along the x axis.





File: ciao.info,  Node: table_widget1 (library),  Next: table_widget2 (library),  Prev: genmultibar (library),  Up: Top

table_widget1 (library)
***********************

   In addition to the features explained in the introduction, the
predicates exported by this module depict tables in which the font
weight for the table elements is bold.

   If the arguments are not in a correct format the exception
`error8' will be thrown.

* Menu:

* Usage and interface (table_widget1)::
* Documentation on exports (table_widget1)::
* Documentation on internals (table_widget1)::


File: ciao.info,  Node: Usage and interface (table_widget1),  Next: Documentation on exports (table_widget1),  Prev: table_widget1 (library),  Up: table_widget1 (library)

Usage and interface (`table_widget1')
=====================================

   * *Library usage:*

     `:- use_module(library(table_widget1)).'

   * *Exports:*
        - _Predicates:_

          `tablewidget1/4', `tablewidget1/5'.

        - _Regular Types:_

          `table/1', `image/1'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/test_format', `chartlib/install_utils', `lists'.




File: ciao.info,  Node: Documentation on exports (table_widget1),  Next: Documentation on internals (table_widget1),  Prev: Usage and interface (table_widget1),  Up: table_widget1 (library)

Documentation on exports (`table_widget1')
==========================================

 - PREDICATE: tablewidget1/4:
     `tablewidget1(Title,Header,ElementTable,Footer)'

     Shows a regular table in a window. The user does not choose a
     background image.

     Example:
          tablewidget1('This is the title',
          	     'Header text',
          	     [['Number of processors','8'],['Average processors','95'],
          	         ['Average Tasks per fork','7.5']],
          	     'Footer text').




 - PREDICATE: tablewidget1/5:
     `tablewidget1(Title,Header,ElementTable,Footer,BackgroundImage)'

     Shows a regular table in a window. The user must set a
     background image. See the `image/1' type definition.

     Example:
          tablewidget1('This is the title',
          	     'Header text',
          	     [['Number of processors','8'],['Average processors','95'],
          	         ['Average Tasks per fork','7.5']],
          	     'Footer text',
          	     './images/rain.gif')




 - REGTYPE: table/1:
     A table is a list of rows, each row must contain the same number
     of elements, otherwise the table wouldn't be regular and an
     exception will be thrown by the library. The rows list may not
     be empty.
          table([X]) :-
                  row(X).
          table([X|Xs]) :-
                  row(X),
                  table(Xs).




 - REGTYPE: image/1:
     Some predicates allow the user to set the widget background
     image, whose is what this type is intended for. The user has to
     take into account the following restrictions:

        * The image must be in gif format.

        * The file path must be absolute.






File: ciao.info,  Node: Documentation on internals (table_widget1),  Prev: Documentation on exports (table_widget1),  Up: table_widget1 (library)

Documentation on internals (`table_widget1')
============================================

 - REGTYPE: row/1:
          row([X]) :-
                  cell_value(X).
          row([X|Xs]) :-
                  cell_value(X),
                  row(Xs).
     Each row is a list of elements whose type is `cell_value/1'. A
     row cannot be an empty list, as you can see in the definition
     type.




 - REGTYPE: row/1:
          row([X]) :-
                  cell_value(X).
          row([X|Xs]) :-
                  cell_value(X),
                  row(Xs).
     Each row is a list of elements whose type is `cell_value/1'. A
     row cannot be an empty list, as you can see in the definition
     type.




 - REGTYPE: cell_value/1:
     This type defines the possible values that a table element have.
     If any cell value is `''', the cell will be displayed empty.
          cell_value(X) :-
                  atomic(X).





File: ciao.info,  Node: table_widget2 (library),  Next: table_widget3 (library),  Prev: table_widget1 (library),  Up: Top

table_widget2 (library)
***********************

   In addition to the features explained in the introduction,
predicates exported by this module display tables in which the font
weight for the elements placed in the first row is bold. The
remaining elements are in medium weight font.

   If the arguments are not in a correct format the exception
`error8' will be thrown.

* Menu:

* Usage and interface (table_widget2)::
* Documentation on exports (table_widget2)::


File: ciao.info,  Node: Usage and interface (table_widget2),  Next: Documentation on exports (table_widget2),  Prev: table_widget2 (library),  Up: table_widget2 (library)

Usage and interface (`table_widget2')
=====================================

   * *Library usage:*

     `:- use_module(library(table_widget2)).'

   * *Exports:*
        - _Predicates:_

          `tablewidget2/4', `tablewidget2/5'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/table_widget1', `chartlib/test_format',
          `chartlib/install_utils', `lists'.




File: ciao.info,  Node: Documentation on exports (table_widget2),  Prev: Usage and interface (table_widget2),  Up: table_widget2 (library)

Documentation on exports (`table_widget2')
==========================================

 - PREDICATE: tablewidget2/4:
     `tablewidget2(Title,Header,ElementTable,Footer)'

     Shows a regular table in a window. The system sets a default
     background image for the widget.

     Example:
          tablewidget2('COM Features',
          	     'Extracted from "Inside COM" book ',
          	     [['Feature','Rich people','Bean Plants','C++','COM'],
          	       ['Edible','Yes','Yes','No','No'],
          	       ['Supports inheritance','Yes','Yes','Yes','Yes and No'],
          	       ['Can run for President','Yes','No','No','No']],
          	     'What do you think about COM?').




 - PREDICATE: tablewidget2/5:
     `tablewidget2(Title,Header,ElementTable,Footer,BackgroundImage)'

     This predicate and `tablewidget2/4' are quite similar, except
     that in the already one defined you must set the background
     image.

     Example:
          tablewidget2('COM Features',
          	     'Extracted from "Inside COM" book ',
          	     [['Feature','Rich people','Bean Plants','C++','COM'],
          	       ['Edible','Yes','Yes','No','No'],
          	       ['Supports inheritance','Yes','Yes','Yes','Yes and No'],
          	       ['Can run for President','Yes','No','No','No']],
          	     'What do you think about COM?',
          	     './images/rain.gif').





File: ciao.info,  Node: table_widget3 (library),  Next: table_widget4 (library),  Prev: table_widget2 (library),  Up: Top

table_widget3 (library)
***********************

   The predicates exported by this module display data in a regular
table, as we brought up in the introduction. Both predicates have in
common that the font weight for the elements placed in the first
column is bold and the remaining elements are in medium font weight.

   If the arguments are not in a correct format the exception
`error8' will be thrown.

* Menu:

* Usage and interface (table_widget3)::
* Documentation on exports (table_widget3)::


File: ciao.info,  Node: Usage and interface (table_widget3),  Next: Documentation on exports (table_widget3),  Prev: table_widget3 (library),  Up: table_widget3 (library)

Usage and interface (`table_widget3')
=====================================

   * *Library usage:*

     `:- use_module(library(table_widget3)).'

   * *Exports:*
        - _Predicates:_

          `tablewidget3/4', `tablewidget3/5'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/table_widget1', `chartlib/test_format',
          `chartlib/install_utils', `lists'.




File: ciao.info,  Node: Documentation on exports (table_widget3),  Prev: Usage and interface (table_widget3),  Up: table_widget3 (library)

Documentation on exports (`table_widget3')
==========================================

 - PREDICATE: tablewidget3/4:
     `tablewidget3(Title,Header,ElementTable,Footer)'

     Shows a regular table in a window. The user does not choose a
     background image.

     Example:
          tablewidget3('This is the title',
          	     'Header text',
          	     [['Number of processors','8'],['Average processors','95'],
          	       ['Tasks per fork','7.5']],
          	     'Footer text').




 - PREDICATE: tablewidget3/5:
     `tablewidget3(Title,Header,ElementTable,Footer,BackgroundImage)'

     Shows a regular table in a window. The user must set a
     background image.

     Example:
          tablewidget3('This is the title',
          	     'Header text',
          	     [['Number of processors','8'],['Average processors','95'],
          	         ['Average Tasks per fork','7.5']],
          	     'Footer text',
          	     './images/rain.gif')





File: ciao.info,  Node: table_widget4 (library),  Next: test_format (library),  Prev: table_widget3 (library),  Up: Top

table_widget4 (library)
***********************

   In addition to the features explained in the introduction,
predicates exported by this module display tables in which the font
weight for the elements placed in the first row and column is bold.
The remaining elements are in medium weight font.

   If the arguments are not in a correct format the exception
`error8' will be thrown.

* Menu:

* Usage and interface (table_widget4)::
* Documentation on exports (table_widget4)::


File: ciao.info,  Node: Usage and interface (table_widget4),  Next: Documentation on exports (table_widget4),  Prev: table_widget4 (library),  Up: table_widget4 (library)

Usage and interface (`table_widget4')
=====================================

   * *Library usage:*

     `:- use_module(library(table_widget4)).'

   * *Exports:*
        - _Predicates:_

          `tablewidget4/4', `tablewidget4/5'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/genbar1', `chartlib/bltclass',
          `chartlib/table_widget1', `chartlib/test_format',
          `chartlib/install_utils', `lists'.




File: ciao.info,  Node: Documentation on exports (table_widget4),  Prev: Usage and interface (table_widget4),  Up: table_widget4 (library)

Documentation on exports (`table_widget4')
==========================================

 - PREDICATE: tablewidget4/4:
     `tablewidget4(Title,Header,ElementTable,Footer)'

     Shows a regular table in a window. The system sets a default
     background image for the widget.

     Example:
          tablewidget4('Some sterEUtypes',
            'Source: Eurostat yearbook, 1999',
            [['Country','Adult alcohol intake per year (litres)',
                 'Cigarettes smoked per day per adult',
                       'Suicides per 100000 people'],
                ['Finland','8.4','2.2','26.3'],['Spain','11.4','5.3','7.5'],
                ['Austria','11.9','4.6','20.7'],['Britain','9.4','4.2','7.1'],
                ['USA','4.7','4.9','13'],['European Union','11.1','4.5','11.9']],
            'This is part of the published table').




 - PREDICATE: tablewidget4/5:
     `tablewidget4(Title,Header,ElementTable,Footer,BackgroundImage)'

     This predicate and `tablewidget4/4' are comparable, except that
     in the already defined you must set the background image.

     Example:
          tablewidget4('Some sterEUtypes',
            'Source: Eurostat yearbook, 1999',
            [['Country','Adult alcohol intake per year (litres)',
                 'Cigarettes smoked per day per adult',
                     'Suicides per 100000 people'],
                ['Finland','8.4','2.2','26.3'],['Spain','11.4','5.3','7.5'],
                ['Austria','11.9','4.6','20.7'],['Britain','9.4','4.2','7.1'],
                ['USA','4.7','4.9','13'],['European Union','11.1','4.5','11.9']],
            'This is part of the published table',
            './images/rain.gif').





File: ciao.info,  Node: test_format (library),  Next: ProVRML - a Prolog interface for VRML,  Prev: table_widget4 (library),  Up: Top

test_format (library)
*********************

   Most of the predicates exported by this module perform some checks
to determine whether the arguments attain some conditions or not. In
the second case an exception will be thrown. To catch the exceptions
you can use the following metapredicates when invoking chartlib
exported predicates:

   * `chartlib_text_error_protect/1'

   * `chartlib_text_error_protect/1'


   Both metapredicates are defined in the chartlib_errhandle module
that comes with this library. Some of the predicates have a
`Predicate' argument which will be used in case of error to show
which chartlib predicate causes the error.

* Menu:

* Usage and interface (test_format)::
* Documentation on exports (test_format)::


File: ciao.info,  Node: Usage and interface (test_format),  Next: Documentation on exports (test_format),  Prev: test_format (library),  Up: test_format (library)

Usage and interface (`test_format')
===================================

   * *Library usage:*

     `:- use_module(library(test_format)).'

   * *Exports:*
        - _Predicates:_

          `equalnumber/3', `not_empty/4', `not_empty/3',
          `check_sublist/4', `valid_format/4', `vectors_format/4',
          `valid_vectors/4', `valid_attributes/2', `valid_table/2'.


   * *Other modules used:*
        - _System library modules:_

          `chartlib/bltclass', `lists'.




File: ciao.info,  Node: Documentation on exports (test_format),  Prev: Usage and interface (test_format),  Up: test_format (library)

Documentation on exports (`test_format')
========================================

 - PREDICATE: equalnumber/3:
     `equalnumber(X,Y,Predicate)'

     Test whether the list `X' and the list `Y' contain the same
     number of elements.




 - PREDICATE: not_empty/4:
     `not_empty(X,Y,Z,Predicate)'

     Tests whether at least one the lists `X', `Y' or `Z' are empty.




 - PREDICATE: not_empty/3:
     `not_empty(X,Y,Predicate)'

     Tests whether the lists `X' or `Y' are empty.




 - PREDICATE: check_sublist/4:
     `check_sublist(List,Number,Number,Predicate)'

     Tests if the number of elements in each sublist of `List' is
     `Number1' or `Number2'.




 - PREDICATE: valid_format/4:
     `valid_format(XVector,YVector,BarsAttributes,Predicate)'

     Tests the following restrictions:

        * The `XVector' number of elements is the same as each
          `YVector' sublist number of elements.

        * The `YVector' length is equal to `BarsAttributes' length.





 - PREDICATE: vectors_format/4:
     `vectors_format(XVector,YVectors,LinesAttributes,Predicate)'

     Tests the following conditions:

        * `YVectors' list and `LinesAttributes' list have the same
          number of elements.

        * `XVector' list and each `YVectors' element have the same
          number of elements.

        * Each sublist of `LinesAttributes' is composed of 5, 3 or 1
          elements.





 - PREDICATE: valid_vectors/4:
     `valid_vectors(XVector,YVectors,LinesAttributes,Predicate)'

     Tests the following conditions:

        * `XVector' list, `YVectors' list and `LinesAttributes' list
          have the same number of elements.

        * Each sublist of `LinesAttributes' is composed of 5, 3 or 1
          element.





 - PREDICATE: valid_attributes/2:
     `valid_attributes(BarsAttibuttes,Predicate)'

     Check if each `BarsAttibuttes' element is a list composed of one
     or four elements.




 - PREDICATE: valid_table/2:
     `valid_table(ElementTable,Predicate)'

     All of the `ElementTable' sublists have the same number of
     elements and are not empty.





File: ciao.info,  Node: ProVRML - a Prolog interface for VRML,  Next: boundary (library),  Prev: test_format (library),  Up: Top

ProVRML - a Prolog interface for VRML
*************************************

   *Author(s):* Go"ran Smedba"ck, (Some changes by MCL),
`clip@dia.fi.upm.es', `http://www.clip.dia.fi.upm.es/', The CLIP
Group, Facultad de Informa'tica, Universidad Polite'cnica de Madrid.

   *Version:* 0.1#1 (1998/12/10, 16:19:45 MET)

   `ProVRML' is Prolog library to handle VRML code. The library
consists of modules to handle the tokenising, that is breaking the
VRML code into smaller parts that can be analysed further. The
further analysis will be the parsing. This is a complex part of the
library and consists of several modules to handle errors and value
check. When the parsing is done we have the Prolog terms of the VRML
code. The terms are quite similar to the origin VRML code and can
easily be read if you recognise that syntax.

   This Prolog terms of the VRML code is then possible to use for
analysis, reconstruction, reverse enginering, building blocks for
automatic generation of VRML code. There are several possibilities
and these are only some of them.

   When you are done with the Prolog terms for the code, you would
probably want to reverse the action and return to VRML code. This is
done with the code generation modules. These are built up in more or
less the same manner as the parser modules.

* Menu:

* Usage and interface (provrml)::
* Documentation on exports (provrml)::
* Documentation on internals (provrml)::


File: ciao.info,  Node: Usage and interface (provrml),  Next: Documentation on exports (provrml),  Prev: ProVRML - a Prolog interface for VRML,  Up: ProVRML - a Prolog interface for VRML

Usage and interface (`provrml')
===============================

   * *Library usage:*

     `:- use_module(library(provrml)).'

   * *Exports:*
        - _Predicates:_

          `vrml_web_to_terms/2', `vrml_file_to_terms/2',
          `vrml_web_to_terms_file/2', `vrml_file_to_terms_file/2',
          `terms_file_to_vrml/2', `terms_file_to_vrml_file/2',
          `terms_to_vrml_file/2', `terms_to_vrml/2',
          `vrml_to_terms/2', `vrml_in_out/2', `vrml_http_access/2'.


   * *Other modules used:*
        - _System library modules:_

          `pillow/http', `pillow/html', `provrml/io',
          `provrml/parser', `provrml/generator', `lists'.




File: ciao.info,  Node: Documentation on exports (provrml),  Next: Documentation on internals (provrml),  Prev: Usage and interface (provrml),  Up: ProVRML - a Prolog interface for VRML

Documentation on exports (`provrml')
====================================

 - PREDICATE: vrml_web_to_terms/2:
     *Usage:* `vrml_web_to_terms(+WEBAddress,-Terms)'
        - _Description:_ Given a address to a VRML-document on the
          Internet, the predicate will return the prolog-terms.

        - _Call and exit should be _compatible_ with:_

          `+WEBAddress' is an atom.   (`basic_props:atm/1')

          `-Terms' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: vrml_file_to_terms/2:
     *Usage 1:* `vrml_file_to_terms(+FileName,-Term)'
        - _Description:_ Given a filename containing a VRML-file the
          predicate returns the prolog terms corresponding.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `-Term' is an atom.   (`basic_props:atm/1')

     *Usage 2:* `vrml_file_to_terms(+FileName,+Terms)'
        - _Description:_ Given a filename containing a VRML-file and
          a filename, the predicate write the prolog terms
          corresponding to the filename.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `+Terms' is an atom.   (`basic_props:atm/1')



 - PREDICATE: vrml_web_to_terms_file/2:
     *Usage:* `vrml_web_to_terms_file(+WEBAddress,+FileName)'
        - _Description:_ Given a address to a VRML-document on the
          Internet and a filename, the predicate will write the
          prolog_terms to the file.

        - _Call and exit should be _compatible_ with:_

          `+WEBAddress' is an atom.   (`basic_props:atm/1')

          `+FileName' is an atom.   (`basic_props:atm/1')



 - PREDICATE: vrml_file_to_terms_file/2:
     No further documentation available for this predicate.




 - PREDICATE: terms_file_to_vrml/2:
     *Usage:* `terms_file_to_vrml(+FileName,-List)'
        - _Description:_ From a given filename with prologterms on
          the special format, the predicate returns the corresponding
          VRML-code.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `-List' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: terms_file_to_vrml_file/2:
     *Usage:* `terms_file_to_vrml_file(+Atom,+Atom)'
        - _Description:_ From a given filename with prologterms on
          the special format, the predicate writes the corresponding
          VRML-code to second filename.

        - _Call and exit should be _compatible_ with:_

          `+Atom' is an atom.   (`basic_props:atm/1')

          `+Atom' is an atom.   (`basic_props:atm/1')



 - PREDICATE: terms_to_vrml_file/2:
     *Usage:* `terms_to_vrml_file(+Term,+FileName)'
        - _Description:_ Given prolog-terms the predicate writes the
          corresponding VRML-code to the given file.

        - _Call and exit should be _compatible_ with:_

          `+Term' is an atom.   (`basic_props:atm/1')

          `+FileName' is an atom.   (`basic_props:atm/1')



 - PREDICATE: terms_to_vrml/2:
     *Usage:* `terms_to_vrml(+Term,-VRMLCode)'
        - _Description:_ Given prolog-terms the predicate returns a
          list with the corresponding VRML-code.

        - _Call and exit should be _compatible_ with:_

          `+Term' is an atom.   (`basic_props:atm/1')

          `-VRMLCode' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: vrml_to_terms/2:
     *Usage:* `vrml_to_terms(+VRMLCode,-Terms)'
        - _Description:_ Given a list with VRML-code the predicate
          will return the corresponding prolog-terms.

        - _Call and exit should be _compatible_ with:_

          `+VRMLCode' is a string (a list of character codes).
          (`basic_props:string/1')

          `-Terms' is an atom.   (`basic_props:atm/1')



 - PREDICATE: vrml_in_out/2:
     *Usage:* `vrml_in_out(+FileName,+FileName)'
        - _Description:_ This is a controll-predicate that given a
          filename to a VRML-file and a filename, the predicate will
          read the VRML-code. Transform it to prolog-terms and then
          transform it back to VRRML-code and write it to the latter
          file.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `+FileName' is an atom.   (`basic_props:atm/1')



 - PREDICATE: vrml_http_access/2:
     *Usage:* `vrml_http_access(+ReadFilename,+BaseFilename)'
        - _Description:_ Given a web-address to a VRML-file the
          predicate will load the code, write it first to the second
          argument with extension '_first.wrl'. Then it transform the
          code to prolog terms and write it with the extension
          '.term'. Transform it back to VRML-code and write it to the
          filename with '.wrl. A good test-predicate.

        - _Call and exit should be _compatible_ with:_

          `+ReadFilename' is an atom.   (`basic_props:atm/1')

          `+BaseFilename' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: Documentation on internals (provrml),  Prev: Documentation on exports (provrml),  Up: ProVRML - a Prolog interface for VRML

Documentation on internals (`provrml')
======================================

 - PREDICATE: read_page/2:
     *Usage:* `read_page(+WEBAddress,-Data)'
        - _Description:_ This routine reads a page on the web using
          pillow routines.

        - _Call and exit should be _compatible_ with:_

          `+WEBAddress' is an atom.   (`basic_props:atm/1')

          `-Data' is a string (a list of character codes).
          (`basic_props:string/1')




File: ciao.info,  Node: boundary (library),  Next: dictionary (library),  Prev: ProVRML - a Prolog interface for VRML,  Up: Top

boundary (library)
******************

   *Version:* 0.1#1 (1998/12/14, 19:22:27 MET)

   This module offers predicate to check values according to their
boundaries and offers lists of possible node ascendents.

* Menu:

* Usage and interface (boundary)::
* Documentation on exports (boundary)::


File: ciao.info,  Node: Usage and interface (boundary),  Next: Documentation on exports (boundary),  Prev: boundary (library),  Up: boundary (library)

Usage and interface (`boundary')
================================

   * *Library usage:*

     `:- use_module(library(boundary)).'

   * *Exports:*
        - _Predicates:_

          `boundary_check/3', `boundary_rotation_first/2',
          `boundary_rotation_last/2', `reserved_words/1',
          `children_nodes/1'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write',
          `provrml/internal_types', `provrml/error'.




File: ciao.info,  Node: Documentation on exports (boundary),  Prev: Usage and interface (boundary),  Up: boundary (library)

Documentation on exports (`boundary')
=====================================

 - PREDICATE: boundary_check/3:
     *Usage:* `boundary_check(+Value_to_check,+Init_value,+Bound)'
        - _Description:_ This predicate check the boundaries of the
          given value according to the boudary values. If the value
          is wrong according to the boundaries, the value is checked
          according to the initial value given. If the value
          continues to be wrong, an error will be raised accordingly.

        - _Call and exit should be _compatible_ with:_

          `+Value_to_check' is an atom.   (`basic_props:atm/1')

          `+Init_value' is a list of `atm's.   (`basic_props:list/2')

          `+Bound' is a variable interval.
          (`internal_types:bound/1')



 - PREDICATE: boundary_rotation_first/2:
     *Usage:* `boundary_rotation_first(+Bound_double,-Bound)'
        - _Description:_ The predicate will extract the first bounds
          from a double bound.

        - _Call and exit should be _compatible_ with:_

          `+Bound_double' is a variable interval.
          (`internal_types:bound_double/1')

          `-Bound' is a variable interval.
          (`internal_types:bound/1')



 - PREDICATE: boundary_rotation_last/2:
     *Usage:* `boundary_rotation_last(+Bound_double,-Bound)'
        - _Description:_ The predicate will extract the last bounds
          from a double bound.

        - _Call and exit should be _compatible_ with:_

          `+Bound_double' is a variable interval.
          (`internal_types:bound_double/1')

          `-Bound' is a variable interval.
          (`internal_types:bound/1')



 - PREDICATE: reserved_words/1:
     *Usage:* `reserved_words(-List)'
        - _Description:_ Returns a list with the reserved words,
          words prohibited to use in cases not appropiated.

        - _Call and exit should be _compatible_ with:_

          `-List' is a list of `atm's.   (`basic_props:list/2')



 - PREDICATE: children_nodes/1:
     *Usage:* `children_nodes(-List)'
        - _Description:_ Returns a list of all nodes possible as
          children nodes.

        - _Call and exit should be _compatible_ with:_

          `-List' is a list of `atm's.   (`basic_props:list/2')




File: ciao.info,  Node: dictionary (library),  Next: dictionary_tree (library),  Prev: boundary (library),  Up: Top

dictionary (library)
********************

   *Version:* 0.1 (1998/12/7, 15:57:36 MET)

   This module contains the fixed dictionary. All the nodes in VRML
with their associated fields.

* Menu:

* Usage and interface (dictionary)::
* Documentation on exports (dictionary)::


File: ciao.info,  Node: Usage and interface (dictionary),  Next: Documentation on exports (dictionary),  Prev: dictionary (library),  Up: dictionary (library)

Usage and interface (`dictionary')
==================================

   * *Library usage:*

     `:- use_module(library(dictionary)).'

   * *Exports:*
        - _Predicates:_

          `dictionary/6'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write', `lists',
          `provrml/internal_types'.




File: ciao.info,  Node: Documentation on exports (dictionary),  Prev: Usage and interface (dictionary),  Up: dictionary (library)

Documentation on exports (`dictionary')
=======================================

 - PREDICATE: dictionary/6:
     *Usage 1:*
     `dictionary(?NodeTypeId,?AccessType,?FieldTypeId,?FieldId,-Init_value,-Boundary)'
        - _Description:_ To lookup information about the nodes,
          getting their properties. Note that the type returned for
          the bound can be of two different types bound or
          bound_double. The rotation type have one bound for the
          directions and one for the degree of rotation.

        - _Call and exit should be _compatible_ with:_

          `?NodeTypeId' is an atom.   (`basic_props:atm/1')

          `?AccessType' is an atom.   (`basic_props:atm/1')

          `?FieldTypeId' is an atom.   (`basic_props:atm/1')

          `?FieldId' is an atom.   (`basic_props:atm/1')

          `-Init_value' is a list of `atm's.   (`basic_props:list/2')

          `-Boundary' is a variable interval.
          (`internal_types:bound/1')

     *Usage 2:*
     `dictionary(?NodeTypeId,?AccessType,?FieldTypeId,?FieldId,-Init_value,-Boundary)'
        - _Description:_ To lookup information about the nodes,
          getting their properties. Note that the type returned for
          the bound can be of two different types bound or
          bound_double. The rotation type have one bound for the
          directions and one for the degree of rotation.

        - _Call and exit should be _compatible_ with:_

          `?NodeTypeId' is an atom.   (`basic_props:atm/1')

          `?AccessType' is an atom.   (`basic_props:atm/1')

          `?FieldTypeId' is an atom.   (`basic_props:atm/1')

          `?FieldId' is an atom.   (`basic_props:atm/1')

          `-Init_value' is a list of `atm's.   (`basic_props:list/2')

          `-Boundary' is a variable interval.
          (`internal_types:bound_double/1')




File: ciao.info,  Node: dictionary_tree (library),  Next: error (library),  Prev: dictionary (library),  Up: Top

dictionary_tree (library)
*************************

   *Version:* 0.1 (1999/1/14, 15:57:36 MET)

   This module offers a dynamic tree structured dictionary a bit
combined with predicates that gives it the useability to be the
dictionary for the parser.

* Menu:

* Usage and interface (dictionary_tree)::
* Documentation on exports (dictionary_tree)::


File: ciao.info,  Node: Usage and interface (dictionary_tree),  Next: Documentation on exports (dictionary_tree),  Prev: dictionary_tree (library),  Up: dictionary_tree (library)

Usage and interface (`dictionary_tree')
=======================================

   * *Library usage:*

     `:- use_module(library(dictionary_tree)).'

   * *Exports:*
        - _Predicates:_

          `create_dictionaries/1', `is_dictionaries/1',
          `get_definition_dictionary/2', `get_prototype_dictionary/2',
          `dictionary_insert/5', `dictionary_lookup/5',
          `merge_tree/2'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write', `lists',
          `provrml/internal_types'.




File: ciao.info,  Node: Documentation on exports (dictionary_tree),  Prev: Usage and interface (dictionary_tree),  Up: dictionary_tree (library)

Documentation on exports (`dictionary_tree')
============================================

 - PREDICATE: create_dictionaries/1:
     *Usage:* `create_dictionaries(-Dictionary)'
        - _Description:_ Returns a dictionary. A general name was
          used if the user would like to change the code to include
          more dictionaries.

        - _Call and exit should be _compatible_ with:_

          `-Dictionary' is a dictionary.
          (`internal_types:dictionary/1')



 - PREDICATE: is_dictionaries/1:
     *Usage:* `is_dictionaries(?Dictionary)'
        - _Description:_ Is the argument a dictionary is solved by
          this predicate.

        - _Call and exit should be _compatible_ with:_

          `?Dictionary' is a dictionary.
          (`internal_types:dictionary/1')



 - PREDICATE: get_definition_dictionary/2:
     *Usage:* `get_definition_dictionary(+Dictionary,-Tree)'
        - _Description:_ Returns the definition dictionary (for the
          moment there is only one dictionary), which is a tree
          representation.

        - _Call and exit should be _compatible_ with:_

          `+Dictionary' is a dictionary.
          (`internal_types:dictionary/1')

          `-Tree' is a tree structure.   (`internal_types:tree/1')



 - PREDICATE: get_prototype_dictionary/2:
     *Usage:* `get_prototype_dictionary(+Dictionary,-Tree)'
        - _Description:_ Returns the prototype dictionary (for the
          moment there is only one dictionary), which is a tree
          representation.

        - _Call and exit should be _compatible_ with:_

          `+Dictionary' is a dictionary.
          (`internal_types:dictionary/1')

          `-Tree' is a tree structure.   (`internal_types:tree/1')



 - PREDICATE: dictionary_insert/5:
     *Usage:* `dictionary_insert(+Key,+Type,+Field,+Dictionary,?Info)'
        - _Description:_ The predicate will search for the place for
          the Key and return Info, if the element inserted had a post
          before (same key value) multiple else new. The dictionary
          is dynamic and do not need output because of using unbinded
          variables.

        - _Call and exit should be _compatible_ with:_

          `+Key' is an atom.   (`basic_props:atm/1')

          `+Type' is an atom.   (`basic_props:atm/1')

          `+Field' is any term.   (`basic_props:term/1')

          `+Dictionary' is a tree structure.
          (`internal_types:tree/1')

          `?Info' is an atom.   (`basic_props:atm/1')



 - PREDICATE: dictionary_lookup/5:
     *Usage:* `dictionary_lookup(+Key,?Type,?Field,+Dictionary,-Info)'
        - _Description:_ The predicate will search for the Key and
          return Info;defined or undefined accordingly. If defined
          the fields will be filled as well. The predicate do not
          insert the element.

        - _Call and exit should be _compatible_ with:_

          `+Key' is an atom.   (`basic_props:atm/1')

          `?Type' is an atom.   (`basic_props:atm/1')

          `?Field' is any term.   (`basic_props:term/1')

          `+Dictionary' is a dictionary.
          (`internal_types:dictionary/1')

          `-Info' is an atom.   (`basic_props:atm/1')



 - PREDICATE: merge_tree/2:
     *Usage:* `merge_tree(+Tree,+Tree)'
        - _Description:_ The predicate can be used for adding a tree
          dictionary to another one (the second). It will remove
          equal posts but posts with a slight difference will be
          inserted. The resulting tree will be the second tree.

        - _Call and exit should be _compatible_ with:_

          `+Tree' is a tree structure.   (`internal_types:tree/1')

          `+Tree' is a tree structure.   (`internal_types:tree/1')




File: ciao.info,  Node: error (library),  Next: field_type (library),  Prev: dictionary_tree (library),  Up: Top

error (library)
***************

   *Author(s):* Go"ran Smedba"ck.

   *Version:* 0.1#3 (1998/12/14, 19:14:44 MET)

   This file implements error predicates of different types.

* Menu:

* Usage and interface (error)::
* Documentation on exports (error)::


File: ciao.info,  Node: Usage and interface (error),  Next: Documentation on exports (error),  Prev: error (library),  Up: error (library)

Usage and interface (`error')
=============================

   * *Library usage:*

     `:- use_module(library(error)).'

   * *Exports:*
        - _Predicates:_

          `error_vrml/1', `output_error/1'.




File: ciao.info,  Node: Documentation on exports (error),  Prev: Usage and interface (error),  Up: error (library)

Documentation on exports (`error')
==================================

 - PREDICATE: error_vrml/1:
     *Usage:* `error_vrml(+Structure)'
        - _Description:_ Given a structure with the error type as its
          head with possible arguments, it will write the associated
          error-text.

        - _Call and exit should be _compatible_ with:_

          `+Structure' is any term.   (`basic_props:term/1')



 - PREDICATE: output_error/1:
     *Usage:* `output_error(+Message)'
        - _Description:_ This predicate will print the error message
          given as the argument. This predicate is used for warnings
          that only needs to be given as information and not
          necessarily give an error by the VRML browser.

        - _Call and exit should be _compatible_ with:_

          `+Message' is a list of `atm's.   (`basic_props:list/2')




File: ciao.info,  Node: field_type (library),  Next: field_value (library),  Prev: error (library),  Up: Top

field_type (library)
********************

   *Version:* 0.1 (1998/12/9, 13:30:46 MET)

* Menu:

* Usage and interface (field_type)::
* Documentation on exports (field_type)::


File: ciao.info,  Node: Usage and interface (field_type),  Next: Documentation on exports (field_type),  Prev: field_type (library),  Up: field_type (library)

Usage and interface (`field_type')
==================================

   * *Library usage:*

     `:- use_module(library(field_type)).'

   * *Exports:*
        - _Predicates:_

          `fieldType/1'.




File: ciao.info,  Node: Documentation on exports (field_type),  Prev: Usage and interface (field_type),  Up: field_type (library)

Documentation on exports (`field_type')
=======================================

 - PREDICATE: fieldType/1:
     *Usage:* `fieldType(+FieldTypeId)'
        - _Description:_ Boolean predicate used to check the
          fieldTypeId with the defiened.

        - _Call and exit should be _compatible_ with:_

          `+FieldTypeId' is an atom.   (`basic_props:atm/1')




File: ciao.info,  Node: field_value (library),  Next: field_value_check (library),  Prev: field_type (library),  Up: Top

field_value (library)
*********************

   *Version:* 0.1 (1998/12/9, 13:51:13 MET)

* Menu:

* Usage and interface (field_value)::
* Documentation on exports (field_value)::


File: ciao.info,  Node: Usage and interface (field_value),  Next: Documentation on exports (field_value),  Prev: field_value (library),  Up: field_value (library)

Usage and interface (`field_value')
===================================

   * *Library usage:*

     `:- use_module(library(field_value)).'

   * *Exports:*
        - _Predicates:_

          `fieldValue/6', `mfstringValue/5'.


   * *Other modules used:*
        - _System library modules:_

          `lists', `provrml/parser', `provrml/parser_util',
          `provrml/error'.




File: ciao.info,  Node: Documentation on exports (field_value),  Prev: Usage and interface (field_value),  Up: field_value (library)

Documentation on exports (`field_value')
========================================

 - PREDICATE: fieldValue/6:
     No further documentation available for this predicate.




 - PREDICATE: mfstringValue/5:
     No further documentation available for this predicate.





File: ciao.info,  Node: field_value_check (library),  Next: generator (library),  Prev: field_value (library),  Up: Top

field_value_check (library)
***************************

   *Version:* 0.1 (1998/12/9, 14:36:55 MET)

* Menu:

* Usage and interface (field_value_check)::
* Documentation on exports (field_value_check)::


File: ciao.info,  Node: Usage and interface (field_value_check),  Next: Documentation on exports (field_value_check),  Prev: field_value_check (library),  Up: field_value_check (library)

Usage and interface (`field_value_check')
=========================================

   * *Library usage:*

     `:- use_module(library(field_value_check)).'

   * *Exports:*
        - _Predicates:_

          `fieldValue_check/8', `mfstringValue/7'.


   * *Other modules used:*
        - _System library modules:_

          `lists', `provrml/io', `provrml/generator_util',
          `provrml/boundary', `provrml/tokeniser',
          `provrml/generator', `provrml/parser_util'.




File: ciao.info,  Node: Documentation on exports (field_value_check),  Prev: Usage and interface (field_value_check),  Up: field_value_check (library)

Documentation on exports (`field_value_check')
==============================================

 - PREDICATE: fieldValue_check/8:
     No further documentation available for this predicate.




 - PREDICATE: mfstringValue/7:
     No further documentation available for this predicate.





File: ciao.info,  Node: generator (library),  Next: generator_util (library),  Prev: field_value_check (library),  Up: Top

generator (library)
*******************

* Menu:

* Usage and interface (generator)::
* Documentation on exports (generator)::


File: ciao.info,  Node: Usage and interface (generator),  Next: Documentation on exports (generator),  Prev: generator (library),  Up: generator (library)

Usage and interface (`generator')
=================================

   * *Library usage:*

     `:- use_module(library(generator)).'

   * *Exports:*
        - _Predicates:_

          `generator/2', `nodeDeclaration/4'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write',
          `provrml/lookup', `provrml/io', `provrml/generator_util',
          `provrml/parser_util', `provrml/error',
          `provrml/internal_types'.




File: ciao.info,  Node: Documentation on exports (generator),  Prev: Usage and interface (generator),  Up: generator (library)

Documentation on exports (`generator')
======================================

 - PREDICATE: generator/2:
     *Usage:* `generator(+Terms,-VRML)'
        - _Description:_ This predicate is the generator of VRML
          code. It accepts a list of terms that is correct VRML code,
          other kind of terms will be rejected will errormessage
          accordingly. The output is a string of correct VRML code,
          acceptable for VRML browsers.

        - _Call and exit should be _compatible_ with:_

          `+Terms' is a list of `terms's.   (`basic_props:list/2')

          `-VRML' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: nodeDeclaration/4:
     No further documentation available for this predicate.





File: ciao.info,  Node: generator_util (library),  Next: internal_types (library),  Prev: generator (library),  Up: Top

generator_util (library)
************************

* Menu:

* Usage and interface (generator_util)::
* Documentation on exports (generator_util)::


File: ciao.info,  Node: Usage and interface (generator_util),  Next: Documentation on exports (generator_util),  Prev: generator_util (library),  Up: generator_util (library)

Usage and interface (`generator_util')
======================================

   * *Library usage:*

     `:- use_module(library(generator_util)).'

   * *Exports:*
        - _Predicates:_

          `reading/4', `reading/5', `reading/6', `open_node/6',
          `close_node/5', `close_nodeGut/4', `open_PROTO/4',
          `close_PROTO/6', `open_EXTERNPROTO/5',
          `close_EXTERNPROTO/6', `open_DEF/5', `close_DEF/5',
          `open_Script/5', `close_Script/5', `decompose_field/3',
          `indentation_list/2', `start_vrmlScene/4',
          `remove_comments/4'.


   * *Other modules used:*
        - _System library modules:_

          `provrml/error', `lists', `provrml/io',
          `provrml/field_value_check', `provrml/lookup',
          `provrml/parser_util'.




File: ciao.info,  Node: Documentation on exports (generator_util),  Prev: Usage and interface (generator_util),  Up: generator_util (library)

Documentation on exports (`generator_util')
===========================================

 - PREDICATE: reading/4:
     *Usage 1:* `reading(+IS,+NodeTypeId,+ParseIn,-ParseOut)'
        - _Description:_ This predicate will refer to a formerly
          introduced interface. We do a checkup of the access type
          and output the values.

        - _Call and exit should be _compatible_ with:_

          `+IS' is an atom.   (`basic_props:atm/1')

          `+NodeTypeId' is an atom.   (`basic_props:atm/1')

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')

     *Usage 2:* `reading(+nodeGut,+NodeName,+ParseIn,-ParseOut)'
        - _Description:_ This predicate will read a node gut and will
          check the field according to the name.

        - _Call and exit should be _compatible_ with:_

          `+nodeGut' is an atom.   (`basic_props:atm/1')

          `+NodeName' is an atom.   (`basic_props:atm/1')

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: reading/5:
     No further documentation available for this predicate.




 - PREDICATE: reading/6:
     No further documentation available for this predicate.




 - PREDICATE: open_node/6:
     No further documentation available for this predicate.




 - PREDICATE: close_node/5:
     No further documentation available for this predicate.




 - PREDICATE: close_nodeGut/4:
     No further documentation available for this predicate.




 - PREDICATE: open_PROTO/4:
     No further documentation available for this predicate.




 - PREDICATE: close_PROTO/6:
     No further documentation available for this predicate.




 - PREDICATE: open_EXTERNPROTO/5:
     No further documentation available for this predicate.




 - PREDICATE: close_EXTERNPROTO/6:
     No further documentation available for this predicate.




 - PREDICATE: open_DEF/5:
     No further documentation available for this predicate.




 - PREDICATE: close_DEF/5:
     No further documentation available for this predicate.




 - PREDICATE: open_Script/5:
     No further documentation available for this predicate.




 - PREDICATE: close_Script/5:
     No further documentation available for this predicate.




 - PREDICATE: decompose_field/3:
     No further documentation available for this predicate.




 - PREDICATE: indentation_list/2:
     *Usage:* `indentation_list(+Parse,-IndList)'
        - _Description:_ This predcate will construct a list with
          indentations to be output before text. The information of
          the indentations is inside the parse structure.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `-IndList' is a list of `atm's.   (`basic_props:list/2')



 - PREDICATE: start_vrmlScene/4:
     No further documentation available for this predicate.




 - PREDICATE: remove_comments/4:
     *Usage:*
     `remove_comments(+Value,-CommentsBefore,-ValueClean,-CommentsAfter)'
        - _Description:_ The predicate will remove comments and
          return the comments before and after the pure value.

        - _Call and exit should be _compatible_ with:_

          `+Value' is a list of `atm's.   (`basic_props:list/2')

          `-CommentsBefore' is a list of `atm's.
          (`basic_props:list/2')

          `-ValueClean' is an atom.   (`basic_props:atm/1')

          `-CommentsAfter' is a list of `atm's.
          (`basic_props:list/2')




File: ciao.info,  Node: internal_types (library),  Next: io (library),  Prev: generator_util (library),  Up: Top

internal_types (library)
************************

   *Version:* 0.1#2 (1998/12/17, 12:37:23 MET)

   These are the internal data types used in the predicates. They are
only used to simplify this documentation and make it more
understandable.

   Implemented by Go"ran Smedba"ck

* Menu:

* Usage and interface (internal_types)::
* Documentation on exports (internal_types)::


File: ciao.info,  Node: Usage and interface (internal_types),  Next: Documentation on exports (internal_types),  Prev: internal_types (library),  Up: internal_types (library)

Usage and interface (`internal_types')
======================================

   * *Library usage:*

     `:- use_module(library(internal_types)).'

   * *Exports:*
        - _Regular Types:_

          `bound/1', `bound_double/1', `dictionary/1',
          `environment/1', `parse/1', `tree/1', `whitespace/1'.




File: ciao.info,  Node: Documentation on exports (internal_types),  Prev: Usage and interface (internal_types),  Up: internal_types (library)

Documentation on exports (`internal_types')
===========================================

 - REGTYPE: bound/1:
     Min is a number or an atom that indicates the minimal value, Max
     indicates the maximal.
          bound(bound(Min,Max)) :-
                  atm(Min),
                  atm(Max).

     *Usage:* `bound(Bound)'
        - _Description:_ `Bound' is a variable interval.



 - REGTYPE: bound_double/1:
     Min is a number or an atom that indicates the minimal value, Max
     indicates the maximal. The first two for some value and the
     second pair for some other. Typically used for types that are
     compound, e.g., rotationvalue.
          bound_double(bound(Min0,Max0,Min1,Max1)) :-
                  atm(Min0),
                  atm(Max0),
                  atm(Min1),
                  atm(Max1).

     *Usage:* `bound_double(Bound)'
        - _Description:_ `Bound' is a variable interval.



 - REGTYPE: dictionary/1:
     Dic is a tree structure and is used as the internal
     representation of the dictionary.
          dictionary(dic(Dic)) :-
                  tree(Dic).

     *Usage:* `dictionary(Dictionary)'
        - _Description:_ `Dictionary' is a dictionary.



 - REGTYPE: environment/1:
     EnvironmentType one of 'DEF','PROTO','EXTERNPROTO' with the name
     Name. Whitespace is a structure with whitespace information.
          environment(env(Env,Name,WhiteSpace)) :-
                  atm(Env),
                  atm(Name),
                  whitespace(WhiteSpace).

     *Usage:* `environment(Environment)'
        - _Description:_ `Environment' is an environment structure.



 - REGTYPE: parse/1:
     In is the list of tokens to parse and Out is the resulting list
     after the parsing. Env is of type env and is the
     environment-structure.The dictinonary Dic contains created
     information and structures.
          parse(parse(In,Out,Env,Dic)) :-
                  list(In),
                  list(Out),
                  environment(Env),
                  dictionary(Dic).

     *Usage:* `parse(Parse)'
        - _Description:_ `Parse' is a parse structure.



 - REGTYPE: tree/1:
     Key is the search-key, Leaf is the information, Left and Right
     are more dictionary posts, where Left have less Key-value.
          tree(tree(Key,Leaf,Left,Right)) :-
                  atm(Key),
                  leaf(Leaf),
                  tree(Left),
                  tree(Right).

     *Usage:* `tree(Tree)'
        - _Description:_ `Tree' is a tree structure.



 - REGTYPE: whitespace/1:
     The Row and Indentation information. The row information used
     when parsing the VRML code to give accurate error position and
     the indentation is used when generating VRML code from terms.
          whitespace(w(Row,Indentation)) :-
                  number(Row),
                  number(Indentation).

     *Usage:* `whitespace(Whitespace)'
        - _Description:_ `Whitespace' is a whitespace structure.




File: ciao.info,  Node: io (library),  Next: lookup (library),  Prev: internal_types (library),  Up: Top

io (library)
************

   *Version:* 0.1#2 (1998/12/2)

   This file implements I/O predicates of different types.

   Implemented by Go"ran Smedba"ck

* Menu:

* Usage and interface (io)::
* Documentation on exports (io)::


File: ciao.info,  Node: Usage and interface (io),  Next: Documentation on exports (io),  Prev: io (library),  Up: io (library)

Usage and interface (`io')
==========================

   * *Library usage:*

     `:- use_module(library(io)).'

   * *Exports:*
        - _Predicates:_

          `out/1', `out/3', `convert_atoms_to_string/2',
          `read_terms_file/2', `write_terms_file/2',
          `read_vrml_file/2', `write_vrml_file/2'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write', `lists',
          `format'.




File: ciao.info,  Node: Documentation on exports (io),  Prev: Usage and interface (io),  Up: io (library)

Documentation on exports (`io')
===============================

 - PREDICATE: out/1:
     *Usage:* `out(+ListOfOutput)'
        - _Description:_ The predicate used is out/3 (DCG) where we
          will 'save' the output in the second argument. The tird
          argument is the rest, nil.

        - _Call and exit should be _compatible_ with:_

          `+ListOfOutput' is a list of `atm's.
          (`basic_props:list/2')



 - PREDICATE: out/3:
     No further documentation available for this predicate.




 - PREDICATE: convert_atoms_to_string/2:
     *Usage:* `convert_atoms_to_string(+Atoms,-String)'
        - _Description:_ The predicate transforms a list of atoms to
          a string.

        - _Call and exit should be _compatible_ with:_

          `+Atoms' is a list of `atm's.   (`basic_props:list/2')

          `-String' is a list of `num's.   (`basic_props:list/2')



 - PREDICATE: read_terms_file/2:
     *Usage:* `read_terms_file(+Filename,-Term)'
        - _Description:_ Given a filename to a file with terms, the
          predicate reads the terms and are returned in the second
          argument. `Filename' is an atom and `Term' is the read
          prolog terms.

        - _Call and exit should be _compatible_ with:_

          `+Filename' is an atom.   (`basic_props:atm/1')

          `-Term' is an atom.   (`basic_props:atm/1')



 - PREDICATE: write_terms_file/2:
     *Usage:* `write_terms_file(+FileName,+List)'
        - _Description:_ Given a filename and a list of terms the
          predicate will write them down to the file.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `+List' is a list of `atm's.   (`basic_props:list/2')



 - PREDICATE: read_vrml_file/2:
     *Usage:* `read_vrml_file(+FileName,-Data)'
        - _Description:_ Given a filename, the predicate returns the
          substance.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `-Data' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: write_vrml_file/2:
     *Usage:* `write_vrml_file(+FileName,+Data)'
        - _Description:_ Given a filename and data in form of a
          string, the predicate will write the data to the named file.

        - _Call and exit should be _compatible_ with:_

          `+FileName' is an atom.   (`basic_props:atm/1')

          `+Data' is a string (a list of character codes).
          (`basic_props:string/1')




File: ciao.info,  Node: lookup (library),  Next: parser (library),  Prev: io (library),  Up: Top

lookup (library)
****************

   *Version:* 0.1 (1999/1/14, 13:30:46 MET)

* Menu:

* Usage and interface (lookup)::
* Documentation on exports (lookup)::


File: ciao.info,  Node: Usage and interface (lookup),  Next: Documentation on exports (lookup),  Prev: lookup (library),  Up: lookup (library)

Usage and interface (`lookup')
==============================

   * *Library usage:*

     `:- use_module(library(lookup)).'

   * *Exports:*
        - _Predicates:_

          `create_proto_element/3', `get_prototype_interface/2',
          `get_prototype_definition/2', `lookup_check_node/4',
          `lookup_check_field/6',
          `lookup_check_interface_fieldValue/8', `lookup_field/4',
          `lookup_route/5', `lookup_fieldTypeId/1',
          `lookup_get_fieldType/4', `lookup_field_access/4',
          `lookup_set_def/3', `lookup_set_prototype/4',
          `lookup_set_extern_prototype/4'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write', `lists',
          `provrml/error', `provrml/io', `provrml/parser_util',
          `provrml/dictionary', `provrml/dictionary_tree',
          `provrml/field_value_check', `provrml/boundary',
          `provrml/generator_util', `provrml/field_type'.




File: ciao.info,  Node: Documentation on exports (lookup),  Prev: Usage and interface (lookup),  Up: lookup (library)

Documentation on exports (`lookup')
===================================

 - PREDICATE: create_proto_element/3:
     *Usage:* `create_proto_element(+Interface,+Definition,-Proto)'
        - _Description:_ The predicate will construct a proto
          structure containing the interface and the definition.

        - _Call and exit should be _compatible_ with:_

          `+Interface' is any term.   (`basic_props:term/1')

          `+Definition' is any term.   (`basic_props:term/1')

          `-Proto' is any term.   (`basic_props:term/1')



 - PREDICATE: get_prototype_interface/2:
     *Usage:* `get_prototype_interface(+Proto,-Interface)'
        - _Description:_ The predicate will return the interface from
          a proto structure.

        - _Call and exit should be _compatible_ with:_

          `+Proto' is any term.   (`basic_props:term/1')

          `-Interface' is any term.   (`basic_props:term/1')



 - PREDICATE: get_prototype_definition/2:
     *Usage:* `get_prototype_definition(+Proto,-Definition)'
        - _Description:_ The predicate will return the definition
          from a proto structure.

        - _Call and exit should be _compatible_ with:_

          `+Proto' is any term.   (`basic_props:term/1')

          `-Definition' is any term.   (`basic_props:term/1')



 - PREDICATE: lookup_check_node/4:
     No further documentation available for this predicate.




 - PREDICATE: lookup_check_field/6:
     No further documentation available for this predicate.




 - PREDICATE: lookup_check_interface_fieldValue/8:
     *Usage:*
     `lookup_check_interface_fieldValue(+ParseIn,-ParseOut,+AccessType,+FieldType,+Id,+FieldValue,DCGIn,DCGOut)'
        - _Description:_ The predicate formats the output for the
          interface part of the prototype. It also checks the values
          for the fields.

        - _Call and exit should be _compatible_ with:_

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is an atom.   (`basic_props:atm/1')

          `+AccessType' is an atom.   (`basic_props:atm/1')

          `+FieldType' is any term.   (`basic_props:term/1')

          `+Id' is an atom.   (`basic_props:atm/1')

          `+FieldValue' is any term.   (`basic_props:term/1')

          `DCGIn' is a string (a list of character codes).
          (`basic_props:string/1')

          `DCGOut' is a string (a list of character codes).
          (`basic_props:string/1')



 - PREDICATE: lookup_field/4:
     *Usage:* `lookup_field(+Parse,+FieldTypeId,+FieldId0,+FieldId1)'
        - _Description:_ The predicate will control that the two
          connected Fields are of the same type, e.g., SFColor -
          SFColor, MFVec3f - MFVec3f.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+FieldTypeId' is an atom.   (`basic_props:atm/1')

          `+FieldId0' is an atom.   (`basic_props:atm/1')

          `+FieldId1' is an atom.   (`basic_props:atm/1')



 - PREDICATE: lookup_route/5:
     *Usage:*
     `lookup_route(+Parse,+NodeTypeId0,+FieldId0,+NodeTypeId1,+FieldId1)'
        - _Description:_ The predicate will check the routing
          behaviour for two given fields. They will be checked
          according to the binding rules, like name changes access
          proporties. The node types for the field must of course be
          given for the identification.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+NodeTypeId0' is an atom.   (`basic_props:atm/1')

          `+FieldId0' is an atom.   (`basic_props:atm/1')

          `+NodeTypeId1' is an atom.   (`basic_props:atm/1')

          `+FieldId1' is an atom.   (`basic_props:atm/1')



 - PREDICATE: lookup_fieldTypeId/1:
     *Usage:* `lookup_fieldTypeId(+FieldTypeId)'
        - _Description:_ The predicate just make a check to see if
          the given FieldType id is among the allowed. You can not
          construct own ones and the check is mearly a spellcheck.

        - _Call and exit should be _compatible_ with:_

          `+FieldTypeId' is an atom.   (`basic_props:atm/1')



 - PREDICATE: lookup_get_fieldType/4:
     *Usage:*
     `lookup_get_fieldType(+Parse,+NodeTypeId,+fieldId,-FieldType)'
        - _Description:_ The predicate will return the given field's
          type. It will start the search in the ordinar dictionary
          and then to the personal dictionary sarting off with
          'PROTO'. After it will go for 'DEF' and 'EXTERNPROTO'.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+NodeTypeId' is an atom.   (`basic_props:atm/1')

          `+fieldId' is an atom.   (`basic_props:atm/1')

          `-FieldType' is an atom.   (`basic_props:atm/1')



 - PREDICATE: lookup_field_access/4:
     *Usage:*
     `lookup_field_access(+Parse,+NodenameId,+FieldId,+FieldId)'
        - _Description:_ The predicate will control that the access
          proporties are correct according to the certain rules that
          we have. It makes a check to see if the fields are of the
          same access type or if one of them is an exposedField. It
          is not doing a route check up to control that behaviour
          entirely.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+NodenameId' is an atom.   (`basic_props:atm/1')

          `+FieldId' is an atom.   (`basic_props:atm/1')

          `+FieldId' is an atom.   (`basic_props:atm/1')



 - PREDICATE: lookup_set_def/3:
     *Usage:* `lookup_set_def(+Parse,+Name,+Node)'
        - _Description:_ The predicate will enter a new post in the
          personal dictionary for the node definition.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+Name' is an atom.   (`basic_props:atm/1')

          `+Node' is any term.   (`basic_props:term/1')



 - PREDICATE: lookup_set_prototype/4:
     *Usage:*
     `lookup_set_prototype(+Parse,+Name,+Interface,+Definition)'
        - _Description:_ The predicate will insert the prototype
          definition in the personal dictionary and will give a
          warning if there is a multiple name given.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+Name' is an atom.   (`basic_props:atm/1')

          `+Interface' is any term.   (`basic_props:term/1')

          `+Definition' is any term.   (`basic_props:term/1')



 - PREDICATE: lookup_set_extern_prototype/4:
     *Usage:*
     `lookup_set_extern_prototype(+Parse,+Name,+Interface,+Strings)'
        - _Description:_ The predicate will insert the external
          prototype definition in the personal dictionary and will
          give a warning if there is a multiple name given.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+Name' is an atom.   (`basic_props:atm/1')

          `+Interface' is any term.   (`basic_props:term/1')

          `+Strings' is any term.   (`basic_props:term/1')




File: ciao.info,  Node: parser (library),  Next: parser_util (library),  Prev: lookup (library),  Up: Top

parser (library)
****************

* Menu:

* Usage and interface (parser)::
* Documentation on exports (parser)::


File: ciao.info,  Node: Usage and interface (parser),  Next: Documentation on exports (parser),  Prev: parser (library),  Up: parser (library)

Usage and interface (`parser')
==============================

   * *Library usage:*

     `:- use_module(library(parser)).'

   * *Exports:*
        - _Predicates:_

          `parser/2', `nodeDeclaration/4'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write', `lists',
          `provrml/lookup', `provrml/field_value',
          `provrml/tokeniser', `provrml/parser_util',
          `provrml/possible', `provrml/error'.




File: ciao.info,  Node: Documentation on exports (parser),  Prev: Usage and interface (parser),  Up: parser (library)

Documentation on exports (`parser')
===================================

 - PREDICATE: parser/2:
     *Usage:* `parser(+VRML,-Terms)'
        - _Description:_ The parser uses a tokeniser to read the
          input text string of VRML code and returns a list with the
          corresponding terms. The tokens will be read in this parser
          as the grammar says. The parser is according to the
          specification of the VRML grammar, accept that it is
          performed over tokens in sted of the actual code.

        - _Call and exit should be _compatible_ with:_

          `+VRML' is a string (a list of character codes).
          (`basic_props:string/1')

          `-Terms' is a list of `terms's.   (`basic_props:list/2')



 - PREDICATE: nodeDeclaration/4:
     No further documentation available for this predicate.





File: ciao.info,  Node: parser_util (library),  Next: possible (library),  Prev: parser (library),  Up: Top

parser_util (library)
*********************

* Menu:

* Usage and interface (parser_util)::
* Documentation on exports (parser_util)::


File: ciao.info,  Node: Usage and interface (parser_util),  Next: Documentation on exports (parser_util),  Prev: parser_util (library),  Up: parser_util (library)

Usage and interface (`parser_util')
===================================

   * *Library usage:*

     `:- use_module(library(parser_util)).'

   * *Exports:*
        - _Predicates:_

          `at_least_one/4', `at_least_one/5', `fillout/4',
          `fillout/5', `create_node/3', `create_field/3',
          `create_field/4', `create_field/5',
          `create_directed_field/5', `correct_commenting/4',
          `create_parse_structure/1', `create_parse_structure/2',
          `create_parse_structure/3', `create_environment/4',
          `insert_comments_in_beginning/3', `get_environment_name/2',
          `get_environment_type/2', `get_row_number/2',
          `add_environment_whitespace/3', `get_indentation/2',
          `inc_indentation/2', `dec_indentation/2',
          `add_indentation/3', `reduce_indentation/3',
          `push_whitespace/3', `push_dictionaries/3', `get_parsed/2',
          `get_environment/2', `inside_proto/1', `get_dictionaries/2',
          `strip_from_list/2', `strip_from_term/2', `strip_clean/2',
          `strip_exposed/2', `strip_restricted/2',
          `strip_interface/2', `set_parsed/3', `set_environment/3',
          `insert_parsed/3', `reverse_parsed/2', `stop_parse/2',
          `look_first_parsed/2', `get_first_parsed/3',
          `remove_code/3', `look_ahead/3'.


   * *Other modules used:*
        - _System library modules:_

          `aggregates', `dynamic', `iso_misc', `iso_byte_char',
          `iso_incomplete', `operators', `read', `write', `lists',
          `provrml/dictionary_tree', `provrml/internal_types'.




File: ciao.info,  Node: Documentation on exports (parser_util),  Prev: Usage and interface (parser_util),  Up: parser_util (library)

Documentation on exports (`parser_util')
========================================

 - PREDICATE: at_least_one/4:
     No further documentation available for this predicate.




 - PREDICATE: at_least_one/5:
     No further documentation available for this predicate.




 - PREDICATE: fillout/4:
     No further documentation available for this predicate.




 - PREDICATE: fillout/5:
     No further documentation available for this predicate.




 - PREDICATE: create_node/3:
     *Usage:* `create_node(+NodeTypeId,+Parse,-Node)'
        - _Description:_ The predicate will construct a node term
          with the read guts which is inside the parse structure. A
          node consists of its name and one argument, a list of its
          fields.

        - _Call and exit should be _compatible_ with:_

          `+NodeTypeId' is an atom.   (`basic_props:atm/1')

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `-Node' is any term.   (`basic_props:term/1')



 - PREDICATE: create_field/3:
     *Usage:* `create_field(+FieldNameId,+Arguments,-Field)'
        - _Description:_ The predicate will construct a field with
          the Id as the fieldname and the arguments as they are, in a
          double list, which results in a single list or a single
          list which will result in free arguments.

        - _Call and exit should be _compatible_ with:_

          `+FieldNameId' is an atom.   (`basic_props:atm/1')

          `+Arguments' is any term.   (`basic_props:term/1')

          `-Field' is any term.   (`basic_props:term/1')



 - PREDICATE: create_field/4:
     *Usage:* `create_field(+FieldAccess,+FieldType,+FieldId,-Field)'
        - _Description:_ The predicate will construct a field with
          its access type as the name with type and id as arguments.

        - _Call and exit should be _compatible_ with:_

          `+FieldAccess' is an atom.   (`basic_props:atm/1')

          `+FieldType' is an atom.   (`basic_props:atm/1')

          `+FieldId' is an atom.   (`basic_props:atm/1')

          `-Field' is any term.   (`basic_props:term/1')



 - PREDICATE: create_field/5:
     *Usage:*
     `create_field(+FieldAccess,+FieldType,+FieldId,+Fieldvalue,-Field)'
        - _Description:_ The predicate will construct a field with
          its access type as the name with type, id and value as
          arguments.

        - _Call and exit should be _compatible_ with:_

          `+FieldAccess' is an atom.   (`basic_props:atm/1')

          `+FieldType' is an atom.   (`basic_props:atm/1')

          `+FieldId' is an atom.   (`basic_props:atm/1')

          `+Fieldvalue' is any term.   (`basic_props:term/1')

          `-Field' is any term.   (`basic_props:term/1')



 - PREDICATE: create_directed_field/5:
     *Usage:* `create_directed_field(+Access,+Type,+Id0,+Id1,-Field)'
        - _Description:_ The predicate will construct a directed
          field with the key word IS in the middle. Its access type
          as the name with type, from id0 and to id1 as arguments.

        - _Call and exit should be _compatible_ with:_

          `+Access' is an atom.   (`basic_props:atm/1')

          `+Type' is an atom.   (`basic_props:atm/1')

          `+Id0' is an atom.   (`basic_props:atm/1')

          `+Id1' is an atom.   (`basic_props:atm/1')

          `-Field' is any term.   (`basic_props:term/1')



 - PREDICATE: correct_commenting/4:
     *Usage:*
     `correct_commenting(+Place,+Comment,+ParsedIn,-ParsedOut)'
        - _Description:_ The predicate places the comment 'before' or
          'after' the parsed term. This results in a list with the
          term and the comment or in just returning the term.

        - _Call and exit should be _compatible_ with:_

          `+Place' is an atom.   (`basic_props:atm/1')

          `undefined:str(+Comment)'  (undefined property)

          `+ParsedIn' is any term.   (`basic_props:term/1')

          `-ParsedOut' is any term.   (`basic_props:term/1')



 - PREDICATE: create_parse_structure/1:
     *Usage:* `create_parse_structure(-Parse)'
        - _Description:_ The predicate will construct the parse
          structure with its three fields: the parsing list, the
          environment structure, and the dictionaries.

        - _Call and exit should be _compatible_ with:_

          `-Parse' is a parse structure.   (`internal_types:parse/1')



 - PREDICATE: create_parse_structure/2:
     *Usage 1:* `create_parse_structure(+ParseIn,-ParseOut)'
        - _Description:_ The predicate will construct a parse
          structure with its three fields: the parsing list, the
          environment structure, and the dictionaries. It will reuse
          the environment and the dictionaries from the input.

        - _Call and exit should be _compatible_ with:_

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')

     *Usage 2:* `create_parse_structure(+ParsedList,-ParseOut)'
        - _Description:_ The predicate will construct a parse
          structure with its three fields: the parsing list, the
          environment structure, and the dictionaries. It will use
          the list of parsed items in its structure.

        - _Call and exit should be _compatible_ with:_

          `+ParsedList' is a list of `term's.   (`basic_props:list/2')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: create_parse_structure/3:
     *Usage:* `create_parse_structure(+ParsedList,+ParseIn,-ParseOut)'
        - _Description:_ The predicate will construct a parse
          structure with its three fields: the parsing list, the
          environment structure, and the dictionaries. It will use
          the list of parsed items in its structure and the
          environment and the dictionary from the parse structure
          given.

        - _Call and exit should be _compatible_ with:_

          `+ParsedList' is a list of `term's.   (`basic_props:list/2')

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: create_environment/4:
     *Usage:* `create_environment(+Parse,+EnvType,+Name,-EnvStruct)'
        - _Description:_ The predicate will construct an environment
          structure based on the information in the parse structure.
          Well only the white- space information will be reused. The
          are three types of environments 'PROTO', 'EXTERNPROTO', and
          'DEF'.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+EnvType' is an atom.   (`basic_props:atm/1')

          `+Name' is an atom.   (`basic_props:atm/1')

          `-EnvStruct' is an environment structure.
          (`internal_types:environment/1')



 - PREDICATE: insert_comments_in_beginning/3:
     *Usage:*
     `insert_comments_in_beginning(+Comment,+ParseIn,-ParseOut)'
        - _Description:_ We add the comment in the beginneing of the
          parsed, to get the proper look.

        - _Call and exit should be _compatible_ with:_

          `undefined:str(+Comment)'  (undefined property)

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: get_environment_name/2:
     *Usage:* `get_environment_name(+Environment,-Name)'
        - _Description:_ The predicate will return the enviroment
          name.

        - _Call and exit should be _compatible_ with:_

          `+Environment' is an environment structure.
          (`internal_types:environment/1')

          `-Name' is an atom.   (`basic_props:atm/1')



 - PREDICATE: get_environment_type/2:
     *Usage:* `get_environment_type(+Environment,-Type)'
        - _Description:_ The predicate will return the enviroment
          type, one of the three: 'PROTO', 'EXTERNPROTO', and 'DEF'.

        - _Call and exit should be _compatible_ with:_

          `+Environment' is an environment structure.
          (`internal_types:environment/1')

          `-Type' is an atom.   (`basic_props:atm/1')



 - PREDICATE: get_row_number/2:
     *Usage:* `get_row_number(+Parse,-Row)'
        - _Description:_ The predicate will return the row number
          from the parse structure. The row number is not fully
          implemented.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `-Row' is a number.   (`basic_props:num/1')



 - PREDICATE: add_environment_whitespace/3:
     *Usage:*
     `add_environment_whitespace(+EnvIn,+WhiteSpaceList,-EnvOut)'
        - _Description:_ The predicate will add the new whitespace
          that is collected in a list of whitespaces to the
          environment.

        - _Call and exit should be _compatible_ with:_

          `+EnvIn' is an environment structure.
          (`internal_types:environment/1')

          `+WhiteSpaceList' is a list of `atm's.
          (`basic_props:list/2')

          `-EnvOut' is an environment structure.
          (`internal_types:environment/1')



 - PREDICATE: get_indentation/2:
     *Usage 1:* `get_indentation(+Whitespace,-Indentation)'
        - _Description:_ The predicate will return the indentation
          depth from a whitespace structure.

        - _Call and exit should be _compatible_ with:_

          `+Whitespace' is a whitespace structure.
          (`internal_types:whitespace/1')

          `-Indentation' is a number.   (`basic_props:num/1')

     *Usage 2:* `get_indentation(+Parse,-Indentation)'
        - _Description:_ The predicate will return the indentation
          depth from a parse structure.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `-Indentation' is a number.   (`basic_props:num/1')



 - PREDICATE: inc_indentation/2:
     *Usage:* `inc_indentation(+ParseIn,-ParseOut)'
        - _Description:_ Will increase the indentation with one step
          to a parse structure.

        - _Call and exit should be _compatible_ with:_

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: dec_indentation/2:
     *Usage:* `dec_indentation(+ParseIn,-ParseOut)'
        - _Description:_ Will decrease the indentation with one step
          to a parse structure.

        - _Call and exit should be _compatible_ with:_

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: add_indentation/3:
     No further documentation available for this predicate.




 - PREDICATE: reduce_indentation/3:
     No further documentation available for this predicate.




 - PREDICATE: push_whitespace/3:
     *Usage:*
     `push_whitespace(+ParseWithWhitespace,+ParseIn,-ParseOut)'
        - _Description:_ The predicate will add the whitespace values
          from one parse structure to another one, resultin in the
          output, with the values from the second parse structure
          with the whitespace from the first added.

        - _Call and exit should be _compatible_ with:_

          `+ParseWithWhitespace' is a parse structure.
          (`internal_types:parse/1')

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: push_dictionaries/3:
     *Usage:* `push_dictionaries(+Parse,+Parse,-Parse)'
        - _Description:_ The predicate will set the first parse
          structure's directory to the second parsing structure
          argument. The resulting parsing structure will be returned.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `-Parse' is a parse structure.   (`internal_types:parse/1')



 - PREDICATE: get_parsed/2:
     *Usage 1:* `get_parsed(+ParseStructure,-ListOfParsed)'
        - _Description:_ The predicate will return a list of the
          parsed terms that is inside the parse structure.

        - _Call and exit should be _compatible_ with:_

          `+ParseStructure' is a parse structure.
          (`internal_types:parse/1')

          `-ListOfParsed' is a list of `term's.
          (`basic_props:list/2')

     *Usage 2:* `get_parsed(+ParseStructure,-EnvironmentStructure)'
        - _Description:_ The predicate will return the environment of
          the parse structure.

        - _Call and exit should be _compatible_ with:_

          `+ParseStructure' is a parse structure.
          (`internal_types:parse/1')

          `-EnvironmentStructure' is an environment structure.
          (`internal_types:environment/1')

     *Usage 3:* `get_parsed(+ParseStructure,-Dictionaries)'
        - _Description:_ The predicate will return dictionary used
          within the parse structure.

        - _Call and exit should be _compatible_ with:_

          `+ParseStructure' is a parse structure.
          (`internal_types:parse/1')

          `-Dictionaries' is a dictionary.
          (`internal_types:dictionary/1')



 - PREDICATE: get_environment/2:
     No further documentation available for this predicate.




 - PREDICATE: inside_proto/1:
     *Usage:* `inside_proto(+Parse)'
        - _Description:_ The predicate will answer to the question:
          are we parsing inside a PROTO/EXTERNPROTO.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')



 - PREDICATE: get_dictionaries/2:
     No further documentation available for this predicate.




 - PREDICATE: strip_from_list/2:
     *Usage:* `strip_from_list(+ListWithComments,-CleanList)'
        - _Description:_ The predicate will strip the list from
          comments and return a list without any comments.

        - _Call and exit should be _compatible_ with:_

          `+ListWithComments' is a list of `term's.
          (`basic_props:list/2')

          `-CleanList' is a list of `term's.   (`basic_props:list/2')



 - PREDICATE: strip_from_term/2:
     *Usage:* `strip_from_term(+Term,-Stripped)'
        - _Description:_ The predicate will remove comments from a
          term, it will reduce its arguments if there are comments as
          arguments.

        - _Call and exit should be _compatible_ with:_

          `+Term' is any term.   (`basic_props:term/1')

          `-Stripped' is any term.   (`basic_props:term/1')



 - PREDICATE: strip_clean/2:
     *Usage:* `strip_clean(+ParsedIn,-ParsedOut)'
        - _Description:_ The predicate will return a striped list or
          a single atom if there was no comments and no more items in
          the list. It will also return a atom if there is comments
          and only one other element.

        - _Call and exit should be _compatible_ with:_

          `+ParsedIn' is any term.   (`basic_props:term/1')

          `-ParsedOut' is any term.   (`basic_props:term/1')



 - PREDICATE: strip_exposed/2:
     No further documentation available for this predicate.




 - PREDICATE: strip_restricted/2:
     No further documentation available for this predicate.




 - PREDICATE: strip_interface/2:
     *Usage:* `strip_interface(+Interface,-StrippedInterface)'
        - _Description:_ The predicate will remove comments from the
          interface that we read for the PROTOtype. This will help us
          when setting the properties.

        - _Call and exit should be _compatible_ with:_

          `+Interface' is a list of `term's.   (`basic_props:list/2')

          `-StrippedInterface' is a list of `term's.
          (`basic_props:list/2')



 - PREDICATE: set_parsed/3:
     *Usage:* `set_parsed(+ParseIn,+NewParseList,-ParseOut)'
        - _Description:_ The predicate will create a new parse
          structure from the first parse structure with the parse
          list from the second argument.

        - _Call and exit should be _compatible_ with:_

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `+NewParseList' is a list of `term's.
          (`basic_props:list/2')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: set_environment/3:
     *Usage:* `set_environment(+Environment,+ParseIn,-ParseOut)'
        - _Description:_ The modificator will return a parse
          structure with the environment given with the other
          properties from the first parse structure.

        - _Call and exit should be _compatible_ with:_

          `+Environment' is an environment structure.
          (`internal_types:environment/1')

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')



 - PREDICATE: insert_parsed/3:
     No further documentation available for this predicate.




 - PREDICATE: reverse_parsed/2:
     No further documentation available for this predicate.




 - PREDICATE: stop_parse/2:
     *Usage:* `stop_parse(+TermIn,-TermOut)'
        - _Description:_ The predicate will bind the invalue to the
          outvalue, used to terminate a parsing.

        - _Call and exit should be _compatible_ with:_

          `+TermIn' is any term.   (`basic_props:term/1')

          `-TermOut' is any term.   (`basic_props:term/1')



 - PREDICATE: look_first_parsed/2:
     *Usage:* `look_first_parsed(+Parse,-First)'
        - _Description:_ Look at the first item in the parse
          structure.

        - _Call and exit should be _compatible_ with:_

          `+Parse' is a parse structure.   (`internal_types:parse/1')

          `-First' is any term.   (`basic_props:term/1')



 - PREDICATE: get_first_parsed/3:
     *Usage:* `get_first_parsed(+ParseIn,-ParseOut,-First)'
        - _Description:_ Get the first item in the parse structure
          and return the parse structure with the item removed.

        - _Call and exit should be _compatible_ with:_

          `+ParseIn' is a parse structure.
          (`internal_types:parse/1')

          `-ParseOut' is a parse structure.
          (`internal_types:parse/1')

          `-First' is any term.   (`basic_props:term/1')



 - PREDICATE: remove_code/3:
     No further documentation available for this predicate.




 - PREDICATE: look_ahead/3:
     *Usage:* `look_ahead(+Name,+Parsed,-Parsed)'
        - _Description:_ This predicate is used normally by the CDG
          and the two last arguments will therefore be the same
          because we don't remove the parsed. The name is the name
          inside a term, the first argument.

        - _Call and exit should be _compatible_ with:_

          `+Name' is an atom.   (`basic_props:atm/1')

          `+Parsed' is a list of `term's.   (`basic_props:list/2')

          `-Parsed' is a list of `term's.   (`basic_props:list/2')




File: ciao.info,  Node: possible (library),  Next: tokeniser (library),  Prev: parser_util (library),  Up: Top

possible (library)
******************

   *Version:* 0.1 (1999/2/19, 6:32:46 MET)

* Menu:

* Usage and interface (possible)::
* Documentation on exports (possible)::


File: ciao.info,  Node: Usage and interface (possible),  Next: Documentation on exports (possible),  Prev: possible (library),  Up: possible (library)

Usage and interface (`possible')
================================

   * *Library usage:*

     `:- use_module(library(possible)).'

   * *Exports:*
        - _Predicates:_

          `continue/3'.


   * *Other modules used:*
        - _System library modules:_

          `lists'.




File: ciao.info,  Node: Documentation on exports (possible),  Prev: Usage and interface (possible),  Up: possible (library)

Documentation on exports (`possible')
=====================================

 - PREDICATE: continue/3:
     No further documentation available for this predicate.





File: ciao.info,  Node: tokeniser (library),  Next: *** PART XII - Appendices,  Prev: possible (library),  Up: Top

tokeniser (library)
*******************

   *Version:* 1.7#171 (2002/1/3, 18:20:29 CET)

* Menu:

* Usage and interface (tokeniser)::
* Documentation on exports (tokeniser)::


File: ciao.info,  Node: Usage and interface (tokeniser),  Next: Documentation on exports (tokeniser),  Prev: tokeniser (library),  Up: tokeniser (library)

Usage and interface (`tokeniser')
=================================

   * *Library usage:*

     `:- use_module(library(tokeniser)).'

   * *Exports:*
        - _Predicates:_

          `tokeniser/2', `token_read/3'.


   * *Other modules used:*
        - _System library modules:_

          `iso_byte_char', `lists', `write', `provrml/error'.




File: ciao.info,  Node: Documentation on exports (tokeniser),  Prev: Usage and interface (tokeniser),  Up: tokeniser (library)

Documentation on exports (`tokeniser')
======================================

 - PREDICATE: tokeniser/2:
     *Usage:* `tokeniser(+VRML,-Tokens)'
        - _Description:_ This predicate will perform the parsing of
          the VRML code. The result will be tokens that will be the
          source for producing the Prolog terms of the VRML code.
          This is done in the parser module. From these terms
          analysis, changing, and any thing that you want to do with
          VRML code from Prolog programming language. We perform the
          predicate with a catch call to be able to output error
          messages if encountered.

        - _Call and exit should be _compatible_ with:_

          `+VRML' is a list of `atm's.   (`basic_props:list/2')

          `-Tokens' is a list of `term's.   (`basic_props:list/2')



 - PREDICATE: token_read/3:
     No further documentation available for this predicate.





File: ciao.info,  Node: *** PART XII - Appendices,  Next: Installing Ciao from the source distribution,  Prev: tokeniser (library),  Up: Top

PART XII - Appendices
*********************

   These appendices describe the installation of the Ciao environment
on different systems and some other issues such as reporting bugs,
signing up on the Ciao user's mailing list, downloading new versions,
limitations, etc.


File: ciao.info,  Node: Installing Ciao from the source distribution,  Next: Installing Ciao from a Win32 binary distribution,  Prev: *** PART XII - Appendices,  Up: Top

Installing Ciao from the source distribution
********************************************

   *Author(s):* Manuel Carro, Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#130 (2001/10/28, 17:6:47 CET)

   This describes the installation procedure for the Ciao Prolog
system, including libraries and manuals, from a _source_
distribution. This applies primarily to Unix-type systems (Linux, Mac
OS X, Solaris, SunOS, etc.). However, the sources can also be
compiled on Windows NT/95/98 systems - see *Note Installation and
compilation under Windows:: for details.

   If you find any problems during installation, please refer to
*Note Troubleshooting (nasty messages and nifty workarounds)::.  See
also *Note Downloading new versions:: and *Note Reporting bugs::.

* Menu:

* Un*x installation summary::
* Un*x full installation instructions::
* Checking for correct installation on Un*x::
* Cleaning up the source directory::
* Multiarchitecture support::
* Installation and compilation under Windows::
* Porting to currently unsupported operating systems::
* Troubleshooting (nasty messages and nifty workarounds)::


File: ciao.info,  Node: Un*x installation summary,  Next: Un*x full installation instructions,  Prev: Installing Ciao from the source distribution,  Up: Installing Ciao from the source distribution

Un*x installation summary
=========================

*Note:* it is recommended that you read the full installation
instructions (specially if the installation will be shared by
different architectures). However, in many cases it suffices to
follow this summary:

  1. Uncompress and unpackage (using `gunzip' and `tar -xpf') the
     distribution. This will put everything in a new directory whose
     name reflects the Ciao version.

  2. Enter the newly created directory (`SRC'). Edit `SETTINGS' and
     check/set the variables `SRC', `BINROOT' (where the executables
     will go), `LIBROOT' (where the libraries will go), and `DOCROOT'
     (where the documentation will go, preferably a directory
     _accessible via_ WWW).

  3. Type `gmake install'. This will build executables, compile
     libraries, and install everything in a directory `LIBROOT/ciao'
     and in `BINROOT'.

     Note that `gmake' refers to the GNU implementation of the make
     Un*x command, which is available in many systems (including all
     Linux systems and Mac OS X) simply as `make'. I.e., you can try
     simply typing `make install' if `gmake install' does not work.
     If typing `make' stops right away with error messages it is
     probably an older version and you need to install `gmake'.

  4. Make the following modifications in your startup scripts. This
     will make the documentation accessible, set the correct mode
     when opening Ciao source files in `emacs', etc. Note that
     `<LIBROOT>' must be replaced with the appropriate value:

        * For users a _csh-compatible shell_ ( `csh', `tcsh', ...),
          add to `~/.cshrc':

                       if ( -e <LIBROOT>/ciao/DOTcshrc ) then
                          source <LIBROOT>/ciao/DOTcshrc
                       endif

          `Mac OS X' users should add (or modify) the `path' file in
          the directory `~/Library/init/tcsh', adding the lines shown
          above. *Note:* while this is recognized by the terminal
          shell, and therefore by the text-mode Emacs which comes
          with Mac OS X, the Aqua native Emacs 21 does not recognize
          that initialization. It is thus necessary, at this moment,
          to set manually the Ciao shell (ciaosh) and Ciao library
          location by hand. This can be done from the Ciao menu
          within Emacs after a Ciao Prolog file has been loaded. We
          suppose that the reason is that Mac OS X does not actually
          consult the per-user initialization files on startup. It
          should also be possible to put the right initializations in
          the .emacs file using the `setenv' function of Emacs-lisp,
          as in

               (setenv "CIAOLIB" "<LIBROOT>/ciao")

          The same can be done for the rest of the variables
          initialized in `<LIBROOT>/ciao/DOTcshrc'

        * For users of an _sh-compatible shell_ ( `sh', `bash', ...),
          add to `~/.profile':

                       if [ -f <LIBROOT>/ciao/DOTprofile ]; then
                          . <LIBROOT>/ciao/DOTprofile
                       fi

          This will set up things so that the Ciao executables are
          found and you can access the Ciao system manuals using the
          `info' command. Note that, depending on your shell, _you
          may have to log out and back in_ for the changes to take
          effect.

        * Also, if you use `emacs' (highly recommended) add this line
          to your `~/.emacs' file:

                       (load-file "<LIBROOT>/ciao/DOTemacs.el")


     If you are installing Ciao globally in a multi-user machine,
     make sure that you instruct all users to do the same. If you are
     the system administrator, the previous steps can be done once
     and for all, and globally for all users by including the lines
     above in the central startup scripts (e.g., in Linux
     `/etc/bashrc', `/etc/csh.login', `/etc/csh.cshrc', `/etc/skel',
     `/usr/share/emacs/.../lisp/site-init.pl', etc.).

  5. Finally, if the (freely available) `emacs' editor/environment is
     not installed in your system, we _highly recommend_ that you
     also install it at this point (see *Note Un*x full installation
     instructions:: for instructions). While it is easy to use Ciao
     with any editor of your choice, the Ciao distribution includes a
     very powerful _application development environment_ which is
     based on `emacs' and which enables, e.g., source-level
     debugging, syntax coloring, context-sensitive on-line help, etc.

  6. You may want now want to check your installation (see *Note
     Checking for correct installation on Un*x::) and read the
     documentation, which is stored in `DOCROOT' (copied from
     `SRC/doc/reference') and can be easily accessed as explained in
     that same section. There are special "getting started" sections
     at the beginning of the manual.

  7. If you have any problems you may want to check the rest of the
     instructions. The system can be _uninstalled_ by typing `gmake
     uninstall'.



File: ciao.info,  Node: Un*x full installation instructions,  Next: Checking for correct installation on Un*x,  Prev: Un*x installation summary,  Up: Installing Ciao from the source distribution

Un*x full installation instructions
===================================

  1. *Uncompress and unpackage:* (using `gunzip' and `tar -xpf') the
     distribution in a suitable directory. This will create a new
     directory called `ciao-X.Y', where `X.Y' is the version number
     of the distribution. The `-p' option in the `tar' command
     ensures that the relative dates of the files in the package are
     preserved, which is needed for correct operation of the
     Makefiles.

  2. *Select installation options:* Edit the file `SETTINGS' and set
     the following variables:

        * `SRC': directory where the sources are stored.

        * `BINROOT': directory where the Ciao executables will go.
          For example, if `BINROOT=/usr/local/bin', then the Ciao
          compiler ( `ciaoc') will be stored at
          `/usr/local/bin/ciaoc'. Actually, it will be a link to
          `ciaoc-'_VersionNumber_. This applies also to other
          executables below and is done so that several versions of
          Ciao can coexist on the same machine. Note that the
          _version installed latest_ will be the one started by
          default when typing `ciao', `ciaoc', etc.

        * `LIBROOT': directory where the run-time libraries will be
          installed.  The Ciao installation procedure will create a
          new subdirectory `ciao' below `LIBROOT' and a subdirectory
          below this one for each Ciao version installed. For
          example, if `LIBROOT=/usr/local/lib' and you have Ciao
          version `x.y', then the libraries will be installed under
          `/usr/local/lib/ciao/ciao-x.y'. This allows you to install
          site-specific programs under `/usr/local/lib/ciao' and they
          will not be overwritten if a new version of Ciao is
          installed. It also again allows having several Ciao
          versions installed simultaneously.

        * `DOCROOT': directory where the manuals will be installed.
          It is often convenient if this directory is accessible via
          WWW (`DOCROOT=/home/httpd/html/ciao', or something like
          that).


     For network-based installations, it is of _utmost importance_
     that the paths given be reachable in all the networked machines.
     Different machines with different architectures can share the
     same physical `SRC' directory during installation, since
     compilations for different architectures take place in dedicated
     subdirectories. Also, different machines/architectures can share
     the same `LIBROOT' directory. This saves space since the
     architecture-independent libraries will be shared. See *Note
     Multiarchitecture support:: below.

  3. *Compile Ciao:* At the ciao top level directory type `gmake all'.

     _Important:_ use GNU make ( `gmake'), not the standard UNIX
     make, as the latter does not support some features used during
     the compilation. It does not matter if the name of the
     executable is `make' or `gmake': only make sure that it is GNU
     make.

     This will:

        * Build an engine in `$(SRC)/bin/$(CIAOARCH)', where
          `$(CIAOARCH)' depends on the architecture. The engine is
          the actual interpreter of the low level code into which
          Ciao Prolog programs are compiled.

        * Build a new Ciao standalone compiler ( `ciaoc'), with the
          default paths set for your local configuration
          (nonetheless, these can be overridden by environment
          variables, as described below).

        * Precompile all the libraries under `$(SRC)/lib' and
          `$(SRC)/library' using this compiler.

        * Compile a toplevel Prolog shell and a shell for Prolog
          scripts, under the `$(SRC)/shell' directory.

        * Compile some small, auxiliary applications (contained in the
          `etc' directory, and documented in the part of the manual
          on 'Miscellaneous Standalone Utilities').


     This step can be repeated successively for several architectures
     in the same source directory. Only the engine and some small
     parts of the libraries (those written in C) differ from one
     architecture to the other. Standard Ciao Prolog code compiles
     into bytecode object files (`.po') and/or executables which are
     portable among machines of different architecture, provided
     there is an executable engine accessible in every such machine.
     See more details below under *Note Multiarchitecture support::.

  4. *Check compilation:* If the above steps have been satisfactorily
     finished, the compiler has compiled itself and all the
     distribution modules, and very probably everything is fine.

  5. *Install Ciao:* To install Ciao in the directories selected in
     the file `SETTINGS' during step 2 above, type `gmake
     justinstall'. This will:

        * Install the executables of the Ciao program development
          tools (i.e., the general driver/top-level `ciao', the
          standalone compiler `ciaoc', the script interpreter
          `ciao-shell', miscellaneous utilities, etc.) in `BINROOT'
          (see below). In order to use these tools, the `PATH'
          environment variable of users needs to contain the path
          `BINROOT'.

        * Install the Ciao libraries under `LIBROOT/ciao' (these will
          be automatically found).

        * Install under `DOCROOT' the Ciao manuals in several formats
          (such as GNU `info', `html', `postscript', etc.), depending
          on the distribution. In order for these manuals to be found
          when typing `M-x info' within `emacs', or by the standalone
          `info' and `man' commands, the `MANPATH' and `INFOPATH'
          environment variables of users both need to contain the
          path `DOCROOT'.

        * Install under `LIBROOT/ciao' the Ciao GNU `emacs' interface
          ( `ciao.el', which provides an interactive interface to the
          Ciao program development tools, as well as some other
          auxiliary files) and a file `DOTemacs' containing the
          `emacs' initialization commands which are needed in order
          to use the Ciao `emacs' interface.


  6. *Set up user environments:* In order to automate the process of
     setting the variables above, the installation process leaves the
     files `LIBROOT/ciao/DOTcshrc' (for `csh'-like shells),
     `LIBROOT/ciao/DOTprofile' (for `sh'-like shells), and
     `LIBROOT/ciao/DOTemacs' (for emacs) with appropriate definitions
     which will take care of all needed environment variable
     definitions and emacs mode setup. Make the following
     modifications in your startup scripts, so that these files are
     used (`<LIBROOT>' must be replaced with the appropriate value):

        * For users a _csh-compatible shell_ ( `csh', `tcsh', ...),
          add to `~/.cshrc':

                       if ( -e <LIBROOT>/ciao/DOTcshrc ) then
                          source <LIBROOT>/ciao/DOTcshrc
                       endif

          `Mac OS X' users should add (or modify) the `path' file in
          the directory `~/Library/init/tcsh', adding the lines shown
          above. *Note:* while this is recognized by the terminal
          shell, and therefore by the text-mode Emacs which comes
          with Mac OS X, the Aqua native Emacs 21 does not recognize
          that initialization. It is thus necessary, at this moment,
          to set manually the Ciao shell (ciaosh) and Ciao library
          location by hand. This can be done from the Ciao menu
          within Emacs after a Ciao Prolog file has been loaded. We
          suppose that the reason is that Mac OS X does not actually
          consult the per-user initialization files on startup. It
          should also be possible to put the right initializations in
          the .emacs file using the `setenv' function of Emacs-lisp,
          as in

               (setenv "CIAOLIB" "<LIBROOT>/ciao")

          The same can be done for the rest of the variables
          initialized in `<LIBROOT>/ciao/DOTcshrc'

        * For users of an _sh-compatible shell_ ( `sh', `bash', ...),
          add to `~/.profile':

                       if [ -f <LIBROOT>/ciao/DOTprofile ]; then
                          . <LIBROOT>/ciao/DOTprofile
                       fi

          This will set up things so that the Ciao executables are
          found and you can access the Ciao system manuals using the
          `info' command. Note that, depending on your shell, _you
          may have to log out and back in_ for the changes to take
          effect.

        * Also, if you use `emacs' (highly recommended) add this line
          to your `~/.emacs' file:

                       (load-file "<LIBROOT>/ciao/DOTemacs.el")


     If you are installing Ciao globally in a multi-user machine,
     make sure that you instruct all users to do the same. If you are
     the system administrator, the previous steps can be done once
     and for all, and globally for all users by including the lines
     above in the central startup scripts (e.g., in Linux
     `/etc/bashrc', `/etc/csh.login', `/etc/csh.cshrc', `/etc/skel',
     `/usr/share/emacs/.../lisp/site-init.pl', etc.).

  7. *Download and install Emacs (highly recommended):* If the
     (freely available) `emacs' editor is not installed in your
     system, its installation is _highly recommended_ (if you are
     installing in a multi-user machine, you may want to do it in a
     general area so that it is available for other users, even if
     you do not use it yourself). While it is easy to use Ciao with
     any editor of your choice, the Ciao distribution includes a very
     powerful _application development environment_ which is based on
     `emacs' and which enables, e.g., source-level debugging, syntax
     coloring, context-sensitive on-line help, etc.

     The emacs editor (in all its versions: Un*x, Windows, etc.) can
     be downloaded from, for example, `http://www.emacs.org/', and
     also from the many GNU mirror sites worldwide (See
     `http://www.gnu.org/' for a list), in the `gnu/emacs' and
     `gnu/windows/emacs' directories. You can find answers to
     frequently asked questions (FAQ) about `emacs' in general at
     `http://www.gnu.org/software/emacs/emacs-faq.text' and about the
     Windows version at
     `http://www.gnu.org/software/emacs/windows/ntemacs.html'
     (despite the `ntemacs' name it runs fine also as is on Win9X and
     Win2000 machines).

  8. *Check installation / read documentation:* You may now want to
     check your installation (see *Note Checking for correct
     installation on Un*x::) and read the documentation, which is
     stored in `DOCROOT' (copied from `SRC/doc/reference') and can be
     easily accessed as explained that same section. There are
     special "getting started" sections at the beginning of the
     manual.


   Other useful `make' targets are listed at the beginning of
`$(SRC)/Makefile'.

   If you have any problems you may want to check *Note
Troubleshooting (nasty messages and nifty workarounds)::.

   The system can be _uninstalled_ by typing `gmake uninstall' in the
top directory (the variables in `SETTINGS' should have the same value
as when the install was performed, so that the same directories are
cleaned).


File: ciao.info,  Node: Checking for correct installation on Un*x,  Next: Cleaning up the source directory,  Prev: Un*x full installation instructions,  Up: Installing Ciao from the source distribution

Checking for correct installation on Un*x
=========================================

   If everything has gone well, several applications and tools should
be available to a normal user. Try the following while logged in as a
_normal user_ (important in order to check that permissions are set
up correctly):

   * Typing `ciao' (or `ciaosh') should start the typical Prolog
     top-level shell.

   * In the top-level shell, Prolog library modules should load
     correctly. Type for example `use_module(library(dec10_io))' -you
     should get back a prompt with no errors reported.

   * To exit the top level shell, type `halt.' as usual, or <^D>.

   * Typing `ciaoc' should produce the help message from the Ciao
     standalone compiler.

   * Typing `ciao-shell' should produce a message saying that no code
     was found. This is a Ciao application which can be used to write
     scripts written in Prolog, i.e., files which do not need any
     explicit compilation to be run.


Also, the following documentation-related actions should work:

   * If the `info' program is installed, typing `info' should produce
     a list of manuals which _should include Ciao manual(s) in a
     separate area_ (you may need to log out and back in so that your
     shell variables are reinitialized for this to work).

   * Opening with a WWW browser (e.g., `netscape') the directory or
     `URL' corresponding to the `DOCROOT' setting should show a
     series of Ciao-related manuals. Note that _style sheets_ should
     be activated for correct formatting of the manual.

   * Typing `man ciao' should produce a man page with some very basic
     general information on Ciao (and pointing to the on-line
     manuals).

   * The `DOCROOT' directory should contain the manual also in the
     other formats such as `postscript' or `pdf' which specially
     useful for printing. See *Note Printing manuals (Un*x):: for
     instructions.


   Finally, if `emacs' is installed, after starting it (typing
`emacs') the following should work:

   * Typing <^H> <i> (or in the menus `Help->Manuals->Browse Manuals
     with Info') should open a list of manuals in info format in
     which the Ciao manual(s) should appear.

   * When opening a Prolog file, i.e., a file with `.pl' or `.pls'
     ending, using <^X><^F>`filename' (or using the menus) the code
     should appear highlighted according to syntax (e.g., comments in
     red), and `Ciao/Prolog' menus should appear in the menu bar on
     top of the `emacs' window.

   * Loading the file using the `Ciao/Prolog' menu (or typing <^C>
     <l>) should start in another emacs buffer the Ciao toplevel
     shell and load the file. You should now be able to switch the
     the toplevel shell and make queries from within `emacs'.


*Note:* when using `emacs' it is _very convenient_ to swap the
locations of the (normally not very useful) <Caps Lock> key and the
(very useful in `emacs') <Ctrl> key on the keyboard. How to do this
is explained in the `emacs' frequently asked questions FAQs (see the
`emacs' download instructions for their location).


File: ciao.info,  Node: Cleaning up the source directory,  Next: Multiarchitecture support,  Prev: Checking for correct installation on Un*x,  Up: Installing Ciao from the source distribution

Cleaning up the source directory
================================

   After installation, the source directory can be cleaned up in
several ways:

   * `gmake uninstall' removes the installation but does not touch
     the source directories.

   * `gmake totalclean' leaves the distribution is its original form,
     throwing away any intermediate files (as well as any unneeded
     files left behind by the Ciao developers), while still allowing
     recompilation.


   Other useful `make' targets are listed at the beginning of
`$(SRC)/Makefile'.


File: ciao.info,  Node: Multiarchitecture support,  Next: Installation and compilation under Windows,  Prev: Cleaning up the source directory,  Up: Installing Ciao from the source distribution

Multiarchitecture support
=========================

   As mentioned before, Ciao applications (including the compiler and
the top level) can run on several machines with different
architectures without any need for recompiling, provided there is one
Ciao engine (compiled for the corresponding architecture) accessible
in each machine. Also, the Ciao libraries (installed in `LIBROOT',
which contain also the engines) and the actual binaries (installed in
`BINROOT') can themselves be shared on several machines with
different architectures, saving disk space.

   For example, assume that the compiler is installed as:

   `/usr/local/share/bin/ciaoc'

   and the libraries are installed under

   `/usr/local/share/lib'

   Assume also that the `/usr/local/share' directory is mounted on,
say, a number of Linux and a number of Solaris boxes. In order for
`ciaoc' to run correctly on both types of machines, the following is
needed:

  1. Make sure you that have done `gmake install' on one machine of
     each architecture (once for Linux and once for Solaris in our
     example). This recompiles and installs a new engine and any
     architecture-dependent parts of the libraries for each
     architecture. The engines will have names such as
     `ciaoengine.LINUXi86', `ciaoengine.SolarisSparc', and so on.

  2. In multi-architecture environments it is even more important to
     make sure that users make the modifications to their startup
     scripts using `<LIBROOT>/ciao/DOTcshrc' etc. The selection of
     the engine (and architecture-dependent parts of libraries) is
     done in these scripts by setting the environment variable
     `CIAOARCH', using the `ciao_get_arch' command, which is
     installed automatically when installing Ciao. This will set
     `CIAOARCH' to, say, `LINUXi86', `SolarisSparc', respectively,
     and `CIAOENGINE' will be set to `ciaoengine.'_CIAOARCH_.

     However, note that this is not strictly necessary if running on
     only one architecture: if `CIAOARCH' is not set (i.e.,
     undefined), the Ciao executables will look simply for
     `ciaoengine', which is always a link to the latest engine
     installed in the libraries. But including the initialization
     files provided has the advantage of setting also paths for the
     manuals, etc.



File: ciao.info,  Node: Installation and compilation under Windows,  Next: Porting to currently unsupported operating systems,  Prev: Multiarchitecture support,  Up: Installing Ciao from the source distribution

Installation and compilation under Windows
==========================================

   There are two possibilities in order to install Ciao Prolog on
Windows NT/95/98 machines:

   * Installing from the Windows _precompiled_ distribution. This is
     the easiest since it requires no compilation and is highly
     recommended. This is described in *Note Installing Ciao from a
     Win32 binary distribution::.

   * Installing the standard Ciao Prolog (Un*x) system source
     distribution and compiling it under Windows. This is somewhat
     more complex and currently requires the (freely available)
     Cygnus Win32 development libraries -described below.


   In order to compile Ciao Prolog for Win32 environments you need to
have the (public domain) _Cygnus Win32_ and development libraries
installed in your system. Compilation should be performed preferably
under Windows NT.

   * Thus, the first step, if Cygnus Win32 is not installed in your
     system, is to download it (from, e.g.,
     `http://www.cygnus.com/misc/gnu-win32') and install it. The
     compilation process also requires that the executables `rm.exe',
     `sh.exe', and `uname.exe' from the Cygnus distribution be copied
     under `/bin' prior to starting the process (if these executables
     are not available under `/bin' the compilation process will
     produce a number of errors and eventually stop prematurely).

   * Assuming all of the above is installed, type `make allwin32'.
     This will compile both the engine and the Prolog libraries. In
     this process, system libraries that are normally linked
     dynamically under Un*x (i.e., those for which `.so' dynamically
     loadable files are generated) are linked statically into the
     engine (this is done instead of generating `.dll's because of a
     limitation in the current version of the Cygnus Win32
     environment). No actual installation is made at this point,
     i.e., this process leaves things in a similar state as if you
     had just downloaded and uncompressed the precompiled
     distribution. Thus, in order to complete the installation you
     should now:

   * Follow now the instructions in *Note Installing Ciao from a
     Win32 binary distribution::.


   A further note regarding the executables generated by the Ciao
compiler and top-level: the same considerations given in *Note
Installing Ciao from a Win32 binary distribution:: apply regarding
`.bat' files, etc. However, in a system in which Cygnus Win32 is
installed these executables can also be used in a very simple way. In
fact, the executables can be run as in Un*x by simply typing their
name at the `bash' shell command line without any associated `.bat'
files. This only requires that the `bash' shell which comes with
Cygnus Win32 be installed and accessible: simply, make sure that
`/bin/sh.exe' exists.


File: ciao.info,  Node: Porting to currently unsupported operating systems,  Next: Troubleshooting (nasty messages and nifty workarounds),  Prev: Installation and compilation under Windows,  Up: Installing Ciao from the source distribution

Porting to currently unsupported operating systems
==================================================

   If you would like to port Ciao to a currently unsupported
platform, there are several issues to take into account. The main one
is to get the _engine_ to compile in that platform, i.e., the C code
under the `engine' directory. The procedure currently followed by
Ciao to decide the various flags needed to compile is as follows:

   * The shell script `$(SRC)/etc/ciao_get_arch' is executed; it
     returns a string describing the operating system and the
     processor architecture (e.g., LINUXi86, SolarisSparc,
     SolarisAlpha, etc.). You should make sure it returns a correct
     (and meaningful) string for your setup. This string is used
     trhoughout the compilation to create several
     architecture-dependant flags.

   * In the directory `$(SRC)/makefile-sysdep' there are files called
     mkf-<OS><ARCH> for every combination of operating system and
     architecture in which Ciao is know to (and how to) compile. They
     set several flags regarding, for example, whether to use or not
     threads, which threads library to use, the optimization flags to
     use, the compiler, linker, and it also sets separately the
     architecture name (ARCHNAME variable) and the operating system
     (OSNAME). You should create a new mkf file for your machine,
     starting from the one which is closest to you.

   * Most times the porting problems happen in the use of locks and
     threads. You can either disable them, or have a look at the
     files `$(SRC)/engine/locks.h' and `$(SRC)/engine/threads.h'. If
     you know how to implement native (assembler) locks for your
     architecture, enable HAVE_NATIVE_SLOCKS for your architecture
     and add the definitions. Otherwise, if you have library-based
     locks, enable them. The mechanism in `threads.h' is similar.


   Once a working engine is achieved, it should be possible to
continue with the standard installation procedure, which will try to
use a completely static version of the standalone compiler
(`ciaoc.sta' in the `ciaoc' directory) to compile the interactive
top-level ( `ciaosh') and a new version of the standalone compiler (
`ciaoc'). These in turn should be able to compile the Prolog
libraries. You may also need to look at some libraries (such as, for
example, `sockets') which contain C code. If you do succeed in
porting to a platform that is currently unsupported please send the
`mkf-CIAOARCH' and any patches to <ciao@clip.dia.fi.upm.es>, and we
will include them (with due credit, of course) in the next
distribution.


File: ciao.info,  Node: Troubleshooting (nasty messages and nifty workarounds),  Prev: Porting to currently unsupported operating systems,  Up: Installing Ciao from the source distribution

Troubleshooting (nasty messages and nifty workarounds)
======================================================

   The following a list of common installation problems reported by
users:

   * *Problem:* Compilation errors appear when trying a new
     installation/compilation after the previous one was aborted
     (e.g., because of errors).

     *Possible reason and solution:* It is a good idea to clean up
     any leftovers from the previous compilation using `make
     engclean' before restarting the installation or compilation
     process.

   * *Problem:*

     During engine compilation, messages such as the following
     appear: `tasks.c:102:PTHREAD_CANCEL_ASYNCHRONOUS undeclared
     (first use of this function)'.

     *Possible reason and solution:*

     Your (Linux?) system does not have (yet) the Posix threads
     library installed. You can upgrade to one which does have it, or
     download the library from

     `http://pauillac.inria.fr/~xleroy/linuxthreads/index.html'

     and install it, or disable the use of threads in Linux: for
     this, edit the `SETTINGS' file and specify `USE_THREADS=no',
     which will avoid linking against thread libraries (it will
     disable the use of thread-related primitives as well). Clean the
     engine with `make engclean' and restart compilation.

     If you have any alternative threads library available, you can
     tinker with `engine/threads.h' and the files under
     `makefile-sysdep' in order to get the task managing macros right
     for your system. Be sure to link the right library. If you
     succeed, we (<ciao@clip.dia.fi.upm.es>) will be happy of knowing
     about what you have done.

   * *Problem:*

     `-lpthread: library not found' (or similar)

     *Possible reason and solution:*

     Your (Linux?) system seems to have Posix threads installed, but
     there is no threads library in the system. In newer releases
     (e.g., RedHat 5.0), the Posix threads system calls have been
     included in `glibc.so', so specifying `-lpthread' in
     `makefile-sysdep/mkf-LINUX' is not needed; remove it. `make
     engclean' and restart installation.

     Alternatively, you may have made a custom installation of Posix
     threads in a non-standard location: be sure to include the flag
     `-L/this/is/where/the/posix/libraries/are' *before* `-lpthread',
     and to update `/etc/ld.so.conf' (see `man ldconfig').

   * *Problem:*

     `Segmentation Violation' (when starting the first executable)

     *Possible reason and solution:*

     This has been observed with certain older versions of `gcc'
     which generated erroneous code under full optimization. The best
     solution is to upgrade to a newer version of `gcc'.
     Alternatively, lowering the level of optimization (by editing the
     `SETTINGS' file in the main directory of the distribution)
     normally solves the problem, at the cost of reduced execution
     speed.

   * *Problem:* `ciaoc:
     /home/clip/lib/ciao/ciao-X.Y/engine/ciaoengine: not found'

     *Possible reason and solution:*

        * The system was not fully installed and the variable
          `CIAOENGINE' was not set.

        * The system was installed, the variable `CIAOENGINE' is set,
          but it is does not point to a valid ciaoengine.


     See the file `LIBROOT/ciao/DOTcshrc' for user settings for
     environment variables.

   * *Problem:*

     `ERROR: File library(compiler) not found - aborting...' (or any
     other library is not found)

     *Possible reason and solution:*

        * The system was not installed and the variable `CIAOLIB' was
          not set.

        * The system is installed and the variable `CIAOLIB' is wrong.


     See the file `LIBROOT/ciao/DOTcshrc' for user settings for
     environment variables.

   * *Problem:*

     `ERROR: File <some_directory>/<some_file>.itf not found -
     aborting...'

     *Possible reason and solution:*

     Can appear when compiling `.pl' files. The file to compile
     (<some_file>.pl) is not in the directory <some_directory>. You
     gave a wrong file name or you are in the wrong directory.

   * *Problem:*

     `*ERROR*: /(write_option,1) is not a regular type' (and similar
     ones)

     *Possible reason and solution:*

     This is not a problem, but rather the type checker catching some
     minor inconsistencies which may appear while compiling the
     libraries. Bug us to remove it, but ignore it for now.

   * *Problem:*

     `WARNING: Predicate <some_predicate>/<N> undefined in module
     <some_module>'

     *Possible reason and solution:*

     It can appear when the compiler is compiling Ciao library
     modules. If so, ignore it (we will fix it). If it appears when
     compiling user programs or modules, you may want to check your
     program for those undefined predicates.

   * *Problem:*

     `gmake[1]: execve:
     /home/clip/mcarro/ciao-0.7p2/etc/collect_modules: No such file
     or directory'

     *Possible reason and solution:*

     Check if collect_modules is in $(SRC)/etc and is executable. If
     it is not here, your distribution is incorrect: please let us
     know.

   * *Problem:*

     `make: Fatal error in reader: SHARED, line 12: Unexpected end of
     line seen'

     *Possible reason and solution:*

     You are using standard Un*x make, not GNU's make implementation
     (gmake).

   * *Problem:*

     `WARNING's or `ERROR's while compiling the Ciao libraries during
     installation.

     *Possible reason and solution:*

     It is possible that you will see some such errors while
     compiling the Ciao libraries during installation. This is
     specially the case if you are installing a Beta or Alpha release
     of Ciao. These releases (which have "odd" version numbers such
     as 1.5 or 2.1) are typically snapshots of the development
     directories, on which many developers are working
     simultaneously, which may include libraries which have typically
     not been tested yet as much as the "official" distributions
     (those with "even" version numbers such as 1.6 or 2.8). Thus,
     minor warnings may not have been eliminated yet or even errors
     can sneak in. These warnings and errors should not affect the
     overall operation of the system (e.g., if you do not use the
     affected library).



File: ciao.info,  Node: Installing Ciao from a Win32 binary distribution,  Next: Beyond installation,  Prev: Installing Ciao from the source distribution,  Up: Top

Installing Ciao from a Win32 binary distribution
************************************************

   *Author(s):* Daniel Cabeza, Manuel Carro, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.5#92 (2000/3/28, 17:41:25 CEST)

   This describes the installation of Ciao after downloading the
Windows _binary_ (i.e., _precompiled_) distribution. It includes the
installation of libraries and manuals and applies to Windows NT/95/98
systems. This is the simplest Windows installation, since it requires
no compilation and is highly recommended. However, it is also
possible to compile Ciao from the source distribution on these
systems (please refer to *Note Installing Ciao from the source
distribution:: for details).

   If you find any problems during installation, please refer to
*Note Troubleshooting (nasty messages and nifty workarounds)::.  See
also *Note Downloading new versions:: and *Note Reporting bugs::.

* Menu:

* Win32 binary installation summary::
* Checking for correct installation on Win32::
* Compiling the miscellaneous utilities under Windows::
* Server installation under Windows::
* CGI execution under IIS::
* Uninstallation under Windows::


File: ciao.info,  Node: Win32 binary installation summary,  Next: Checking for correct installation on Win32,  Prev: Installing Ciao from a Win32 binary distribution,  Up: Installing Ciao from a Win32 binary distribution

Win32 binary installation summary
=================================

Please follow these steps (below we use the terms _folder_ and
_directory_ interchangeably):

  1. Download the precompiled distribution and unpack it into any
     suitable folder, such as, e.g., `C:\Program Files'.

     This will create there a folder whose name reflects the Ciao
     version. Due to limitations of Windows related to file
     associations, do not put Ciao too deep in the folder hierarchy.
     For unpacking you will need a recent version of a zip archive
     manager - there are many freely available such as `WinZip',
     `unzip', `pkunzip', etc. (see for example `www.winzip.com').
     Some users have reported some problems with version 6.2 of
     WinZip, but no problems with, e.g., version 7. With WinZip,
     simply click on "Extract" and select the extraction folder as
     indicated above.

  2. Stop any Ciao-related applications.

     If you have a previous version of Ciao installed, make sure you
     do not have any Ciao applications (including, e.g., a toplevel
     shell) running, or the extraction process may not be able to
     complete. You may also want to delete the entire folder of the
     previous installation to save space.

  3. Open the Ciao source directory created during extraction and run
     (e.g. by double-clicking on it) the `install'(`.bat') script.
     Answer "yes" to the dialog that pops up and type any character
     in the installation window to finish the process. You may need
     to reboot for the changes in the registry to take effect.

     This will update the windows registry (the file `ciao'(`.reg')
     lists the additions) and also create some `.bat' files which may
     be useful for running Ciao executables from the command line. It
     also creates initialization scripts for the `emacs' editor. The
     actions performed by the installation script are reported in the
     installation window.

  4. You may want to add a _windows shortcut_ in a convenient place,
     such as the desktop, to `ciaosh.cpx', the standard interactive
     toplevel shell. It is located inside the `shell' folder (e.g.,
     click on the file `ciaosh.cpx' with the right mouse button and
     select the appropriate option, `Send to->Desktop as shortcut').

  5. You may also want to add another shortcut to the file
     `ciao'(`.html') located inside `doc\reference\ciao_html' so that
     you can open the Ciao manual by simply double-clicking on this
     shortcut.

  6. Finally, if the (freely available) `emacs' editor/environment is
     not installed in your system, we _highly recommend_ that you
     also install it at this point. While it is easy to use Ciao with
     any editor of your choice, the Ciao distribution includes a very
     powerful _application development environment_ which is based on
     `emacs' and which enables, e.g., source-level debugging, syntax
     coloring, context-sensitive on-line help, etc. If you are not
     convinced, consider that many programmers inside Micros*ft use
     `emacs' for developing their programs.

     The emacs editor (in all its versions: Un*x, Windows, etc.) can
     be downloaded from, for example, `http://www.emacs.org/', and
     also from the many GNU mirror sites worldwide (See
     `http://www.gnu.org/' for a list), in the `gnu/emacs' and
     `gnu/windows/emacs' directories. You can find answers to
     frequently asked questions (FAQ) about `emacs' in general at
     `http://www.gnu.org/software/emacs/emacs-faq.text' and about the
     Windows version at
     `http://www.gnu.org/software/emacs/windows/ntemacs.html'
     (despite the `ntemacs' name it runs fine also as is on Win9X and
     Win2000 machines).

     You need to tell `emacs' how to load the Ciao mode automatically
     when editing and how to access the on-line documentation:

        * Start `emacs' (double click on the icon or from the `Start'
          menu). Open (menu `Files->Open File' or simply <^X><^F>)
          the file `ForEmacs.txt' that the installation script has
          created in directory where you installed the Ciao
          distribution.

        * Copy the lines in the file (select with the mouse and then
          menu `Edit->Copy'). Open/Create using `emacs' (menu
          `Files->Open File' or simply <^X><^F>) the file `~/.emacs'
          (or, if this fails, `c:/.emacs').

        * Paste the two lines (menu `Edit->Paste' or simply <^Y>)
          into the file and save (menu `Files->Save Buffer' or simply
          <^X><^S>).

        * Exit `emacs' and start it again.


     `emacs' should not report any errors (at least related to Ciao)
     on startup. At this point the `emacs' checks in the following
     section should work.



File: ciao.info,  Node: Checking for correct installation on Win32,  Next: Compiling the miscellaneous utilities under Windows,  Prev: Win32 binary installation summary,  Up: Installing Ciao from a Win32 binary distribution

Checking for correct installation on Win32
==========================================

   After the actions and registry changes performed by the
installation procedure, you should check that the following should
work correctly:

   * Ciao-related file types (`.pl' source files, `.cpx' executables,
     `.itf,.po,.asr' interface files, `.pls' scripts, etc.) should
     have specific icons associated with them (you can look at the
     files in the folders in the Ciao distribution to check).

   * Double-clicking on the shortcut to `ciaosh'(`.cpx') on the
     desktop should start the typical Prolog top-level shell in a
     window. If this shortcut has not been created on the desktop,
     then double-clicking on the `ciaosh'(`.cpx') icon inside the
     `shell' folder within the Ciao source folder should have the
     same effect.

   * In the top-level shell, Prolog library modules should load
     correctly. Type for example `use_module(library(dec10_io)).' at
     the Ciao top-level prompt -you should get back a prompt with no
     errors reported.

   * To exit the top level shell, type `halt.' as usual, or <^D>.


Also, the following documentation-related actions should work:

   * Double-clicking on the shortcut to `ciao'(`.html') which appears
     on the desktop should show the Ciao manual in your default WWW
     browser. If this shortcut has not been created you can
     double-click on the `ciao'(`.html') file in the
     `doc\reference\ciao_html' folder inside the Ciao source folder.
     Make sure you configure your browser to use _style sheets_ for
     correct formatting of the manual (note, however, that some older
     versions of Explorer did not support style sheets well and will
     give better results turning them off).

   * The `doc\reference' folder contains the manual also in the other
     formats present in the distribution, such as `info' (very
     convenient for users of the `emacs' editor/program development
     system) and `postscript' or `pdf', which are specially useful
     for printing. See *Note Printing manuals (Win32):: for
     instructions.


Finally, if `emacs' is installed, after starting it (double-clicking
on the `emacs' icon or from the `Start' menu) the following should
work:

   * Typing <^H> <i> (or in the menus `Help->Manuals->Browse Manuals
     with Info') should open a list of manuals in info format in
     which the Ciao manual(s) should appear.

   * When opening a Prolog file, i.e., a file with `.pl' or `.pls'
     ending, using <^X><^F>`filename' (or using the menus) the code
     should appear highlighted according to syntax (e.g., comments in
     red), and `Ciao/Prolog' menus should appear in the menu bar on
     top of the `emacs' window.

   * Loading the file using the `Ciao/Prolog' menu (or typing <^C>
     <l>) should start in another emacs buffer the Ciao toplevel
     shell and load the file. You should now be able to switch the
     the toplevel shell and make queries from within `emacs'.


*Note:* when using `emacs' it is _very convenient_ to swap the
locations of the (normally not very useful) <Caps Lock> key and the
(very useful in `emacs') <Ctrl> key on the keyboard. How to do this
is explained in the `emacs' frequently asked questions FAQs (see the
`emacs' download instructions for their location).

   If you find that everything works but `emacs' cannot start the
Ciao toplevel you may want to check if you can open a normal Windows
shell within `emacs' (just do <M-x> `shell'). If you cannot, it is
possible that you are using some anti-virus software which is causing
problems. See
<http://www.gnu.org/software/emacs/windows/faq3.html#anti-virus for
a> workaround.

   In some Windows versions it is possible that you had to change the
_first_ backslashes in the DOTemacs.el file in the Ciao Directory.
E.g., assuming you have installed in drive `c:', instances of `c:\'
need to be changed to `c:/'. For example:
`c:\prolog/ciao-1.7p30Win32/shell/ciaosh.bat' should be changed to
`c:/prolog/ciao-1.7p30Win32/shell/ciaosh.bat'.


File: ciao.info,  Node: Compiling the miscellaneous utilities under Windows,  Next: Server installation under Windows,  Prev: Checking for correct installation on Win32,  Up: Installing Ciao from a Win32 binary distribution

Compiling the miscellaneous utilities under Windows
===================================================

   The `etc' folder contains a number of utilities, documented in the
manual in _PART V - Miscellaneous Standalone Utilities_. In the Win32
distribution these utilities are not compiled by the installation
process. You can create the executable for each of them when needed
by compiling the corresponding `.pl' file.


File: ciao.info,  Node: Server installation under Windows,  Next: CGI execution under IIS,  Prev: Compiling the miscellaneous utilities under Windows,  Up: Installing Ciao from a Win32 binary distribution

Server installation under Windows
=================================

   If you would like to install Ciao on a server machine, used by
several clients, the following steps are recommended:

   * Follow the standard installation procedure on the server. When
     selecting the folder in which Ciao is installed make sure you
     select a folder that is visible by the client machines. Also
     make sure that the functionality specified in the previous
     sections is now available on the server.

   * Perform a _client installation_ on each client, by running
     (e.g., double-click on it) the `client.bat' script. This should
     update the registry of each client. At this point all the
     functionality should also be available on the clients.



File: ciao.info,  Node: CGI execution under IIS,  Next: Uninstallation under Windows,  Prev: Server installation under Windows,  Up: Installing Ciao from a Win32 binary distribution

CGI execution under IIS
=======================

   The standard installation procedure updates the windows registry
so that Ciao executables (ending in `.cpx') are directly executable
as CGIs under Microsoft's IIS. In the event you re-install IIS, you
probably would lose the entries in the registry which allows this. In
that case, processing the file `ciao.reg' produced during the
installation (or simply reinstalling Ciao) will add again those
entries.


File: ciao.info,  Node: Uninstallation under Windows,  Prev: CGI execution under IIS,  Up: Installing Ciao from a Win32 binary distribution

Uninstallation under Windows
============================

   To uninstall Ciao under Windows, simply delete the directory in
which you put the Ciao distribution. If you also want to delete the
registry entries created by the Ciao installation (not strictly
needed) this must currently be done by hand. The installation leaves
a list of these entries in the file `ciao.reg' to aid in this task.
Also, all the register entries contain the word _ciao_. Thus, to
delete all Ciao entries, run the application `regedit' (for example,
by selecting `Run' from the Windows `Start' menu), search (<^F>) for
_ciao_ in all registry entries (i.e., select all of `Keys', `Values',
and `Data' in the `Edit->Find' dialog), and delete each matching key
(click on the left window to find the matching key for each entry
found).


File: ciao.info,  Node: Beyond installation,  Next: References,  Prev: Installing Ciao from a Win32 binary distribution,  Up: Top

Beyond installation
*******************

   *Author(s):* Manuel Carro, Daniel Cabeza, Manuel Hermenegildo.

   *Version:* 1.8#1 (2002/5/27, 19:57:48 CEST)

   *Version of last change:* 1.7#55 (2001/1/26, 17:36:30 CET)

* Menu:

* Architecture-specific notes and limitations::
* Keeping up to date with the Ciao users mailing list::
* Downloading new versions::
* Reporting bugs::


File: ciao.info,  Node: Architecture-specific notes and limitations,  Next: Keeping up to date with the Ciao users mailing list,  Prev: Beyond installation,  Up: Beyond installation

Architecture-specific notes and limitations
===========================================

   Ciao makes use of advanced characteristics of modern architectures
and operating systems such as multithreading, shared memory, sockets,
locks, dynamic load libraries, etc., some of which are sometimes not
present in a given system and others may be implemented in very
different ways across the different systems. As a result, currently
not all Ciao features are available in all supported operating
systems. Sometimes this is because not all the required features are
present in all the OS flavors supported and sometimes because we
simply have not had the time to port them yet.

   The current state of matters is as follows:

Mac OS X (Darwin):
     multithreading, shared DB access, and locking working.

LINUX:
     multithreading, shared DB access, and locking working.

Solaris:
     multithreading, shared DB access, and locking working.

IRIX:
     multithreading, shared DB access, and locking working.

SunOS 4:
     multithreading, shared DB access, and locking NOT working.

Win 95/98/NT/2000:
     multithreading, shared DB access, and locking working. Dynamic
     linking of object code (C) libraries NOT working.

   The features that do not work are disabled at compile time.


File: ciao.info,  Node: Keeping up to date with the Ciao users mailing list,  Next: Downloading new versions,  Prev: Architecture-specific notes and limitations,  Up: Beyond installation

Keeping up to date with the Ciao users mailing list
===================================================

   We recommend that you join the Ciao _users mailing list_
(`ciao-users@clip.dia.fi.upm.es'), in order to receive information on
new versions and solutions to problems. Simply send a message to
<ciao-users-request@clip.dia.fi.upm.es>, containing in the body only
the word:

   `subscribe'

alone in one line. Messages in the list are strictly limited to
issues directly related to Ciao Prolog and your email address will of
course be kept strictly confidential. You mail also want to subscribe
to the `comp.lang.prolog' newsgroup.

   There is additional info available on the Ciao system, other CLIP
group software, publications on the technology underlying these
systems, etc. in the CLIP group's WWW site
`http://clip.dia.fi.upm.es'.


File: ciao.info,  Node: Downloading new versions,  Next: Reporting bugs,  Prev: Keeping up to date with the Ciao users mailing list,  Up: Beyond installation

Downloading new versions
========================

   Ciao and its related libraries and utilities are under constant
improvement, so you should make sure that you have the latest
versions of the different components, which can be dowloaded from:

   `http://clip.dia.fi.upm.es/Software'


File: ciao.info,  Node: Reporting bugs,  Prev: Downloading new versions,  Up: Beyond installation

Reporting bugs
==============

   If you still have problems after downloading the latest version
and reading the installation instructions you can send a message to
<ciao-bug@clip.dia.fi.upm.es>. Please be as informative as possible
in your messages, so that we can reproduce the bug.

   * For _installation problems_ we typically need to have the
     version and patch number of the Ciao package (e.g., the name of
     the file downloaded), the output produced by the installation
     process (you can capture it by redirecting the output into a
     file or cutting and pasting with the mouse), and the exact
     version of the Operating System you are using (as well as the C
     compiler, if you took a source distribution).

   * For _problems during use_ we also need the Ciao and OS versions
     and a small example of code which we can run to reproduce the
     bug.



File: ciao.info,  Node: References,  Next: Library/Module Definition Index,  Prev: Beyond installation,  Up: Top

References
**********

*[AAF91]*
     J. Almgren, S. Andersson, L. Flood, C. Frisk, H. Nilsson, and J.
     Sundberg.
     _Sicstus Prolog Library Manual_.
     Po Box 1263, S-16313 Spanga, Sweden, October 1991.

*[AKNL86]*
     Hassan Ait-Kaci, Roger Nasr, and Pat Lincoln.
     E An Overview.
     Technical Report AI-420-86-P, Microelectronics and Computer
     Technology   Corporation, 9430 Research Boulevard, Austin, TX
     78759, December 1986.

*[AKPS92]*
     H. A\"\it-Kaci, A. Podelski, and G. Smolka.
     A feature-based constraint system for logic programming with
     entailment.
     In _Proc. Fifth Generation Computer Systems 1992_, pages
     1012-1021,   1992.

*[Apt97]*
     K. Apt, editor.
     _From Logic Programming to Prolog_.
     Prentice-Hall, Hemel Hempstead, Hertfordshire, England, 1997.

*[BA82]*
     M. Ben-Ari.
     _Principles of Concurrent Programming_.
     Prentice Hall International, 1982.

*[BBP81]*
     D.L. Bowen, L. Byrd, L.M. Pereira, F.C.N. Pereira, and D.H.D.
     Warren.
     Decsystem-10 prolog user's manual.
     Technical report, Department of Artificial Intelligence,
     University of   Edinburgh, October 1981.

*[BCC97]*
     F. Bueno, D. Cabeza, M. Carro, M. Hermenegildo, P.
     L\'opez-Garc\'\ia, and   G. Puebla.
     The Ciao Prolog System. Reference Manual.
     The Ciao System Documentation Series-TR CLIP3/97.1, School of
     Computer   Science, Technical University of Madrid (UPM), August
     1997.
     System and on-line version of the manual available at
     \htmladdnormallink\tt http://clip.dia.fi.upm.es/Software/Ciao/
     http://clip.dia.fi.upm.es/Software/Ciao/.

*[BdlBH99]*
     F. Bueno, M.~Garc\'\ia de~la Banda, and M. Hermenegildo.
     Effectiveness of Abstract Interpretation in Automatic
     Parallelization: A Case Study in Logic Programming.
     _ACM Transactions on Programming Languages and Systems_,
     21(2):189-238, March 1999.

*[BLGPH99]*
     F. Bueno, P. L\'opez-Garc\'\ia, G. Puebla, and M. Hermenegildo.
     The Ciao Prolog Preprocessor.
     Technical Report CLIP8/95.0.7.20, Technical University of Madrid
     (UPM),   Facultad de Inform\'atica, 28660 Boadilla del Monte,
     Madrid, Spain, November   1999.

*[Bue95]*
     F. Bueno.
     The CIAO Multiparadigm Compiler: A User's Manual.
     Technical Report CLIP8/95.0, Facultad de Inform\'atica, UPM, June
      1995.

*[Byr80]*
     L. Byrd.
     Understanding the Control Flow of Prolog Programs.
     In S.-A. T\"arnlund, editor, _Workshop on Logic Programming_,
     Debrecen, 1980.

*[Car87]*
     M. Carlsson.
     Freeze, Indexing, and Other Implementation Issues in the Wam.
     In _Fourth International Conference on Logic Programming_, pages
      40-58. University of Melbourne, MIT Press, May 1987.

*[Car88]*
     M. Carlsson.
     _Sicstus Prolog User's Manual_.
     Po Box 1263, S-16313 Spanga, Sweden, February 1988.

*[CCG98]*
     I. Caballero, D. Cabeza, S. Genaim, J.M. Gomez, and M.
     Hermenegildo.
     persdb\_sql: SQL Persistent Database Interface.
     Technical Report D3.1.M2-A2 CLIP10/98.0, RADIOWEB Project,
     December   1998.

*[CGH93]*
     M. Carro, L. G\'omez, and M. Hermenegildo.
     Some Paradigms for Visualizing Parallel Execution of Logic
     Programs.
     In _1993 International Conference on Logic Programming_, pages
     184-201. MIT Press, June 1993.

*[CH95]*
     D. Cabeza and M. Hermenegildo.
     Distributed Concurrent Constraint Execution in the CIAO System.
     In _Proc. of the 1995 COMPULOG-NET Workshop on Parallelism and
     Implementation Technologies_, Utrecht, NL, September 1995. U.
     Utrecht / T.U.    Madrid.
     Available from \htmladdnormallink\tt
     http://www.clip.dia.fi.upm.es/   http://www.clip.dia.fi.upm.es/.

*[CH97]*
     D. Cabeza and M. Hermenegildo.
     WWW Programming using Computational Logic Systems (and the
     PiLLoW/Ciao Library).
     In _Proceedings of the Workshop on Logic Programming and the WWW
     at   WWW6_, San Francisco, CA, April 1997.

*[CH99]*
     D. Cabeza and M. Hermenegildo.
     The Ciao Modular Compiler and Its Generic Program Processing
     Library.
     In _ICLP'99 WS on Parallelism and Implementation of (C)LP
     Systems_,   pages 147-164. N.M. State U., December 1999.

*[CH00a]*
     D. Cabeza and M. Hermenegildo.
     A New Module System for Prolog.
     In _International Conference on Computational Logic, CL2000_,
     number   1861 in LNAI, pages 131-148. Springer-Verlag, July 2000.

*[CH00b]*
     D. Cabeza and M. Hermenegildo.
     The Ciao Modular, Standalone Compiler and Its Generic   Program
     Processing Library.
     In _Special Issue on Parallelism and Implementation of (C)LP
     Systems_,   volume 30 of _Electronic Notes in Theoretical
     Computer Science_.    Elsevier - North Holland, March 2000.

*[CH00c]*
     M. Carro and M. Hermenegildo.
     Tools for Constraint Visualization: The VIFID/TRIFID Tool.
     In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
     _Analysis and Visualization Tools for Constraint Programming_,
     number 1870 in LNCS, pages 253-272. Springer-Verlag, September
     2000.

*[CH00d]*
     M. Carro and M. Hermenegildo.
     Tools for Search Tree Visualization: The APT Tool.
     In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
     _Analysis and Visualization Tools for Constraint Programming_,
     number 1870 in LNCS, pages 237-252. Springer-Verlag, September
     2000.

*[CHGT98]*
     D. Cabeza, M. Hermenegildo, S. Genaim, and C. Taboch.
     Design of a Generic, Homogeneous Interface to Relational
     Databases.
     Technical Report D3.1.M1-A1, CLIP7/98.0, RADIOWEB Project,
     September   1998.

*[CHV96a]*
     D. Cabeza, M. Hermenegildo, and S. Varma.
     The PiLLoW/Ciao Library for INTERNET/WWW Programming using
     Computational Logic Systems.
     In _Proceedings of the 1st Workshop on Logic Programming Tools
     for   INTERNET Applications_, pages 72-90, JICSLP'96, Bonn,
     September 1996.

*[CHV96b]*
     D. Cabeza, M. Hermenegildo, and S. Varma.
     The \sf P\em i\sf LL\em o\sf W/Ciao Library for   INTERNET/WWW
     Programming using Computational Logic Systems.
     In _Proceedings of the 1st Workshop on Logic Programming Tools
     for   INTERNET Applications_, JICSLP'96, Bonn, September 1996.
     Available from \htmladdnormallink\tt
     http://clement.info.umoncton.ca/\~lpnet
     http://clement.info.umoncton.ca/\~lpnet.

*[CLI95]*
     The CLIP Group.
     CIAO Compiler: Distributed Execution and Low Level Support
     Subsystem.
     Public Software, ACCLAIM Deliverable D4.3/2-A3, Facultad de
     Inform\'atica, UPM, June 1995.

*[CM81]*
     W.F. Clocksin and C.S. Mellish.
     _Programming in Prolog_.
     Springer-Verlag, 1981.

*[Col78]*
     A. Colmerauer.
     Metamorphosis grammars.
     In _Natural language communication with computers_, pages
     133-189.    Springer LNCS 63, 1978.

*[Col82]*
     A. Colmerauer et al.
     _Prolog II: Reference Manual and Theoretical Model_.
     Groupe D'intelligence Artificielle, Facult\'e Des Sciences De
     Luminy,   Marseille, 1982.

*[DEDC96]*
     P. Deransart, A. Ed-Dbali, and L. Cervoni.
     _Prolog: The Standard_.
     Springer-Verlag, 1996.

*[Dij65]*
     E.W. Dijkstra.
     Co-operating sequential processes.
     In F. Genuys, editor, _Programming Languages_. Academic Press,
     London,   1965.

*[DL93]*
     S.K. Debray and N.W. Lin.
     Cost analysis of logic programs.
     _ACM Transactions on Programming Languages and Systems_,
     15(5):826-875, November 1993.

*[DLGH97]*
     S.K. Debray, P. L\'opez-Garc\'\ia, and M. Hermenegildo.
     Non-Failure Analysis for Logic Programs.
     In _1997 International Conference on Logic Programming_, pages
     48-62,   Cambridge, MA, June 1997. MIT Press, Cambridge, MA.

*[DLGHL97]*
     S.K. Debray, P. L\'opez-Garc\'\ia, M. Hermenegildo, and N.-W.
     Lin.
     Lower Bound Cost Estimation for Logic Programs.
     In _1997 International Logic Programming Symposium_, pages
     291-305.    MIT Press, Cambridge, MA, October 1997.

*[GCH98]*
     J.M. Gomez, D. Cabeza, and M. Hermenegildo.
     WebDB: A Database WWW Interface.
     Technical Report D3.1.M2-A3 CLIP11/98.0, RADIOWEB Project,
     December   1998.

*[GdW94]*
     J.P. Gallagher and D.A. de Waal.
     Fast and precise regular approximations of logic programs.
     In Pascal Van~Hentenryck, editor, _Proc.~of the 11th
     International   Conference on Logic Programming_, pages 599-613.
     MIT Press, 1994.

*[HBC96]*
     M. Hermenegildo, F. Bueno, D. Cabeza, M. Carro, M.~Garc\'\ia
     de~la Banda, P.    L\'opez-Garc\'\ia, and G. Puebla.
     The CIAO Multi-Dialect Compiler and System: A Demo and   Status
     Report.
     In _Proceedings of the JICSLP'96 Workshop on Parallelism and
     Implementation Technology_. Computer Science Department,
     Technical University   of Madrid, September 1996.
     Available from \htmladdnormallink\tt
     http://www.clip.dia.fi.upm.es/Projects/COMPULOG/meeting96/papers/PS/clip.ps.%
     gz
     http://www.clip.dia.fi.upm.es/Projects/COMPULOG/meeting96/papers/PS/clip.ps%
     .gz.

*[HBC99]*
     M. Hermenegildo, F. Bueno, D. Cabeza, M. Carro, M.~Garc\'\ia de
     la Banda,   P. L\'opez-Garc\'\ia, and G. Puebla.
     The CIAO Multi-Dialect Compiler and System: An   Experimentation
     Workbench for Future (C)LP Systems.
     In _Parallelism and Implementation of Logic and Constraint
     Logic Programming_, pages 65-85. Nova Science, Commack, NY, USA,
     April   1999.

*[HBdlBP95]*
     M. Hermenegildo, F. Bueno, M.~Garc\'\ia de~la Banda, and G.
     Puebla.
     The CIAO Multi-Dialect Compiler and System: An   Experimentation
     Workbench for Future (C)LP Systems.
     In _Proceedings of the ILPS'95 Workshop on Visions for the
     Future of   Logic Programming_, Portland, Oregon, USA, December
     1995.
     Available from \htmladdnormallink\tt
     http://www.clip.dia.fi.upm.es/   http://www.clip.dia.fi.upm.es/.

*[HBPLG99]*
     M. Hermenegildo, F. Bueno, G. Puebla, and P. L\'opez-Garc\'\ia.
     Program Analysis, Debugging and Optimization Using the Ciao
     System Preprocessor.
     In _1999 International Conference on Logic Programming_, pages
     52-66,   Cambridge, MA, November 1999. MIT Press.

*[HC93]*
     M. Hermenegildo and The CLIP Group.
     Towards CIAO-Prolog - A Parallel Concurrent Constraint   System.
     In _Proc. of the Compulog Net Area Workshop on Parallelism and
     Implementation Technologies_. FIM/UPM, Madrid, Spain, June 1993.

*[HC94]*
     M. Hermenegildo and The CLIP Group.
     Some Methodological Issues in the Design of CIAO - A Generic,
     Parallel, Concurrent Constraint System.
     In _Principles and Practice of Constraint Programming_, number
     874 in   LNCS, pages 123-133. Springer-Verlag, May 1994.

*[HC97]*
     M. Hermenegildo and The CLIP Group.
     An Automatic Documentation Generator for (C)LP - Reference
     Manual.
     The Ciao System Documentation Series-TR CLIP5/97.3, Facultad de
     Inform\'atica, UPM, August 1997.
     Online at \tt http://clip.dia.fi.upm.es/Software/Ciao/.

*[HCC95]*
     M. Hermenegildo, D. Cabeza, and M. Carro.
     Using Attributed Variables in the Implementation of Concurrent
     and   Parallel Logic Programming Systems.
     In _Proc. of the Twelfth International Conference on Logic
     Programming_, pages 631-645. MIT Press, June 1995.

*[Her86]*
     M. Hermenegildo.
     An Abstract Machine for Restricted AND-parallel Execution of
     Logic Programs.
     In _Third International Conference on Logic Programming_, number
     225 in   Lecture Notes in Computer Science, pages 25-40.
     Imperial College,   Springer-Verlag, July 1986.

*[Her96]*
     M. Hermenegildo.
     Writing "Shell Scripts" in SICStus Prolog, April 1996.
     Posting in \tt comp.lang.prolog. Available from
     \htmladdnormallink\tt   http://www.clip.dia.fi.upm.es/
     http://www.clip.dia.fi.upm.es/.

*[Her99]*
     M. Hermenegildo.
     A Documentation Generator for Logic Programming Systems.
     Technical Report CLIP10/99.0, Facultad de Inform\'atica, UPM,
     September 1999.

*[Her00]*
     M. Hermenegildo.
     A Documentation Generator for (C)LP Systems.
     In _International Conference on Computational Logic, CL2000_,
     number   1861 in LNAI, pages 1345-1361. Springer-Verlag, July
     2000.

*[HG90]*
     M. Hermenegildo and K. Greene.
     \&-Prolog and its Performance: Exploiting Independent
     And-Parallelism.
     In _1990 International Conference on Logic Programming_, pages
     253-268. MIT Press, June 1990.

*[HG91]*
     M. Hermenegildo and K. Greene.
     The \&-Prolog System: Exploiting Independent And-Parallelism.
     _New Generation Computing_, 9(3,4):233-257, 1991.

*[Hog84]*
     C.~J. Hogger.
     _Introduction to Logic Programming_.
     Academic Press, London, 1984.

*[Hol90]*
     C. Holzbaur.
     _Specification of Constraint Based Inference Mechanisms
     through Extended Unification_.
     PhD thesis, University of Vienna, 1990.

*[Hol92]*
     C. Holzbaur.
     Metastructures vs. Attributed Variables in the Context of
     Extensible Unification.
     In _1992 International Symposium on Programming Language
     Implementation   and Logic Programming_, pages 260-268. LNCS631,
     Springer Verlag, August   1992.

*[Hol94]*
     C. Holzbaur.
     _SICStus 2.1/DMCAI Clp 2.1.1 User's Manual_.
     University of Vienna, 1994.

*[JL88]*
     D. Jacobs and A. Langen.
     Compilation of Logic Programs for Restricted And-Parallelism.
     In _European Symposium on Programming_, pages 284-297, 1988.

*[Knu84]*
     D. Knuth.
     Literate programming.
     _Computer Journal_, 27:97-111, 1984.

*[Kor85]*
     R. Korf.
     Depth-first iterative deepening: an optimal admissible tree
     search.
     _Artificial Intelligence_, (27), 1985.

*[LGHD96]*
     P. L\'opez-Garc\'\ia, M. Hermenegildo, and S.K. Debray.
     A Methodology for Granularity Based Control of Parallelism in
     Logic Programs.
     _Journal of Symbolic Computation, Special Issue on Parallel
     Symbolic   Computation_, 22:715-734, 1996.

*[MH89]*
     K. Muthukumar and M. Hermenegildo.
     Determination of Variable Dependence Information at Compile-Time
      Through Abstract Interpretation.
     In _1989 North American Conference on Logic Programming_, pages
     166-189. MIT Press, October 1989.

*[Nai85]*
     L.\ Naish.
     _The MU-Prolog 3.2 Reference Manual_.
     TR 85/11, Dept. of Computer Science, U. of Melbourne, October
     1985.

*[Nai91]*
     L. Naish.
     Adding equations to NU-Prolog.
     In _Symp. on Progr. Language Impl. and Logic Progr (PLILP'91)_,
     LNCS   528, pages 15-26. Springer Verlag, 1991.

*[Par97]*
     The RADIOWEB~Project Partners.
     RADIOWEB EP25562: Automatic Generation of Web Sites for the
     Radio Brodcasting Industry - Project Description / Technical
     Annex.
     Technical Report, RADIOWEB Project, July 1997.

*[PBH97]*
     G. Puebla, F. Bueno, and M. Hermenegildo.
     An Assertion Language for Debugging of Constraint Logic
     Programs.
     In _Proceedings of the ILPS'97 Workshop on Tools and
     Environments for   (Constraint) Logic Programming_, October 1997.
     Available from \htmladdnormallink\tt
     ftp://clip.dia.fi.upm.es/pub/papers/assert\_lang\_tr\_discipldeliv.ps.gz
     ftp://clip.dia.fi.upm.es/pub/papers/assert\_lang\_tr\_discipldeliv.ps.gz
     as   technical report CLIP2/97.1.

*[PBH00]*
     G. Puebla, F. Bueno, and M. Hermenegildo.
     An Assertion Language for Constraint Logic Programs.
     In P. Deransart, M. Hermenegildo, and J. Maluszynski, editors,
     _Analysis and Visualization Tools for Constraint Programming_,
     number 1870 in LNCS, pages 23-61. Springer-Verlag, September
     2000.

*[PH99]*
     G. Puebla and M. Hermenegildo.
     Some Issues in Analysis and Specialization of Modular
     Ciao-Prolog Programs.
     In _ICLP'99 Workshop on Optimization and Implementation of
     Declarative   Languages_, pages 45-61. U. of Southampton, U.K,
     November 1999.

*[PW80]*
     F.C.N. Pereira and D.H.D. Warren.
     Definite clause grammars for language analysis - a survey of the
     formalism   and a comparison with augmented transition networks.
     _Artificial Intelligence_, 13:231-278, 1980.

*[SS86]*
     L. Sterling and E. Shapiro.
     _The Art of Prolog_.
     MIT Press, 1986.

*[Swe95]*
     Swedish Institute of Computer Science, P.O. Box 1263, S-16313
     Spanga, Sweden.
     _Sicstus Prolog V3.0 User's Manual_, 1995.

*[War88]*
     D.H.D. Warren.
     The Andorra Model.
     Presented at Gigalips Project workshop. U. of Manchester, March
     1988.


File: ciao.info,  Node: Library/Module Definition Index,  Next: Predicate/Method Definition Index,  Prev: References,  Up: Top

Library/Module Definition Index
*******************************

* Menu:

* actmods:                               Active modules (high-level distributed execution).
* aggregates:                            All solutions predicates.
* andorra:                               Andorra execution.
* andprolog:                             Independent and-parallel execution.
* arc_class:                             arc_class (library).
* argnames:                              Terms with named arguments -records/feature terms.
* arithmetic:                            Arithmetic.
* assertions:                            The Ciao assertion package.
* assertions_props:                      Types and properties related to assertions.
* assrt_write:                           Pretty-printing assertions.
* atom2term:                             Atom to term conversion.
* atomic_basic:                          Basic predicates handling names of constants.
* attributes:                            Attributed variables.
* basic_props:                           Basic data types and properties.
* basiccontrol:                          Control constructs/predicates.
* basicmodes:                            Classical Prolog modes.
* bf:                                    Breadth-first execution.
* bltclass:                              Low level Interface between Prolog and blt.
* boundary:                              boundary (library).
* build_foreign_interface:               Foreign Language Interface Builder.
* button_class:                          button_class (library).
* canvas_class:                          canvas_class (library).
* chartlib:                              A Chart Library.
* chartlib_errhandle:                    chartlib_errhandle (library).
* checkbutton_class:                     checkbutton_class (library).
* ciaosh:                                The interactive top-level shell.
* class:                                 Declaring classes and interfaces.
* classic:                               Classic Prolog package.
* clpq:                                  Constraint programming over rationals.
* clpr:                                  Constraint programming over reals.
* color_pattern:                         Color and Pattern Library.
* compiler:                              compiler (library).
* conc_aggregates:                       All solutions concurrent predicates.
* concurrency:                           Low-level concurrency/multithreading primitives.
* counters:                              counters (library).
* ctrlcclean:                            ctrlcclean (library).
* data_facts:                            Fast/concurrent update of facts.
* davinci:                               Interface to daVinci.
* db_client_types:                       Types for the Low-level interface to SQL databases.
* dcg:                                   Definite clause grammars.
* dcg_expansion:                         Definite clause grammars (expansion).
* debugger:                              Predicates controlling the interactive debugger.
* dec10_io:                              DEC-10 Prolog file IO.
* det_hook_rt:                           Call on determinate.
* dict:                                  Dictionaries.
* dictionary:                            dictionary (library).
* dictionary_tree:                       dictionary_tree (library).
* dynamic:                               Dynamic predicates.
* entry_class:                           entry_class (library).
* errhandle:                             errhandle (library).
* error:                                 error (library).
* exceptions:                            Exception handling.
* expansion_tools:                       Code translation utilities.
* fastrw:                                Fast reading and writing of terms.
* field_type:                            field_type (library).
* field_value:                           field_value (library).
* field_value_check:                     field_value_check (library).
* file_locks:                            File locks.
* file_utils:                            File I/O utilities.
* filenames:                             File name manipulation.
* foreign_compilation:                   Utilities for on-demand compilation of foreign files.
* foreign_interface:                     Foreign Language Interface.
* foreign_interface_properties:          Foreign Language Interface Properties.
* format:                                Formatted output.
* freeze:                                Delaying predicates (freeze).
* functions:                             functions (library).
* fuzzy:                                 Fuzzy Prolog.
* genbar1:                               genbar1 (library).
* genbar2:                               genbar2 (library).
* genbar3:                               genbar3 (library).
* genbar4:                               genbar4 (library).
* generator:                             generator (library).
* generator_util:                        generator_util (library).
* gengraph1:                             gengraph1 (library).
* gengraph2:                             gengraph2 (library).
* genmultibar:                           genmultibar (library).
* global:                                global (library).
* graphs:                                Graphs.
* hiord_rt:                              Higher-order.
* hiordlib:                              Higher-order predicates.
* html:                                  HTML/XML/CGI programming.
* http:                                  HTTP conectivity.
* id:                                    Iterative-deepening execution.
* idlists:                               Identity lists.
* internal_types:                        internal_types (library).
* io:                                    io (library).
* io_aux:                                Message printing primitives.
* io_basic:                              Basic input/output.
* iso:                                   ISO-Prolog package.
* iso_byte_char:                         iso_byte_char (library).
* iso_incomplete:                        iso_incomplete (library).
* iso_misc:                              iso_misc (library).
* isomodes:                              ISO-Prolog modes.
* label_class:                           label_class (library).
* lgraphs:                               Labeled graph-processing utilities.
* libpaths:                              Customizing library paths and path aliases.
* librowser:                             The Ciao library browser.
* line_class:                            line_class (library).
* lists:                                 List processing.
* lookup:                                lookup (library).
* menu_class:                            menu_class (library).
* menu_entry_class:                      menu_entry_class (library).
* menubutton_class:                      menubutton_class (library).
* messages:                              Printing status and error messages.
* meta_props:                            Meta-properties.
* mycin:                                 Programming MYCIN rules.
* mysql_client:                          Low-level socket interface to SQL/ODBC databases.
* native_props:                          Properties which are native to analyzers.
* numlists:                              Lists of numbers.
* objects:                               Compile-time usage of objects.
* objects_rt:                            Run time usage of objects.
* odd:                                   Miscellaneous predicates.
* old_database:                          Quintus-like internal database.
* operators:                             Defining operators.
* oval_class:                            oval_class (library).
* parser:                                parser (library).
* parser_util:                           parser_util (library).
* patterns:                              Pattern (regular expression) matching.
* persdbrt:                              Persistent predicate database.
* persdbrt_mysql:                        SQL persistent database interface.
* pillow:                                The PiLLoW Web programming library.
* pillow_types:                          PiLLoW types.
* pl2sql:                                Prolog to SQL translator.
* poly_class:                            poly_class (library).
* possible:                              possible (library).
* pretty_print:                          A simple pretty-printer for Ciao programs.
* prolog_flags:                          Changing system behaviour and various flags.
* prolog_sys:                            Prolog system internal predicates.
* provrml:                               ProVRML - a Prolog interface for VRML.
* pure:                                  Pure Prolog package.
* queues:                                queues (library).
* radiobutton_class:                     radiobutton_class (library).
* random:                                Random numbers.
* read:                                  Term input.
* regtypes:                              Declaring regular types.
* remote:                                The Ciao Remote Services Package.
* rtchecks:                              Run-time checking of assertions.
* runtime_ops:                           Enabling operators at run-time.
* sets:                                  sets (library).
* shape_class:                           shape_class (library).
* sockets:                               The socket interface.
* sort:                                  Sorting lists.
* streams:                               Structured stream handling.
* streams_basic:                         Basic file/stream handling.
* strings:                               String processing.
* syntax_extensions:                     Extending the syntax.
* system:                                Operating system utilities.
* system_info:                           Gathering some basic internal info.
* table_widget1:                         table_widget1 (library).
* table_widget2:                         table_widget2 (library).
* table_widget3:                         table_widget3 (library).
* table_widget4:                         table_widget4 (library).
* tcltk:                                 The Tcl/Tk interface.
* tcltk_low_level:                       Low level interface library to Tcl/Tk.
* term_basic:                            Basic term manipulation.
* term_compare:                          Comparing terms.
* term_typing:                           Extra-logical properties for typing.
* terms:                                 Term manipulation utilities.
* terms_check:                           Term checking utilities.
* terms_vars:                            Term variables sets.
* test_format:                           test_format (library).
* text_class:                            text_class (library).
* tokeniser:                             tokeniser (library).
* ttyout:                                ttyout (library).
* ugraphs:                               Unweighted graph-processing utilities.
* vndict:                                Variable name dictionaries.
* wgraphs:                               wgraphs (library).
* when:                                  Delaying predicates (when).
* widget_class:                          widget_class (library).
* window_class:                          The Tcl/Tk Class Interface.
* write:                                 Term output.


File: ciao.info,  Node: Predicate/Method Definition Index,  Next: Property Definition Index,  Prev: Library/Module Definition Index,  Up: Top

Predicate/Method Definition Index
*********************************

* Menu:

* !!/0:                                  Documentation on internals (det_hook_rt).
* !/0:                                   Documentation on exports (basiccontrol).
* &/2:                                   Documentation on internals (andprolog).
* ,/2:                                   Documentation on exports (basiccontrol).
* ->/2:                                  Documentation on exports (basiccontrol).
* ./2:                                   Documentation on exports (ciaosh).
* :#/2:                                  Documentation on exports (fuzzy).
* :~/2:                                  Documentation on exports (fuzzy).
* ;/2:                                   Documentation on exports (basiccontrol).
* </2:                                   Documentation on exports (arithmetic).
* =../2:                                 Documentation on exports (term_basic).
* =:=/2:                                 Documentation on exports (arithmetic).
* =</2:                                  Documentation on exports (arithmetic).
* =>/4:                                  Documentation on exports (fuzzy).
* =\=/2:                                 Documentation on exports (arithmetic).
* >/2:                                   Documentation on exports (arithmetic).
* >=/2:                                  Documentation on exports (arithmetic).
* \+/1:                                  Documentation on exports (basiccontrol).
* \=/2:                                  Documentation on exports (iso_misc).
* ^/2:                                   Documentation on exports (aggregates).
* abolish/1:                             Documentation on exports (dynamic).
* abort/0:                               Documentation on exports (exceptions).
* absolute_file_name/2:                  Documentation on exports (streams_basic).
* absolute_file_name/7:                  Documentation on exports (streams_basic).
* action_widget/1:                       Documentation on exports (widget_class).
* action_widget/3:                       Documentation on exports (widget_class).
* active_agents/1:                       Documentation on internals (andprolog).
* add_after/4 <1>:                       Documentation on exports (idlists).
* add_after/4:                           Documentation on exports (lists).
* add_before/4 <1>:                      Documentation on exports (idlists).
* add_before/4:                          Documentation on exports (lists).
* add_edges/3:                           Documentation on exports (ugraphs).
* add_environment_whitespace/3:          Documentation on exports (parser_util).
* add_indentation/3:                     Documentation on exports (parser_util).
* add_vertices/3:                        Documentation on exports (ugraphs).
* aggregate_function/3:                  Documentation on internals (pl2sql).
* aggregate_functor/2:                   Documentation on internals (pl2sql).
* anchor/1:                              Documentation on exports (text_class).
* angle_start/1:                         Documentation on exports (arc_class).
* append/3:                              Documentation on exports (lists).
* apropos/1:                             Documentation on exports (librowser).
* arg/2:                                 Documentation on exports (terms).
* arg/3:                                 Documentation on exports (term_basic).
* arg_expander/6:                        Documentation on exports (expansion_tools).
* arithmetic_functor/2:                  Documentation on internals (pl2sql).
* arrowheads/1:                          Documentation on exports (line_class).
* ask/2:                                 Documentation on exports (terms_check).
* assert/1:                              Documentation on exports (dynamic).
* assert/2:                              Documentation on exports (dynamic).
* asserta/1:                             Documentation on exports (dynamic).
* asserta/2:                             Documentation on exports (dynamic).
* asserta_fact/1 <1>:                    Documentation on exports (persdbrt).
* asserta_fact/1:                        Documentation on exports (data_facts).
* asserta_fact/2:                        Documentation on exports (data_facts).
* assertz/1:                             Documentation on exports (dynamic).
* assertz/2:                             Documentation on exports (dynamic).
* assertz_fact/1 <1>:                    Documentation on exports (persdbrt).
* assertz_fact/1:                        Documentation on exports (data_facts).
* assertz_fact/2:                        Documentation on exports (data_facts).
* at_least_one/4:                        Documentation on exports (parser_util).
* at_least_one/5:                        Documentation on exports (parser_util).
* atom2term/2:                           Documentation on exports (atom2term).
* atom_chars/2:                          Documentation on exports (iso_byte_char).
* atom_codes/2:                          Documentation on exports (atomic_basic).
* atom_concat/2:                         Documentation on exports (terms).
* atom_concat/3:                         Documentation on exports (atomic_basic).
* atom_length/2:                         Documentation on exports (atomic_basic).
* atom_lock_state/2:                     Documentation on exports (concurrency).
* attach_attribute/2:                    Documentation on exports (attributes).
* attribute/4:                           Documentation on multifiles (pl2sql).
* background_color/1:                    Documentation on exports (widget_class).
* bagof/3:                               Documentation on exports (aggregates).
* barchart1/7:                           Documentation on exports (genbar1).
* barchart1/9:                           Documentation on exports (genbar1).
* barchart2/11:                          Documentation on exports (genbar2).
* barchart2/7:                           Documentation on exports (genbar2).
* barchart3/7:                           Documentation on exports (genbar3).
* barchart3/9:                           Documentation on exports (genbar3).
* barchart4/11:                          Documentation on exports (genbar4).
* barchart4/7:                           Documentation on exports (genbar4).
* basename/2:                            Documentation on exports (filenames).
* bg_color/1:                            Documentation on exports (shape_class).
* bind_socket/3:                         Documentation on exports (sockets).
* body_expander/6:                       Documentation on exports (expansion_tools).
* border_width/1:                        Documentation on exports (shape_class).
* borderwidth_value/1:                   Documentation on exports (widget_class).
* boundary_check/3:                      Documentation on exports (boundary).
* boundary_rotation_first/2:             Documentation on exports (boundary).
* boundary_rotation_last/2:              Documentation on exports (boundary).
* breakpt/6:                             Documentation on exports (debugger).
* browse/2:                              Documentation on exports (librowser).
* build_foreign_interface/1:             Documentation on exports (build_foreign_interface).
* build_foreign_interface_explicit_decls/2: Documentation on exports (build_foreign_interface).
* build_foreign_interface_object/1:      Documentation on exports (build_foreign_interface).
* C/3:                                   Documentation on exports (term_basic).
* call/1:                                Documentation on exports (basiccontrol).
* call/2:                                Documentation on exports (hiord_rt).
* call_in_module/2:                      Documentation on exports (debugger).
* callme/1:                              Documentation on multifiles (rtchecks).
* callme/2 <1>:                          Documentation on multifiles (messages).
* callme/2 <2>:                          Documentation on multifiles (rtchecks).
* callme/2:                              Documentation on multifiles (meta_props).
* canvas_class/0:                        Documentation on exports (canvas_class).
* canvas_class/1:                        Documentation on exports (canvas_class).
* case_insensitive_match/2:              Documentation on exports (patterns).
* catch/3:                               Documentation on exports (exceptions).
* cd/1:                                  Documentation on exports (system).
* center/2 <1>:                          Documentation on exports (oval_class).
* center/2:                              Documentation on exports (arc_class).
* char_code/2:                           Documentation on exports (iso_byte_char).
* character_count/2:                     Documentation on exports (streams_basic).
* chartlib_text_error_protect/1:         Documentation on exports (chartlib_errhandle).
* chartlib_visual_error_protect/1:       Documentation on exports (chartlib_errhandle).
* check/1:                               Documentation on exports (assertions).
* check_sublist/4:                       Documentation on exports (test_format).
* children_nodes/1:                      Documentation on exports (boundary).
* chmod/2:                               Documentation on exports (system).
* chmod/3:                               Documentation on exports (system).
* ciaolibdir/1:                          Documentation on exports (system_info).
* clause/2:                              Documentation on exports (dynamic).
* clause/3:                              Documentation on exports (dynamic).
* clearerr/1:                            Documentation on exports (streams_basic).
* close/1:                               Documentation on exports (streams_basic).
* close/2:                               Documentation on exports (iso_incomplete).
* close_DEF/5:                           Documentation on exports (generator_util).
* close_EXTERNPROTO/6:                   Documentation on exports (generator_util).
* close_file/1:                          Documentation on exports (dec10_io).
* close_input/1:                         Documentation on exports (streams).
* close_node/5:                          Documentation on exports (generator_util).
* close_nodeGut/4:                       Documentation on exports (generator_util).
* close_output/1:                        Documentation on exports (streams).
* close_predicate/1:                     Documentation on exports (data_facts).
* close_PROTO/6:                         Documentation on exports (generator_util).
* close_Script/5:                        Documentation on exports (generator_util).
* code_class/2:                          Documentation on exports (io_basic).
* color/2:                               Documentation on exports (color_pattern).
* column_value/1:                        Documentation on exports (widget_class).
* columnspan_value/1:                    Documentation on exports (widget_class).
* combine_attributes/2 <1>:              Documentation on multifiles (when).
* combine_attributes/2 <2>:              Documentation on multifiles (freeze).
* combine_attributes/2:                  Documentation on multifiles (attributes).
* command_button/1:                      Documentation on exports (button_class).
* compare/3:                             Documentation on exports (term_compare).
* comparison/2:                          Documentation on internals (pl2sql).
* compile/1:                             Documentation on exports (ciaosh).
* compiler_and_opts/2:                   Documentation on exports (foreign_compilation).
* complete_dict/3:                       Documentation on exports (vndict).
* complete_vars_dict/3:                  Documentation on exports (vndict).
* compound/1:                            Documentation on exports (iso_misc).
* concurrent/1:                          Documentation on exports (concurrency).
* connect_to_socket/3:                   Documentation on exports (sockets).
* connect_to_socket_type/4:              Documentation on exports (sockets).
* constructor/0:                         Documentation on exports (class).
* consult/1:                             Documentation on exports (ciaosh).
* contains1/2:                           Documentation on exports (lists).
* contains_ro/2:                         Documentation on exports (lists).
* continue/3:                            Documentation on exports (possible).
* convert_atoms_to_string/2:             Documentation on exports (io).
* coord/2:                               Documentation on exports (text_class).
* coord/4 <1>:                           Documentation on exports (oval_class).
* coord/4:                               Documentation on exports (arc_class).
* copy_args/3:                           Documentation on exports (terms).
* copy_stdout/1:                         Documentation on exports (file_utils).
* copy_term/2:                           Documentation on exports (term_basic).
* core/1:                                Documentation on internals (tcltk_low_level).
* correct_commenting/4:                  Documentation on exports (parser_util).
* create_dict/2:                         Documentation on exports (vndict).
* create_dictionaries/1:                 Documentation on exports (dictionary_tree).
* create_directed_field/5:               Documentation on exports (parser_util).
* create_environment/4:                  Documentation on exports (parser_util).
* create_field/3:                        Documentation on exports (parser_util).
* create_field/4:                        Documentation on exports (parser_util).
* create_field/5:                        Documentation on exports (parser_util).
* create_node/3:                         Documentation on exports (parser_util).
* create_parse_structure/1:              Documentation on exports (parser_util).
* create_parse_structure/2:              Documentation on exports (parser_util).
* create_parse_structure/3:              Documentation on exports (parser_util).
* create_proto_element/3:                Documentation on exports (lookup).
* creation_bind/1:                       Documentation on exports (widget_class).
* creation_menu_name/1:                  Documentation on exports (menu_class).
* creation_options/1 <1>:                Documentation on exports (menu_class).
* creation_options/1:                    Documentation on exports (widget_class).
* creation_options_entry/1:              Documentation on exports (menu_class).
* creation_position/1:                   Documentation on exports (widget_class).
* creation_position_grid/1:              Documentation on exports (widget_class).
* ctrlc_clean/1:                         Documentation on exports (ctrlcclean).
* ctrlcclean/0:                          Documentation on exports (ctrlcclean).
* current_atom/1:                        Documentation on exports (prolog_sys).
* current_executable/1:                  Documentation on exports (system).
* current_fact/1:                        Documentation on exports (data_facts).
* current_fact/2:                        Documentation on exports (data_facts).
* current_fact_nb/1:                     Documentation on exports (data_facts).
* current_host/1:                        Documentation on exports (system).
* current_infixop/4:                     Documentation on exports (operators).
* current_input/1:                       Documentation on exports (streams_basic).
* current_key/2:                         Documentation on exports (old_database).
* current_module/1:                      Documentation on exports (system_info).
* current_op/3:                          Documentation on exports (operators).
* current_output/1:                      Documentation on exports (streams_basic).
* current_postfixop/3:                   Documentation on exports (operators).
* current_predicate/1:                   Documentation on exports (dynamic).
* current_predicate/2:                   Documentation on exports (dynamic).
* current_prefixop/3:                    Documentation on exports (operators).
* current_prolog_flag/2:                 Documentation on exports (prolog_flags).
* current_stream/3:                      Documentation on exports (streams_basic).
* cyg2win/3:                             Documentation on exports (system).
* data/1:                                Documentation on exports (dynamic).
* datime/1:                              Documentation on exports (system).
* datime/9:                              Documentation on exports (system).
* davinci/0:                             Documentation on exports (davinci).
* davinci_get/1:                         Documentation on exports (davinci).
* davinci_get_all/1:                     Documentation on exports (davinci).
* davinci_lgraph/1:                      Documentation on exports (davinci).
* davinci_put/1:                         Documentation on exports (davinci).
* davinci_quit/0:                        Documentation on exports (davinci).
* davinci_ugraph/1:                      Documentation on exports (davinci).
* db_query/4:                            Documentation on internals (persdbrt_mysql).
* db_query_one_tuple/4:                  Documentation on internals (persdbrt_mysql).
* dbassertz_fact/1:                      Documentation on exports (persdbrt_mysql).
* dbcall/2:                              Documentation on exports (persdbrt_mysql).
* dbcurrent_fact/1:                      Documentation on exports (persdbrt_mysql).
* dbfindall/4:                           Documentation on exports (persdbrt_mysql).
* dbretract_fact/1:                      Documentation on exports (persdbrt_mysql).
* dbretractall_fact/1:                   Documentation on exports (persdbrt_mysql).
* dcg_translation/2:                     Documentation on exports (dcg_expansion).
* debug/0:                               Documentation on exports (debugger).
* debug/1:                               Documentation on exports (io_aux).
* debug_goal/2:                          Documentation on exports (messages).
* debug_goal/3:                          Documentation on exports (messages).
* debug_message/1:                       Documentation on exports (messages).
* debug_message/2:                       Documentation on exports (messages).
* debug_module/1:                        Documentation on exports (debugger).
* debug_module_source/1:                 Documentation on exports (debugger).
* debugging/0:                           Documentation on exports (debugger).
* dec_indentation/2:                     Documentation on exports (parser_util).
* decompose_field/3:                     Documentation on exports (generator_util).
* define_flag/3 <1>:                     Documentation on multifiles (system).
* define_flag/3 <2>:                     Documentation on multifiles (write).
* define_flag/3 <3>:                     Documentation on multifiles (read).
* define_flag/3:                         Documentation on multifiles (prolog_flags).
* del_global/1:                          Documentation on exports (global).
* del_vertices/3:                        Documentation on exports (ugraphs).
* delete/1:                              Documentation on exports (tcltk_low_level).
* delete/3 <1>:                          Documentation on exports (idlists).
* delete/3:                              Documentation on exports (lists).
* delete_directory/1:                    Documentation on exports (system).
* delete_file/1:                         Documentation on exports (system).
* delete_on_ctrlc/2:                     Documentation on exports (ctrlcclean).
* derived_from/2:                        Documentation on exports (objects_rt).
* describe/1:                            Documentation on exports (librowser).
* destroy/1:                             Documentation on exports (objects_rt).
* destructor/0 <1>:                      Documentation on exports (canvas_class).
* destructor/0 <2>:                      Documentation on exports (window_class).
* destructor/0:                          Documentation on exports (class).
* det_try/3:                             Documentation on exports (det_hook_rt).
* detach_attribute/1:                    Documentation on exports (attributes).
* dgraph_to_ugraph/2:                    Documentation on exports (graphs).
* dic_get/3:                             Documentation on exports (dict).
* dic_lookup/3:                          Documentation on exports (dict).
* dic_lookup/4:                          Documentation on exports (dict).
* dic_node/2:                            Documentation on exports (dict).
* dic_replace/4:                         Documentation on exports (dict).
* dict2varnamesl/2:                      Documentation on exports (vndict).
* dictionary/5:                          Documentation on exports (dict).
* dictionary/6:                          Documentation on exports (dictionary).
* dictionary_insert/5:                   Documentation on exports (dictionary_tree).
* dictionary_lookup/5:                   Documentation on exports (dictionary_tree).
* difference/3:                          Documentation on exports (lists).
* directory_files/2:                     Documentation on exports (system).
* display/1:                             Documentation on exports (io_basic).
* display/2:                             Documentation on exports (io_basic).
* display_list/1:                        Documentation on exports (io_aux).
* display_string/1:                      Documentation on exports (io_aux).
* display_term/1:                        Documentation on exports (io_aux).
* displayq/1:                            Documentation on exports (io_basic).
* displayq/2:                            Documentation on exports (io_basic).
* disproves/2:                           Documentation on multifiles (rtchecks).
* dlgraph_to_lgraph/2:                   Documentation on exports (graphs).
* dlist/3:                               Documentation on exports (lists).
* do_interface/1:                        Documentation on exports (build_foreign_interface).
* do_on_abolish/1:                       Documentation on multifiles (dynamic).
* dynamic/1:                             Documentation on exports (dynamic).
* dynamic_search_path/1:                 Documentation on exports (ciaosh).
* edges/2:                               Documentation on exports (ugraphs).
* edges_to_lgraph/2:                     Documentation on exports (graphs).
* edges_to_ugraph/2:                     Documentation on exports (graphs).
* eng_backtrack/2:                       Documentation on exports (concurrency).
* eng_call/3:                            Documentation on exports (concurrency).
* eng_call/4:                            Documentation on exports (concurrency).
* eng_cut/1:                             Documentation on exports (concurrency).
* eng_goal_id/1:                         Documentation on exports (concurrency).
* eng_kill/1:                            Documentation on exports (concurrency).
* eng_killothers/0:                      Documentation on exports (concurrency).
* eng_release/1:                         Documentation on exports (concurrency).
* eng_self/1:                            Documentation on exports (concurrency).
* eng_status/0:                          Documentation on exports (concurrency).
* eng_wait/1:                            Documentation on exports (concurrency).
* ensure_loaded/1 <1>:                   Documentation on exports (compiler).
* ensure_loaded/1:                       Documentation on exports (ciaosh).
* equal_lists/2:                         Documentation on exports (lists).
* equalnumber/3:                         Documentation on exports (test_format).
* erase/1:                               Documentation on exports (data_facts).
* error/1:                               Documentation on exports (io_aux).
* error_file/2:                          Documentation on internals (chartlib_errhandle).
* error_message/1:                       Documentation on exports (messages).
* error_message/2 <1>:                   Documentation on internals (chartlib_errhandle).
* error_message/2:                       Documentation on exports (messages).
* error_message/3:                       Documentation on exports (messages).
* error_protect/1:                       Documentation on exports (errhandle).
* error_vrml/1:                          Documentation on exports (error).
* event_loop/0:                          Documentation on exports (window_class).
* event_type_widget/1:                   Documentation on exports (widget_class).
* exec/3:                                Documentation on exports (system).
* exec/4:                                Documentation on exports (system).
* expand_value/1 <1>:                    Documentation on exports (canvas_class).
* expand_value/1:                        Documentation on exports (widget_class).
* extension/2:                           Documentation on exports (filenames).
* extract_paths/2:                       Documentation on exports (system).
* fail/0:                                Documentation on exports (basiccontrol).
* false/1:                               Documentation on exports (assertions).
* fast_read/1:                           Documentation on exports (fastrw).
* fast_read/2:                           Documentation on exports (fastrw).
* fast_write/1:                          Documentation on exports (fastrw).
* fast_write/2:                          Documentation on exports (fastrw).
* fast_write_to_string/3:                Documentation on exports (fastrw).
* fetch_url/3:                           Documentation on exports (http).
* fieldType/1:                           Documentation on exports (field_type).
* fieldValue/6:                          Documentation on exports (field_value).
* fieldValue_check/8:                    Documentation on exports (field_value_check).
* file_exists/1:                         Documentation on exports (system).
* file_exists/2:                         Documentation on exports (system).
* file_name_extension/3:                 Documentation on exports (filenames).
* file_properties/6:                     Documentation on exports (system).
* file_property/2:                       Documentation on exports (system).
* file_search_path/2 <1>:                Documentation on multifiles (streams_basic).
* file_search_path/2:                    Documentation on multifiles (libpaths).
* file_terms/2:                          Documentation on exports (file_utils).
* file_to_string/2:                      Documentation on exports (file_utils).
* fileerrors/0:                          Documentation on exports (prolog_flags).
* fill_type/1 <1>:                       Documentation on exports (canvas_class).
* fill_type/1:                           Documentation on exports (widget_class).
* fillout/4:                             Documentation on exports (parser_util).
* fillout/5:                             Documentation on exports (parser_util).
* find_name/4:                           Documentation on exports (vndict).
* findall/3 <1>:                         Documentation on exports (conc_aggregates).
* findall/3:                             Documentation on exports (aggregates).
* findall/4:                             Documentation on exports (aggregates).
* findnsols/4:                           Documentation on exports (aggregates).
* findnsols/5:                           Documentation on exports (aggregates).
* flush_output/0:                        Documentation on exports (streams_basic).
* flush_output/1:                        Documentation on exports (streams_basic).
* fmode/2:                               Documentation on exports (system).
* fnot/1:                                Documentation on exports (fuzzy).
* foldl/4:                               Documentation on exports (hiordlib).
* font_type/1 <1>:                       Documentation on exports (text_class).
* font_type/1:                           Documentation on exports (widget_class).
* force_lazy/1:                          Documentation on exports (ciaosh).
* foreground_color/1:                    Documentation on exports (widget_class).
* form_default/3:                        Documentation on exports (html).
* form_empty_value/1:                    Documentation on exports (html).
* form_request_method/1:                 Documentation on exports (html).
* format/2:                              Documentation on exports (format).
* format/3:                              Documentation on exports (format).
* formatting/2:                          Documentation on exports (davinci).
* freeze/2:                              Documentation on exports (freeze).
* frozen/2:                              Documentation on exports (freeze).
* functor/3:                             Documentation on exports (term_basic).
* fuzzy/1:                               Documentation on exports (fuzzy).
* fuzzy_predicate/1:                     Documentation on exports (fuzzy).
* garbage_collect/0:                     Documentation on exports (prolog_sys).
* gc/0:                                  Documentation on exports (prolog_flags).
* generator/2:                           Documentation on exports (generator).
* get1_code/1:                           Documentation on exports (io_basic).
* get1_code/2:                           Documentation on exports (io_basic).
* get_alias_path/0:                      Documentation on exports (libpaths).
* get_arch/1:                            Documentation on exports (system_info).
* get_attribute/2:                       Documentation on exports (attributes).
* get_byte/1:                            Documentation on exports (iso_byte_char).
* get_byte/2:                            Documentation on exports (iso_byte_char).
* get_char/1:                            Documentation on exports (iso_byte_char).
* get_char/2:                            Documentation on exports (iso_byte_char).
* get_code/1:                            Documentation on exports (io_basic).
* get_code/2:                            Documentation on exports (io_basic).
* get_cookies/1:                         Documentation on exports (html).
* get_definition_dictionary/2:           Documentation on exports (dictionary_tree).
* get_dictionaries/2:                    Documentation on exports (parser_util).
* get_environment/2:                     Documentation on exports (parser_util).
* get_environment_name/2:                Documentation on exports (parser_util).
* get_environment_type/2:                Documentation on exports (parser_util).
* get_first_parsed/3:                    Documentation on exports (parser_util).
* get_form_input/1:                      Documentation on exports (html).
* get_form_value/3:                      Documentation on exports (html).
* get_global/2:                          Documentation on exports (global).
* get_indentation/2:                     Documentation on exports (parser_util).
* get_line/1:                            Documentation on exports (strings).
* get_line/2:                            Documentation on exports (strings).
* get_os/1:                              Documentation on exports (system_info).
* get_parsed/2:                          Documentation on exports (parser_util).
* get_pid/1:                             Documentation on exports (system).
* get_primes/2:                          Documentation on exports (numlists).
* get_prototype_definition/2:            Documentation on exports (lookup).
* get_prototype_dictionary/2:            Documentation on exports (dictionary_tree).
* get_prototype_interface/2:             Documentation on exports (lookup).
* get_row_number/2:                      Documentation on exports (parser_util).
* getcounter/2:                          Documentation on exports (counters).
* getct/2:                               Documentation on exports (io_basic).
* getct1/2:                              Documentation on exports (io_basic).
* getenvstr/2:                           Documentation on exports (system).
* goal_id/1:                             Documentation on exports (concurrency).
* graph_b1/13:                           Documentation on exports (gengraph1).
* graph_b1/9:                            Documentation on exports (gengraph1).
* graph_b2/13:                           Documentation on exports (gengraph2).
* graph_b2/9:                            Documentation on exports (gengraph2).
* graph_w1/13:                           Documentation on exports (gengraph1).
* graph_w1/9:                            Documentation on exports (gengraph1).
* graph_w2/13:                           Documentation on exports (gengraph2).
* graph_w2/9:                            Documentation on exports (gengraph2).
* halt/0:                                Documentation on exports (exceptions).
* halt/1:                                Documentation on exports (exceptions).
* handle_error/2:                        Documentation on exports (errhandle).
* height/1 <1>:                          Documentation on exports (oval_class).
* height/1:                              Documentation on exports (arc_class).
* height_value/1:                        Documentation on exports (canvas_class).
* hide_/0 <1>:                           Documentation on exports (canvas_class).
* hide_/0:                               Documentation on exports (window_class).
* highlight_color/1:                     Documentation on exports (widget_class).
* highlightbackground_color/1:           Documentation on exports (widget_class).
* hostname_address/2:                    Documentation on exports (sockets).
* html2terms/2:                          Documentation on exports (html).
* html_expansion/2:                      Documentation on multifiles (html).
* html_protect/1:                        Documentation on exports (html).
* html_report_error/1:                   Documentation on exports (html).
* html_template/3:                       Documentation on exports (html).
* http_lines/3:                          Documentation on exports (html).
* icon_address/2:                        Documentation on exports (html).
* if/3:                                  Documentation on exports (basiccontrol).
* imports_meta_pred/3:                   Documentation on exports (expansion_tools).
* inc_indentation/2:                     Documentation on exports (parser_util).
* inccounter/2:                          Documentation on exports (counters).
* include/1:                             Documentation on exports (ciaosh).
* indentation_list/2:                    Documentation on exports (generator_util).
* indep/1 <1>:                           Documentation on internals (andprolog).
* indep/1:                               Documentation on exports (native_props).
* indep/2:                               Documentation on internals (andprolog).
* inform_user/1:                         Documentation on exports (io_aux).
* inherited/1:                           Documentation on exports (class).
* init_sql_persdb/0:                     Documentation on exports (persdbrt_mysql).
* initialize_db/0:                       Documentation on exports (persdbrt).
* insert/3:                              Documentation on exports (sets).
* insert_comments_in_beginning/3:        Documentation on exports (parser_util).
* insert_last/3:                         Documentation on exports (lists).
* insert_parsed/3:                       Documentation on exports (parser_util).
* inside_proto/1:                        Documentation on exports (parser_util).
* instance/2:                            Documentation on exports (terms_check).
* instance_codes/2:                      Documentation on exports (objects_rt).
* instance_of/2:                         Documentation on exports (objects_rt).
* intercept/3:                           Documentation on exports (exceptions).
* interface/2:                           Documentation on exports (objects_rt).
* interp_file/2:                         Documentation on exports (bltclass).
* intersection/3:                        Documentation on exports (lists).
* intset_delete/3:                       Documentation on exports (lists).
* intset_in/2:                           Documentation on exports (lists).
* intset_insert/3:                       Documentation on exports (lists).
* intset_sequence/3:                     Documentation on exports (lists).
* is/2:                                  Documentation on exports (arithmetic).
* is_dictionaries/1:                     Documentation on exports (dictionary_tree).
* issue_debug_messages/1:                Documentation on multifiles (messages).
* justify_entry/1:                       Documentation on exports (entry_class).
* justify_text/1:                        Documentation on exports (text_class).
* keysort/2:                             Documentation on exports (sort).
* label_value/1 <1>:                     Documentation on exports (menu_entry_class).
* label_value/1:                         Documentation on exports (menu_class).
* last/2:                                Documentation on exports (lists).
* leash/1:                               Documentation on exports (debugger).
* length/2:                              Documentation on exports (lists).
* letter_match/2:                        Documentation on exports (patterns).
* library_directory/1 <1>:               Documentation on multifiles (streams_basic).
* library_directory/1:                   Documentation on multifiles (libpaths).
* line_count/2:                          Documentation on exports (streams_basic).
* line_position/2:                       Documentation on exports (streams_basic).
* linker_and_opts/2:                     Documentation on exports (foreign_compilation).
* list_breakpt/0:                        Documentation on exports (debugger).
* list_concat/2:                         Documentation on exports (lists).
* list_insert/2 <1>:                     Documentation on exports (idlists).
* list_insert/2:                         Documentation on exports (lists).
* list_lookup/3:                         Documentation on exports (lists).
* list_lookup/4:                         Documentation on exports (lists).
* list_to_list_of_lists/2:               Documentation on exports (lists).
* lock_atom/1:                           Documentation on exports (concurrency).
* lock_file/3:                           Documentation on exports (file_locks).
* look_ahead/3:                          Documentation on exports (parser_util).
* look_first_parsed/2:                   Documentation on exports (parser_util).
* lookup_check_field/6:                  Documentation on exports (lookup).
* lookup_check_interface_fieldValue/8:   Documentation on exports (lookup).
* lookup_check_node/4:                   Documentation on exports (lookup).
* lookup_field/4:                        Documentation on exports (lookup).
* lookup_field_access/4:                 Documentation on exports (lookup).
* lookup_fieldTypeId/1:                  Documentation on exports (lookup).
* lookup_get_fieldType/4:                Documentation on exports (lookup).
* lookup_route/5:                        Documentation on exports (lookup).
* lookup_set_def/3:                      Documentation on exports (lookup).
* lookup_set_extern_prototype/4:         Documentation on exports (lookup).
* lookup_set_prototype/4:                Documentation on exports (lookup).
* make_actmod/2:                         Documentation on exports (ciaosh).
* make_directory/1:                      Documentation on exports (system).
* make_directory/2:                      Documentation on exports (system).
* make_dirpath/1:                        Documentation on exports (system).
* make_dirpath/2:                        Documentation on exports (system).
* make_exec/2:                           Documentation on exports (ciaosh).
* make_persistent/2:                     Documentation on exports (persdbrt).
* make_po/1 <1>:                         Documentation on exports (compiler).
* make_po/1:                             Documentation on exports (ciaosh).
* make_sql_persistent/3:                 Documentation on exports (persdbrt_mysql).
* map/3:                                 Documentation on exports (hiordlib).
* match_pattern/2:                       Documentation on exports (patterns).
* match_pattern/3:                       Documentation on exports (patterns).
* match_pattern_pred/2:                  Documentation on exports (patterns).
* maxdepth/1:                            Documentation on exports (debugger).
* maxsize/2:                             Documentation on exports (window_class).
* member_0/2:                            Documentation on exports (idlists).
* memberchk/2:                           Documentation on exports (idlists).
* menu_data/1:                           Documentation on exports (menu_class).
* menu_name/1 <1>:                       Documentation on exports (menu_entry_class).
* menu_name/1:                           Documentation on exports (menubutton_class).
* merge/3:                               Documentation on exports (sets).
* merge_tree/2:                          Documentation on exports (dictionary_tree).
* message/1:                             Documentation on exports (io_aux).
* message/2:                             Documentation on exports (io_aux).
* message_lns/4:                         Documentation on exports (io_aux).
* mfstringValue/5:                       Documentation on exports (field_value).
* mfstringValue/7:                       Documentation on exports (field_value_check).
* minimum/3:                             Documentation on exports (hiordlib).
* minsize/2:                             Documentation on exports (window_class).
* mktemp/2:                              Documentation on exports (system).
* mode_of_module/2:                      Documentation on exports (compiler).
* modif_time/2:                          Documentation on exports (system).
* modif_time0/2:                         Documentation on exports (system).
* module_of/2:                           Documentation on exports (compiler).
* multibarchart/10:                      Documentation on exports (genmultibar).
* multibarchart/8:                       Documentation on exports (genmultibar).
* multifile/1:                           Documentation on exports (ciaosh).
* my_url/1:                              Documentation on exports (html).
* mysql_connect/5:                       Documentation on exports (mysql_client).
* mysql_disconnect/1:                    Documentation on exports (mysql_client).
* mysql_fetch/2:                         Documentation on exports (mysql_client).
* mysql_free_query_connection/1:         Documentation on exports (mysql_client).
* mysql_get_tables/2:                    Documentation on exports (mysql_client).
* mysql_query/3:                         Documentation on exports (mysql_client).
* mysql_query_one_tuple/3:               Documentation on exports (mysql_client).
* mysql_table_types/3:                   Documentation on exports (mysql_client).
* name/2:                                Documentation on exports (atomic_basic).
* name_menu/1:                           Documentation on exports (menu_class).
* negated_comparison/2:                  Documentation on internals (pl2sql).
* neighbors/3:                           Documentation on exports (ugraphs).
* new/2:                                 Documentation on exports (objects_rt).
* new_atom/1:                            Documentation on exports (prolog_sys).
* new_interp/1 <1>:                      Documentation on exports (bltclass).
* new_interp/1:                          Documentation on exports (tcltk_low_level).
* new_interp/2:                          Documentation on exports (tcltk_low_level).
* new_interp_file/2:                     Documentation on exports (tcltk_low_level).
* nl/0:                                  Documentation on exports (io_basic).
* nl/1:                                  Documentation on exports (io_basic).
* no_path_file_name/2:                   Documentation on exports (filenames).
* nobreakall/0:                          Documentation on exports (debugger).
* nobreakpt/6:                           Documentation on exports (debugger).
* nocontainsx/2:                         Documentation on exports (lists).
* nodebug/0:                             Documentation on exports (debugger).
* nodebug_module/1:                      Documentation on exports (debugger).
* nodeDeclaration/4 <1>:                 Documentation on exports (parser).
* nodeDeclaration/4:                     Documentation on exports (generator).
* nofileerrors/0:                        Documentation on exports (prolog_flags).
* nogc/0:                                Documentation on exports (prolog_flags).
* nonsingle/1:                           Documentation on exports (lists).
* nospy/1:                               Documentation on exports (debugger).
* nospyall/0:                            Documentation on exports (debugger).
* not_empty/3:                           Documentation on exports (test_format).
* not_empty/4:                           Documentation on exports (test_format).
* note/1:                                Documentation on exports (io_aux).
* note_message/1:                        Documentation on exports (messages).
* note_message/2:                        Documentation on exports (messages).
* note_message/3:                        Documentation on exports (messages).
* notrace/0:                             Documentation on exports (debugger).
* nth/3:                                 Documentation on exports (lists).
* number_chars/2:                        Documentation on exports (iso_byte_char).
* number_codes/2:                        Documentation on exports (atomic_basic).
* number_codes/3:                        Documentation on exports (atomic_basic).
* numbervars/3:                          Documentation on exports (write).
* once/1:                                Documentation on exports (iso_misc).
* op/3:                                  Documentation on exports (operators).
* open/3:                                Documentation on exports (streams_basic).
* open/4:                                Documentation on exports (iso_incomplete).
* open_DEF/5:                            Documentation on exports (generator_util).
* open_EXTERNPROTO/5:                    Documentation on exports (generator_util).
* open_input/2:                          Documentation on exports (streams).
* open_node/6:                           Documentation on exports (generator_util).
* open_null_stream/1:                    Documentation on exports (streams).
* open_output/2:                         Documentation on exports (streams).
* open_predicate/1:                      Documentation on exports (data_facts).
* open_PROTO/4:                          Documentation on exports (generator_util).
* open_Script/5:                         Documentation on exports (generator_util).
* optional_message/2:                    Documentation on exports (messages).
* optional_message/3:                    Documentation on exports (messages).
* ord_delete/3:                          Documentation on exports (sets).
* ord_disjoint/2:                        Documentation on exports (sets).
* ord_intersect/2:                       Documentation on exports (sets).
* ord_intersection/3:                    Documentation on exports (sets).
* ord_intersection_diff/4:               Documentation on exports (sets).
* ord_member/2:                          Documentation on exports (sets).
* ord_subset/2:                          Documentation on exports (sets).
* ord_subset_diff/3:                     Documentation on exports (sets).
* ord_subtract/3:                        Documentation on exports (sets).
* ord_test_member/3:                     Documentation on exports (sets).
* ord_union/3:                           Documentation on exports (sets).
* ord_union_change/3:                    Documentation on exports (sets).
* ord_union_diff/4:                      Documentation on exports (sets).
* ord_union_symdiff/4:                   Documentation on exports (sets).
* out/1:                                 Documentation on exports (io).
* out/3:                                 Documentation on exports (io).
* outline_color/1 <1>:                   Documentation on exports (poly_class).
* outline_color/1 <2>:                   Documentation on exports (oval_class).
* outline_color/1:                       Documentation on exports (arc_class).
* output_error/1:                        Documentation on exports (error).
* output_html/1:                         Documentation on exports (html).
* padx_value/1 <1>:                      Documentation on exports (canvas_class).
* padx_value/1:                          Documentation on exports (widget_class).
* pady_value/1 <1>:                      Documentation on exports (canvas_class).
* pady_value/1:                          Documentation on exports (widget_class).
* parse_term/3:                          Documentation on exports (atom2term).
* parser/2:                              Documentation on exports (parser).
* passerta_fact/1:                       Documentation on exports (persdbrt).
* passertz_fact/1:                       Documentation on exports (persdbrt).
* pattern/2:                             Documentation on exports (color_pattern).
* pause/1:                               Documentation on exports (system).
* peek_byte/1:                           Documentation on exports (iso_byte_char).
* peek_byte/2:                           Documentation on exports (iso_byte_char).
* peek_char/1:                           Documentation on exports (iso_byte_char).
* peek_char/2:                           Documentation on exports (iso_byte_char).
* peek_code/1:                           Documentation on exports (io_basic).
* peek_code/2:                           Documentation on exports (io_basic).
* percentbarchart1/7:                    Documentation on exports (genbar1).
* percentbarchart2/7:                    Documentation on exports (genbar2).
* percentbarchart3/7:                    Documentation on exports (genbar3).
* percentbarchart4/7:                    Documentation on exports (genbar4).
* persistent_dir/2:                      Documentation on multifiles (persdbrt).
* phrase/2:                              Documentation on exports (dcg_expansion).
* phrase/3:                              Documentation on exports (dcg_expansion).
* pl2sqlstring/3:                        Documentation on exports (pl2sql).
* pl2sqlterm/3:                          Documentation on exports (pl2sql).
* point/2:                               Documentation on exports (text_class).
* point_to/3:                            Documentation on exports (ugraphs).
* pop_global/2:                          Documentation on exports (global).
* pop_prolog_flag/1:                     Documentation on exports (prolog_flags).
* popen/3:                               Documentation on exports (system).
* portray/1:                             Documentation on multifiles (write).
* portray_attribute/2:                   Documentation on multifiles (write).
* portray_clause/1:                      Documentation on exports (write).
* portray_clause/2:                      Documentation on exports (write).
* powerset/2:                            Documentation on exports (lists).
* predicate_property/2:                  Documentation on exports (prolog_sys).
* pretract_fact/1:                       Documentation on exports (persdbrt).
* pretty_print/2:                        Documentation on exports (pretty_print).
* pretty_print/3:                        Documentation on exports (pretty_print).
* prettyvars/1:                          Documentation on exports (write).
* print/1:                               Documentation on exports (write).
* print/2:                               Documentation on exports (write).
* printable_char/1:                      Documentation on exports (write).
* prolog_flag/3:                         Documentation on exports (prolog_flags).
* prompt/2:                              Documentation on exports (prolog_flags).
* proves/2:                              Documentation on multifiles (rtchecks).
* prune_dict/3:                          Documentation on exports (vndict).
* push_dictionaries/3:                   Documentation on exports (parser_util).
* push_global/2:                         Documentation on exports (global).
* push_prolog_flag/2:                    Documentation on exports (prolog_flags).
* push_whitespace/3:                     Documentation on exports (parser_util).
* put_byte/1:                            Documentation on exports (iso_byte_char).
* put_byte/2:                            Documentation on exports (iso_byte_char).
* put_char/1:                            Documentation on exports (iso_byte_char).
* put_char/2:                            Documentation on exports (iso_byte_char).
* put_code/1:                            Documentation on exports (io_basic).
* put_code/2:                            Documentation on exports (io_basic).
* q_delete/3:                            Documentation on exports (queues).
* q_empty/1:                             Documentation on exports (queues).
* q_insert/3:                            Documentation on exports (queues).
* q_member/2:                            Documentation on exports (queues).
* query_generation/3:                    Documentation on internals (pl2sql).
* random/1:                              Documentation on exports (random).
* random/3:                              Documentation on exports (random).
* random_color/1:                        Documentation on exports (color_pattern).
* random_darkcolor/1:                    Documentation on exports (color_pattern).
* random_lightcolor/1:                   Documentation on exports (color_pattern).
* random_pattern/1:                      Documentation on exports (color_pattern).
* read/1:                                Documentation on exports (read).
* read/2:                                Documentation on exports (read).
* read_page/2:                           Documentation on internals (provrml).
* read_term/2:                           Documentation on exports (read).
* read_term/3:                           Documentation on exports (read).
* read_terms_file/2:                     Documentation on exports (io).
* read_top_level/3:                      Documentation on exports (read).
* read_vrml_file/2:                      Documentation on exports (io).
* reading/4:                             Documentation on exports (generator_util).
* reading/5:                             Documentation on exports (generator_util).
* reading/6:                             Documentation on exports (generator_util).
* rebuild_foreign_interface/1:           Documentation on exports (build_foreign_interface).
* rebuild_foreign_interface_explicit_decls/2: Documentation on exports (build_foreign_interface).
* rebuild_foreign_interface_object/1:    Documentation on exports (build_foreign_interface).
* receive_confirm/2:                     Documentation on exports (tcltk_low_level).
* receive_event/2:                       Documentation on exports (tcltk_low_level).
* receive_list/2:                        Documentation on exports (tcltk_low_level).
* receive_result/2:                      Documentation on exports (tcltk_low_level).
* recorda/3:                             Documentation on exports (old_database).
* recorded/3:                            Documentation on exports (old_database).
* recordz/3:                             Documentation on exports (old_database).
* reduce_indentation/3:                  Documentation on exports (parser_util).
* relation/3:                            Documentation on multifiles (pl2sql).
* relief_type/1:                         Documentation on exports (widget_class).
* remove_code/3:                         Documentation on exports (parser_util).
* remove_comments/4:                     Documentation on exports (generator_util).
* rename/2:                              Documentation on exports (vndict).
* rename_file/2:                         Documentation on exports (system).
* repeat/0:                              Documentation on exports (basiccontrol).
* reserved_words/1:                      Documentation on exports (boundary).
* retract/1:                             Documentation on exports (dynamic).
* retract_fact/1 <1>:                    Documentation on exports (persdbrt).
* retract_fact/1:                        Documentation on exports (data_facts).
* retract_fact_nb/1:                     Documentation on exports (data_facts).
* retractall/1:                          Documentation on exports (dynamic).
* retractall_fact/1:                     Documentation on exports (data_facts).
* reverse/2:                             Documentation on exports (lists).
* reverse/3:                             Documentation on exports (lists).
* reverse_parsed/2:                      Documentation on exports (parser_util).
* row_value/1:                           Documentation on exports (widget_class).
* rowspan_value/1:                       Documentation on exports (widget_class).
* scattergraph_b1/12:                    Documentation on exports (gengraph1).
* scattergraph_b1/8:                     Documentation on exports (gengraph1).
* scattergraph_b2/12:                    Documentation on exports (gengraph2).
* scattergraph_b2/8:                     Documentation on exports (gengraph2).
* scattergraph_w1/12:                    Documentation on exports (gengraph1).
* scattergraph_w1/8:                     Documentation on exports (gengraph1).
* scattergraph_w2/12:                    Documentation on exports (gengraph2).
* scattergraph_w2/8:                     Documentation on exports (gengraph2).
* second_prompt/2:                       Documentation on exports (read).
* see/1:                                 Documentation on exports (dec10_io).
* seeing/1:                              Documentation on exports (dec10_io).
* seen/0:                                Documentation on exports (dec10_io).
* select/3:                              Documentation on exports (lists).
* select_socket/5:                       Documentation on exports (sockets).
* self/1:                                Documentation on exports (class).
* send_term/2:                           Documentation on exports (tcltk_low_level).
* set_action/1:                          Documentation on exports (menu_entry_class).
* set_cookie/2:                          Documentation on exports (html).
* set_debug_mode/1 <1>:                  Documentation on exports (compiler).
* set_debug_mode/1:                      Documentation on exports (ciaosh).
* set_debug_module/1:                    Documentation on exports (compiler).
* set_debug_module_source/1:             Documentation on exports (compiler).
* set_environment/3:                     Documentation on exports (parser_util).
* set_fact/1:                            Documentation on exports (data_facts).
* set_global/2:                          Documentation on exports (global).
* set_input/1:                           Documentation on exports (streams_basic).
* set_name/1:                            Documentation on exports (menu_entry_class).
* set_nodebug_mode/1 <1>:                Documentation on exports (compiler).
* set_nodebug_mode/1:                    Documentation on exports (ciaosh).
* set_nodebug_module/1:                  Documentation on exports (compiler).
* set_output/1:                          Documentation on exports (streams_basic).
* set_parsed/3:                          Documentation on exports (parser_util).
* set_prolog_flag/2:                     Documentation on exports (prolog_flags).
* setarg/3:                              Documentation on exports (odd).
* setcounter/2:                          Documentation on exports (counters).
* setenvstr/2:                           Documentation on exports (system).
* setof/3:                               Documentation on exports (aggregates).
* setproduct/3:                          Documentation on exports (sets).
* shape_class/0:                         Documentation on exports (shape_class).
* shape_class/1:                         Documentation on exports (shape_class).
* shell/0:                               Documentation on exports (system).
* shell/1:                               Documentation on exports (system).
* shell/2:                               Documentation on exports (system).
* show/0 <1>:                            Documentation on exports (canvas_class).
* show/0:                                Documentation on exports (window_class).
* side_type/1 <1>:                       Documentation on exports (canvas_class).
* side_type/1:                           Documentation on exports (widget_class).
* simple_message/1:                      Documentation on exports (messages).
* simple_message/2:                      Documentation on exports (messages).
* skip_code/1:                           Documentation on exports (io_basic).
* skip_code/2:                           Documentation on exports (io_basic).
* socket_accept/2:                       Documentation on exports (sockets).
* socket_recv/2:                         Documentation on exports (sockets).
* socket_recv_code/3:                    Documentation on exports (sockets).
* socket_send/2:                         Documentation on exports (sockets).
* socket_shutdown/2:                     Documentation on exports (sockets).
* sort/2:                                Documentation on exports (sort).
* spy/1:                                 Documentation on exports (debugger).
* sql_get_tables/2:                      Documentation on exports (persdbrt_mysql).
* sql_persistent_location/2:             Documentation on multifiles (persdbrt_mysql).
* sql_query/3:                           Documentation on exports (persdbrt_mysql).
* sql_query_one_tuple/3:                 Documentation on internals (persdbrt_mysql).
* sql_table_types/3:                     Documentation on exports (persdbrt_mysql).
* sqlterm2string/2:                      Documentation on exports (pl2sql).
* srandom/1:                             Documentation on exports (random).
* start_vrmlScene/4:                     Documentation on exports (generator_util).
* statistics/0:                          Documentation on exports (prolog_sys).
* statistics/2:                          Documentation on exports (prolog_sys).
* stop_parse/2:                          Documentation on exports (parser_util).
* stream_code/2:                         Documentation on exports (streams_basic).
* stream_property/2:                     Documentation on exports (iso_incomplete).
* stream_to_string/2:                    Documentation on exports (file_utils).
* string/3:                              Documentation on exports (strings).
* string2term/2:                         Documentation on exports (atom2term).
* strip_clean/2:                         Documentation on exports (parser_util).
* strip_exposed/2:                       Documentation on exports (parser_util).
* strip_from_list/2:                     Documentation on exports (parser_util).
* strip_from_term/2:                     Documentation on exports (parser_util).
* strip_interface/2:                     Documentation on exports (parser_util).
* strip_restricted/2:                    Documentation on exports (parser_util).
* style_type/1:                          Documentation on exports (arc_class).
* sub_atom/4:                            Documentation on exports (atomic_basic).
* sub_atom/5:                            Documentation on exports (iso_misc).
* subtract/3:                            Documentation on exports (idlists).
* sum_list/2:                            Documentation on exports (numlists).
* sum_list/3:                            Documentation on exports (numlists).
* sum_list_of_lists/2:                   Documentation on exports (numlists).
* sum_list_of_lists/3:                   Documentation on exports (numlists).
* system/1:                              Documentation on exports (system).
* system/2:                              Documentation on exports (system).
* system_lib/1:                          Documentation on exports (librowser).
* tab/1:                                 Documentation on exports (io_basic).
* tab/2:                                 Documentation on exports (io_basic).
* tablewidget1/4:                        Documentation on exports (table_widget1).
* tablewidget1/5:                        Documentation on exports (table_widget1).
* tablewidget2/4:                        Documentation on exports (table_widget2).
* tablewidget2/5:                        Documentation on exports (table_widget2).
* tablewidget3/4:                        Documentation on exports (table_widget3).
* tablewidget3/5:                        Documentation on exports (table_widget3).
* tablewidget4/4:                        Documentation on exports (table_widget4).
* tablewidget4/5:                        Documentation on exports (table_widget4).
* tcl_delete/1:                          Documentation on exports (tcltk).
* tcl_eval/3:                            Documentation on exports (tcltk).
* tcl_event/3:                           Documentation on exports (tcltk).
* tcl_name/1:                            Documentation on exports (menu_class).
* tcl_new/1:                             Documentation on exports (tcltk).
* tcltk/2:                               Documentation on exports (tcltk_low_level).
* tcltk_raw_code/2 <1>:                  Documentation on exports (bltclass).
* tcltk_raw_code/2:                      Documentation on exports (tcltk_low_level).
* tearoff_value/1:                       Documentation on exports (menu_class).
* tell/1:                                Documentation on exports (dec10_io).
* telling/1:                             Documentation on exports (dec10_io).
* terms_file_to_vrml/2:                  Documentation on exports (provrml).
* terms_file_to_vrml_file/2:             Documentation on exports (provrml).
* terms_to_vrml/2:                       Documentation on exports (provrml).
* terms_to_vrml_file/2:                  Documentation on exports (provrml).
* text_characters/1 <1>:                 Documentation on exports (text_class).
* text_characters/1:                     Documentation on exports (widget_class).
* textvariable_entry/1:                  Documentation on exports (entry_class).
* textvariable_label/1:                  Documentation on exports (label_class).
* textvariablevalue_number/1:            Documentation on exports (entry_class).
* textvariablevalue_string/1:            Documentation on exports (entry_class).
* this_module/1:                         Documentation on exports (system_info).
* throw/1:                               Documentation on exports (exceptions).
* time/1:                                Documentation on exports (system).
* title/1:                               Documentation on exports (window_class).
* tk_event_loop/1:                       Documentation on exports (tcltk).
* tk_loop/1:                             Documentation on exports (tcltk).
* tk_new/2:                              Documentation on exports (tcltk).
* tk_next_event/2:                       Documentation on exports (tcltk).
* token_read/3:                          Documentation on exports (tokeniser).
* tokeniser/2:                           Documentation on exports (tokeniser).
* told/0:                                Documentation on exports (dec10_io).
* topd/0:                                Documentation on exports (davinci).
* trace/0:                               Documentation on exports (debugger).
* translate_arithmetic_function/5:       Documentation on internals (pl2sql).
* translate_comparison/5:                Documentation on internals (pl2sql).
* translate_conjunction/5:               Documentation on internals (pl2sql).
* translate_goal/5:                      Documentation on internals (pl2sql).
* transpose/2:                           Documentation on exports (ugraphs).
* true/0:                                Documentation on exports (basiccontrol).
* true/1:                                Documentation on exports (assertions).
* trust/1:                               Documentation on exports (assertions).
* ttydisplay/1:                          Documentation on exports (ttyout).
* ttydisplay_string/1:                   Documentation on exports (ttyout).
* ttydisplayq/1:                         Documentation on exports (ttyout).
* ttyflush/0:                            Documentation on exports (ttyout).
* ttyget/1:                              Documentation on exports (ttyout).
* ttyget1/1:                             Documentation on exports (ttyout).
* ttynl/0:                               Documentation on exports (ttyout).
* ttyput/1:                              Documentation on exports (ttyout).
* ttyskip/1:                             Documentation on exports (ttyout).
* ttyskipeol/0:                          Documentation on exports (ttyout).
* ttytab/1:                              Documentation on exports (ttyout).
* ugraph2term/2:                         Documentation on exports (davinci).
* umask/2:                               Documentation on exports (system).
* undo/1:                                Documentation on exports (odd).
* undo_force_lazy/1:                     Documentation on exports (ciaosh).
* unify_with_occurs_check/2:             Documentation on exports (iso_misc).
* union/3:                               Documentation on exports (lists).
* union_idlists/3:                       Documentation on exports (idlists).
* unload/1 <1>:                          Documentation on exports (compiler).
* unload/1:                              Documentation on exports (ciaosh).
* unlock_atom/1:                         Documentation on exports (concurrency).
* unlock_file/2:                         Documentation on exports (file_locks).
* update/0:                              Documentation on exports (librowser).
* update_attribute/2:                    Documentation on exports (attributes).
* update_files/0:                        Documentation on exports (persdbrt).
* update_files/1:                        Documentation on exports (persdbrt).
* url_info/2:                            Documentation on exports (html).
* url_info_relative/3:                   Documentation on exports (html).
* url_query/2:                           Documentation on exports (html).
* use_class/1:                           Documentation on exports (objects_rt).
* use_module/1 <1>:                      Documentation on exports (compiler).
* use_module/1:                          Documentation on exports (ciaosh).
* use_module/2 <1>:                      Documentation on exports (compiler).
* use_module/2:                          Documentation on exports (ciaosh).
* use_module/3:                          Documentation on exports (compiler).
* use_package/1:                         Documentation on exports (ciaosh).
* valid_attributes/2:                    Documentation on exports (test_format).
* valid_format/4:                        Documentation on exports (test_format).
* valid_table/2:                         Documentation on exports (test_format).
* valid_vectors/4:                       Documentation on exports (test_format).
* variable_value/1 <1>:                  Documentation on exports (radiobutton_class).
* variable_value/1:                      Documentation on exports (checkbutton_class).
* variant/2:                             Documentation on exports (terms_check).
* varnamesl2dict/2:                      Documentation on exports (vndict).
* vars_names_dict/3:                     Documentation on exports (vndict).
* varsbag/3:                             Documentation on exports (terms_vars).
* varset/2:                              Documentation on exports (terms_vars).
* varset_in_args/2:                      Documentation on exports (terms_vars).
* vectors_format/4:                      Documentation on exports (test_format).
* verify_attribute/2 <1>:                Documentation on multifiles (when).
* verify_attribute/2 <2>:                Documentation on multifiles (freeze).
* verify_attribute/2:                    Documentation on multifiles (attributes).
* vertices/1 <1>:                        Documentation on exports (line_class).
* vertices/1:                            Documentation on exports (poly_class).
* vertices/2:                            Documentation on exports (ugraphs).
* vertices_edges_to_lgraph/3:            Documentation on exports (lgraphs).
* vertices_edges_to_ugraph/3:            Documentation on exports (ugraphs).
* vertices_edges_to_wgraph/3:            Documentation on exports (wgraphs).
* vrml_file_to_terms/2:                  Documentation on exports (provrml).
* vrml_file_to_terms_file/2:             Documentation on exports (provrml).
* vrml_http_access/2:                    Documentation on exports (provrml).
* vrml_in_out/2:                         Documentation on exports (provrml).
* vrml_to_terms/2:                       Documentation on exports (provrml).
* vrml_web_to_terms/2:                   Documentation on exports (provrml).
* vrml_web_to_terms_file/2:              Documentation on exports (provrml).
* warning/1:                             Documentation on exports (io_aux).
* warning_message/1:                     Documentation on exports (messages).
* warning_message/2:                     Documentation on exports (messages).
* warning_message/3:                     Documentation on exports (messages).
* wellformed_body/3:                     Documentation on exports (dynamic).
* when/2:                                Documentation on exports (when).
* where/1:                               Documentation on exports (librowser).
* whitespace/2:                          Documentation on exports (strings).
* whitespace0/2:                         Documentation on exports (strings).
* width/1 <1>:                           Documentation on exports (oval_class).
* width/1:                               Documentation on exports (arc_class).
* width_value/1 <1>:                     Documentation on exports (canvas_class).
* width_value/1:                         Documentation on exports (widget_class).
* window_class/0:                        Documentation on exports (window_class).
* window_class/3:                        Documentation on exports (window_class).
* withdraw/0:                            Documentation on exports (window_class).
* working_directory/2:                   Documentation on exports (system).
* write/1:                               Documentation on exports (write).
* write/2:                               Documentation on exports (write).
* write_assertion/6:                     Documentation on exports (assrt_write).
* write_assertion_as_comment/6:          Documentation on exports (assrt_write).
* write_canonical/1:                     Documentation on exports (write).
* write_canonical/2:                     Documentation on exports (write).
* write_list1/1:                         Documentation on exports (write).
* write_string/1:                        Documentation on exports (strings).
* write_string/2:                        Documentation on exports (strings).
* write_term/2:                          Documentation on exports (write).
* write_term/3:                          Documentation on exports (write).
* write_terms_file/2:                    Documentation on exports (io).
* write_vrml_file/2:                     Documentation on exports (io).
* writeq/1:                              Documentation on exports (write).
* writeq/2:                              Documentation on exports (write).
* xml2terms/2:                           Documentation on exports (html).
* |/2:                                   Documentation on internals (basiccontrol).


File: ciao.info,  Node: Property Definition Index,  Next: Regular Type Definition Index,  Prev: Predicate/Method Definition Index,  Up: Top

Property Definition Index
*************************

* Menu:

* =/2:                                   Documentation on exports (term_basic).
* ==/2:                                  Documentation on exports (term_compare).
* @</2:                                  Documentation on exports (term_compare).
* @=</2:                                 Documentation on exports (term_compare).
* @>/2:                                  Documentation on exports (term_compare).
* @>=/2:                                 Documentation on exports (term_compare).
* \==/2:                                 Documentation on exports (term_compare).
* atom/1:                                Documentation on exports (term_typing).
* atomic/1:                              Documentation on exports (term_typing).
* call/2:                                Documentation on exports (meta_props).
* class_name/1:                          Documentation on exports (objects_rt).
* class_source/1:                        Documentation on exports (objects_rt).
* compat/2:                              Documentation on exports (basic_props).
* constructor/1:                         Documentation on exports (objects_rt).
* covered/1:                             Documentation on exports (native_props).
* davinci_command/1:                     Documentation on internals (davinci).
* dictionary/1:                          Documentation on exports (dict).
* do_not_free/2:                         Documentation on exports (foreign_interface_properties).
* docstring/1:                           Documentation on exports (assertions_props).
* expander_pred/1:                       Documentation on internals (expansion_tools).
* fails/1:                               Documentation on exports (native_props).
* float/1:                               Documentation on exports (term_typing).
* foreign/1:                             Documentation on exports (foreign_interface_properties).
* foreign/2:                             Documentation on exports (foreign_interface_properties).
* fuzzybody/1:                           Documentation on exports (fuzzy).
* ground/1:                              Documentation on exports (term_typing).
* head_pattern/1:                        Documentation on exports (assertions_props).
* indep/2:                               Documentation on exports (native_props).
* instance_id/1:                         Documentation on exports (objects_rt).
* integer/1:                             Documentation on exports (term_typing).
* interface_name/1:                      Documentation on exports (objects_rt).
* interface_source/1:                    Documentation on exports (objects_rt).
* internal_module_id/1:                  Documentation on internals (system_info).
* is_det/1:                              Documentation on exports (native_props).
* iso/1:                                 Documentation on exports (basic_props).
* lgraph/1:                              Documentation on internals (davinci).
* line/1:                                Documentation on internals (strings).
* linear/1:                              Documentation on exports (native_props).
* list1/2:                               Documentation on exports (lists).
* member/2:                              Documentation on exports (basic_props).
* method_spec/1:                         Documentation on exports (objects_rt).
* mshare/1:                              Documentation on exports (native_props).
* multpredspec/1:                        Documentation on internals (debugger).
* mut_exclusive/1:                       Documentation on exports (native_props).
* nabody/1:                              Documentation on exports (assertions_props).
* native/1:                              Documentation on exports (foreign_interface_properties).
* native/2:                              Documentation on exports (foreign_interface_properties).
* nonvar/1:                              Documentation on exports (term_typing).
* not_covered/1:                         Documentation on exports (native_props).
* not_fails/1:                           Documentation on exports (native_props).
* not_further_inst/2:                    Documentation on exports (basic_props).
* not_mut_exclusive/1:                   Documentation on exports (native_props).
* number/1:                              Documentation on exports (term_typing).
* possibly_fails/1:                      Documentation on exports (native_props).
* possibly_nondet/1:                     Documentation on exports (native_props).
* prop/2:                                Documentation on exports (meta_props).
* prop_abs/1:                            Documentation on internals (meta_props).
* regtype/1:                             Documentation on exports (basic_props).
* regtype/2:                             Documentation on exports (meta_props).
* returns/2:                             Documentation on exports (foreign_interface_properties).
* sideff_hard/1:                         Documentation on exports (native_props).
* sideff_pure/1:                         Documentation on exports (native_props).
* sideff_soft/1:                         Documentation on exports (native_props).
* size_lb/2:                             Documentation on exports (native_props).
* size_of/3:                             Documentation on exports (foreign_interface_properties).
* size_ub/2:                             Documentation on exports (native_props).
* sourcenames/1:                         Documentation on internals (ciaosh).
* steps_lb/2:                            Documentation on exports (native_props).
* steps_ub/2:                            Documentation on exports (native_props).
* sublist/2:                             Documentation on exports (lists).
* subordlist/2:                          Documentation on exports (lists).
* type/2:                                Documentation on exports (term_typing).
* ugraph/1:                              Documentation on internals (davinci).
* var/1:                                 Documentation on exports (term_typing).
* virtual_method_spec/1:                 Documentation on exports (objects_rt).
* write_option/1:                        Documentation on exports (write).


File: ciao.info,  Node: Regular Type Definition Index,  Next: Declaration Definition Index,  Prev: Property Definition Index,  Up: Top

Regular Type Definition Index
*****************************

* Menu:

* address/1:                             Documentation on exports (foreign_interface_properties).
* answertableterm/1:                     Documentation on exports (db_client_types).
* answertupleterm/1:                     Documentation on exports (db_client_types).
* any_term/1:                            Documentation on exports (foreign_interface_properties).
* apropos_spec/1:                        Documentation on internals (librowser).
* arithexpression/1:                     Documentation on exports (arithmetic).
* assrt_body/1:                          Documentation on exports (assertions_props).
* assrt_status/1:                        Documentation on exports (assertions_props).
* assrt_type/1:                          Documentation on exports (assertions_props).
* atm/1:                                 Documentation on exports (basic_props).
* atm_or_atm_list/1:                     Documentation on exports (basic_props).
* attributes/1:                          Documentation on exports (gengraph1).
* axis_limit/1:                          Documentation on exports (genbar1).
* bltwish_interp/1:                      Documentation on exports (bltclass).
* body/1:                                Documentation on internals (pretty_print).
* bound/1:                               Documentation on exports (internal_types).
* bound_double/1:                        Documentation on exports (internal_types).
* byte/1:                                Documentation on exports (foreign_interface_properties).
* byte_list/1:                           Documentation on exports (foreign_interface_properties).
* c_assrt_body/1:                        Documentation on exports (assertions_props).
* callable/1:                            Documentation on exports (basic_props).
* canonic_html_term/1:                   Documentation on exports (pillow_types).
* canonic_xml_term/1:                    Documentation on exports (pillow_types).
* canvas/1:                              Documentation on exports (window_class).
* cell_value/1:                          Documentation on internals (table_widget1).
* character_code/1:                      Documentation on exports (basic_props).
* clause/1:                              Documentation on internals (pretty_print).
* clauses/1:                             Documentation on internals (pretty_print).
* clterm/1:                              Documentation on internals (pretty_print).
* color/1:                               Documentation on exports (color_pattern).
* complex_arg_property/1:                Documentation on exports (assertions_props).
* complex_goal_property/1:               Documentation on exports (assertions_props).
* constant/1:                            Documentation on exports (basic_props).
* datime_struct/1:                       Documentation on exports (system).
* dbconnection/1 <1>:                    Documentation on exports (mysql_client).
* dbconnection/1:                        Documentation on internals (persdbrt_mysql).
* dbname/1 <1>:                          Documentation on exports (db_client_types).
* dbname/1:                              Documentation on exports (persdbrt_mysql).
* dbqueryconnection/1:                   Documentation on exports (mysql_client).
* detcond/1:                             Documentation on exports (andorra).
* dgraph/1:                              Documentation on exports (graphs).
* dictionary/1 <1>:                      Documentation on exports (internal_types).
* dictionary/1:                          Documentation on exports (assertions_props).
* directoryname/1:                       Documentation on internals (persdbrt).
* dlgraph/1:                             Documentation on exports (graphs).
* environment/1:                         Documentation on exports (internal_types).
* faggregator/1:                         Documentation on exports (fuzzy).
* flag/1:                                Documentation on internals (pretty_print).
* flt/1:                                 Documentation on exports (basic_props).
* footer/1:                              Documentation on exports (genbar1).
* form_assignment/1:                     Documentation on exports (pillow_types).
* form_dict/1:                           Documentation on exports (pillow_types).
* form_value/1:                          Documentation on exports (pillow_types).
* format_control/1:                      Documentation on exports (format).
* g_assrt_body/1:                        Documentation on exports (assertions_props).
* garbage_collection_option/1:           Documentation on internals (prolog_sys).
* gc_result/1:                           Documentation on internals (prolog_sys).
* gnd/1:                                 Documentation on exports (basic_props).
* handler_type/1:                        Documentation on internals (chartlib_errhandle).
* header/1:                              Documentation on exports (genbar1).
* hms_time/1:                            Documentation on exports (pillow_types).
* html_term/1:                           Documentation on exports (pillow_types).
* http_date/1:                           Documentation on exports (pillow_types).
* http_request_param/1:                  Documentation on exports (pillow_types).
* http_response_param/1:                 Documentation on exports (pillow_types).
* image/1:                               Documentation on exports (table_widget1).
* int/1:                                 Documentation on exports (basic_props).
* int_list/1:                            Documentation on exports (foreign_interface_properties).
* intlist/1:                             Documentation on exports (numlists).
* io_mode/1:                             Documentation on exports (streams_basic).
* keylist/1:                             Documentation on exports (sort).
* keypair/1:                             Documentation on internals (sort).
* keyword/1:                             Documentation on internals (persdbrt).
* lgraph/2:                              Documentation on exports (lgraphs).
* list/1:                                Documentation on exports (basic_props).
* list/2:                                Documentation on exports (basic_props).
* memory_option/1:                       Documentation on internals (prolog_sys).
* memory_result/1:                       Documentation on internals (prolog_sys).
* menu/1:                                Documentation on exports (window_class).
* month/1:                               Documentation on exports (pillow_types).
* multibar_attribute/1:                  Documentation on internals (genmultibar).
* nnegint/1:                             Documentation on exports (basic_props).
* null/1:                                Documentation on exports (foreign_interface_properties).
* null_dict/1:                           Documentation on exports (vndict).
* num/1:                                 Documentation on exports (basic_props).
* numlist/1:                             Documentation on exports (numlists).
* operator_specifier/1:                  Documentation on exports (basic_props).
* option/1 <1>:                          Documentation on exports (canvas_class).
* option/1:                              Documentation on exports (window_class).
* pair/1:                                Documentation on internals (graphs).
* parse/1:                               Documentation on exports (internal_types).
* passwd/1 <1>:                          Documentation on exports (db_client_types).
* passwd/1:                              Documentation on exports (persdbrt_mysql).
* path/1:                                Documentation on exports (andorra).
* pattern/1 <1>:                         Documentation on exports (color_pattern).
* pattern/1:                             Documentation on exports (patterns).
* popen_mode/1:                          Documentation on exports (system).
* predfunctor/1:                         Documentation on exports (assertions_props).
* predname/1:                            Documentation on exports (basic_props).
* projterm/1 <1>:                        Documentation on exports (pl2sql).
* projterm/1:                            Documentation on exports (persdbrt_mysql).
* property_conjunction/1:                Documentation on exports (assertions_props).
* property_starterm/1:                   Documentation on exports (assertions_props).
* propfunctor/1:                         Documentation on exports (assertions_props).
* querybody/1 <1>:                       Documentation on exports (pl2sql).
* querybody/1:                           Documentation on exports (persdbrt_mysql).
* read_option/1:                         Documentation on internals (read).
* reference/1:                           Documentation on internals (data_facts).
* row/1:                                 Documentation on internals (table_widget1).
* s_assrt_body/1:                        Documentation on exports (assertions_props).
* sequence/2:                            Documentation on exports (basic_props).
* sequence_or_list/2:                    Documentation on exports (basic_props).
* shape/1:                               Documentation on exports (canvas_class).
* shutdown_type/1:                       Documentation on exports (sockets).
* size/1:                                Documentation on exports (gengraph1).
* smooth/1:                              Documentation on exports (gengraph1).
* socket_type/1:                         Documentation on exports (sockets).
* socketname/1 <1>:                      Documentation on exports (db_client_types).
* socketname/1:                          Documentation on exports (persdbrt_mysql).
* sourcename/1:                          Documentation on exports (streams_basic).
* sqlstring/1 <1>:                       Documentation on exports (db_client_types).
* sqlstring/1:                           Documentation on exports (pl2sql).
* stream/1:                              Documentation on exports (streams_basic).
* stream_alias/1:                        Documentation on exports (streams_basic).
* string/1:                              Documentation on exports (basic_props).
* struct/1:                              Documentation on exports (basic_props).
* symbol/1:                              Documentation on exports (gengraph1).
* symbol_option/1:                       Documentation on internals (prolog_sys).
* symbol_result/1:                       Documentation on internals (prolog_sys).
* table/1:                               Documentation on exports (table_widget1).
* tclCommand/1:                          Documentation on exports (tcltk).
* tclInterpreter/1:                      Documentation on exports (tcltk).
* term/1:                                Documentation on exports (basic_props).
* time_option/1:                         Documentation on internals (prolog_sys).
* time_result/1:                         Documentation on internals (prolog_sys).
* title/1:                               Documentation on exports (genbar1).
* translation_predname/1:                Documentation on internals (syntax_extensions).
* tree/1:                                Documentation on exports (internal_types).
* triple/1:                              Documentation on internals (graphs).
* tuple/1 <1>:                           Documentation on exports (db_client_types).
* tuple/1:                               Documentation on internals (persdbrt_mysql).
* ugraph/1:                              Documentation on exports (ugraphs).
* url_term/1:                            Documentation on exports (pillow_types).
* user/1 <1>:                            Documentation on exports (db_client_types).
* user/1:                                Documentation on exports (persdbrt_mysql).
* value_dict/1:                          Documentation on exports (pillow_types).
* varname/1:                             Documentation on exports (vndict).
* varnamedict/1:                         Documentation on exports (vndict).
* varnamesl/1:                           Documentation on exports (vndict).
* vector/1:                              Documentation on exports (gengraph1).
* wakeup_exp/1:                          Documentation on exports (when).
* weekday/1:                             Documentation on exports (pillow_types).
* whitespace/1:                          Documentation on exports (internal_types).
* widget/1:                              Documentation on exports (window_class).
* xbarelement1/1:                        Documentation on internals (genbar1).
* xbarelement2/1:                        Documentation on exports (genbar2).
* xbarelement3/1:                        Documentation on internals (genbar3).
* xbarelement4/1:                        Documentation on internals (genbar4).
* xelement/1:                            Documentation on internals (genmultibar).
* yelement/1:                            Documentation on exports (genbar1).


File: ciao.info,  Node: Declaration Definition Index,  Next: Concept Definition Index,  Prev: Regular Type Definition Index,  Up: Top

Declaration Definition Index
****************************

* Menu:

* add_clause_trans/1:                    Documentation on internals (syntax_extensions).
* add_goal_trans/1:                      Documentation on internals (syntax_extensions).
* add_sentence_trans/1:                  Documentation on internals (syntax_extensions).
* add_term_trans/1:                      Documentation on internals (syntax_extensions).
* aggr/1:                                Documentation on new declarations (fuzzy).
* argnames/1:                            Documentation on new declarations (argnames).
* calls/1:                               Documentation on new declarations (assertions).
* calls/2:                               Documentation on new declarations (assertions).
* comment/2:                             Documentation on new declarations (assertions).
* comp/1:                                Documentation on new declarations (assertions).
* comp/2:                                Documentation on new declarations (assertions).
* concurrent/1 <1>:                      Documentation on new declarations (class).
* concurrent/1:                          Documentation on internals (data_facts).
* data/1 <1>:                            Documentation on new declarations (class).
* data/1:                                Documentation on internals (data_facts).
* decl/1:                                Documentation on new declarations (assertions).
* decl/2:                                Documentation on new declarations (assertions).
* determinate/2:                         Documentation on new declarations (andorra).
* dynamic/1:                             Documentation on new declarations (class).
* entry/1:                               Documentation on new declarations (assertions).
* export/1 <1>:                          Documentation on new declarations (mycin).
* export/1:                              Documentation on new declarations (class).
* extra_compiler_opts/1:                 Documentation on internals (foreign_interface_properties).
* extra_compiler_opts/2:                 Documentation on internals (foreign_interface_properties).
* extra_linker_opts/1:                   Documentation on internals (foreign_interface_properties).
* extra_linker_opts/2:                   Documentation on internals (foreign_interface_properties).
* implements/1:                          Documentation on new declarations (class).
* inherit_class/1:                       Documentation on new declarations (class).
* inheritable/1:                         Documentation on new declarations (class).
* instance_of/2:                         Documentation on new declarations (objects).
* load_compilation_module/1:             Documentation on internals (syntax_extensions).
* modedef/1:                             Documentation on new declarations (assertions).
* new/2:                                 Documentation on new declarations (objects).
* new_declaration/1:                     Documentation on internals (syntax_extensions).
* new_declaration/2:                     Documentation on internals (syntax_extensions).
* op/3:                                  Documentation on internals (syntax_extensions).
* persistent/2:                          Documentation on internals (persdbrt).
* pred/1:                                Documentation on new declarations (assertions).
* pred/2:                                Documentation on new declarations (assertions).
* prop/1:                                Documentation on new declarations (assertions).
* prop/2:                                Documentation on new declarations (assertions).
* public/1:                              Documentation on new declarations (class).
* regtype/1:                             Documentation on new declarations (regtypes).
* regtype/2:                             Documentation on new declarations (regtypes).
* sql_persistent/3:                      Documentation on internals (persdbrt_mysql).
* success/1:                             Documentation on new declarations (assertions).
* success/2:                             Documentation on new declarations (assertions).
* use_active_module/2:                   Documentation on new declarations (actmods).
* use_class/1:                           Documentation on new declarations (objects).
* use_compiler/1:                        Documentation on internals (foreign_interface_properties).
* use_compiler/2:                        Documentation on internals (foreign_interface_properties).
* use_foreign_library/1:                 Documentation on internals (foreign_interface_properties).
* use_foreign_library/2:                 Documentation on internals (foreign_interface_properties).
* use_foreign_source/1:                  Documentation on internals (foreign_interface_properties).
* use_foreign_source/2:                  Documentation on internals (foreign_interface_properties).
* use_linker/1:                          Documentation on internals (foreign_interface_properties).
* use_linker/2:                          Documentation on internals (foreign_interface_properties).
* virtual/1:                             Documentation on new declarations (class).


File: ciao.info,  Node: Concept Definition Index,  Next: Global Index,  Prev: Declaration Definition Index,  Up: Top

Concept Definition Index
************************

* Menu:

* &-Prolog:                              Acknowledgments.
* .ciaorc <1>:                           The Ciao initialization file (Win32).
* .ciaorc:                               The Ciao initialization file (Un*x).
* abort:                                 Options available during debugging.
* abstract methods:                      Documentation on new declarations (class).
* acceptable modes:                      Documentation on exports (assertions_props).
* acknowledgments:                       Acknowledgments.
* active module <1>:                     Active modules (high-level distributed execution).
* active module:                         Types of executables generated.
* active object:                         Active modules (high-level distributed execution).
* addmodule and pred(N) meta-arguments:  Usage and interface (class).
* ancestors:                             Options available during debugging.
* Anne Mulkers:                          Acknowledgments.
* answer variable:                       Shell interaction.
* assertion body syntax:                 Documentation on exports (assertions_props).
* attribute:                             Documentation on new declarations (class).
* attributed variables:                  Attributed variables.
* Austrian Research Institute for AI:    Acknowledgments.
* binary directory:                      Un*x full installation instructions.
* box-type debugger:                     The interactive debugger.
* breakpoint:                            Documentation on exports (debugger).
* Bristol University:                    Acknowledgments.
* bugs, reporting:                       Reporting bugs.
* calls assertion:                       Documentation on new declarations (assertions).
* certainty factor:                      Programming MYCIN rules.
* CGI:                                   The PiLLoW Web programming library.
* CGI executables:                       The script interpreter.
* check assertion:                       Documentation on exports (assertions).
* Christian Holzbauer:                   Acknowledgments.
* Ciao basic builtins <1>:               *** PART II - The Ciao basic language (engine).
* Ciao basic builtins:                   PART II - The Ciao basic language (engine).
* Ciao engine:                           Acknowledgments.
* Ciao preprocessor:                     Acknowledgments.
* ciao, global description:              About the Ciao Prolog development system.
* Ciao, why this name:                   About the name of the System.
* ciao-users:                            Keeping up to date with the Ciao users mailing list.
* client installation:                   Server installation under Windows.
* CLIP group:                            Acknowledgments.
* closed:                                Documentation on exports (data_facts).
* command:                               Options available during debugging.
* comment assertion:                     Documentation on new declarations (assertions).
* comments, machine readable:            The Ciao assertion package.
* comp assertion:                        Documentation on new declarations (assertions).
* compatibility properties:              Defining properties.
* compiler, standalone:                  The stand-alone command-line compiler.
* compiling programs <1>:                Running Ciao scripts (Win32).
* compiling programs <2>:                Generating executables (Win32).
* compiling programs <3>:                Compiling and running programs (Win32).
* compiling programs <4>:                Running Ciao scripts (Un*x).
* compiling programs <5>:                Generating executables (Un*x).
* compiling programs:                    Compiling and running programs (Un*x).
* compiling, from command line:          The stand-alone command-line compiler.
* compiling, Win32:                      Installation and compilation under Windows.
* concurrency:                           Low-level concurrency/multithreading primitives.
* concurrent attribute:                  Documentation on new declarations (class).
* concurrent predicate:                  Fast/concurrent update of facts.
* concurrent predicates:                 Fast/concurrent update of facts.
* constructor:                           Documentation on exports (class).
* contributed libraries <1>:             *** PART XI - Contributed libraries.
* contributed libraries:                 PART XI - Contributed libraries.
* creep:                                 Options available during debugging.
* csh-compatible shell <1>:              Un*x full installation instructions.
* csh-compatible shell <2>:              Un*x installation summary.
* csh-compatible shell:                  Un*x user setup.
* current input stream:                  Documentation on exports (streams_basic).
* current output stream:                 Documentation on exports (streams_basic).
* Cygnus Win32:                          Installation and compilation under Windows.
* D.H.D. Warren:                         Acknowledgments.
* D.L. Bowen:                            Acknowledgments.
* Daniel Cabeza:                         Acknowledgments.
* data declaration:                      Fast/concurrent update of facts.
* data predicate:                        Fast/concurrent update of facts.
* database initialization:               Documentation on exports (persdbrt).
* debug options:                         Options available during debugging.
* debugger:                              The interactive debugger.
* debugging:                             Options available during debugging.
* decl assertion:                        Documentation on new declarations (assertions).
* declarations, user defined:            Basic builtin directives.
* DECsystem-10 Prolog User's Manual:     Acknowledgments.
* depth first iterative deepening:       Iterative-deepening execution.
* depth limit:                           Iterative-deepening execution.
* destructor:                            Documentation on exports (class).
* determinate goal:                      Andorra execution.
* development environment <1>:           Win32 binary installation summary.
* development environment <2>:           Un*x full installation instructions.
* development environment <3>:           Un*x installation summary.
* development environment <4>:           An introduction to the Ciao emacs environment (Win32).
* development environment:               An introduction to the Ciao emacs environment (Un*x).
* display:                               Options available during debugging.
* downloading emacs <1>:                 Win32 binary installation summary.
* downloading emacs:                     Un*x full installation instructions.
* downloading, latest versions:          Downloading new versions.
* emacs interface <1>:                   *** PART I - The program development environment.
* emacs interface:                       PART I - The program development environment.
* emacs mode, setting up, Win32:         Win32 binary installation summary.
* emacs, download <1>:                   Win32 binary installation summary.
* emacs, download:                       Un*x full installation instructions.
* emacs, intro <1>:                      An introduction to the Ciao emacs environment (Win32).
* emacs, intro:                          An introduction to the Ciao emacs environment (Un*x).
* engine directory <1>:                  *** PART II - The Ciao basic language (engine).
* engine directory:                      PART II - The Ciao basic language (engine).
* engine module:                         Pure Prolog package.
* Enrico Pontelli:                       Acknowledgments.
* entry assertion:                       Documentation on new declarations (assertions).
* environment variable definitions:      Un*x installation summary.
* environment variables, setup:          Un*x user setup.
* equi join in the WHERE-clause:         Documentation on internals (pl2sql).
* executable:                            Introduction to building executables.
* executables, compressed:               Types of executables generated.
* executables, dynamic:                  Types of executables generated.
* executables, generating <1>:           Generating executables (Win32).
* executables, generating:               Generating executables (Un*x).
* executables, how to run:               Running executables from the command line.
* executables, lazy load:                Types of executables generated.
* executables, self-contained:           Types of executables generated.
* executables, static:                   Types of executables generated.
* executables, types:                    Types of executables generated.
* existential quantification:            Documentation on exports (pl2sql).
* extensibility:                         ISO-Prolog compliance versus extensibility.
* F.C.N. Pereira:                        Acknowledgments.
* fail:                                  Options available during debugging.
* false assertion:                       Documentation on exports (assertions).
* feature terms:                         Terms with named arguments -records/feature terms.
* formatting commands:                   Some attention points.
* Francisco Bueno:                       Acknowledgments.
* Gerda Janssens:                        Acknowledgments.
* German Puebla:                         Acknowledgments.
* Gopal Gupta:                           Acknowledgments.
* H. Ait-Kaci:                           Entering recursive (conjunctive) shell levels.
* hard side-effects:                     Documentation on exports (native_props).
* help <1>:                              Checking for correct installation on Win32.
* help <2>:                              Options available during debugging.
* help <3>:                              Printing manuals (Win32).
* help <4>:                              Testing your Ciao Win32 installation.
* help:                                  Printing manuals (Un*x).
* help, unix:                            Getting help (Un*x).
* help, windows:                         Getting help (Win32).
* HTML:                                  The PiLLoW Web programming library.
* HTTP:                                  The PiLLoW Web programming library.
* independent:                           Documentation on internals (andprolog).
* INFOPATH:                              Un*x full installation instructions.
* inheritable interface:                 Documentation on new declarations (class).
* inheritance relationship:              Documentation on new declarations (class).
* initialization clauses:                Documentation on new declarations (class).
* initialization file <1>:               The Ciao initialization file (Win32).
* initialization file:                   The Ciao initialization file (Un*x).
* INRIA:                                 Acknowledgments.
* installation, checking the:            Checking for correct installation on Un*x.
* installation, Mac OS X, full instructions: Un*x full installation instructions.
* installation, Mac OS X, summary:       Un*x installation summary.
* installation, network based:           Un*x full installation instructions.
* installation, Un*x, full instructions: Un*x full installation instructions.
* installation, Un*x, summary:           Un*x installation summary.
* installation, Windows clients:         Server installation under Windows.
* installation, Windows server:          Server installation under Windows.
* installation, Windows, from binaries:  Installing Ciao from a Win32 binary distribution.
* installation, Windows, from sources:   Installation and compilation under Windows.
* instantiation properties:              Defining properties.
* interface inheritance:                 Documentation on new declarations (class).
* interfaces:                            Declaring classes and interfaces.
* interpreted mode:                      Marking modules and files for debugging in the top-level debugger.
* iso <1>:                               *** PART III - ISO-Prolog library (iso).
* iso:                                   PART III - ISO-Prolog library (iso).
* ISO-Prolog <1>:                        Documentation on exports (arithmetic).
* ISO-Prolog:                            ISO-Prolog compliance versus extensibility.
* ISO-Prolog builtins <1>:               *** PART III - ISO-Prolog library (iso).
* ISO-Prolog builtins:                   PART III - ISO-Prolog library (iso).
* iso-prolog, compliance:                ISO-Prolog compliance versus extensibility.
* iterative-deepening:                   Iterative-deepening execution.
* Jan Maluzynski:                        Acknowledgments.
* Johan Widen:                           Acknowledgments.
* John Gallagher:                        Acknowledgments.
* K.U. Leuven:                           Acknowledgments.
* Kalyan Muthukumar:                     Acknowledgments.
* Kevin Greene:                          Acknowledgments.
* keyboard:                              Characters and character strings.
* Kim Marriott:                          Acknowledgments.
* L. Byrd:                               Acknowledgments.
* L.M. Pereira:                          Acknowledgments.
* leap:                                  Options available during debugging.
* lib library <1>:                       *** PART II - The Ciao basic language (engine).
* lib library:                           PART II - The Ciao basic language (engine).
* library directory:                     Un*x full installation instructions.
* limitations, architecture-specific:    Architecture-specific notes and limitations.
* Linkoping U.:                          Acknowledgments.
* loading mode:                          Marking modules and files for debugging in the top-level debugger.
* loading programs <1>:                  Compiling and running programs (Win32).
* loading programs:                      Compiling and running programs (Un*x).
* LogIn:                                 Entering recursive (conjunctive) shell levels.
* LPdoc:                                 About this manual.
* lpmake:                                The Ciao lpmake scripting facility.
* lpmake autodocumentation:              The Ciao lpmake scripting facility.
* mailing list:                          Keeping up to date with the Ciao users mailing list.
* make:                                  The Ciao lpmake scripting facility.
* MANPATH:                               Un*x full installation instructions.
* manual, printing <1>:                  Checking for correct installation on Win32.
* manual, printing <2>:                  Printing manuals (Win32).
* manual, printing <3>:                  Testing your Ciao Win32 installation.
* manual, printing:                      Printing manuals (Un*x).
* manual, tour:                          A tour of the manual.
* manuals, printing <1>:                 Printing manuals (Win32).
* manuals, printing:                     Printing manuals (Un*x).
* Manuel Carro:                          Acknowledgments.
* Manuel Hermenegildo:                   Acknowledgments.
* Maria Jose Garcia de la Banda:         Acknowledgments.
* Mats Carlsson:                         Acknowledgments.
* Maurice Bruynooghe:                    Acknowledgments.
* MCC:                                   Acknowledgments.
* Melbourne U.:                          Acknowledgments.
* modular interface:                     Intermediate files in the compilation process.
* module qualification:                  The module system.
* modules, active:                       Types of executables generated.
* Monash U.:                             Acknowledgments.
* multi-evaluated:                       Documentation on new declarations (class).
* multiarchitecture support:             Multiarchitecture support.
* Naming term aguments:                  Terms with named arguments -records/feature terms.
* New Mexico State University:           Acknowledgments.
* nodebug:                               Options available during debugging.
* nospy:                                 Options available during debugging.
* notation:                              Syntax terminology and notational conventions.
* overriden:                             Documentation on new declarations (class).
* P. Lincoln:                            Entering recursive (conjunctive) shell levels.
* parallel Prolog:                       Acknowledgments.
* parallelizing compiler:                Acknowledgments.
* parametric property:                   Documentation on internals (meta_props).
* parametric regular type abstractions:  Documentation on internals (meta_props).
* parametric type functor:               Documentation on new declarations (regtypes).
* PATH:                                  Un*x full installation instructions.
* path alias:                            Documentation on exports (streams_basic).
* patterns:                              Pattern (regular expression) matching.
* Paulo Moura:                           Version/Change Log (ciao).
* Pawel Pietrzak:                        Acknowledgments.
* Pedro Lopez:                           Acknowledgments.
* Peter Stuckey:                         Acknowledgments.
* Pierre Deransart:                      Acknowledgments.
* PiLLoW on-line tutorial:               The PiLLoW Web programming library.
* Polymorphism:                          Object oriented programming.
* pred assertion:                        Documentation on new declarations (assertions).
* print:                                 Options available during debugging.
* printdepth:                            Options available during debugging.
* printing, manual <1>:                  Checking for correct installation on Win32.
* printing, manual <2>:                  Printing manuals (Win32).
* printing, manual <3>:                  Testing your Ciao Win32 installation.
* printing, manual:                      Printing manuals (Un*x).
* programming environment <1>:           *** PART I - The program development environment.
* programming environment:               PART I - The program development environment.
* prolog flag <1>:                       Documentation on exports (io_aux).
* prolog flag:                           Changing system behaviour and various flags.
* Prolog shell scripts:                  The script interpreter.
* prop assertion:                        Documentation on new declarations (assertions).
* properties of computations:            Defining properties.
* properties of execution states:        Defining properties.
* properties, basic:                     Basic data types and properties.
* properties, native:                    Properties which are native to analyzers.
* property abstraction:                  Documentation on internals (meta_props).
* protected:                             Documentation on new declarations (class).
* public domain <1>:                     Summary.
* public domain:                         (outside of any node).
* public interface:                      Documentation on new declarations (class).
* pure Prolog:                           Pure Prolog package.
* query:                                 Shell interaction.
* records <1>:                           Terms with named arguments -records/feature terms.
* records <2>:                           *** PART VII - Ciao Prolog extensions.
* records:                               PART VII - Ciao Prolog extensions.
* recursive level:                       Entering recursive (conjunctive) shell levels.
* references, to Ciao:                   Referring to Ciao.
* referring to Ciao:                     Referring to Ciao.
* regtype assertion:                     Documentation on new declarations (regtypes).
* regular expressions:                   Pattern (regular expression) matching.
* regular type expression:               Documentation on new declarations (regtypes).
* reporting bugs:                        Reporting bugs.
* retry:                                 Options available during debugging.
* Roger Nasr <1>:                        Entering recursive (conjunctive) shell levels.
* Roger Nasr:                            Acknowledgments.
* run-time checks:                       Run-time checking of assertions.
* running programs <1>:                  Running Ciao scripts (Win32).
* running programs <2>:                  Compiling and running programs (Win32).
* running programs <3>:                  Running Ciao scripts (Un*x).
* running programs:                      Compiling and running programs (Un*x).
* Saumya Debray:                         Acknowledgments.
* scripts <1>:                           Un*x full installation instructions.
* scripts <2>:                           Running Ciao scripts (Win32).
* scripts:                               Running Ciao scripts (Un*x).
* Seif Haridi:                           Acknowledgments.
* sh-compatible shell <1>:               Un*x full installation instructions.
* sh-compatible shell <2>:               Un*x installation summary.
* sh-compatible shell:                   Un*x user setup.
* sharing sets:                          Documentation on exports (native_props).
* shortcut, windows:                     Win32 binary installation summary.
* SICS:                                  Acknowledgments.
* SICStus Prolog:                        Acknowledgments.
* skip:                                  Options available during debugging.
* soft side-effects:                     Documentation on exports (native_props).
* source directory:                      Un*x full installation instructions.
* spy:                                   Options available during debugging.
* standard total ordering:               Comparing terms.
* status, this manual:                   About this manual.
* style sheets <1>:                      Checking for correct installation on Win32.
* style sheets <2>:                      Checking for correct installation on Un*x.
* style sheets <3>:                      Testing your Ciao Win32 installation.
* style sheets:                          Testing your Ciao Un*x installation.
* subterm:                               Options available during debugging.
* success assertion:                     Documentation on new declarations (assertions).
* super class:                           Documentation on new declarations (class).
* Swedish Institute of Computer Science: Acknowledgments.
* tar:                                   Un*x full installation instructions.
* Technical University of Madrid:        Acknowledgments.
* top-level shell, starting, unix:       Starting/exiting the top-level shell (Un*x).
* top-level shell, starting, windows:    Starting/exiting the top-level shell (Win32).
* tour, of the manual:                   A tour of the manual.
* troubleshooting <1>:                   Installing Ciao from a Win32 binary distribution.
* troubleshooting <2>:                   Troubleshooting (nasty messages and nifty workarounds).
* troubleshooting:                       Installing Ciao from the source distribution.
* true assertion:                        Documentation on exports (assertions).
* trust assertion:                       Documentation on exports (assertions).
* U. of Arizona:                         Acknowledgments.
* unify:                                 Options available during debugging.
* uninstalling <1>:                      Un*x full installation instructions.
* uninstalling:                          Un*x installation summary.
* UPM:                                   Acknowledgments.
* user module:                           The module system.
* user modules, debugging:               Marking modules and files for debugging in the top-level debugger.
* user setup:                            Un*x user setup.
* users mailing list:                    Keeping up to date with the Ciao users mailing list.
* Veroniek Dumortier:                    Acknowledgments.
* virtual:                               Documentation on new declarations (class).
* WAM:                                   Acknowledgments.
* why the name Ciao:                     About the name of the System.
* windows shortcut:                      Win32 binary installation summary.
* Wlodek Drabent:                        Acknowledgments.
* write:                                 Options available during debugging.
* WWW, interfacing with:                 The PiLLoW Web programming library.
* XML:                                   The PiLLoW Web programming library.


File: ciao.info,  Node: Global Index,  Prev: Concept Definition Index,  Up: Top

Global Index
************

   This is a global index containing pointers to places where
concepts,  predicates, modes, properties, types, applications, etc.,
are referred to  in the text of the document. Note that due to
limitations of the  `info' format unfortunately only the first
reference will appear in  online versions of the document.

* Menu:

* !!/0 <1>:                              Documentation on internals (det_hook_rt).
* !!/0:                                  Documentation on exports (det_hook_rt).
* !/0 <1>:                               Documentation on exports (basiccontrol).
* !/0:                                   Usage and interface (basiccontrol).
* # /2:                                  Documentation on exports (arithmetic).
* ##/2:                                  Usage and interface (fuzzy).
* #>/2:                                  Usage and interface (fuzzy).
* $/1:                                   Usage and interface (pillow).
* $/2 <1>:                               Usage and interface (pillow).
* $/2:                                   Usage and interface (argnames).
* &-Prolog:                              Acknowledgments.
* &/2 <1>:                               Documentation on internals (andprolog).
* &/2:                                   Usage and interface (andprolog).
* ','/2:                                 Documentation on exports (basic_props).
* '<-'/1:                                Breadth-first execution.
* '<-'/2:                                Breadth-first execution.
* 'persdb/ll' <1>:                       Documentation on exports (persdbrt).
* 'persdb/ll':                           Usage and interface (persdbrt).
* * /2:                                  Documentation on exports (arithmetic).
* * projection:                          Documentation on internals (pl2sql).
* ** /2:                                 Documentation on exports (arithmetic).
* */1 <1>:                               Documentation on new modes (isomodes).
* */1:                                   Usage and interface (isomodes).
* */2 <1>:                               Documentation on new modes (isomodes).
* */2 <2>:                               Usage and interface (isomodes).
* */2:                                   Documentation on exports (assertions_props).
* + /1:                                  Documentation on exports (arithmetic).
* + /2:                                  Documentation on exports (arithmetic).
* ++ /1:                                 Documentation on exports (arithmetic).
* +/1 <1>:                               Documentation on new modes (basicmodes).
* +/1 <2>:                               Usage and interface (basicmodes).
* +/1 <3>:                               Documentation on new modes (isomodes).
* +/1 <4>:                               Usage and interface (isomodes).
* +/1:                                   Documentation on exports (assertions_props).
* +/2 <1>:                               Documentation on new modes (basicmodes).
* +/2 <2>:                               Usage and interface (basicmodes).
* +/2 <3>:                               Documentation on new modes (isomodes).
* +/2:                                   Usage and interface (isomodes).
* ,/2 <1>:                               Documentation on exports (basiccontrol).
* ,/2:                                   Usage and interface (basiccontrol).
* - /1:                                  Documentation on exports (arithmetic).
* - /2:                                  Documentation on exports (arithmetic).
* -- /1:                                 Documentation on exports (arithmetic).
* -->/2:                                 Usage and interface (classic).
* -/1 <1>:                               Documentation on new modes (basicmodes).
* -/1 <2>:                               Usage and interface (basicmodes).
* -/1 <3>:                               Documentation on new modes (isomodes).
* -/1:                                   Usage and interface (isomodes).
* -/2 <1>:                               Documentation on new modes (basicmodes).
* -/2 <2>:                               Usage and interface (basicmodes).
* -/2 <3>:                               Documentation on new modes (isomodes).
* -/2:                                   Usage and interface (isomodes).
* ->/2 <1>:                              Documentation on exports (basiccontrol).
* ->/2:                                  Usage and interface (basiccontrol).
* ./2 <1>:                               Documentation on exports (ciaosh).
* ./2:                                   Usage and interface (ciaosh).
* .ciaorc <1>:                           Shell invocation and startup.
* .ciaorc <2>:                           The Ciao initialization file (Win32).
* .ciaorc <3>:                           Compiling and running programs (Win32).
* .ciaorc <4>:                           The Ciao initialization file (Un*x).
* .ciaorc:                               Compiling and running programs (Un*x).
* .emacs <1>:                            The Ciao initialization file (Win32).
* .emacs:                                The Ciao initialization file (Un*x).
* .tar files:                            Gathering the dependent files for a file.
* / /2:                                  Documentation on exports (arithmetic).
* // /2:                                 Documentation on exports (arithmetic).
* /\ /2:                                 Documentation on exports (arithmetic).
* /bin/sh:                               Documentation on exports (system).
* /bin/sh.exe <1>:                       Installation and compilation under Windows.
* /bin/sh.exe:                           Running executables from the command line.
* /etc/bashrc <1>:                       Un*x full installation instructions.
* /etc/bashrc:                           Un*x installation summary.
* /etc/csh.cshrc <1>:                    Un*x full installation instructions.
* /etc/csh.cshrc:                        Un*x installation summary.
* /etc/csh.login <1>:                    Un*x full installation instructions.
* /etc/csh.login:                        Un*x installation summary.
* /etc/skel <1>:                         Un*x full installation instructions.
* /etc/skel:                             Un*x installation summary.
* /usr/share/emacs/.../lisp/site-init.pl <1>: Un*x full installation instructions.
* /usr/share/emacs/.../lisp/site-init.pl: Un*x installation summary.
* :#/2 <1>:                              Documentation on exports (fuzzy).
* :#/2:                                  Usage and interface (fuzzy).
* ::/2:                                  Usage and interface (assertions).
* :=/1:                                  Usage and interface (fuzzy).
* :=/2 <1>:                              Usage and interface (fuzzy).
* :=/2:                                  Usage and interface (functions).
* :~/1:                                  Usage and interface (fuzzy).
* :~/2 <1>:                              Documentation on exports (fuzzy).
* :~/2:                                  Usage and interface (fuzzy).
* ;/2 <1>:                               Documentation on exports (basiccontrol).
* ;/2:                                   Usage and interface (basiccontrol).
* <#/2:                                  Usage and interface (fuzzy).
* <-/1:                                  Usage and interface (bf).
* <-/2:                                  Usage and interface (bf).
* </2 <1>:                               Documentation on exports (arithmetic).
* </2:                                   Usage and interface (arithmetic).
* << /2:                                 Documentation on exports (arithmetic).
* <LIBROOT>/ciao/DOTcshrc:               Multiarchitecture support.
* =../2 <1>:                             Documentation on exports (term_basic).
* =../2:                                 Usage and interface (term_basic).
* =/2 <1>:                               Documentation on exports (term_basic).
* =/2:                                   Usage and interface (term_basic).
* =:=/2 <1>:                             Documentation on exports (arithmetic).
* =:=/2:                                 Usage and interface (arithmetic).
* =</2 <1>:                              Documentation on exports (arithmetic).
* =</2:                                  Usage and interface (arithmetic).
* ==/2 <1>:                              Unweighted graph-processing utilities.
* ==/2 <2>:                              Documentation on exports (term_compare).
* ==/2:                                  Usage and interface (term_compare).
* =>/1:                                  Usage and interface (fuzzy).
* =>/2 <1>:                              Usage and interface (argnames).
* =>/2:                                  Usage and interface (assertions).
* =>/4 <1>:                              Documentation on exports (fuzzy).
* =>/4:                                  Usage and interface (fuzzy).
* =\=/2 <1>:                             Documentation on exports (arithmetic).
* =\=/2:                                 Usage and interface (arithmetic).
* >/2 <1>:                               Documentation on exports (arithmetic).
* >/2:                                   Usage and interface (arithmetic).
* >=/2 <1>:                              Documentation on exports (arithmetic).
* >=/2:                                  Usage and interface (arithmetic).
* >> /2:                                 Documentation on exports (arithmetic).
* ?/1 <1>:                               Documentation on new modes (basicmodes).
* ?/1 <2>:                               Usage and interface (basicmodes).
* ?/1 <3>:                               Documentation on new modes (isomodes).
* ?/1:                                   Usage and interface (isomodes).
* ?/2 <1>:                               Documentation on new modes (basicmodes).
* ?/2 <2>:                               Usage and interface (basicmodes).
* ?/2 <3>:                               Documentation on new modes (isomodes).
* ?/2:                                   Usage and interface (isomodes).
* ?=/2:                                  Usage and interface (andorra).
* ?\=/2:                                 Usage and interface (andorra).
* @/1 <1>:                               Documentation on new modes (basicmodes).
* @/1 <2>:                               Usage and interface (basicmodes).
* @/1 <3>:                               Documentation on new modes (isomodes).
* @/1:                                   Usage and interface (isomodes).
* @/2 <1>:                               Documentation on exports (remote).
* @/2 <2>:                               Documentation on new modes (basicmodes).
* @/2 <3>:                               Usage and interface (basicmodes).
* @/2 <4>:                               Documentation on new modes (isomodes).
* @/2:                                   Usage and interface (isomodes).
* @</2 <1>:                              Documentation on exports (term_compare).
* @</2:                                  Usage and interface (term_compare).
* @=</2 <1>:                             Documentation on exports (term_compare).
* @=</2:                                 Usage and interface (term_compare).
* @>/2 <1>:                              Documentation on exports (term_compare).
* @>/2:                                  Usage and interface (term_compare).
* @>=/2 <1>:                             Documentation on exports (term_compare).
* @>=/2:                                 Usage and interface (term_compare).
* \ /1:                                  Documentation on exports (arithmetic).
* \+/1 <1>:                              Documentation on exports (basiccontrol).
* \+/1:                                  Usage and interface (basiccontrol).
* \/ /2:                                 Documentation on exports (arithmetic).
* \=/2 <1>:                              Documentation on exports (iso_misc).
* \=/2:                                  Usage and interface (iso_misc).
* \==/2 <1>:                             Documentation on exports (term_compare).
* \==/2:                                 Usage and interface (term_compare).
* ^/2 <1>:                               Documentation on exports (pl2sql).
* ^/2 <2>:                               Documentation on exports (aggregates).
* ^/2:                                   Usage and interface (aggregates).
* ^^/1:                                  Usage and interface (functions).
* _assertion language_:                  Modes.
* _mode_:                                Modes.
* _predicate spec_:                      Predicate specs.
* a_string/1:                            Strings and atoms.
* abolish/1 <1>:                         Documentation on exports (dynamic).
* abolish/1:                             Usage and interface (dynamic).
* abort:                                 Options available during debugging.
* abort/0:                               Documentation on exports (exceptions).
* abs/1:                                 Documentation on exports (arithmetic).
* absolute_file_name/2 <1>:              Operating system utilities.
* absolute_file_name/2 <2>:              Documentation on exports (streams_basic).
* absolute_file_name/2:                  Usage and interface (streams_basic).
* absolute_file_name/7 <1>:              Documentation on exports (streams_basic).
* absolute_file_name/7:                  Usage and interface (streams_basic).
* abstract methods:                      Documentation on new declarations (class).
* acceptable modes:                      Documentation on exports (assertions_props).
* ACCLAIM:                               Acknowledgments.
* acknowledgments:                       Acknowledgments.
* acrobat reader <1>:                    Printing manuals (Win32).
* acrobat reader:                        Printing manuals (Un*x).
* action_widget/1 <1>:                   Documentation on exports (widget_class).
* action_widget/1:                       Usage and interface (widget_class).
* action_widget/3 <1>:                   Documentation on exports (widget_class).
* action_widget/3:                       Usage and interface (widget_class).
* active module <1>:                     Active modules (high-level distributed execution).
* active module <2>:                     Documentation on exports (ciaosh).
* active module:                         Types of executables generated.
* active modules <1>:                    *** PART VII - Ciao Prolog extensions.
* active modules:                        PART VII - Ciao Prolog extensions.
* active object:                         Active modules (high-level distributed execution).
* active_agents/1:                       Documentation on internals (andprolog).
* add_after/4 <1>:                       Documentation on exports (idlists).
* add_after/4 <2>:                       Usage and interface (idlists).
* add_after/4 <3>:                       Documentation on exports (lists).
* add_after/4:                           Usage and interface (lists).
* add_before/4 <1>:                      Documentation on exports (idlists).
* add_before/4 <2>:                      Usage and interface (idlists).
* add_before/4 <3>:                      Documentation on exports (lists).
* add_before/4:                          Usage and interface (lists).
* add_clause_trans/1:                    Documentation on internals (syntax_extensions).
* add_edges/3 <1>:                       Documentation on exports (ugraphs).
* add_edges/3:                           Usage and interface (ugraphs).
* add_environment_whitespace/3 <1>:      Documentation on exports (parser_util).
* add_environment_whitespace/3:          Usage and interface (parser_util).
* add_goal_trans/1:                      Documentation on internals (syntax_extensions).
* add_indentation/3 <1>:                 Documentation on exports (parser_util).
* add_indentation/3:                     Usage and interface (parser_util).
* add_sentence_trans/1:                  Documentation on internals (syntax_extensions).
* add_term_trans/1:                      Documentation on internals (syntax_extensions).
* add_vertices/3 <1>:                    Documentation on exports (ugraphs).
* add_vertices/3:                        Usage and interface (ugraphs).
* addmodule and pred(N) meta-arguments:  Usage and interface (class).
* address/1 <1>:                         Documentation on exports (foreign_interface_properties).
* address/1:                             Usage and interface (foreign_interface_properties).
* aggr/1 <1>:                            Documentation on new declarations (fuzzy).
* aggr/1:                                Usage and interface (fuzzy).
* aggregate function (sub)queries:       Documentation on internals (pl2sql).
* aggregate function terms:              Documentation on internals (pl2sql).
* aggregate_function/3:                  Documentation on internals (pl2sql).
* aggregate_functor/2 <1>:               Documentation on internals (pl2sql).
* aggregate_functor/2:                   Documentation on exports (pl2sql).
* aggregates <1>:                        Usage and interface (parser_util).
* aggregates <2>:                        Usage and interface (parser).
* aggregates <3>:                        Usage and interface (lookup).
* aggregates <4>:                        Usage and interface (io).
* aggregates <5>:                        Usage and interface (generator).
* aggregates <6>:                        Usage and interface (dictionary_tree).
* aggregates <7>:                        Usage and interface (dictionary).
* aggregates <8>:                        Usage and interface (boundary).
* aggregates <9>:                        Usage and interface (pl2sql).
* aggregates <10>:                       Usage and interface (persdbrt_mysql).
* aggregates <11>:                       Usage and interface (persdbrt).
* aggregates <12>:                       Usage and interface (window_class).
* aggregates <13>:                       Usage and interface (davinci).
* aggregates <14>:                       Usage and interface (build_foreign_interface).
* aggregates <15>:                       Usage and interface (objects_rt).
* aggregates <16>:                       Usage and interface (functions).
* aggregates <17>:                       All solutions concurrent predicates.
* aggregates <18>:                       Usage and interface (iso).
* aggregates:                            Usage and interface (debugger).
* aggregation operations:                SQL persistent database interface.
* aggregation predicates:                Documentation on exports (aggregates).
* analyzer output:                       Documentation on exports (assertions).
* ancestors:                             Options available during debugging.
* anchor/1 <1>:                          Documentation on exports (text_class).
* anchor/1:                              Usage and interface (text_class).
* andprolog/andprolog_rt:                Usage and interface (native_props).
* angle_start/1 <1>:                     Documentation on exports (arc_class).
* angle_start/1:                         Usage and interface (arc_class).
* Anne Mulkers:                          Acknowledgments.
* answer variable:                       Shell interaction.
* answertableterm/1 <1>:                 Documentation on exports (db_client_types).
* answertableterm/1 <2>:                 Usage and interface (db_client_types).
* answertableterm/1:                     Documentation on exports (persdbrt_mysql).
* answertupleterm/1 <1>:                 Documentation on exports (db_client_types).
* answertupleterm/1:                     Usage and interface (db_client_types).
* any_term/1 <1>:                        Documentation on exports (foreign_interface_properties).
* any_term/1:                            Usage and interface (foreign_interface_properties).
* append/3 <1>:                          Documentation on exports (lists).
* append/3:                              Usage and interface (lists).
* apropos/1 <1>:                         Documentation on exports (librowser).
* apropos/1:                             Usage and interface (librowser).
* apropos_spec/1:                        Documentation on internals (librowser).
* arg/2 <1>:                             Documentation on exports (terms).
* arg/2:                                 Usage and interface (terms).
* arg/3 <1>:                             Documentation on exports (term_basic).
* arg/3:                                 Usage and interface (term_basic).
* arg_expander/6 <1>:                    Documentation on exports (expansion_tools).
* arg_expander/6:                        Usage and interface (expansion_tools).
* argnames/1 <1>:                        Documentation on new declarations (argnames).
* argnames/1:                            Usage and interface (argnames).
* arithexpression/1 <1>:                 Documentation on exports (arithmetic).
* arithexpression/1 <2>:                 Usage and interface (arithmetic).
* arithexpression/1:                     Arithmetic.
* arithmetic:                            Documentation on new declarations (assertions).
* arithmetic goal:                       Documentation on internals (pl2sql).
* arithmetic_functor/2 <1>:              Documentation on internals (pl2sql).
* arithmetic_functor/2:                  Documentation on exports (pl2sql).
* arrowheads/1 <1>:                      Documentation on exports (line_class).
* arrowheads/1:                          Usage and interface (line_class).
* ASCII code:                            Documentation on exports (arithmetic).
* ask/2 <1>:                             Documentation on exports (terms_check).
* ask/2:                                 Usage and interface (terms_check).
* assert/1 <1>:                          Documentation on exports (dynamic).
* assert/1:                              Usage and interface (dynamic).
* assert/2 <1>:                          Documentation on exports (dynamic).
* assert/2:                              Usage and interface (dynamic).
* asserta/1 <1>:                         Documentation on exports (dynamic).
* asserta/1:                             Usage and interface (dynamic).
* asserta/2 <1>:                         Documentation on exports (dynamic).
* asserta/2:                             Usage and interface (dynamic).
* asserta_fact/1 <1>:                    Documentation on exports (persdbrt).
* asserta_fact/1 <2>:                    Usage and interface (persdbrt).
* asserta_fact/1 <3>:                    Introduction to persistent predicates.
* asserta_fact/1 <4>:                    Documentation on exports (data_facts).
* asserta_fact/1:                        Usage and interface (data_facts).
* asserta_fact/2 <1>:                    Documentation on exports (data_facts).
* asserta_fact/2:                        Usage and interface (data_facts).
* assertion body syntax:                 Documentation on exports (assertions_props).
* assertion language:                    About this manual.
* assertion normalizer:                  Printing the declarations and code in a file.
* assertions <1>:                        Types and properties related to assertions.
* assertions <2>:                        Usage and interface (assertions).
* assertions:                            The Ciao assertion package.
* assertions/assertions_props <1>:       Usage and interface (assrt_write).
* assertions/assertions_props <2>:       Usage and interface (regtypes).
* assertions/assertions_props:           Usage and interface (assertions).
* assertions/assrt_lib <1>:              Usage and interface (build_foreign_interface).
* assertions/assrt_lib:                  Usage and interface (assrt_write).
* assertions/doc_props <1>:              Usage and interface (format).
* assertions/doc_props:                  Usage and interface (dcg_expansion).
* assertions/meta_props <1>:             Usage and interface (messages).
* assertions/meta_props <2>:             Usage and interface (rtchecks).
* assertions/meta_props <3>:             Usage and interface (basicmodes).
* assertions/meta_props:                 Usage and interface (isomodes).
* assertz/1 <1>:                         Documentation on exports (dynamic).
* assertz/1:                             Usage and interface (dynamic).
* assertz/2 <1>:                         Documentation on exports (dynamic).
* assertz/2:                             Usage and interface (dynamic).
* assertz_fact/1 <1>:                    Documentation on exports (persdbrt_mysql).
* assertz_fact/1 <2>:                    SQL persistent database interface.
* assertz_fact/1 <3>:                    Documentation on exports (persdbrt).
* assertz_fact/1 <4>:                    Usage and interface (persdbrt).
* assertz_fact/1 <5>:                    Introduction to persistent predicates.
* assertz_fact/1 <6>:                    Documentation on exports (data_facts).
* assertz_fact/1:                        Usage and interface (data_facts).
* assertz_fact/2 <1>:                    Documentation on exports (data_facts).
* assertz_fact/2:                        Usage and interface (data_facts).
* assrt_body/1 <1>:                      Documentation on exports (assertions_props).
* assrt_body/1 <2>:                      Usage and interface (assertions_props).
* assrt_body/1:                          Documentation on new declarations (assertions).
* assrt_status/1 <1>:                    Documentation on exports (assertions_props).
* assrt_status/1:                        Usage and interface (assertions_props).
* assrt_type/1 <1>:                      Documentation on exports (assertions_props).
* assrt_type/1:                          Usage and interface (assertions_props).
* at_least_one/4 <1>:                    Documentation on exports (parser_util).
* at_least_one/4:                        Usage and interface (parser_util).
* at_least_one/5 <1>:                    Documentation on exports (parser_util).
* at_least_one/5:                        Usage and interface (parser_util).
* atan/1:                                Documentation on exports (arithmetic).
* atm/1 <1>:                             Documentation on exports (basic_props).
* atm/1:                                 Usage and interface (basic_props).
* atm_or_atm_list/1 <1>:                 Documentation on exports (basic_props).
* atm_or_atm_list/1:                     Usage and interface (basic_props).
* atom/1 <1>:                            Documentation on exports (term_typing).
* atom/1:                                Usage and interface (term_typing).
* atom2term/2 <1>:                       Documentation on exports (atom2term).
* atom2term/2:                           Usage and interface (atom2term).
* atom_chars/2 <1>:                      Documentation on exports (iso_byte_char).
* atom_chars/2:                          Usage and interface (iso_byte_char).
* atom_codes/2 <1>:                      Documentation on exports (atomic_basic).
* atom_codes/2:                          Usage and interface (atomic_basic).
* atom_concat/2 <1>:                     Documentation on exports (terms).
* atom_concat/2:                         Usage and interface (terms).
* atom_concat/3 <1>:                     Documentation on exports (atomic_basic).
* atom_concat/3:                         Usage and interface (atomic_basic).
* atom_length/2 <1>:                     Documentation on exports (atomic_basic).
* atom_length/2:                         Usage and interface (atomic_basic).
* atom_lock_state/2 <1>:                 Documentation on exports (concurrency).
* atom_lock_state/2:                     Usage and interface (concurrency).
* Atomic goals:                          Documentation on exports (pl2sql).
* atomic/1 <1>:                          Documentation on exports (term_typing).
* atomic/1:                              Usage and interface (term_typing).
* attach_attribute/2 <1>:                Documentation on exports (attributes).
* attach_attribute/2:                    Usage and interface (attributes).
* attribute:                             Documentation on new declarations (class).
* attribute/4 <1>:                       Documentation on multifiles (pl2sql).
* attribute/4 <2>:                       Documentation on exports (pl2sql).
* attribute/4 <3>:                       Usage and interface (pl2sql).
* attribute/4:                           Prolog to SQL translator.
* attributed variables:                  Attributed variables.
* attributes <1>:                        Documentation on internals (persdbrt_mysql).
* attributes:                            Documentation on exports (term_basic).
* attributes/1 <1>:                      gengraph2 (library).
* attributes/1 <2>:                      Documentation on exports (gengraph1).
* attributes/1 <3>:                      Usage and interface (gengraph1).
* attributes/1:                          gengraph1 (library).
* Austrian Research Institute for AI:    Acknowledgments.
* axis_limit/1 <1>:                      Documentation on exports (genbar2).
* axis_limit/1 <2>:                      Documentation on exports (genbar1).
* axis_limit/1:                          Usage and interface (genbar1).
* background_color/1 <1>:                Documentation on exports (widget_class).
* background_color/1:                    Usage and interface (widget_class).
* backup file:                           Implementation Issues.
* bagof/3 <1>:                           Known bugs and planned improvements (conc_aggregates).
* bagof/3 <2>:                           Documentation on exports (aggregates).
* bagof/3:                               Usage and interface (aggregates).
* barchart1/10:                          Documentation on exports (genbar3).
* barchart1/7 <1>:                       Documentation on exports (genbar1).
* barchart1/7 <2>:                       Usage and interface (genbar1).
* barchart1/7:                           Documentation on exports (chartlib).
* barchart1/8:                           Documentation on exports (genbar3).
* barchart1/9 <1>:                       Documentation on exports (genbar1).
* barchart1/9 <2>:                       Usage and interface (genbar1).
* barchart1/9:                           Documentation on exports (chartlib).
* barchart2/10:                          Documentation on exports (genbar4).
* barchart2/11 <1>:                      Documentation on exports (genbar2).
* barchart2/11 <2>:                      Usage and interface (genbar2).
* barchart2/11:                          Documentation on exports (chartlib).
* barchart2/7 <1>:                       Documentation on exports (genbar2).
* barchart2/7 <2>:                       Usage and interface (genbar2).
* barchart2/7:                           Documentation on exports (chartlib).
* barchart2/8:                           Documentation on exports (genbar4).
* barchart3/7 <1>:                       Documentation on exports (genbar3).
* barchart3/7 <2>:                       Usage and interface (genbar3).
* barchart3/7:                           Documentation on exports (chartlib).
* barchart3/9 <1>:                       Documentation on exports (genbar3).
* barchart3/9 <2>:                       Usage and interface (genbar3).
* barchart3/9:                           Documentation on exports (chartlib).
* barchart4/11 <1>:                      Documentation on exports (genbar4).
* barchart4/11 <2>:                      Usage and interface (genbar4).
* barchart4/11:                          Documentation on exports (chartlib).
* barchart4/7 <1>:                       Documentation on exports (genbar4).
* barchart4/7 <2>:                       Usage and interface (genbar4).
* barchart4/7:                           Documentation on exports (chartlib).
* basename/2 <1>:                        Documentation on exports (filenames).
* basename/2:                            Usage and interface (filenames).
* bash <1>:                              Installation and compilation under Windows.
* bash <2>:                              Un*x full installation instructions.
* bash <3>:                              Un*x installation summary.
* bash <4>:                              Running executables from the command line.
* bash:                                  Un*x user setup.
* basic_props:regtype/1:                 Declaring regular types.
* between:                               Usage and interface (iso_misc).
* bf:                                    Iterative-deepening execution.
* bf/af:                                 Breadth-first execution.
* bg_color/1 <1>:                        Documentation on exports (shape_class).
* bg_color/1:                            Usage and interface (shape_class).
* binary directory:                      Un*x full installation instructions.
* bind_socket/3 <1>:                     Documentation on exports (sockets).
* bind_socket/3:                         Usage and interface (sockets).
* bltwish_interp/1 <1>:                  Documentation on exports (bltclass).
* bltwish_interp/1:                      Usage and interface (bltclass).
* body/1:                                Documentation on internals (pretty_print).
* body_expander/6 <1>:                   Documentation on exports (expansion_tools).
* body_expander/6:                       Usage and interface (expansion_tools).
* border_width/1 <1>:                    Documentation on exports (shape_class).
* border_width/1:                        Usage and interface (shape_class).
* borderwidth_value/1 <1>:               Documentation on exports (widget_class).
* borderwidth_value/1:                   Usage and interface (widget_class).
* bound/1 <1>:                           Documentation on exports (internal_types).
* bound/1:                               Usage and interface (internal_types).
* bound_double/1 <1>:                    Documentation on exports (internal_types).
* bound_double/1:                        Usage and interface (internal_types).
* boundary_check/3 <1>:                  Documentation on exports (boundary).
* boundary_check/3:                      Usage and interface (boundary).
* boundary_rotation_first/2 <1>:         Documentation on exports (boundary).
* boundary_rotation_first/2:             Usage and interface (boundary).
* boundary_rotation_last/2 <1>:          Documentation on exports (boundary).
* boundary_rotation_last/2:              Usage and interface (boundary).
* box-type debugger:                     The interactive debugger.
* breadth first execution:               Iterative-deepening execution.
* breadth-first execution <1>:           *** PART VII - Ciao Prolog extensions.
* breadth-first execution:               PART VII - Ciao Prolog extensions.
* breakpoins:                            Marking modules and files for debugging with the embedded debugger.
* breakpoint:                            Documentation on exports (debugger).
* breakpoints:                           The interactive debugger.
* breakpt/6 <1>:                         Documentation on exports (debugger).
* breakpt/6 <2>:                         Usage and interface (debugger).
* breakpt/6 <3>:                         Marking modules and files for debugging with the embedded debugger.
* breakpt/6:                             The debugging process.
* Bristol University:                    Acknowledgments.
* browse/2 <1>:                          Documentation on exports (librowser).
* browse/2:                              Usage and interface (librowser).
* bugs, reporting:                       Reporting bugs.
* build_foreign_interface/1 <1>:         Documentation on exports (build_foreign_interface).
* build_foreign_interface/1:             Usage and interface (build_foreign_interface).
* build_foreign_interface_explicit_decls/1: Documentation on exports (build_foreign_interface).
* build_foreign_interface_explicit_decls/2 <1>: Documentation on exports (build_foreign_interface).
* build_foreign_interface_explicit_decls/2: Usage and interface (build_foreign_interface).
* build_foreign_interface_object/1 <1>:  Documentation on exports (build_foreign_interface).
* build_foreign_interface_object/1:      Usage and interface (build_foreign_interface).
* building standalone distributions:     Gathering the dependent files for a file.
* builtin directives <1>:                Extending the syntax.
* builtin directives:                    Basic builtin directives.
* builtin modules:                       The module system.
* byte/1 <1>:                            Documentation on exports (foreign_interface_properties).
* byte/1:                                Usage and interface (foreign_interface_properties).
* byte_list/1 <1>:                       Documentation on exports (foreign_interface_properties).
* byte_list/1 <2>:                       Usage and interface (foreign_interface_properties).
* byte_list/1:                           Equivalence between Ciao Prolog and C types.
* bytecode object files:                 Un*x full installation instructions.
* C:                                     Un*x full installation instructions.
* C/3 <1>:                               Documentation on exports (term_basic).
* C/3:                                   Usage and interface (term_basic).
* c/c:                                   Usage and interface (build_foreign_interface).
* c:/.emacs:                             Win32 binary installation summary.
* c_assrt_body/1 <1>:                    Documentation on exports (assertions_props).
* c_assrt_body/1:                        Usage and interface (assertions_props).
* c_itf:                                 Code translation utilities.
* call/1 <1>:                            Documentation on exports (assertions_props).
* call/1 <2>:                            Documentation on exports (basiccontrol).
* call/1:                                Usage and interface (basiccontrol).
* call/2 <1>:                            Documentation on exports (hiord_rt).
* call/2 <2>:                            Usage and interface (hiord_rt).
* call/2 <3>:                            Documentation on exports (meta_props).
* call/2:                                Usage and interface (meta_props).
* call/N <1>:                            Documentation on exports (hiord_rt).
* call/N:                                Documentation on multifiles (read).
* call_in_module/2 <1>:                  Documentation on exports (debugger).
* call_in_module/2 <2>:                  Usage and interface (debugger).
* call_in_module/2:                      Calling predicates that are not exported by a module.
* callable/1 <1>:                        Documentation on exports (basic_props).
* callable/1:                            Usage and interface (basic_props).
* Calling emacs <1>:                     *** PART VIII - Interfaces to other languages and systems.
* Calling emacs:                         PART VIII - Interfaces to other languages and systems.
* callme/1:                              Documentation on multifiles (rtchecks).
* callme/2 <1>:                          Documentation on multifiles (messages).
* callme/2 <2>:                          Usage and interface (messages).
* callme/2 <3>:                          Documentation on multifiles (rtchecks).
* callme/2 <4>:                          Documentation on multifiles (meta_props).
* callme/2:                              Usage and interface (meta_props).
* calls assertion:                       Documentation on new declarations (assertions).
* calls/1 <1>:                           Documentation on new declarations (assertions).
* calls/1:                               Usage and interface (assertions).
* calls/2 <1>:                           Documentation on new declarations (assertions).
* calls/2:                               Usage and interface (assertions).
* canonic_html_term/1 <1>:               Documentation on exports (pillow_types).
* canonic_html_term/1:                   Usage and interface (pillow_types).
* canonic_xml_term/1 <1>:                Documentation on exports (pillow_types).
* canonic_xml_term/1:                    Usage and interface (pillow_types).
* canvas/1 <1>:                          Documentation on exports (window_class).
* canvas/1:                              Usage and interface (window_class).
* canvas_class/0 <1>:                    Documentation on exports (canvas_class).
* canvas_class/0:                        Usage and interface (canvas_class).
* canvas_class/1 <1>:                    Documentation on exports (canvas_class).
* canvas_class/1:                        Usage and interface (canvas_class).
* case_insensitive_match/2 <1>:          Documentation on exports (patterns).
* case_insensitive_match/2:              Usage and interface (patterns).
* catch/3 <1>:                           Documentation on exports (exceptions).
* catch/3:                               Usage and interface (exceptions).
* cd/1 <1>:                              Documentation on exports (system).
* cd/1 <2>:                              Usage and interface (system).
* cd/1 <3>:                              Compiling and running programs (Win32).
* cd/1:                                  Compiling and running programs (Un*x).
* ceiling/1:                             Documentation on exports (arithmetic).
* cell_value/1:                          Documentation on internals (table_widget1).
* center/2 <1>:                          Documentation on exports (oval_class).
* center/2 <2>:                          Usage and interface (oval_class).
* center/2 <3>:                          Documentation on exports (arc_class).
* center/2:                              Usage and interface (arc_class).
* certainty factor <1>:                  Documentation on new declarations (mycin).
* certainty factor:                      Programming MYCIN rules.
* CGI <1>:                               HTML/XML/CGI programming.
* CGI:                                   The PiLLoW Web programming library.
* CGI executables:                       The script interpreter.
* char_code/2 <1>:                       Documentation on exports (iso_byte_char).
* char_code/2:                           Usage and interface (iso_byte_char).
* char_conversion/2:                     Extending the syntax.
* character string:                      Some attention points.
* character_code/1 <1>:                  Documentation on exports (basic_props).
* character_code/1:                      Usage and interface (basic_props).
* character_count/2 <1>:                 Documentation on exports (streams_basic).
* character_count/2:                     Usage and interface (streams_basic).
* chartlib/bltclass <1>:                 Usage and interface (test_format).
* chartlib/bltclass <2>:                 Usage and interface (table_widget4).
* chartlib/bltclass <3>:                 Usage and interface (table_widget3).
* chartlib/bltclass <4>:                 Usage and interface (table_widget2).
* chartlib/bltclass <5>:                 Usage and interface (table_widget1).
* chartlib/bltclass <6>:                 Usage and interface (genmultibar).
* chartlib/bltclass <7>:                 Usage and interface (gengraph2).
* chartlib/bltclass <8>:                 Usage and interface (gengraph1).
* chartlib/bltclass <9>:                 Usage and interface (genbar4).
* chartlib/bltclass <10>:                Usage and interface (genbar3).
* chartlib/bltclass <11>:                Usage and interface (genbar2).
* chartlib/bltclass <12>:                Usage and interface (genbar1).
* chartlib/bltclass:                     Usage and interface (chartlib_errhandle).
* chartlib/chartlib_errhandle:           Usage and interface (chartlib).
* chartlib/color_pattern <1>:            Usage and interface (genmultibar).
* chartlib/color_pattern <2>:            Usage and interface (gengraph2).
* chartlib/color_pattern <3>:            Usage and interface (gengraph1).
* chartlib/color_pattern <4>:            Usage and interface (genbar4).
* chartlib/color_pattern <5>:            Usage and interface (genbar3).
* chartlib/color_pattern <6>:            Usage and interface (genbar2).
* chartlib/color_pattern:                Usage and interface (genbar1).
* chartlib/genbar1 <1>:                  Usage and interface (table_widget4).
* chartlib/genbar1 <2>:                  Usage and interface (table_widget3).
* chartlib/genbar1 <3>:                  Usage and interface (table_widget2).
* chartlib/genbar1 <4>:                  Usage and interface (table_widget1).
* chartlib/genbar1 <5>:                  Usage and interface (genmultibar).
* chartlib/genbar1 <6>:                  Usage and interface (gengraph2).
* chartlib/genbar1 <7>:                  Usage and interface (gengraph1).
* chartlib/genbar1 <8>:                  Usage and interface (genbar4).
* chartlib/genbar1 <9>:                  Usage and interface (genbar3).
* chartlib/genbar1 <10>:                 Usage and interface (genbar2).
* chartlib/genbar1:                      Usage and interface (chartlib).
* chartlib/genbar2:                      Usage and interface (chartlib).
* chartlib/genbar3:                      Usage and interface (chartlib).
* chartlib/genbar4:                      Usage and interface (chartlib).
* chartlib/gengraph1 <1>:                Usage and interface (gengraph2).
* chartlib/gengraph1:                    Usage and interface (chartlib).
* chartlib/gengraph2:                    Usage and interface (chartlib).
* chartlib/genmultibar:                  Usage and interface (chartlib).
* chartlib/install_utils <1>:            Usage and interface (table_widget4).
* chartlib/install_utils <2>:            Usage and interface (table_widget3).
* chartlib/install_utils <3>:            Usage and interface (table_widget2).
* chartlib/install_utils <4>:            Usage and interface (table_widget1).
* chartlib/install_utils <5>:            Usage and interface (genmultibar).
* chartlib/install_utils <6>:            Usage and interface (gengraph1).
* chartlib/install_utils <7>:            Usage and interface (genbar4).
* chartlib/install_utils <8>:            Usage and interface (genbar3).
* chartlib/install_utils <9>:            Usage and interface (genbar2).
* chartlib/install_utils <10>:           Usage and interface (genbar1).
* chartlib/install_utils:                Usage and interface (chartlib_errhandle).
* chartlib/table_widget1 <1>:            Usage and interface (table_widget4).
* chartlib/table_widget1 <2>:            Usage and interface (table_widget3).
* chartlib/table_widget1 <3>:            Usage and interface (table_widget2).
* chartlib/table_widget1:                Usage and interface (chartlib).
* chartlib/table_widget2:                Usage and interface (chartlib).
* chartlib/table_widget3:                Usage and interface (chartlib).
* chartlib/table_widget4:                Usage and interface (chartlib).
* chartlib/test_format <1>:              Usage and interface (table_widget4).
* chartlib/test_format <2>:              Usage and interface (table_widget3).
* chartlib/test_format <3>:              Usage and interface (table_widget2).
* chartlib/test_format <4>:              Usage and interface (table_widget1).
* chartlib/test_format <5>:              Usage and interface (genmultibar).
* chartlib/test_format <6>:              Usage and interface (gengraph2).
* chartlib/test_format <7>:              Usage and interface (gengraph1).
* chartlib/test_format <8>:              Usage and interface (genbar4).
* chartlib/test_format <9>:              Usage and interface (genbar3).
* chartlib/test_format <10>:             Usage and interface (genbar2).
* chartlib/test_format:                  Usage and interface (genbar1).
* chartlib_errhandle:                    Documentation on exports (chartlib).
* chartlib_text_error_protect/1 <1>:     test_format (library).
* chartlib_text_error_protect/1 <2>:     Documentation on exports (chartlib_errhandle).
* chartlib_text_error_protect/1 <3>:     Usage and interface (chartlib_errhandle).
* chartlib_text_error_protect/1:         Documentation on exports (chartlib).
* chartlib_visual_error_protect/1 <1>:   Documentation on exports (chartlib_errhandle).
* chartlib_visual_error_protect/1 <2>:   Usage and interface (chartlib_errhandle).
* chartlib_visual_error_protect/1:       Documentation on exports (chartlib).
* check assertion:                       Documentation on exports (assertions).
* check/1 <1>:                           Documentation on exports (assertions).
* check/1:                               Usage and interface (assertions).
* check_sublist/4 <1>:                   Documentation on exports (test_format).
* check_sublist/4:                       Usage and interface (test_format).
* children_nodes/1 <1>:                  Documentation on exports (boundary).
* children_nodes/1:                      Usage and interface (boundary).
* chmod/2 <1>:                           Documentation on exports (system).
* chmod/2:                               Usage and interface (system).
* chmod/3 <1>:                           Documentation on exports (system).
* chmod/3:                               Usage and interface (system).
* Christian Holzbauer:                   Acknowledgments.
* ciao <1>:                              Win32 binary installation summary.
* ciao <2>:                              Checking for correct installation on Un*x.
* ciao <3>:                              Un*x full installation instructions.
* ciao <4>:                              An introduction to the Ciao emacs environment (Win32).
* ciao <5>:                              An introduction to the Ciao emacs environment (Un*x).
* ciao:                                  Testing your Ciao Un*x installation.
* Ciao basic builtins <1>:               *** PART II - The Ciao basic language (engine).
* Ciao basic builtins:                   PART II - The Ciao basic language (engine).
* Ciao engine <1>:                       Types of executables generated.
* Ciao engine <2>:                       Running executables from the command line.
* Ciao engine:                           Acknowledgments.
* Ciao engine builtins:                  Documentation on multifiles (streams_basic).
* Ciao preprocessor:                     Acknowledgments.
* ciao, global description:              About the Ciao Prolog development system.
* Ciao, why this name:                   About the name of the System.
* ciao-shell <1>:                        Checking for correct installation on Un*x.
* ciao-shell <2>:                        Un*x full installation instructions.
* ciao-shell <3>:                        Customizing library paths and path aliases.
* ciao-shell <4>:                        How it works.
* ciao-shell <5>:                        The script interpreter.
* ciao-shell:                            Testing your Ciao Un*x installation.
* ciao-users:                            Keeping up to date with the Ciao users mailing list.
* ciao.el:                               Un*x full installation instructions.
* ciao.reg <1>:                          Uninstallation under Windows.
* ciao.reg:                              CGI execution under IIS.
* ciao_client_rt:                        Documentation on exports (remote).
* ciaoc <1>:                             Porting to currently unsupported operating systems.
* ciaoc <2>:                             Checking for correct installation on Un*x.
* ciaoc <3>:                             Un*x full installation instructions.
* ciaoc <4>:                             Basic builtin directives.
* ciaoc <5>:                             Customizing library paths and path aliases.
* ciaoc <6>:                             Usage (ciaoc).
* ciaoc <7>:                             Types of executables generated.
* ciaoc <8>:                             Introduction to building executables.
* ciaoc <9>:                             The stand-alone command-line compiler.
* ciaoc <10>:                            Generating executables (Win32).
* ciaoc <11>:                            Generating executables (Un*x).
* ciaoc:                                 Testing your Ciao Un*x installation.
* ciaoc.bat:                             Introduction to building executables.
* ciaolibdir/1 <1>:                      Documentation on exports (system_info).
* ciaolibdir/1:                          Usage and interface (system_info).
* CiaoPP:                                Custom access to Prolog from C.
* ciaopp <1>:                            Properties which are native to analyzers.
* ciaopp <2>:                            The interactive debugger.
* ciaopp <3>:                            Types of executables generated.
* ciaopp <4>:                            *** PART I - The program development environment.
* ciaopp <5>:                            Version/Change Log (ciao).
* ciaopp <6>:                            Acknowledgments.
* ciaopp <7>:                            PART I - The program development environment.
* ciaopp <8>:                            Summary.
* ciaopp:                                (outside of any node).
* ciaosh <1>:                            Checking for correct installation on Win32.
* ciaosh <2>:                            Porting to currently unsupported operating systems.
* ciaosh <3>:                            Checking for correct installation on Un*x.
* ciaosh <4>:                            Crossed-references of a program.
* ciaosh <5>:                            Usage and interface (librowser).
* ciaosh <6>:                            Customizing library paths and path aliases.
* ciaosh <7>:                            Usage and interface (ciaosh).
* ciaosh <8>:                            The interactive top-level shell.
* ciaosh <9>:                            *** PART I - The program development environment.
* ciaosh <10>:                           Testing your Ciao Win32 installation.
* ciaosh <11>:                           Testing your Ciao Un*x installation.
* ciaosh:                                PART I - The program development environment.
* ciaosh.cpx:                            Win32 binary installation summary.
* CICYT/MEC:                             Acknowledgments.
* class constructor:                     Documentation on exports (objects_rt).
* class instances:                       Run time usage of objects.
* class_name/1 <1>:                      Documentation on exports (objects_rt).
* class_name/1:                          Usage and interface (objects_rt).
* class_source/1 <1>:                    Documentation on exports (objects_rt).
* class_source/1:                        Usage and interface (objects_rt).
* clause/1:                              Documentation on internals (pretty_print).
* clause/2 <1>:                          Documentation on exports (dynamic).
* clause/2:                              Usage and interface (dynamic).
* clause/3 <1>:                          Documentation on exports (dynamic).
* clause/3:                              Usage and interface (dynamic).
* clauses/1:                             Documentation on internals (pretty_print).
* clearerr/1 <1>:                        Documentation on exports (streams_basic).
* clearerr/1:                            Usage and interface (streams_basic).
* client installation:                   Server installation under Windows.
* client.bat:                            Server installation under Windows.
* CLIP group:                            Acknowledgments.
* close/1 <1>:                           Documentation on exports (system).
* close/1 <2>:                           Documentation on exports (streams_basic).
* close/1:                               Usage and interface (streams_basic).
* close/2 <1>:                           Documentation on exports (iso_incomplete).
* close/2:                               Usage and interface (iso_incomplete).
* close_DEF/5 <1>:                       Documentation on exports (generator_util).
* close_DEF/5:                           Usage and interface (generator_util).
* close_EXTERNPROTO/6 <1>:               Documentation on exports (generator_util).
* close_EXTERNPROTO/6:                   Usage and interface (generator_util).
* close_file/1 <1>:                      Documentation on exports (dec10_io).
* close_file/1:                          Usage and interface (dec10_io).
* close_input/1 <1>:                     Documentation on exports (streams).
* close_input/1:                         Usage and interface (streams).
* close_node/5 <1>:                      Documentation on exports (generator_util).
* close_node/5:                          Usage and interface (generator_util).
* close_nodeGut/4 <1>:                   Documentation on exports (generator_util).
* close_nodeGut/4:                       Usage and interface (generator_util).
* close_output/1 <1>:                    Documentation on exports (streams).
* close_output/1:                        Usage and interface (streams).
* close_predicate/1 <1>:                 Documentation on exports (data_facts).
* close_predicate/1:                     Usage and interface (data_facts).
* close_PROTO/6 <1>:                     Documentation on exports (generator_util).
* close_PROTO/6:                         Usage and interface (generator_util).
* close_Script/5 <1>:                    Documentation on exports (generator_util).
* close_Script/5:                        Usage and interface (generator_util).
* closed:                                Documentation on exports (data_facts).
* clterm/1:                              Documentation on internals (pretty_print).
* code_class/2 <1>:                      Documentation on exports (io_basic).
* code_class/2:                          Usage and interface (io_basic).
* color/1 <1>:                           Documentation on exports (gengraph1).
* color/1 <2>:                           Documentation on exports (color_pattern).
* color/1:                               Usage and interface (color_pattern).
* color/2 <1>:                           Documentation on exports (color_pattern).
* color/2:                               Usage and interface (color_pattern).
* column_value/1 <1>:                    Documentation on exports (widget_class).
* column_value/1:                        Usage and interface (widget_class).
* columnspan_value/1 <1>:                Documentation on exports (widget_class).
* columnspan_value/1:                    Usage and interface (widget_class).
* combine_attributes/2 <1>:              Documentation on multifiles (when).
* combine_attributes/2 <2>:              Usage and interface (when).
* combine_attributes/2 <3>:              Documentation on multifiles (freeze).
* combine_attributes/2 <4>:              Usage and interface (freeze).
* combine_attributes/2 <5>:              Other information (attributes).
* combine_attributes/2 <6>:              Documentation on multifiles (attributes).
* combine_attributes/2:                  Usage and interface (attributes).
* command:                               Options available during debugging.
* command_button/1 <1>:                  Documentation on exports (button_class).
* command_button/1:                      Usage and interface (button_class).
* comment assertion:                     Documentation on new declarations (assertions).
* comment string:                        Documentation on exports (assertions_props).
* comment/2 <1>:                         Documentation on new declarations (assertions).
* comment/2:                             Usage and interface (assertions).
* comments, machine readable:            The Ciao assertion package.
* comp assertion:                        Documentation on new declarations (assertions).
* comp/1 <1>:                            Documentation on exports (assertions_props).
* comp/1 <2>:                            Documentation on new declarations (assertions).
* comp/1:                                Usage and interface (assertions).
* comp/2 <1>:                            Documentation on new declarations (assertions).
* comp/2:                                Usage and interface (assertions).
* compare/3 <1>:                         Documentation on exports (term_compare).
* compare/3:                             Usage and interface (term_compare).
* comparison goal:                       Documentation on internals (pl2sql).
* comparison operations:                 Documentation on internals (pl2sql).
* comparison/2 <1>:                      Documentation on internals (pl2sql).
* comparison/2:                          Documentation on exports (pl2sql).
* compat/2 <1>:                          Documentation on exports (basic_props).
* compat/2:                              Usage and interface (basic_props).
* compatibility properties:              Defining properties.
* compatible:                            Documentation on exports (assertions_props).
* compile/1 <1>:                         Documentation on exports (ciaosh).
* compile/1 <2>:                         Usage and interface (ciaosh).
* compile/1 <3>:                         Compiling and running programs (Win32).
* compile/1:                             Compiling and running programs (Un*x).
* compiler:                              Un*x full installation instructions.
* compiler, standalone:                  The stand-alone command-line compiler.
* compiler/c_itf <1>:                    Usage and interface (build_foreign_interface).
* compiler/c_itf <2>:                    Usage and interface (expansion_tools).
* compiler/c_itf <3>:                    Usage and interface (compiler).
* compiler/c_itf:                        Usage and interface (ciaosh).
* compiler/compiler <1>:                 Usage and interface (objects_rt).
* compiler/compiler <2>:                 Usage and interface (classic).
* compiler/compiler:                     Usage and interface (ciaosh).
* compiler/exemaker:                     Usage and interface (ciaosh).
* compiler_and_opts/2 <1>:               Documentation on exports (foreign_compilation).
* compiler_and_opts/2:                   Usage and interface (foreign_compilation).
* compiling programs <1>:                Running Ciao scripts (Win32).
* compiling programs <2>:                Generating executables (Win32).
* compiling programs <3>:                Compiling and running programs (Win32).
* compiling programs <4>:                Running Ciao scripts (Un*x).
* compiling programs <5>:                Generating executables (Un*x).
* compiling programs:                    Compiling and running programs (Un*x).
* compiling, from command line:          The stand-alone command-line compiler.
* compiling, Win32:                      Installation and compilation under Windows.
* complete proof procedure <1>:          Iterative-deepening execution.
* complete proof procedure:              Breadth-first execution.
* complete_dict/3 <1>:                   Documentation on exports (vndict).
* complete_dict/3:                       Usage and interface (vndict).
* complete_vars_dict/3 <1>:              Documentation on exports (vndict).
* complete_vars_dict/3:                  Usage and interface (vndict).
* complex argument property:             Documentation on exports (assertions_props).
* complex goal property:                 Documentation on exports (assertions_props).
* complex_arg_property/1 <1>:            Documentation on exports (assertions_props).
* complex_arg_property/1:                Usage and interface (assertions_props).
* complex_goal_property/1 <1>:           Documentation on exports (assertions_props).
* complex_goal_property/1:               Usage and interface (assertions_props).
* compound/1 <1>:                        Documentation on exports (iso_misc).
* compound/1:                            Usage and interface (iso_misc).
* concurrency:                           Low-level concurrency/multithreading primitives.
* concurrent <1>:                        Documentation on exports (concurrency).
* concurrent:                            Documentation on exports (data_facts).
* concurrent attribute:                  Documentation on new declarations (class).
* concurrent predicate <1>:              Documentation on internals (data_facts).
* concurrent predicate <2>:              Documentation on exports (data_facts).
* concurrent predicate:                  Fast/concurrent update of facts.
* concurrent predicates <1>:             Low-level concurrency/multithreading primitives.
* concurrent predicates:                 Fast/concurrent update of facts.
* concurrent updates <1>:                SQL persistent database interface.
* concurrent updates:                    Introduction to persistent predicates.
* concurrent/1 <1>:                      Documentation on new declarations (class).
* concurrent/1 <2>:                      Usage and interface (class).
* concurrent/1 <3>:                      Documentation on exports (concurrency).
* concurrent/1 <4>:                      Usage and interface (concurrency).
* concurrent/1 <5>:                      Documentation on internals (data_facts).
* concurrent/1:                          Fast/concurrent update of facts.
* conjunctions:                          Documentation on exports (pl2sql).
* connect_to_socket/3 <1>:               Documentation on exports (sockets).
* connect_to_socket/3:                   Usage and interface (sockets).
* connect_to_socket_type/4 <1>:          Documentation on exports (sockets).
* connect_to_socket_type/4:              Usage and interface (sockets).
* constant arguments:                    Documentation on internals (pl2sql).
* constant/1 <1>:                        Documentation on exports (basic_props).
* constant/1:                            Usage and interface (basic_props).
* constraint logic programming <1>:      *** PART VII - Ciao Prolog extensions.
* constraint logic programming:          PART VII - Ciao Prolog extensions.
* constructor:                           Documentation on exports (class).
* constructor/0 <1>:                     Documentation on exports (class).
* constructor/0:                         Usage and interface (class).
* constructor/1 <1>:                     Documentation on exports (objects_rt).
* constructor/1:                         Usage and interface (objects_rt).
* consult/1 <1>:                         Documentation on exports (ciaosh).
* consult/1 <2>:                         Usage and interface (ciaosh).
* consult/1 <3>:                         Compiling and running programs (Win32).
* consult/1:                             Compiling and running programs (Un*x).
* contains1/2 <1>:                       Documentation on exports (lists).
* contains1/2:                           Usage and interface (lists).
* contains_ro/2 <1>:                     Documentation on exports (lists).
* contains_ro/2:                         Usage and interface (lists).
* Context-sensitive <1>:                 Getting help (Win32).
* Context-sensitive:                     Getting help (Un*x).
* continue/3 <1>:                        Documentation on exports (possible).
* continue/3:                            Usage and interface (possible).
* contributed libraries <1>:             *** PART XI - Contributed libraries.
* contributed libraries:                 PART XI - Contributed libraries.
* control:                               Documentation on exports (odd).
* convert_atoms_to_string/2 <1>:         Documentation on exports (io).
* convert_atoms_to_string/2:             Usage and interface (io).
* coord/2 <1>:                           Documentation on exports (text_class).
* coord/2:                               Usage and interface (text_class).
* coord/4 <1>:                           Documentation on exports (oval_class).
* coord/4 <2>:                           Usage and interface (oval_class).
* coord/4 <3>:                           Documentation on exports (arc_class).
* coord/4:                               Usage and interface (arc_class).
* copy_args/3 <1>:                       Documentation on exports (terms).
* copy_args/3:                           Usage and interface (terms).
* copy_stdout/1 <1>:                     Documentation on exports (file_utils).
* copy_stdout/1:                         Usage and interface (file_utils).
* copy_term/2 <1>:                       Documentation on exports (term_basic).
* copy_term/2:                           Usage and interface (term_basic).
* core/1:                                Documentation on internals (tcltk_low_level).
* correct_commenting/4 <1>:              Documentation on exports (parser_util).
* correct_commenting/4:                  Usage and interface (parser_util).
* cos/1:                                 Documentation on exports (arithmetic).
* covered/1 <1>:                         Documentation on exports (native_props).
* covered/1:                             Usage and interface (native_props).
* create_dict/2 <1>:                     Documentation on exports (vndict).
* create_dict/2:                         Usage and interface (vndict).
* create_dictionaries/1 <1>:             Documentation on exports (dictionary_tree).
* create_dictionaries/1:                 Usage and interface (dictionary_tree).
* create_directed_field/5 <1>:           Documentation on exports (parser_util).
* create_directed_field/5:               Usage and interface (parser_util).
* create_environment/4 <1>:              Documentation on exports (parser_util).
* create_environment/4:                  Usage and interface (parser_util).
* create_field/3 <1>:                    Documentation on exports (parser_util).
* create_field/3:                        Usage and interface (parser_util).
* create_field/4 <1>:                    Documentation on exports (parser_util).
* create_field/4:                        Usage and interface (parser_util).
* create_field/5 <1>:                    Documentation on exports (parser_util).
* create_field/5:                        Usage and interface (parser_util).
* create_node/3 <1>:                     Documentation on exports (parser_util).
* create_node/3:                         Usage and interface (parser_util).
* create_parse_structure/1 <1>:          Documentation on exports (parser_util).
* create_parse_structure/1:              Usage and interface (parser_util).
* create_parse_structure/2 <1>:          Documentation on exports (parser_util).
* create_parse_structure/2:              Usage and interface (parser_util).
* create_parse_structure/3 <1>:          Documentation on exports (parser_util).
* create_parse_structure/3:              Usage and interface (parser_util).
* create_proto_element/3 <1>:            Documentation on exports (lookup).
* create_proto_element/3:                Usage and interface (lookup).
* creation_bind/1 <1>:                   Documentation on exports (widget_class).
* creation_bind/1:                       Usage and interface (widget_class).
* creation_menu_name/1 <1>:              Documentation on exports (menu_class).
* creation_menu_name/1:                  Usage and interface (menu_class).
* creation_options/1 <1>:                Documentation on exports (menu_class).
* creation_options/1 <2>:                Usage and interface (menu_class).
* creation_options/1 <3>:                Documentation on exports (widget_class).
* creation_options/1:                    Usage and interface (widget_class).
* creation_options_entry/1 <1>:          Documentation on exports (menu_class).
* creation_options_entry/1:              Usage and interface (menu_class).
* creation_position/1 <1>:               Documentation on exports (widget_class).
* creation_position/1:                   Usage and interface (widget_class).
* creation_position_grid/1 <1>:          Documentation on exports (widget_class).
* creation_position_grid/1:              Usage and interface (widget_class).
* creep:                                 Options available during debugging.
* csh <1>:                               Un*x full installation instructions.
* csh <2>:                               Un*x installation summary.
* csh:                                   Un*x user setup.
* csh-compatible shell <1>:              Un*x full installation instructions.
* csh-compatible shell <2>:              Un*x installation summary.
* csh-compatible shell:                  Un*x user setup.
* ctrlc_clean/1 <1>:                     Documentation on exports (ctrlcclean).
* ctrlc_clean/1:                         Usage and interface (ctrlcclean).
* ctrlcclean:                            Usage and interface (build_foreign_interface).
* ctrlcclean/0 <1>:                      Documentation on exports (ctrlcclean).
* ctrlcclean/0:                          Usage and interface (ctrlcclean).
* current input:                         Documentation on exports (read).
* current input stream:                  Documentation on exports (streams_basic).
* current output stream:                 Documentation on exports (streams_basic).
* current_atom/1 <1>:                    Documentation on exports (prolog_sys).
* current_atom/1:                        Usage and interface (prolog_sys).
* current_executable/1 <1>:              Documentation on exports (system).
* current_executable/1:                  Usage and interface (system).
* current_fact/1 <1>:                    Documentation on exports (persdbrt_mysql).
* current_fact/1 <2>:                    Documentation on exports (data_facts).
* current_fact/1:                        Usage and interface (data_facts).
* current_fact/2 <1>:                    Documentation on exports (data_facts).
* current_fact/2:                        Usage and interface (data_facts).
* current_fact_nb/1 <1>:                 Documentation on exports (data_facts).
* current_fact_nb/1:                     Usage and interface (data_facts).
* current_host/1 <1>:                    Documentation on exports (system).
* current_host/1:                        Usage and interface (system).
* current_infixop/4 <1>:                 Documentation on exports (operators).
* current_infixop/4:                     Usage and interface (operators).
* current_input/1 <1>:                   Documentation on exports (streams_basic).
* current_input/1:                       Usage and interface (streams_basic).
* current_key/2 <1>:                     Documentation on exports (old_database).
* current_key/2:                         Usage and interface (old_database).
* current_module/1 <1>:                  Documentation on exports (system_info).
* current_module/1:                      Usage and interface (system_info).
* current_op/3 <1>:                      Documentation on exports (operators).
* current_op/3:                          Usage and interface (operators).
* current_output/1 <1>:                  Documentation on exports (streams_basic).
* current_output/1:                      Usage and interface (streams_basic).
* current_postfixop/3 <1>:               Documentation on exports (operators).
* current_postfixop/3:                   Usage and interface (operators).
* current_predicate/1 <1>:               Documentation on exports (dynamic).
* current_predicate/1:                   Usage and interface (dynamic).
* current_predicate/2 <1>:               Documentation on exports (dynamic).
* current_predicate/2:                   Usage and interface (dynamic).
* current_prefixop/3 <1>:                Documentation on exports (operators).
* current_prefixop/3:                    Usage and interface (operators).
* current_prolog_flag/2 <1>:             Documentation on exports (prolog_flags).
* current_prolog_flag/2:                 Usage and interface (prolog_flags).
* current_stream/3 <1>:                  Documentation on exports (streams_basic).
* current_stream/3:                      Usage and interface (streams_basic).
* cyg2win/3 <1>:                         Documentation on exports (system).
* cyg2win/3:                             Usage and interface (system).
* Cygnus Win32:                          Installation and compilation under Windows.
* D.H.D. Warren:                         Acknowledgments.
* D.L. Bowen:                            Acknowledgments.
* Daniel Cabeza:                         Acknowledgments.
* data:                                  Documentation on exports (dynamic).
* data declaration:                      Fast/concurrent update of facts.
* data file:                             Implementation Issues.
* data predicate <1>:                    Documentation on internals (data_facts).
* data predicate <2>:                    Documentation on exports (data_facts).
* data predicate:                        Fast/concurrent update of facts.
* data/1 <1>:                            Using file-based persistent predicates.
* data/1 <2>:                            Class and Interface error reporting at compile time.
* data/1 <3>:                            Documentation on new declarations (class).
* data/1 <4>:                            Usage and interface (class).
* data/1 <5>:                            Declaring classes and interfaces.
* data/1 <6>:                            Documentation on exports (dynamic).
* data/1 <7>:                            Usage and interface (dynamic).
* data/1 <8>:                            Documentation on internals (data_facts).
* data/1:                                Fast/concurrent update of facts.
* Database aggregation functions:        Documentation on exports (pl2sql).
* Database arithmetic expressions:       Documentation on exports (pl2sql).
* Database arithmetic functions:         Documentation on exports (pl2sql).
* Database calls to is/2:                Documentation on exports (pl2sql).
* Database comparison goals:             Documentation on exports (pl2sql).
* database comparison operator:          Documentation on exports (pl2sql).
* database initialization:               Documentation on exports (persdbrt).
* datime/1 <1>:                          Documentation on exports (system).
* datime/1:                              Usage and interface (system).
* datime/9 <1>:                          Documentation on exports (system).
* datime/9:                              Usage and interface (system).
* datime_struct/1 <1>:                   Documentation on exports (system).
* datime_struct/1:                       Usage and interface (system).
* davinci/0 <1>:                         Documentation on exports (davinci).
* davinci/0:                             Usage and interface (davinci).
* davinci_command/1:                     Documentation on internals (davinci).
* davinci_get/1 <1>:                     Documentation on exports (davinci).
* davinci_get/1:                         Usage and interface (davinci).
* davinci_get_all/1 <1>:                 Documentation on exports (davinci).
* davinci_get_all/1:                     Usage and interface (davinci).
* davinci_lgraph/1 <1>:                  Documentation on exports (davinci).
* davinci_lgraph/1:                      Usage and interface (davinci).
* davinci_put/1 <1>:                     Documentation on exports (davinci).
* davinci_put/1:                         Usage and interface (davinci).
* davinci_quit/0 <1>:                    Documentation on exports (davinci).
* davinci_quit/0:                        Usage and interface (davinci).
* davinci_ugraph/1 <1>:                  Documentation on exports (davinci).
* davinci_ugraph/1:                      Usage and interface (davinci).
* db_client:                             SQL persistent database interface.
* db_query/4:                            Documentation on internals (persdbrt_mysql).
* db_query_one_tuple/4:                  Documentation on internals (persdbrt_mysql).
* dbassertz_fact/1 <1>:                  Documentation on exports (persdbrt_mysql).
* dbassertz_fact/1:                      Usage and interface (persdbrt_mysql).
* dbcall/2 <1>:                          Documentation on exports (persdbrt_mysql).
* dbcall/2:                              Usage and interface (persdbrt_mysql).
* dbconnection/1 <1>:                    Documentation on exports (mysql_client).
* dbconnection/1 <2>:                    Usage and interface (mysql_client).
* dbconnection/1:                        Documentation on internals (persdbrt_mysql).
* dbcurrent_fact/1 <1>:                  Documentation on exports (persdbrt_mysql).
* dbcurrent_fact/1:                      Usage and interface (persdbrt_mysql).
* dbfindall/4 <1>:                       Documentation on exports (persdbrt_mysql).
* dbfindall/4:                           Usage and interface (persdbrt_mysql).
* dbname/1 <1>:                          Documentation on exports (db_client_types).
* dbname/1 <2>:                          Usage and interface (db_client_types).
* dbname/1:                              Documentation on exports (persdbrt_mysql).
* dbqueryconnection/1 <1>:               Documentation on exports (mysql_client).
* dbqueryconnection/1:                   Usage and interface (mysql_client).
* dbretract_fact/1 <1>:                  Documentation on exports (persdbrt_mysql).
* dbretract_fact/1:                      Usage and interface (persdbrt_mysql).
* dbretractall_fact/1 <1>:               Documentation on exports (persdbrt_mysql).
* dbretractall_fact/1:                   Usage and interface (persdbrt_mysql).
* dcg_expansion:                         Usage and interface (assertions_props).
* dcg_translation/2 <1>:                 Documentation on exports (dcg_expansion).
* dcg_translation/2:                     Usage and interface (dcg_expansion).
* debug:                                 The debugging process.
* debug options:                         Options available during debugging.
* debug/0 <1>:                           Documentation on exports (debugger).
* debug/0 <2>:                           Usage and interface (debugger).
* debug/0:                               The debugging process.
* debug/1:                               Documentation on exports (io_aux).
* debug_goal/2 <1>:                      Documentation on exports (messages).
* debug_goal/2:                          Usage and interface (messages).
* debug_goal/3 <1>:                      Documentation on exports (messages).
* debug_goal/3:                          Usage and interface (messages).
* debug_message/1 <1>:                   Documentation on exports (messages).
* debug_message/1:                       Usage and interface (messages).
* debug_message/2 <1>:                   Documentation on exports (messages).
* debug_message/2:                       Usage and interface (messages).
* debug_module/1 <1>:                    Documentation on exports (debugger).
* debug_module/1 <2>:                    Usage and interface (debugger).
* debug_module/1:                        Marking modules and files for debugging in the top-level debugger.
* debug_module_source/1 <1>:             Documentation on exports (debugger).
* debug_module_source/1 <2>:             Usage and interface (debugger).
* debug_module_source/1 <3>:             The debugging process.
* debug_module_source/1:                 Marking modules and files for debugging in the top-level debugger.
* debugger <1>:                          The debugging process.
* debugger:                              The interactive debugger.
* debugger/debugger:                     Usage and interface (ciaosh).
* debugger/debugger_lib:                 Usage and interface (debugger).
* debugging:                             Options available during debugging.
* debugging tools:                       The interactive debugger.
* debugging/0 <1>:                       Documentation on exports (debugger).
* debugging/0:                           Usage and interface (debugger).
* dec10_io:                              Usage and interface (classic).
* dec_indentation/2 <1>:                 Documentation on exports (parser_util).
* dec_indentation/2:                     Usage and interface (parser_util).
* decl assertion:                        Documentation on new declarations (assertions).
* decl/1 <1>:                            Documentation on exports (assertions_props).
* decl/1 <2>:                            Documentation on new declarations (assertions).
* decl/1:                                Usage and interface (assertions).
* decl/2 <1>:                            Documentation on new declarations (assertions).
* decl/2:                                Usage and interface (assertions).
* declarations, user defined:            Basic builtin directives.
* decompose_field/3 <1>:                 Documentation on exports (generator_util).
* decompose_field/3:                     Usage and interface (generator_util).
* DECsystem-10 Prolog User's Manual:     Acknowledgments.
* deductive database:                    Persistent predicates.
* default constructor <1>:               Documentation on exports (objects_rt).
* default constructor:                   Error reporting at compile time (objects).
* define_flag/3 <1>:                     Documentation on multifiles (system).
* define_flag/3 <2>:                     Usage and interface (system).
* define_flag/3 <3>:                     Documentation on multifiles (write).
* define_flag/3 <4>:                     Usage and interface (write).
* define_flag/3 <5>:                     Documentation on multifiles (read).
* define_flag/3 <6>:                     Usage and interface (read).
* define_flag/3 <7>:                     Documentation on multifiles (prolog_flags).
* define_flag/3:                         Usage and interface (prolog_flags).
* del_global/1 <1>:                      Documentation on exports (global).
* del_global/1:                          Usage and interface (global).
* del_vertices/3 <1>:                    Documentation on exports (ugraphs).
* del_vertices/3:                        Usage and interface (ugraphs).
* delaying predicate execution <1>:      *** PART VII - Ciao Prolog extensions.
* delaying predicate execution:          PART VII - Ciao Prolog extensions.
* delete/1 <1>:                          Documentation on exports (tcltk_low_level).
* delete/1:                              Usage and interface (tcltk_low_level).
* delete/3 <1>:                          Documentation on exports (idlists).
* delete/3 <2>:                          Usage and interface (idlists).
* delete/3 <3>:                          Documentation on exports (lists).
* delete/3:                              Usage and interface (lists).
* delete_directory/1 <1>:                Documentation on exports (system).
* delete_directory/1:                    Usage and interface (system).
* delete_file/1 <1>:                     Documentation on exports (system).
* delete_file/1:                         Usage and interface (system).
* delete_on_ctrlc/2 <1>:                 Documentation on exports (ctrlcclean).
* delete_on_ctrlc/2:                     Usage and interface (ctrlcclean).
* dependent files:                       Gathering the dependent files for a file.
* depth first iterative deepening:       Iterative-deepening execution.
* depth limit:                           Iterative-deepening execution.
* derived_from/2 <1>:                    Documentation on exports (objects_rt).
* derived_from/2:                        Usage and interface (objects_rt).
* describe/1 <1>:                        Documentation on exports (librowser).
* describe/1:                            Usage and interface (librowser).
* destroy/1 <1>:                         Documentation on exports (objects_rt).
* destroy/1:                             Usage and interface (objects_rt).
* destructor:                            Documentation on exports (class).
* destructor/0 <1>:                      Documentation on exports (canvas_class).
* destructor/0 <2>:                      Usage and interface (canvas_class).
* destructor/0 <3>:                      Documentation on exports (window_class).
* destructor/0 <4>:                      Usage and interface (window_class).
* destructor/0 <5>:                      Documentation on exports (class).
* destructor/0:                          Usage and interface (class).
* det_hook/det_hook_rt:                  Usage and interface (persdbrt_mysql).
* det_try/3 <1>:                         Documentation on exports (det_hook_rt).
* det_try/3:                             Usage and interface (det_hook_rt).
* detach_attribute/1 <1>:                Documentation on exports (attributes).
* detach_attribute/1:                    Usage and interface (attributes).
* detcond/1 <1>:                         Documentation on exports (andorra).
* detcond/1:                             Usage and interface (andorra).
* determinate goal:                      Andorra execution.
* determinate/2 <1>:                     Documentation on new declarations (andorra).
* determinate/2:                         Usage and interface (andorra).
* development environment <1>:           Win32 binary installation summary.
* development environment <2>:           Un*x full installation instructions.
* development environment <3>:           Un*x installation summary.
* development environment <4>:           An introduction to the Ciao emacs environment (Win32).
* development environment:               An introduction to the Ciao emacs environment (Un*x).
* dgraph/1 <1>:                          Documentation on exports (graphs).
* dgraph/1:                              Usage and interface (graphs).
* dgraph_to_ugraph/2 <1>:                Documentation on exports (graphs).
* dgraph_to_ugraph/2:                    Usage and interface (graphs).
* dic_get/3 <1>:                         Documentation on exports (dict).
* dic_get/3:                             Usage and interface (dict).
* dic_lookup/3 <1>:                      Documentation on exports (dict).
* dic_lookup/3:                          Usage and interface (dict).
* dic_lookup/4 <1>:                      Documentation on exports (dict).
* dic_lookup/4:                          Usage and interface (dict).
* dic_node/2 <1>:                        Documentation on exports (dict).
* dic_node/2:                            Usage and interface (dict).
* dic_replace/4 <1>:                     Documentation on exports (dict).
* dic_replace/4:                         Usage and interface (dict).
* dict <1>:                              Usage and interface (fastrw).
* dict:                                  Usage and interface (classic).
* dict2varnamesl/2 <1>:                  Documentation on exports (vndict).
* dict2varnamesl/2:                      Usage and interface (vndict).
* dictionary/1 <1>:                      Documentation on exports (internal_types).
* dictionary/1 <2>:                      Usage and interface (internal_types).
* dictionary/1 <3>:                      Documentation on exports (assertions_props).
* dictionary/1 <4>:                      Usage and interface (assertions_props).
* dictionary/1 <5>:                      Documentation on exports (dict).
* dictionary/1:                          Usage and interface (dict).
* dictionary/5 <1>:                      Documentation on exports (dict).
* dictionary/5:                          Usage and interface (dict).
* dictionary/6 <1>:                      Documentation on exports (dictionary).
* dictionary/6:                          Usage and interface (dictionary).
* dictionary_insert/5 <1>:               Documentation on exports (dictionary_tree).
* dictionary_insert/5:                   Usage and interface (dictionary_tree).
* dictionary_lookup/5 <1>:               Documentation on exports (dictionary_tree).
* dictionary_lookup/5:                   Usage and interface (dictionary_tree).
* difference/3 <1>:                      Documentation on exports (lists).
* difference/3:                          Usage and interface (lists).
* directives:                            Basic builtin directives.
* directory_files/2 <1>:                 Documentation on exports (system).
* directory_files/2:                     Usage and interface (system).
* directoryname/1:                       Documentation on internals (persdbrt).
* DISCIPL:                               Acknowledgments.
* discontiguous/1:                       Usage and interface (class).
* disjunctions:                          Documentation on exports (pl2sql).
* display:                               Options available during debugging.
* display/1 <1>:                         Term output.
* display/1 <2>:                         Documentation on exports (io_aux).
* display/1 <3>:                         Documentation on exports (io_basic).
* display/1:                             Usage and interface (io_basic).
* display/2 <1>:                         Term output.
* display/2 <2>:                         Documentation on exports (io_basic).
* display/2:                             Usage and interface (io_basic).
* display_list/1:                        Documentation on exports (io_aux).
* display_string/1 <1>:                  Documentation on exports (io_aux).
* display_string/1:                      Usage and interface (io_aux).
* display_term/1:                        Documentation on exports (io_aux).
* displayq/1 <1>:                        Documentation on exports (io_aux).
* displayq/1 <2>:                        Documentation on exports (io_basic).
* displayq/1:                            Usage and interface (io_basic).
* displayq/2 <1>:                        Documentation on exports (io_basic).
* displayq/2:                            Usage and interface (io_basic).
* disproves/2:                           Documentation on multifiles (rtchecks).
* distributed execution:                 Active modules (high-level distributed execution).
* dlgraph/1 <1>:                         Documentation on exports (graphs).
* dlgraph/1:                             Usage and interface (graphs).
* dlgraph_to_lgraph/2 <1>:               Documentation on exports (graphs).
* dlgraph_to_lgraph/2:                   Usage and interface (graphs).
* dlist/3 <1>:                           Documentation on exports (lists).
* dlist/3:                               Usage and interface (lists).
* do_interface/1 <1>:                    Documentation on exports (build_foreign_interface).
* do_interface/1:                        Usage and interface (build_foreign_interface).
* do_not_free/2 <1>:                     Documentation on exports (foreign_interface_properties).
* do_not_free/2 <2>:                     Usage and interface (foreign_interface_properties).
* do_not_free/2:                         Equivalence between Ciao Prolog and C types.
* do_on_abolish/1 <1>:                   Documentation on multifiles (dynamic).
* do_on_abolish/1:                       Usage and interface (dynamic).
* docstring/1 <1>:                       Documentation on exports (assertions_props).
* docstring/1 <2>:                       Usage and interface (assertions_props).
* docstring/1:                           Some attention points.
* documentation generator <1>:           *** PART I - The program development environment.
* documentation generator:               PART I - The program development environment.
* DOTemacs:                              Un*x full installation instructions.
* downloading emacs <1>:                 Win32 binary installation summary.
* downloading emacs:                     Un*x full installation instructions.
* downloading new versions <1>:          *** PART XII - Appendices.
* downloading new versions:              PART XII - Appendices.
* downloading, latest versions:          Downloading new versions.
* dvips:                                 General operation.
* dynamic <1>:                           Usage and interface (parser_util).
* dynamic <2>:                           Usage and interface (parser).
* dynamic <3>:                           Usage and interface (lookup).
* dynamic <4>:                           Usage and interface (io).
* dynamic <5>:                           Usage and interface (generator).
* dynamic <6>:                           Usage and interface (dictionary_tree).
* dynamic <7>:                           Usage and interface (dictionary).
* dynamic <8>:                           Usage and interface (boundary).
* dynamic <9>:                           Usage and interface (persdbrt_mysql).
* dynamic <10>:                          Usage and interface (objects_rt).
* dynamic <11>:                          Usage and interface (functions).
* dynamic <12>:                          Documentation on exports (dynamic).
* dynamic:                               Usage and interface (iso).
* dynamic predicate:                     Fast/concurrent update of facts.
* dynamic/1 <1>:                         Documentation on new declarations (class).
* dynamic/1 <2>:                         Usage and interface (class).
* dynamic/1 <3>:                         Documentation on exports (dynamic).
* dynamic/1:                             Usage and interface (dynamic).
* dynamic_search_path/1 <1>:             Documentation on exports (ciaosh).
* dynamic_search_path/1:                 Usage and interface (ciaosh).
* edges/2 <1>:                           Documentation on exports (ugraphs).
* edges/2:                               Usage and interface (ugraphs).
* edges_to_lgraph/2 <1>:                 Documentation on exports (graphs).
* edges_to_lgraph/2:                     Usage and interface (graphs).
* edges_to_ugraph/2 <1>:                 Documentation on exports (graphs).
* edges_to_ugraph/2:                     Usage and interface (graphs).
* EDIPIA:                                Acknowledgments.
* ELLA:                                  Acknowledgments.
* emacs <1>:                             Checking for correct installation on Win32.
* emacs <2>:                             Win32 binary installation summary.
* emacs <3>:                             Checking for correct installation on Un*x.
* emacs <4>:                             Un*x full installation instructions.
* emacs <5>:                             Un*x installation summary.
* emacs <6>:                             How it works.
* emacs <7>:                             Documentation on exports (debugger).
* emacs <8>:                             Format of debugging messages.
* emacs <9>:                             The procedure box control flow model.
* emacs <10>:                            Marking modules and files for debugging in the top-level debugger.
* emacs <11>:                            The interactive debugger.
* emacs <12>:                            An introduction to the Ciao emacs environment (Win32).
* emacs <13>:                            Getting help (Win32).
* emacs <14>:                            Testing your Ciao Win32 installation.
* emacs <15>:                            Getting started on Windows machines.
* emacs <16>:                            An introduction to the Ciao emacs environment (Un*x).
* emacs <17>:                            Getting help (Un*x).
* emacs <18>:                            Un*x user setup.
* emacs <19>:                            Getting started on Un*x-like machines.
* emacs:                                 About this manual.
* emacs interface <1>:                   The interactive top-level shell.
* emacs interface <2>:                   *** PART I - The program development environment.
* emacs interface:                       PART I - The program development environment.
* emacs mode <1>:                        How it works.
* emacs mode:                            Marking modules and files for debugging in the top-level debugger.
* emacs mode setup:                      Un*x full installation instructions.
* emacs mode, setting up, Win32:         Win32 binary installation summary.
* emacs, download <1>:                   Win32 binary installation summary.
* emacs, download:                       Un*x full installation instructions.
* emacs, intro <1>:                      An introduction to the Ciao emacs environment (Win32).
* emacs, intro:                          An introduction to the Ciao emacs environment (Un*x).
* embedded debugger <1>:                 Marking modules and files for debugging with the embedded debugger.
* embedded debugger:                     The interactive debugger.
* eng_backtrack/2 <1>:                   Documentation on exports (concurrency).
* eng_backtrack/2:                       Usage and interface (concurrency).
* eng_call/3 <1>:                        Documentation on exports (concurrency).
* eng_call/3:                            Usage and interface (concurrency).
* eng_call/4 <1>:                        Documentation on exports (concurrency).
* eng_call/4:                            Usage and interface (concurrency).
* eng_cut/1 <1>:                         Documentation on exports (concurrency).
* eng_cut/1:                             Usage and interface (concurrency).
* eng_goal_id/1 <1>:                     Documentation on exports (concurrency).
* eng_goal_id/1:                         Usage and interface (concurrency).
* eng_kill/1 <1>:                        Documentation on exports (concurrency).
* eng_kill/1:                            Usage and interface (concurrency).
* eng_killothers:                        Documentation on exports (concurrency).
* eng_killothers/0 <1>:                  Documentation on exports (concurrency).
* eng_killothers/0:                      Usage and interface (concurrency).
* eng_release/1 <1>:                     Documentation on exports (concurrency).
* eng_release/1:                         Usage and interface (concurrency).
* eng_self/1 <1>:                        Documentation on exports (concurrency).
* eng_self/1:                            Usage and interface (concurrency).
* eng_status/0 <1>:                      Documentation on exports (concurrency).
* eng_status/0:                          Usage and interface (concurrency).
* eng_wait/1 <1>:                        Documentation on exports (concurrency).
* eng_wait/1:                            Usage and interface (concurrency).
* engine:                                Un*x full installation instructions.
* engine directory <1>:                  *** PART II - The Ciao basic language (engine).
* engine directory:                      PART II - The Ciao basic language (engine).
* engine module:                         Pure Prolog package.
* Enrico Pontelli:                       Acknowledgments.
* ensure_loaded/1 <1>:                   Documentation on exports (compiler).
* ensure_loaded/1 <2>:                   Usage and interface (compiler).
* ensure_loaded/1 <3>:                   Documentation on exports (ciaosh).
* ensure_loaded/1 <4>:                   Usage and interface (ciaosh).
* ensure_loaded/1 <5>:                   Types of executables generated.
* ensure_loaded/1:                       Paths used by the compiler during compilation.
* entry assertion:                       Documentation on new declarations (assertions).
* entry/1 <1>:                           Documentation on exports (assertions_props).
* entry/1 <2>:                           Documentation on new declarations (assertions).
* entry/1:                               Usage and interface (assertions).
* environment variable:                  Un*x full installation instructions.
* environment variable definitions <1>:  Un*x full installation instructions.
* environment variable definitions:      Un*x installation summary.
* environment variables:                 Un*x full installation instructions.
* environment variables, setup:          Un*x user setup.
* environment/1 <1>:                     Documentation on exports (internal_types).
* environment/1:                         Usage and interface (internal_types).
* equal_lists/2 <1>:                     Documentation on exports (lists).
* equal_lists/2:                         Usage and interface (lists).
* equality comparisons in the WHERE-clause: Documentation on internals (pl2sql).
* equalnumber/3 <1>:                     Documentation on exports (test_format).
* equalnumber/3:                         Usage and interface (test_format).
* equi join in the WHERE-clause:         Documentation on internals (pl2sql).
* erase/1 <1>:                           Documentation on exports (data_facts).
* erase/1:                               Usage and interface (data_facts).
* errhandle <1>:                         Usage and interface (davinci).
* errhandle:                             Usage and interface (build_foreign_interface).
* error term:                            Changing system behaviour and various flags.
* error/1:                               Documentation on exports (io_aux).
* error_file/2:                          Documentation on internals (chartlib_errhandle).
* error_message/1 <1>:                   Documentation on exports (messages).
* error_message/1:                       Usage and interface (messages).
* error_message/2 <1>:                   Documentation on internals (chartlib_errhandle).
* error_message/2 <2>:                   Documentation on exports (messages).
* error_message/2:                       Usage and interface (messages).
* error_message/3 <1>:                   Documentation on exports (messages).
* error_message/3:                       Usage and interface (messages).
* error_protect/1 <1>:                   Documentation on exports (errhandle).
* error_protect/1:                       Usage and interface (errhandle).
* error_vrml/1 <1>:                      Documentation on exports (error).
* error_vrml/1:                          Usage and interface (error).
* etc <1>:                               Compiling the miscellaneous utilities under Windows.
* etc:                                   Un*x full installation instructions.
* etc(xfrefs):                           Crossed-references of a program.
* etc(xmrefs):                           Crossed-references of a program.
* evaluable functors:                    Documentation on exports (arithmetic).
* event_loop/0 <1>:                      Documentation on exports (window_class).
* event_loop/0:                          Usage and interface (window_class).
* event_type_widget/1 <1>:               Documentation on exports (widget_class).
* event_type_widget/1:                   Usage and interface (widget_class).
* examples <1>:                          Running Ciao scripts (Win32).
* examples <2>:                          Generating executables (Win32).
* examples <3>:                          Running Ciao scripts (Un*x).
* examples:                              Generating executables (Un*x).
* examples/webbased_server/webbased_server.pl: Active module name servers.
* exceptions:                            Raising Exceptions.
* exec/3 <1>:                            Documentation on exports (system).
* exec/3:                                Usage and interface (system).
* exec/4 <1>:                            Documentation on exports (system).
* exec/4:                                Usage and interface (system).
* executable:                            Introduction to building executables.
* executables:                           Un*x full installation instructions.
* executables, compressed:               Types of executables generated.
* executables, dynamic:                  Types of executables generated.
* executables, generating <1>:           Generating executables (Win32).
* executables, generating:               Generating executables (Un*x).
* executables, how to run:               Running executables from the command line.
* executables, lazy load:                Types of executables generated.
* executables, self-contained:           Types of executables generated.
* executables, static:                   Types of executables generated.
* executables, types:                    Types of executables generated.
* execution visualizers:                 The interactive debugger.
* existential quantification:            Documentation on exports (pl2sql).
* exp/1:                                 Documentation on exports (arithmetic).
* expand_value/1 <1>:                    Documentation on exports (canvas_class).
* expand_value/1 <2>:                    Usage and interface (canvas_class).
* expand_value/1 <3>:                    Documentation on exports (widget_class).
* expand_value/1:                        Usage and interface (widget_class).
* expander_pred/1:                       Documentation on internals (expansion_tools).
* expansion:                             Documentation on internals (syntax_extensions).
* expansions:                            Declarations.
* Explorer <1>:                          Checking for correct installation on Win32.
* Explorer:                              Testing your Ciao Win32 installation.
* export/1 <1>:                          Documentation on new declarations (mycin).
* export/1 <2>:                          Usage and interface (mycin).
* export/1 <3>:                          Documentation on new declarations (class).
* export/1 <4>:                          Usage and interface (class).
* export/1:                              Declaring classes and interfaces.
* exports:                               Printing the declarations and code in a file.
* extensibility:                         ISO-Prolog compliance versus extensibility.
* extension/2 <1>:                       Documentation on exports (filenames).
* extension/2:                           Usage and interface (filenames).
* External interface <1>:                *** PART VIII - Interfaces to other languages and systems.
* External interface:                    PART VIII - Interfaces to other languages and systems.
* extra_compiler_options:                Documentation on internals (foreign_interface_properties).
* extra_compiler_opts/1:                 Documentation on internals (foreign_interface_properties).
* extra_compiler_opts/2:                 Documentation on internals (foreign_interface_properties).
* extra_linker_options/1:                Documentation on internals (foreign_interface_properties).
* extra_linker_opts/1:                   Documentation on internals (foreign_interface_properties).
* extra_linker_opts/2:                   Documentation on internals (foreign_interface_properties).
* extract_paths/2 <1>:                   Documentation on exports (system).
* extract_paths/2:                       Usage and interface (system).
* F.C.N. Pereira:                        Acknowledgments.
* faggregator/1 <1>:                     Documentation on exports (fuzzy).
* faggregator/1:                         Usage and interface (fuzzy).
* fail:                                  Options available during debugging.
* fail/0 <1>:                            Documentation on exports (basiccontrol).
* fail/0:                                Usage and interface (basiccontrol).
* fails/1 <1>:                           Documentation on exports (native_props).
* fails/1:                               Usage and interface (native_props).
* false assertion:                       Documentation on exports (assertions).
* false/1 <1>:                           Documentation on exports (assertions).
* false/1:                               Usage and interface (assertions).
* fast_read/1 <1>:                       Known bugs and planned improvements (fastrw).
* fast_read/1 <2>:                       Documentation on exports (fastrw).
* fast_read/1:                           Usage and interface (fastrw).
* fast_read/2 <1>:                       Known bugs and planned improvements (fastrw).
* fast_read/2 <2>:                       Documentation on exports (fastrw).
* fast_read/2:                           Usage and interface (fastrw).
* fast_write/1 <1>:                      Known bugs and planned improvements (fastrw).
* fast_write/1 <2>:                      Documentation on exports (fastrw).
* fast_write/1:                          Usage and interface (fastrw).
* fast_write/2 <1>:                      Known bugs and planned improvements (fastrw).
* fast_write/2 <2>:                      Documentation on exports (fastrw).
* fast_write/2:                          Usage and interface (fastrw).
* fast_write_to_string/3 <1>:            Documentation on exports (fastrw).
* fast_write_to_string/3:                Usage and interface (fastrw).
* fastrw:                                Usage and interface (librowser).
* feature terms <1>:                     Documentation on new declarations (argnames).
* feature terms <2>:                     Terms with named arguments -records/feature terms.
* feature terms <3>:                     *** PART VII - Ciao Prolog extensions.
* feature terms:                         PART VII - Ciao Prolog extensions.
* fetch_url/3 <1>:                       Documentation on exports (http).
* fetch_url/3:                           Usage and interface (http).
* fieldType/1 <1>:                       Documentation on exports (field_type).
* fieldType/1:                           Usage and interface (field_type).
* fieldValue/6 <1>:                      Documentation on exports (field_value).
* fieldValue/6:                          Usage and interface (field_value).
* fieldValue_check/8 <1>:                Documentation on exports (field_value_check).
* fieldValue_check/8:                    Usage and interface (field_value_check).
* file_exists/1 <1>:                     Documentation on exports (system).
* file_exists/1:                         Usage and interface (system).
* file_exists/2 <1>:                     Documentation on exports (system).
* file_exists/2:                         Usage and interface (system).
* file_locks/file_locks:                 Usage and interface (persdbrt).
* file_name_extension/3 <1>:             Documentation on exports (filenames).
* file_name_extension/3:                 Usage and interface (filenames).
* file_properties/6 <1>:                 Documentation on exports (system).
* file_properties/6:                     Usage and interface (system).
* file_property/2 <1>:                   Documentation on exports (system).
* file_property/2:                       Usage and interface (system).
* file_search_path/2 <1>:                Documentation on multifiles (streams_basic).
* file_search_path/2 <2>:                Documentation on exports (streams_basic).
* file_search_path/2 <3>:                Usage and interface (streams_basic).
* file_search_path/2 <4>:                Documentation on multifiles (libpaths).
* file_search_path/2 <5>:                Documentation on exports (libpaths).
* file_search_path/2 <6>:                Usage and interface (libpaths).
* file_search_path/2 <7>:                Types of executables generated.
* file_search_path/2:                    Paths used by the compiler during compilation.
* file_terms/2 <1>:                      Documentation on exports (file_utils).
* file_terms/2:                          Usage and interface (file_utils).
* file_to_string/2 <1>:                  Documentation on exports (file_utils).
* file_to_string/2:                      Usage and interface (file_utils).
* fileerrors/0 <1>:                      Documentation on exports (prolog_flags).
* fileerrors/0:                          Usage and interface (prolog_flags).
* fileinfo:                              More detailed explanation of options (fileinfo).
* filenames <1>:                         Usage and interface (librowser).
* filenames:                             Usage and interface (messages).
* fill_type/1 <1>:                       Documentation on exports (canvas_class).
* fill_type/1 <2>:                       Usage and interface (canvas_class).
* fill_type/1 <3>:                       Documentation on exports (widget_class).
* fill_type/1:                           Usage and interface (widget_class).
* fillout/4 <1>:                         Documentation on exports (parser_util).
* fillout/4:                             Usage and interface (parser_util).
* fillout/5 <1>:                         Documentation on exports (parser_util).
* fillout/5:                             Usage and interface (parser_util).
* find_name/4 <1>:                       Documentation on exports (vndict).
* find_name/4:                           Usage and interface (vndict).
* findall/3 <1>:                         Documentation on exports (persdbrt_mysql).
* findall/3 <2>:                         Documentation on exports (conc_aggregates).
* findall/3 <3>:                         Usage and interface (conc_aggregates).
* findall/3 <4>:                         Documentation on exports (aggregates).
* findall/3:                             Usage and interface (aggregates).
* findall/4 <1>:                         Documentation on exports (aggregates).
* findall/4:                             Usage and interface (aggregates).
* findnsols/4 <1>:                       Documentation on exports (aggregates).
* findnsols/4:                           Usage and interface (aggregates).
* findnsols/5 <1>:                       Documentation on exports (aggregates).
* findnsols/5:                           Usage and interface (aggregates).
* flag/1:                                Documentation on internals (pretty_print).
* float/1 <1>:                           Documentation on exports (arithmetic).
* float/1 <2>:                           Documentation on exports (term_typing).
* float/1:                               Usage and interface (term_typing).
* float_fractional_part/1:               Documentation on exports (arithmetic).
* float_integer_part/1:                  Documentation on exports (arithmetic).
* floor/1:                               Documentation on exports (arithmetic).
* flt/1 <1>:                             Documentation on exports (arithmetic).
* flt/1 <2>:                             Documentation on exports (basic_props).
* flt/1:                                 Usage and interface (basic_props).
* flush_output/0 <1>:                    Documentation on exports (streams_basic).
* flush_output/0:                        Usage and interface (streams_basic).
* flush_output/1 <1>:                    Documentation on exports (streams_basic).
* flush_output/1:                        Usage and interface (streams_basic).
* fmode/2 <1>:                           Documentation on exports (system).
* fmode/2:                               Usage and interface (system).
* fnot/1 <1>:                            Documentation on exports (fuzzy).
* fnot/1:                                Usage and interface (fuzzy).
* foldl/4 <1>:                           Documentation on exports (hiordlib).
* foldl/4:                               Usage and interface (hiordlib).
* font_type/1 <1>:                       Documentation on exports (text_class).
* font_type/1 <2>:                       Usage and interface (text_class).
* font_type/1 <3>:                       Documentation on exports (widget_class).
* font_type/1:                           Usage and interface (widget_class).
* footer/1 <1>:                          Documentation on exports (genbar1).
* footer/1:                              Usage and interface (genbar1).
* force_lazy/1 <1>:                      Documentation on exports (ciaosh).
* force_lazy/1:                          Usage and interface (ciaosh).
* foreground_color/1 <1>:                Documentation on exports (widget_class).
* foreground_color/1:                    Usage and interface (widget_class).
* foreign/1 <1>:                         Documentation on exports (foreign_interface_properties).
* foreign/1:                             Usage and interface (foreign_interface_properties).
* foreign/2 <1>:                         Documentation on exports (foreign_interface_properties).
* foreign/2:                             Usage and interface (foreign_interface_properties).
* foreign_compilation:                   Usage and interface (build_foreign_interface).
* foreign_interface/foreign_interface_properties: Usage and interface (mysql_client).
* ForEmacs.txt:                          Win32 binary installation summary.
* form_assignment/1 <1>:                 Documentation on exports (pillow_types).
* form_assignment/1:                     Usage and interface (pillow_types).
* form_default/3 <1>:                    Documentation on exports (html).
* form_default/3:                        Usage and interface (html).
* form_dict/1 <1>:                       Documentation on exports (pillow_types).
* form_dict/1:                           Usage and interface (pillow_types).
* form_empty_value/1 <1>:                Documentation on exports (html).
* form_empty_value/1:                    Usage and interface (html).
* form_request_method/1 <1>:             Documentation on exports (html).
* form_request_method/1:                 Usage and interface (html).
* form_value/1 <1>:                      Documentation on exports (pillow_types).
* form_value/1:                          Usage and interface (pillow_types).
* format <1>:                            Usage and interface (io).
* format <2>:                            Usage and interface (bltclass).
* format <3>:                            Usage and interface (tcltk_low_level).
* format <4>:                            Usage and interface (davinci).
* format <5>:                            Usage and interface (build_foreign_interface).
* format <6>:                            Usage and interface (assrt_write).
* format <7>:                            Usage and interface (messages).
* format <8>:                            Usage and interface (classic).
* format:                                Usage and interface (debugger).
* format/2 <1>:                          Documentation on exports (format).
* format/2:                              Usage and interface (format).
* format/3 <1>:                          Documentation on exports (format).
* format/3:                              Usage and interface (format).
* format_control/1 <1>:                  Documentation on exports (format).
* format_control/1:                      Usage and interface (format).
* formatting commands:                   Some attention points.
* formatting/2 <1>:                      Documentation on exports (davinci).
* formatting/2:                          Usage and interface (davinci).
* Francisco Bueno:                       Acknowledgments.
* free variable:                         Documentation on exports (sockets).
* freeze/2 <1>:                          Documentation on exports (freeze).
* freeze/2 <2>:                          Usage and interface (freeze).
* freeze/2 <3>:                          Delaying predicates (freeze).
* freeze/2:                              Other information (attributes).
* FROM-clauses:                          Documentation on internals (pl2sql).
* frozen/2 <1>:                          Documentation on exports (freeze).
* frozen/2 <2>:                          Usage and interface (freeze).
* frozen/2:                              Delaying predicates (freeze).
* func/1:                                Documentation on exports (assertions_props).
* function/1:                            Usage and interface (functions).
* functional syntax <1>:                 *** PART VII - Ciao Prolog extensions.
* functional syntax:                     PART VII - Ciao Prolog extensions.
* functions:                             Declarations.
* functor of a goal:                     Documentation on internals (pl2sql).
* functor/3 <1>:                         Documentation on exports (term_basic).
* functor/3:                             Usage and interface (term_basic).
* fuzzy/1 <1>:                           Documentation on exports (fuzzy).
* fuzzy/1:                               Usage and interface (fuzzy).
* fuzzy_discrete/1:                      Usage and interface (fuzzy).
* fuzzy_predicate/1 <1>:                 Documentation on exports (fuzzy).
* fuzzy_predicate/1:                     Usage and interface (fuzzy).
* fuzzybody/1 <1>:                       Documentation on exports (fuzzy).
* fuzzybody/1:                           Usage and interface (fuzzy).
* g_assrt_body/1 <1>:                    Documentation on exports (assertions_props).
* g_assrt_body/1:                        Usage and interface (assertions_props).
* garbage collection <1>:                Documentation on internals (prolog_sys).
* garbage collection:                    Documentation on exports (prolog_sys).
* garbage_collect/0 <1>:                 Documentation on exports (prolog_sys).
* garbage_collect/0:                     Usage and interface (prolog_sys).
* garbage_collection_option/1:           Documentation on internals (prolog_sys).
* gc/0 <1>:                              Documentation on exports (prolog_flags).
* gc/0:                                  Usage and interface (prolog_flags).
* gc_result/1:                           Documentation on internals (prolog_sys).
* gcc:                                   Troubleshooting (nasty messages and nifty workarounds).
* gcd/2:                                 Documentation on exports (arithmetic).
* genbar1:                               Documentation on exports (chartlib).
* genbar2:                               Documentation on exports (chartlib).
* genbar3:                               Documentation on exports (chartlib).
* genbar4:                               Documentation on exports (chartlib).
* generator/2 <1>:                       Documentation on exports (generator).
* generator/2:                           Usage and interface (generator).
* gengraph1:                             Documentation on exports (chartlib).
* gengraph2:                             Documentation on exports (chartlib).
* genmultibar:                           Documentation on exports (chartlib).
* Gerda Janssens:                        Acknowledgments.
* German Puebla:                         Acknowledgments.
* get1_code/1 <1>:                       Documentation on exports (io_basic).
* get1_code/1:                           Usage and interface (io_basic).
* get1_code/2 <1>:                       Documentation on exports (io_basic).
* get1_code/2:                           Usage and interface (io_basic).
* get_alias_path/0 <1>:                  Documentation on exports (libpaths).
* get_alias_path/0:                      Usage and interface (libpaths).
* get_arch/1 <1>:                        Documentation on exports (system_info).
* get_arch/1:                            Usage and interface (system_info).
* get_attribute/2 <1>:                   Other information (attributes).
* get_attribute/2 <2>:                   Documentation on exports (attributes).
* get_attribute/2:                       Usage and interface (attributes).
* get_byte/1 <1>:                        Documentation on exports (iso_byte_char).
* get_byte/1:                            Usage and interface (iso_byte_char).
* get_byte/2 <1>:                        Documentation on exports (iso_byte_char).
* get_byte/2:                            Usage and interface (iso_byte_char).
* get_char/1 <1>:                        Documentation on exports (iso_byte_char).
* get_char/1:                            Usage and interface (iso_byte_char).
* get_char/2 <1>:                        Documentation on exports (iso_byte_char).
* get_char/2:                            Usage and interface (iso_byte_char).
* get_code/1 <1>:                        Documentation on exports (io_basic).
* get_code/1:                            Usage and interface (io_basic).
* get_code/2 <1>:                        Documentation on exports (io_basic).
* get_code/2:                            Usage and interface (io_basic).
* get_cookies/1 <1>:                     Documentation on exports (html).
* get_cookies/1:                         Usage and interface (html).
* get_definition_dictionary/2 <1>:       Documentation on exports (dictionary_tree).
* get_definition_dictionary/2:           Usage and interface (dictionary_tree).
* get_dictionaries/2 <1>:                Documentation on exports (parser_util).
* get_dictionaries/2:                    Usage and interface (parser_util).
* get_environment/2 <1>:                 Documentation on exports (parser_util).
* get_environment/2:                     Usage and interface (parser_util).
* get_environment_name/2 <1>:            Documentation on exports (parser_util).
* get_environment_name/2:                Usage and interface (parser_util).
* get_environment_type/2 <1>:            Documentation on exports (parser_util).
* get_environment_type/2:                Usage and interface (parser_util).
* get_first_parsed/3 <1>:                Documentation on exports (parser_util).
* get_first_parsed/3:                    Usage and interface (parser_util).
* get_form_input/1 <1>:                  Documentation on exports (html).
* get_form_input/1:                      Usage and interface (html).
* get_form_value/3 <1>:                  Documentation on exports (html).
* get_form_value/3:                      Usage and interface (html).
* get_global/2 <1>:                      Documentation on exports (global).
* get_global/2:                          Usage and interface (global).
* get_indentation/2 <1>:                 Documentation on exports (parser_util).
* get_indentation/2:                     Usage and interface (parser_util).
* get_line/1 <1>:                        Documentation on exports (strings).
* get_line/1:                            Usage and interface (strings).
* get_line/2 <1>:                        Documentation on exports (strings).
* get_line/2:                            Usage and interface (strings).
* get_os/1 <1>:                          Documentation on exports (system_info).
* get_os/1:                              Usage and interface (system_info).
* get_parsed/2 <1>:                      Documentation on exports (parser_util).
* get_parsed/2:                          Usage and interface (parser_util).
* get_pid/1 <1>:                         Documentation on exports (system).
* get_pid/1:                             Usage and interface (system).
* get_primes/2 <1>:                      Documentation on exports (numlists).
* get_primes/2:                          Usage and interface (numlists).
* get_prototype_definition/2 <1>:        Documentation on exports (lookup).
* get_prototype_definition/2:            Usage and interface (lookup).
* get_prototype_dictionary/2 <1>:        Documentation on exports (dictionary_tree).
* get_prototype_dictionary/2:            Usage and interface (dictionary_tree).
* get_prototype_interface/2 <1>:         Documentation on exports (lookup).
* get_prototype_interface/2:             Usage and interface (lookup).
* get_row_number/2 <1>:                  Documentation on exports (parser_util).
* get_row_number/2:                      Usage and interface (parser_util).
* getcounter/2 <1>:                      Documentation on exports (counters).
* getcounter/2:                          Usage and interface (counters).
* getct/2 <1>:                           Documentation on exports (io_basic).
* getct/2:                               Usage and interface (io_basic).
* getct1/2 <1>:                          Documentation on exports (io_basic).
* getct1/2:                              Usage and interface (io_basic).
* getenvstr/2 <1>:                       Documentation on exports (system).
* getenvstr/2:                           Usage and interface (system).
* ghostview <1>:                         Printing manuals (Win32).
* ghostview:                             Printing manuals (Un*x).
* global variables <1>:                  *** PART VII - Ciao Prolog extensions.
* global variables:                      PART VII - Ciao Prolog extensions.
* gmake <1>:                             Un*x full installation instructions.
* gmake:                                 Acknowledgments (lpmake).
* gmax/3:                                Delaying predicates (when).
* gnd/1 <1>:                             Documentation on exports (basic_props).
* gnd/1:                                 Usage and interface (basic_props).
* GNU:                                   Un*x installation summary.
* GNU emacs <1>:                         *** PART I - The program development environment.
* GNU emacs:                             PART I - The program development environment.
* GNU General Public License <1>:        Summary.
* GNU General Public License:            (outside of any node).
* GNU make:                              Un*x full installation instructions.
* go/1 <1>:                              Documentation on new modes (basicmodes).
* go/1:                                  Usage and interface (basicmodes).
* go/2 <1>:                              Documentation on new modes (basicmodes).
* go/2:                                  Usage and interface (basicmodes).
* Goal:                                  Documentation on exports (when).
* goal_id/1 <1>:                         Documentation on exports (concurrency).
* goal_id/1:                             Usage and interface (concurrency).
* Gopal Gupta:                           Acknowledgments.
* grammar rule:                          Documentation on exports (strings).
* graph_b1/13 <1>:                       Documentation on exports (gengraph1).
* graph_b1/13 <2>:                       Usage and interface (gengraph1).
* graph_b1/13:                           Documentation on exports (chartlib).
* graph_b1/9 <1>:                        Documentation on exports (gengraph1).
* graph_b1/9 <2>:                        Usage and interface (gengraph1).
* graph_b1/9:                            Documentation on exports (chartlib).
* graph_b2/13 <1>:                       Documentation on exports (gengraph2).
* graph_b2/13 <2>:                       Usage and interface (gengraph2).
* graph_b2/13:                           Documentation on exports (chartlib).
* graph_b2/9 <1>:                        Documentation on exports (gengraph2).
* graph_b2/9 <2>:                        Usage and interface (gengraph2).
* graph_b2/9:                            Documentation on exports (chartlib).
* graph_w1/13 <1>:                       Documentation on exports (gengraph1).
* graph_w1/13 <2>:                       Usage and interface (gengraph1).
* graph_w1/13:                           Documentation on exports (chartlib).
* graph_w1/9 <1>:                        Documentation on exports (gengraph1).
* graph_w1/9 <2>:                        Usage and interface (gengraph1).
* graph_w1/9:                            Documentation on exports (chartlib).
* graph_w2/13 <1>:                       Documentation on exports (gengraph2).
* graph_w2/13 <2>:                       Usage and interface (gengraph2).
* graph_w2/13:                           Documentation on exports (chartlib).
* graph_w2/9 <1>:                        Documentation on exports (gengraph2).
* graph_w2/9 <2>:                        Usage and interface (gengraph2).
* graph_w2/9:                            Documentation on exports (chartlib).
* graphs/lgraphs:                        Usage and interface (graphs).
* graphs/ugraphs <1>:                    Usage and interface (graphs).
* graphs/ugraphs:                        Usage and interface (davinci).
* ground/1 <1>:                          Known bugs and planned improvements (andprolog).
* ground/1 <2>:                          Documentation on exports (native_props).
* ground/1 <3>:                          Documentation on exports (term_typing).
* ground/1:                              Usage and interface (term_typing).
* gunzip <1>:                            Un*x full installation instructions.
* gunzip:                                Un*x installation summary.
* H. Ait-Kaci:                           Entering recursive (conjunctive) shell levels.
* halt/0 <1>:                            Documentation on exports (exceptions).
* halt/0:                                Usage and interface (exceptions).
* halt/1 <1>:                            Documentation on exports (exceptions).
* halt/1:                                Usage and interface (exceptions).
* handle_error/2 <1>:                    Documentation on exports (errhandle).
* handle_error/2:                        Usage and interface (errhandle).
* handler_type/1:                        Documentation on internals (chartlib_errhandle).
* hard side-effects:                     Documentation on exports (native_props).
* head pattern:                          Documentation on exports (assertions_props).
* head_pattern/1 <1>:                    Documentation on exports (assertions_props).
* head_pattern/1:                        Usage and interface (assertions_props).
* header/1 <1>:                          Documentation on exports (genbar1).
* header/1:                              Usage and interface (genbar1).
* height/1 <1>:                          Documentation on exports (oval_class).
* height/1 <2>:                          Usage and interface (oval_class).
* height/1 <3>:                          Documentation on exports (arc_class).
* height/1:                              Usage and interface (arc_class).
* height_value/1 <1>:                    Documentation on exports (canvas_class).
* height_value/1:                        Usage and interface (canvas_class).
* hello:                                 How it works.
* help <1>:                              Checking for correct installation on Win32.
* help <2>:                              Options available during debugging.
* help <3>:                              Printing manuals (Win32).
* help <4>:                              Testing your Ciao Win32 installation.
* help:                                  Printing manuals (Un*x).
* help, unix:                            Getting help (Un*x).
* help, windows:                         Getting help (Win32).
* hide_/0 <1>:                           Documentation on exports (canvas_class).
* hide_/0 <2>:                           Usage and interface (canvas_class).
* hide_/0 <3>:                           Documentation on exports (window_class).
* hide_/0:                               Usage and interface (window_class).
* higher-order library <1>:              *** PART VII - Ciao Prolog extensions.
* higher-order library:                  PART VII - Ciao Prolog extensions.
* highlight_color/1 <1>:                 Documentation on exports (widget_class).
* highlight_color/1:                     Usage and interface (widget_class).
* highlightbackground_color/1 <1>:       Documentation on exports (widget_class).
* highlightbackground_color/1:           Usage and interface (widget_class).
* hms_time/1 <1>:                        Documentation on exports (pillow_types).
* hms_time/1:                            Usage and interface (pillow_types).
* hostname_address/2 <1>:                Documentation on exports (sockets).
* hostname_address/2:                    Usage and interface (sockets).
* HTML <1>:                              HTML/XML/CGI programming.
* HTML:                                  The PiLLoW Web programming library.
* html2terms/2 <1>:                      Documentation on exports (html).
* html2terms/2:                          Usage and interface (html).
* html_expansion/2 <1>:                  Documentation on multifiles (html).
* html_expansion/2:                      Usage and interface (html).
* html_protect/1 <1>:                    Documentation on exports (html).
* html_protect/1:                        Usage and interface (html).
* html_report_error/1 <1>:               Documentation on exports (html).
* html_report_error/1:                   Usage and interface (html).
* html_template/3 <1>:                   Documentation on exports (html).
* html_template/3:                       Usage and interface (html).
* html_term/1 <1>:                       Documentation on exports (pillow_types).
* html_term/1 <2>:                       Usage and interface (pillow_types).
* html_term/1:                           Documentation on exports (html).
* HTTP <1>:                              HTTP conectivity.
* HTTP:                                  The PiLLoW Web programming library.
* http_date/1 <1>:                       Documentation on exports (pillow_types).
* http_date/1:                           Usage and interface (pillow_types).
* http_lines/3 <1>:                      Documentation on exports (html).
* http_lines/3:                          Usage and interface (html).
* http_request_param/1 <1>:              Documentation on exports (pillow_types).
* http_request_param/1:                  Usage and interface (pillow_types).
* http_response_param/1 <1>:             Documentation on exports (pillow_types).
* http_response_param/1:                 Usage and interface (pillow_types).
* hw:                                    Running Ciao scripts (Un*x).
* hw.pls <1>:                            Running Ciao scripts (Win32).
* hw.pls:                                Running Ciao scripts (Un*x).
* icon_address.pl:                       Installing PiLLoW.
* icon_address/2 <1>:                    Documentation on exports (pillow_types).
* icon_address/2 <2>:                    Documentation on exports (html).
* icon_address/2:                        Usage and interface (html).
* identifier of a location:              Documentation on internals (persdbrt).
* idlists <1>:                           Usage and interface (vndict).
* idlists:                               Usage and interface (terms_vars).
* if/3 <1>:                              Documentation on exports (basiccontrol).
* if/3:                                  Usage and interface (basiccontrol).
* image/1 <1>:                           Documentation on exports (table_widget1).
* image/1:                               Usage and interface (table_widget1).
* implements/1 <1>:                      Class and Interface error reporting at compile time.
* implements/1 <2>:                      Documentation on new declarations (class).
* implements/1 <3>:                      Usage and interface (class).
* implements/1:                          Declaring classes and interfaces.
* imports:                               Printing the declarations and code in a file.
* imports_meta_pred/3 <1>:               Documentation on exports (expansion_tools).
* imports_meta_pred/3:                   Usage and interface (expansion_tools).
* in/1 <1>:                              Documentation on new modes (basicmodes).
* in/1:                                  Usage and interface (basicmodes).
* in/2 <1>:                              Documentation on new modes (basicmodes).
* in/2:                                  Usage and interface (basicmodes).
* inc_indentation/2 <1>:                 Documentation on exports (parser_util).
* inc_indentation/2:                     Usage and interface (parser_util).
* inccounter/2 <1>:                      Documentation on exports (counters).
* inccounter/2:                          Usage and interface (counters).
* include/1 <1>:                         Documentation on exports (ciaosh).
* include/1:                             Usage and interface (ciaosh).
* indentation_list/2 <1>:                Documentation on exports (generator_util).
* indentation_list/2:                    Usage and interface (generator_util).
* indep/1 <1>:                           Known bugs and planned improvements (andprolog).
* indep/1 <2>:                           Documentation on internals (andprolog).
* indep/1:                               Documentation on exports (native_props).
* indep/2 <1>:                           Known bugs and planned improvements (andprolog).
* indep/2 <2>:                           Documentation on internals (andprolog).
* indep/2:                               Documentation on exports (native_props).
* independent:                           Documentation on internals (andprolog).
* info <1>:                              Checking for correct installation on Un*x.
* info <2>:                              Un*x full installation instructions.
* info <3>:                              Un*x installation summary.
* info <4>:                              Un*x user setup.
* info:                                  Testing your Ciao Un*x installation.
* INFOPATH:                              Un*x full installation instructions.
* inform_user/1:                         Documentation on exports (io_aux).
* inherit_class/1 <1>:                   Documentation on new declarations (class).
* inherit_class/1:                       Usage and interface (class).
* inheritable interface:                 Documentation on new declarations (class).
* inheritable/1 <1>:                     Documentation on new declarations (class).
* inheritable/1:                         Usage and interface (class).
* inheritance relationship:              Documentation on new declarations (class).
* inherited/1 <1>:                       Documentation on exports (class).
* inherited/1:                           Usage and interface (class).
* init_sql_persdb/0 <1>:                 Documentation on exports (persdbrt_mysql).
* init_sql_persdb/0:                     Usage and interface (persdbrt_mysql).
* initialization clauses:                Documentation on new declarations (class).
* initialization file <1>:               The Ciao initialization file (Win32).
* initialization file:                   The Ciao initialization file (Un*x).
* initialize_db/0 <1>:                   Documentation on exports (persdbrt).
* initialize_db/0 <2>:                   Usage and interface (persdbrt).
* initialize_db/0:                       Using persistent predicates from the top level.
* INRIA:                                 Acknowledgments.
* insert/3 <1>:                          Documentation on exports (sets).
* insert/3:                              Usage and interface (sets).
* insert_comments_in_beginning/3 <1>:    Documentation on exports (parser_util).
* insert_comments_in_beginning/3:        Usage and interface (parser_util).
* insert_last/3 <1>:                     Documentation on exports (lists).
* insert_last/3:                         Usage and interface (lists).
* insert_parsed/3 <1>:                   Documentation on exports (parser_util).
* insert_parsed/3:                       Usage and interface (parser_util).
* inside_proto/1 <1>:                    Documentation on exports (parser_util).
* inside_proto/1:                        Usage and interface (parser_util).
* installation <1>:                      *** PART XII - Appendices.
* installation:                          PART XII - Appendices.
* installation, checking the:            Checking for correct installation on Un*x.
* installation, Mac OS X, full instructions: Un*x full installation instructions.
* installation, Mac OS X, summary:       Un*x installation summary.
* installation, network based:           Un*x full installation instructions.
* installation, Un*x, full instructions: Un*x full installation instructions.
* installation, Un*x, summary:           Un*x installation summary.
* installation, Windows clients:         Server installation under Windows.
* installation, Windows server:          Server installation under Windows.
* installation, Windows, from binaries:  Installing Ciao from a Win32 binary distribution.
* installation, Windows, from sources:   Installation and compilation under Windows.
* instance/2 <1>:                        Documentation on exports (terms_check).
* instance/2:                            Usage and interface (terms_check).
* instance_codes/2 <1>:                  Documentation on exports (objects_rt).
* instance_codes/2:                      Usage and interface (objects_rt).
* instance_id/1 <1>:                     Documentation on exports (objects_rt).
* instance_id/1:                         Usage and interface (objects_rt).
* instance_of/2 <1>:                     Documentation on exports (objects_rt).
* instance_of/2 <2>:                     Usage and interface (objects_rt).
* instance_of/2 <3>:                     Error reporting at compile time (objects).
* instance_of/2 <4>:                     Documentation on new declarations (objects).
* instance_of/2:                         Usage and interface (objects).
* instances:                             Run time usage of objects.
* instantiation mode <1>:                *** PART V - Annotated Prolog library (assertions).
* instantiation mode:                    PART V - Annotated Prolog library (assertions).
* instantiation properties:              Defining properties.
* instantiation state:                   Modes.
* int/1 <1>:                             Changing system behaviour and various flags.
* int/1 <2>:                             Documentation on exports (arithmetic).
* int/1 <3>:                             Documentation on exports (basic_props).
* int/1:                                 Usage and interface (basic_props).
* int_list/1 <1>:                        Documentation on exports (foreign_interface_properties).
* int_list/1:                            Usage and interface (foreign_interface_properties).
* integer/1 <1>:                         Documentation on exports (assertions_props).
* integer/1 <2>:                         Documentation on exports (arithmetic).
* integer/1 <3>:                         Documentation on exports (term_typing).
* integer/1:                             Usage and interface (term_typing).
* inter-process communication:           Active modules (high-level distributed execution).
* intercept/3 <1>:                       Documentation on exports (exceptions).
* intercept/3:                           Usage and interface (exceptions).
* interface file:                        Documentation on internals (syntax_extensions).
* interface inheritance:                 Documentation on new declarations (class).
* interface/2 <1>:                       Documentation on exports (objects_rt).
* interface/2:                           Usage and interface (objects_rt).
* interface_name/1 <1>:                  Documentation on exports (objects_rt).
* interface_name/1:                      Usage and interface (objects_rt).
* interface_source/1 <1>:                Documentation on exports (objects_rt).
* interface_source/1:                    Usage and interface (objects_rt).
* interfaces <1>:                        Usage and interface (class).
* interfaces:                            Declaring classes and interfaces.
* internal_module_id/1:                  Documentation on internals (system_info).
* interp_file/2 <1>:                     Documentation on exports (bltclass).
* interp_file/2:                         Usage and interface (bltclass).
* interpreted mode:                      Marking modules and files for debugging in the top-level debugger.
* intersection/3 <1>:                    Documentation on exports (lists).
* intersection/3:                        Usage and interface (lists).
* intlist/1 <1>:                         Documentation on exports (numlists).
* intlist/1:                             Usage and interface (numlists).
* intset_delete/3 <1>:                   Documentation on exports (lists).
* intset_delete/3:                       Usage and interface (lists).
* intset_in/2 <1>:                       Documentation on exports (lists).
* intset_in/2:                           Usage and interface (lists).
* intset_insert/3 <1>:                   Documentation on exports (lists).
* intset_insert/3:                       Usage and interface (lists).
* intset_sequence/3 <1>:                 Documentation on exports (lists).
* intset_sequence/3:                     Usage and interface (lists).
* io_aux:                                Changing system behaviour and various flags.
* io_mode/1 <1>:                         Documentation on exports (streams_basic).
* io_mode/1:                             Usage and interface (streams_basic).
* is/2 <1>:                              Documentation on exports (pl2sql).
* is/2 <2>:                              Documentation on exports (arithmetic).
* is/2:                                  Usage and interface (arithmetic).
* is_det/1 <1>:                          Documentation on exports (native_props).
* is_det/1:                              Usage and interface (native_props).
* is_dictionaries/1 <1>:                 Documentation on exports (dictionary_tree).
* is_dictionaries/1:                     Usage and interface (dictionary_tree).
* iso <1>:                               *** PART III - ISO-Prolog library (iso).
* iso <2>:                               Shell invocation and startup.
* iso:                                   PART III - ISO-Prolog library (iso).
* ISO-Prolog <1>:                        Documentation on exports (operators).
* ISO-Prolog <2>:                        Extending the syntax.
* ISO-Prolog <3>:                        Documentation on exports (io_basic).
* ISO-Prolog <4>:                        Basic input/output.
* ISO-Prolog <5>:                        Documentation on exports (arithmetic).
* ISO-Prolog <6>:                        Shell invocation and startup.
* ISO-Prolog <7>:                        Modes.
* ISO-Prolog:                            ISO-Prolog compliance versus extensibility.
* ISO-Prolog builtins <1>:               *** PART III - ISO-Prolog library (iso).
* ISO-Prolog builtins <2>:               *** PART II - The Ciao basic language (engine).
* ISO-Prolog builtins <3>:               PART III - ISO-Prolog library (iso).
* ISO-Prolog builtins:                   PART II - The Ciao basic language (engine).
* iso-prolog, compliance:                ISO-Prolog compliance versus extensibility.
* iso/1 <1>:                             Documentation on exports (basic_props).
* iso/1:                                 Usage and interface (basic_props).
* iso_byte_char <1>:                     Usage and interface (tokeniser).
* iso_byte_char <2>:                     Usage and interface (parser_util).
* iso_byte_char <3>:                     Usage and interface (parser).
* iso_byte_char <4>:                     Usage and interface (lookup).
* iso_byte_char <5>:                     Usage and interface (io).
* iso_byte_char <6>:                     Usage and interface (generator).
* iso_byte_char <7>:                     Usage and interface (dictionary_tree).
* iso_byte_char <8>:                     Usage and interface (dictionary).
* iso_byte_char <9>:                     Usage and interface (boundary).
* iso_byte_char <10>:                    Usage and interface (objects_rt).
* iso_byte_char <11>:                    Usage and interface (functions).
* iso_byte_char:                         Usage and interface (iso).
* iso_incomplete <1>:                    Usage and interface (parser_util).
* iso_incomplete <2>:                    Usage and interface (parser).
* iso_incomplete <3>:                    Usage and interface (lookup).
* iso_incomplete <4>:                    Usage and interface (io).
* iso_incomplete <5>:                    Usage and interface (generator).
* iso_incomplete <6>:                    Usage and interface (dictionary_tree).
* iso_incomplete <7>:                    Usage and interface (dictionary).
* iso_incomplete <8>:                    Usage and interface (boundary).
* iso_incomplete <9>:                    Usage and interface (objects_rt).
* iso_incomplete <10>:                   Usage and interface (functions).
* iso_incomplete:                        Usage and interface (iso).
* iso_misc <1>:                          Usage and interface (parser_util).
* iso_misc <2>:                          Usage and interface (parser).
* iso_misc <3>:                          Usage and interface (lookup).
* iso_misc <4>:                          Usage and interface (io).
* iso_misc <5>:                          Usage and interface (generator).
* iso_misc <6>:                          Usage and interface (dictionary_tree).
* iso_misc <7>:                          Usage and interface (dictionary).
* iso_misc <8>:                          Usage and interface (boundary).
* iso_misc <9>:                          Usage and interface (pl2sql).
* iso_misc <10>:                         Usage and interface (objects_rt).
* iso_misc <11>:                         Usage and interface (functions).
* iso_misc:                              Usage and interface (iso).
* isomodes:                              Modes.
* issue_debug_messages/1 <1>:            Documentation on multifiles (messages).
* issue_debug_messages/1 <2>:            Documentation on exports (messages).
* issue_debug_messages/1:                Usage and interface (messages).
* iterative deepening-based execution <1>: *** PART VII - Ciao Prolog extensions.
* iterative deepening-based execution:   PART VII - Ciao Prolog extensions.
* iterative-deepening:                   Iterative-deepening execution.
* Jan Maluzynski:                        Acknowledgments.
* Java interface <1>:                    *** PART VIII - Interfaces to other languages and systems.
* Java interface:                        PART VIII - Interfaces to other languages and systems.
* Johan Widen:                           Acknowledgments.
* John Gallagher:                        Acknowledgments.
* justify_entry/1 <1>:                   Documentation on exports (entry_class).
* justify_entry/1:                       Usage and interface (entry_class).
* justify_text/1 <1>:                    Documentation on exports (text_class).
* justify_text/1:                        Usage and interface (text_class).
* K.U. Leuven:                           Acknowledgments.
* Kalyan Muthukumar:                     Acknowledgments.
* Kevin Greene:                          Acknowledgments.
* keyboard:                              Characters and character strings.
* keylist/1 <1>:                         Documentation on exports (sort).
* keylist/1:                             Usage and interface (sort).
* keypair/1:                             Documentation on internals (sort).
* keysort/2 <1>:                         Documentation on exports (sort).
* keysort/2:                             Usage and interface (sort).
* keyword/1:                             Documentation on internals (persdbrt).
* Kim Marriott:                          Acknowledgments.
* L. Byrd:                               Acknowledgments.
* L.M. Pereira:                          Acknowledgments.
* label_value/1 <1>:                     Documentation on exports (menu_entry_class).
* label_value/1 <2>:                     Usage and interface (menu_entry_class).
* label_value/1 <3>:                     Documentation on exports (menu_class).
* label_value/1:                         Usage and interface (menu_class).
* last/2 <1>:                            Documentation on exports (lists).
* last/2:                                Usage and interface (lists).
* latex:                                 General operation.
* leap:                                  Options available during debugging.
* leash/1 <1>:                           Documentation on exports (debugger).
* leash/1 <2>:                           Usage and interface (debugger).
* leash/1:                               Format of debugging messages.
* length/2 <1>:                          Documentation on exports (lists).
* length/2:                              Usage and interface (lists).
* letter_match/2 <1>:                    Documentation on exports (patterns).
* letter_match/2:                        Usage and interface (patterns).
* lgraph/1:                              Documentation on internals (davinci).
* lgraph/2 <1>:                          Documentation on exports (lgraphs).
* lgraph/2:                              Usage and interface (lgraphs).
* lib library <1>:                       *** PART II - The Ciao basic language (engine).
* lib library:                           PART II - The Ciao basic language (engine).
* libpaths:                              Usage and interface (ciaosh).
* libraries used:                        Printing the declarations and code in a file.
* library directory:                     Un*x full installation instructions.
* library('xrefs/mrefs'):                Crossed-references of a program.
* library('xrefs/pxrefs'):               Crossed-references of a program.
* library(iso_byte_char):                Basic input/output.
* library(modes):                        Documentation on exports (assertions_props).
* library(pure):                         The module system.
* library(xrefs):                        Crossed-references of a program.
* library/pillow/doc:                    The PiLLoW Web programming library.
* library_directory/1 <1>:               Documentation on multifiles (streams_basic).
* library_directory/1 <2>:               Usage and interface (streams_basic).
* library_directory/1 <3>:               Documentation on multifiles (libpaths).
* library_directory/1 <4>:               Documentation on exports (libpaths).
* library_directory/1 <5>:               Usage and interface (libpaths).
* library_directory/1:                   Paths used by the compiler during compilation.
* librowser:                             The Ciao library browser.
* limitations <1>:                       *** PART XII - Appendices.
* limitations:                           PART XII - Appendices.
* limitations, architecture-specific:    Architecture-specific notes and limitations.
* line/1:                                Documentation on internals (strings).
* line_count/2 <1>:                      Documentation on exports (streams_basic).
* line_count/2:                          Usage and interface (streams_basic).
* line_position/2 <1>:                   Documentation on exports (streams_basic).
* line_position/2:                       Usage and interface (streams_basic).
* linear/1 <1>:                          Documentation on exports (native_props).
* linear/1:                              Usage and interface (native_props).
* linker_and_opts/2 <1>:                 Documentation on exports (foreign_compilation).
* linker_and_opts/2:                     Usage and interface (foreign_compilation).
* Linkoping U.:                          Acknowledgments.
* Linux:                                 Multiarchitecture support.
* list/1 <1>:                            Documentation on exports (basic_props).
* list/1:                                Usage and interface (basic_props).
* list/2 <1>:                            Documentation on exports (assertions_props).
* list/2 <2>:                            Documentation on exports (basic_props).
* list/2:                                Usage and interface (basic_props).
* list1/2 <1>:                           Documentation on exports (lists).
* list1/2:                               Usage and interface (lists).
* list_breakpt/0 <1>:                    Documentation on exports (debugger).
* list_breakpt/0:                        Usage and interface (debugger).
* list_concat/2 <1>:                     Documentation on exports (lists).
* list_concat/2:                         Usage and interface (lists).
* list_insert/2 <1>:                     Documentation on exports (idlists).
* list_insert/2 <2>:                     Usage and interface (idlists).
* list_insert/2 <3>:                     Documentation on exports (lists).
* list_insert/2:                         Usage and interface (lists).
* list_lookup/3 <1>:                     Documentation on exports (lists).
* list_lookup/3:                         Usage and interface (lists).
* list_lookup/4 <1>:                     Documentation on exports (lists).
* list_lookup/4:                         Usage and interface (lists).
* list_to_list_of_lists/2 <1>:           Documentation on exports (lists).
* list_to_list_of_lists/2:               Usage and interface (lists).
* lists <1>:                             Usage and interface (tokeniser).
* lists <2>:                             Usage and interface (possible).
* lists <3>:                             Usage and interface (parser_util).
* lists <4>:                             Usage and interface (parser).
* lists <5>:                             Usage and interface (lookup).
* lists <6>:                             Usage and interface (io).
* lists <7>:                             Usage and interface (generator_util).
* lists <8>:                             Usage and interface (field_value_check).
* lists <9>:                             Usage and interface (field_value).
* lists <10>:                            Usage and interface (dictionary_tree).
* lists <11>:                            Usage and interface (dictionary).
* lists <12>:                            Usage and interface (provrml).
* lists <13>:                            Usage and interface (test_format).
* lists <14>:                            Usage and interface (table_widget4).
* lists <15>:                            Usage and interface (table_widget3).
* lists <16>:                            Usage and interface (table_widget2).
* lists <17>:                            Usage and interface (table_widget1).
* lists <18>:                            Usage and interface (genmultibar).
* lists <19>:                            Usage and interface (gengraph2).
* lists <20>:                            Usage and interface (gengraph1).
* lists <21>:                            Usage and interface (genbar4).
* lists <22>:                            Usage and interface (genbar3).
* lists <23>:                            Usage and interface (genbar2).
* lists <24>:                            Usage and interface (genbar1).
* lists <25>:                            Usage and interface (color_pattern).
* lists <26>:                            Usage and interface (patterns).
* lists <27>:                            Usage and interface (numlists).
* lists <28>:                            Usage and interface (pl2sql).
* lists <29>:                            Usage and interface (persdbrt_mysql).
* lists <30>:                            Usage and interface (persdbrt).
* lists <31>:                            Usage and interface (http).
* lists <32>:                            Usage and interface (html).
* lists <33>:                            Usage and interface (line_class).
* lists <34>:                            Usage and interface (poly_class).
* lists <35>:                            Usage and interface (menu_entry_class).
* lists <36>:                            Usage and interface (menubutton_class).
* lists <37>:                            Usage and interface (entry_class).
* lists <38>:                            Usage and interface (canvas_class).
* lists <39>:                            Usage and interface (menu_class).
* lists <40>:                            Usage and interface (window_class).
* lists <41>:                            Usage and interface (tcltk_low_level).
* lists <42>:                            Usage and interface (tcltk).
* lists <43>:                            Usage and interface (build_foreign_interface).
* lists <44>:                            Usage and interface (librowser).
* lists <45>:                            Usage and interface (messages).
* lists <46>:                            Usage and interface (filenames).
* lists <47>:                            Usage and interface (system).
* lists <48>:                            Usage and interface (native_props).
* lists <49>:                            Documentation on new declarations (assertions).
* lists <50>:                            Usage and interface (classic).
* lists <51>:                            Usage and interface (read).
* lists <52>:                            Usage and interface (aggregates).
* lists:                                 Usage and interface (libpaths).
* llists:                                Usage and interface (build_foreign_interface).
* load_compilation_module/1:             Documentation on internals (syntax_extensions).
* loading mode:                          Marking modules and files for debugging in the top-level debugger.
* loading programs <1>:                  Compiling and running programs (Win32).
* loading programs:                      Compiling and running programs (Un*x).
* lock_atom/1 <1>:                       Documentation on exports (concurrency).
* lock_atom/1:                           Usage and interface (concurrency).
* lock_file/3 <1>:                       Documentation on exports (file_locks).
* lock_file/3:                           Usage and interface (file_locks).
* log/1:                                 Documentation on exports (arithmetic).
* LogIn:                                 Entering recursive (conjunctive) shell levels.
* look_ahead/3 <1>:                      Documentation on exports (parser_util).
* look_ahead/3:                          Usage and interface (parser_util).
* look_first_parsed/2 <1>:               Documentation on exports (parser_util).
* look_first_parsed/2:                   Usage and interface (parser_util).
* lookup_check_field/6 <1>:              Documentation on exports (lookup).
* lookup_check_field/6:                  Usage and interface (lookup).
* lookup_check_interface_fieldValue/8 <1>: Documentation on exports (lookup).
* lookup_check_interface_fieldValue/8:   Usage and interface (lookup).
* lookup_check_node/4 <1>:               Documentation on exports (lookup).
* lookup_check_node/4:                   Usage and interface (lookup).
* lookup_field/4 <1>:                    Documentation on exports (lookup).
* lookup_field/4:                        Usage and interface (lookup).
* lookup_field_access/4 <1>:             Documentation on exports (lookup).
* lookup_field_access/4:                 Usage and interface (lookup).
* lookup_fieldTypeId/1 <1>:              Documentation on exports (lookup).
* lookup_fieldTypeId/1:                  Usage and interface (lookup).
* lookup_get_fieldType/4 <1>:            Documentation on exports (lookup).
* lookup_get_fieldType/4:                Usage and interface (lookup).
* lookup_route/5 <1>:                    Documentation on exports (lookup).
* lookup_route/5:                        Usage and interface (lookup).
* lookup_set_def/3 <1>:                  Documentation on exports (lookup).
* lookup_set_def/3:                      Usage and interface (lookup).
* lookup_set_extern_prototype/4 <1>:     Documentation on exports (lookup).
* lookup_set_extern_prototype/4:         Usage and interface (lookup).
* lookup_set_prototype/4 <1>:            Documentation on exports (lookup).
* lookup_set_prototype/4:                Usage and interface (lookup).
* lpdoc <1>:                             Documentation on exports (assertions_props).
* lpdoc <2>:                             Documentation on new declarations (assertions).
* lpdoc <3>:                             The Ciao assertion package.
* lpdoc <4>:                             *** PART I - The program development environment.
* lpdoc <5>:                             PART I - The program development environment.
* lpdoc:                                 About this manual.
* LPdoc:                                 About this manual.
* lpdoc <1>:                             Summary.
* lpdoc:                                 (outside of any node).
* lpmake <1>:                            General operation.
* lpmake:                                The Ciao lpmake scripting facility.
* lpmake autodocumentation:              The Ciao lpmake scripting facility.
* Mac OS X <1>:                          Un*x full installation instructions.
* Mac OS X <2>:                          Un*x installation summary.
* Mac OS X:                              Un*x user setup.
* mailing list <1>:                      Keeping up to date with the Ciao users mailing list.
* mailing list <2>:                      *** PART XII - Appendices.
* mailing list:                          PART XII - Appendices.
* main/0 <1>:                            Introduction to building executables.
* main/0 <2>:                            Running Ciao scripts (Win32).
* main/0 <3>:                            Generating executables (Win32).
* main/0 <4>:                            Running Ciao scripts (Un*x).
* main/0:                                Generating executables (Un*x).
* main/1 <1>:                            Changing system behaviour and various flags.
* main/1 <2>:                            How it works.
* main/1 <3>:                            Introduction to building executables.
* main/1 <4>:                            An introduction to the Ciao emacs environment (Win32).
* main/1 <5>:                            Running Ciao scripts (Win32).
* main/1 <6>:                            Generating executables (Win32).
* main/1 <7>:                            An introduction to the Ciao emacs environment (Un*x).
* main/1 <8>:                            Running Ciao scripts (Un*x).
* main/1:                                Generating executables (Un*x).
* make <1>:                              Un*x full installation instructions.
* make <2>:                              Un*x installation summary.
* make <3>:                              General operation.
* make:                                  The Ciao lpmake scripting facility.
* make_actmod/2 <1>:                     Active modules (high-level distributed execution).
* make_actmod/2 <2>:                     Documentation on exports (ciaosh).
* make_actmod/2:                         Usage and interface (ciaosh).
* make_directory/1 <1>:                  Documentation on exports (system).
* make_directory/1:                      Usage and interface (system).
* make_directory/2 <1>:                  Documentation on exports (system).
* make_directory/2:                      Usage and interface (system).
* make_dirpath/1 <1>:                    Documentation on exports (system).
* make_dirpath/1:                        Usage and interface (system).
* make_dirpath/2 <1>:                    Documentation on exports (system).
* make_dirpath/2:                        Usage and interface (system).
* make_exec/2 <1>:                       Documentation on exports (ciaosh).
* make_exec/2 <2>:                       Usage and interface (ciaosh).
* make_exec/2 <3>:                       Generating executables (Win32).
* make_exec/2:                           Generating executables (Un*x).
* make_persistent/2 <1>:                 Documentation on exports (persdbrt).
* make_persistent/2 <2>:                 Usage and interface (persdbrt).
* make_persistent/2:                     Using file-based persistent predicates.
* make_po/1 <1>:                         Documentation on exports (compiler).
* make_po/1 <2>:                         Usage and interface (compiler).
* make_po/1 <3>:                         Documentation on exports (ciaosh).
* make_po/1:                             Usage and interface (ciaosh).
* make_sql_persistent/3 <1>:             Documentation on exports (persdbrt_mysql).
* make_sql_persistent/3:                 Usage and interface (persdbrt_mysql).
* Makefile:                              The stand-alone command-line compiler.
* Makefile.pl:                           General operation.
* man:                                   Un*x full installation instructions.
* MANPATH:                               Un*x full installation instructions.
* manual, printing <1>:                  Checking for correct installation on Win32.
* manual, printing <2>:                  Printing manuals (Win32).
* manual, printing <3>:                  Testing your Ciao Win32 installation.
* manual, printing:                      Printing manuals (Un*x).
* manual, tour:                          A tour of the manual.
* manuals:                               Un*x full installation instructions.
* manuals, printing <1>:                 Printing manuals (Win32).
* manuals, printing:                     Printing manuals (Un*x).
* Manuel Carro:                          Acknowledgments.
* Manuel Hermenegildo:                   Acknowledgments.
* map/3 <1>:                             Documentation on exports (hiordlib).
* map/3:                                 Usage and interface (hiordlib).
* Maria Jose Garcia de la Banda:         Acknowledgments.
* marshalling <1>:                       *** PART VI - Ciao Prolog library miscellanea.
* marshalling:                           PART VI - Ciao Prolog library miscellanea.
* match_pattern/2 <1>:                   Documentation on exports (patterns).
* match_pattern/2:                       Usage and interface (patterns).
* match_pattern/3 <1>:                   Documentation on exports (patterns).
* match_pattern/3:                       Usage and interface (patterns).
* match_pattern_pred/2 <1>:              Documentation on exports (patterns).
* match_pattern_pred/2:                  Usage and interface (patterns).
* Mats Carlsson:                         Acknowledgments.
* Maurice Bruynooghe:                    Acknowledgments.
* max/3:                                 Delaying predicates (when).
* maxdepth/1 <1>:                        Documentation on exports (debugger).
* maxdepth/1:                            Usage and interface (debugger).
* maxsize/2 <1>:                         Documentation on exports (window_class).
* maxsize/2:                             Usage and interface (window_class).
* MCC:                                   Acknowledgments.
* Melbourne U.:                          Acknowledgments.
* member/2 <1>:                          Documentation on exports (basic_props).
* member/2:                              Usage and interface (basic_props).
* member_0/2 <1>:                        Documentation on exports (idlists).
* member_0/2:                            Usage and interface (idlists).
* memberchk/2 <1>:                       Documentation on exports (idlists).
* memberchk/2:                           Usage and interface (idlists).
* memory management <1>:                 Documentation on internals (prolog_sys).
* memory management:                     Documentation on exports (prolog_sys).
* memory_option/1:                       Documentation on internals (prolog_sys).
* memory_result/1:                       Documentation on internals (prolog_sys).
* menu/1 <1>:                            Documentation on exports (window_class).
* menu/1:                                Usage and interface (window_class).
* menu_data/1 <1>:                       Documentation on exports (menu_class).
* menu_data/1:                           Usage and interface (menu_class).
* menu_name/1 <1>:                       Documentation on exports (menu_entry_class).
* menu_name/1 <2>:                       Usage and interface (menu_entry_class).
* menu_name/1 <3>:                       Documentation on exports (menubutton_class).
* menu_name/1:                           Usage and interface (menubutton_class).
* merge/3 <1>:                           Documentation on exports (sets).
* merge/3:                               Usage and interface (sets).
* merge_tree/2 <1>:                      Documentation on exports (dictionary_tree).
* merge_tree/2:                          Usage and interface (dictionary_tree).
* message/1:                             Documentation on exports (io_aux).
* message/2 <1>:                         Known bugs and planned improvements (io_aux).
* message/2 <2>:                         Documentation on exports (io_aux).
* message/2:                             Usage and interface (io_aux).
* message_lns/4 <1>:                     Documentation on exports (io_aux).
* message_lns/4:                         Usage and interface (io_aux).
* messages <1>:                          Usage and interface (pl2sql).
* messages <2>:                          Usage and interface (persdbrt_mysql).
* messages <3>:                          Usage and interface (build_foreign_interface).
* messages:                              Usage and interface (assrt_write).
* meta_predicate/1:                      Usage and interface (class).
* method_spec/1 <1>:                     Documentation on exports (objects_rt).
* method_spec/1:                         Usage and interface (objects_rt).
* mfstringValue/5 <1>:                   Documentation on exports (field_value).
* mfstringValue/5:                       Usage and interface (field_value).
* mfstringValue/7 <1>:                   Documentation on exports (field_value_check).
* mfstringValue/7:                       Usage and interface (field_value_check).
* minimum/3 <1>:                         Documentation on exports (hiordlib).
* minimum/3:                             Usage and interface (hiordlib).
* minsize/2 <1>:                         Documentation on exports (window_class).
* minsize/2:                             Usage and interface (window_class).
* mkf-CIAOARCH:                          Porting to currently unsupported operating systems.
* mktemp/2 <1>:                          Documentation on exports (system).
* mktemp/2:                              Usage and interface (system).
* mod/2:                                 Documentation on exports (arithmetic).
* mode <1>:                              Documentation on exports (assertions_props).
* mode:                                  Documentation on new declarations (assertions).
* mode spec:                             Modes.
* mode_of_module/2 <1>:                  Documentation on exports (compiler).
* mode_of_module/2:                      Usage and interface (compiler).
* modedef/1 <1>:                         Documentation on exports (assertions_props).
* modedef/1 <2>:                         Documentation on new declarations (assertions).
* modedef/1 <3>:                         Usage and interface (assertions).
* modedef/1:                             Modes.
* modes <1>:                             Classical Prolog modes.
* modes:                                 ISO-Prolog modes.
* modif_time/2 <1>:                      Documentation on exports (system).
* modif_time/2:                          Usage and interface (system).
* modif_time0/2 <1>:                     Documentation on exports (system).
* modif_time0/2:                         Usage and interface (system).
* modular interface:                     Intermediate files in the compilation process.
* module qualification:                  The module system.
* module/2:                              ISO-Prolog package.
* module/3 <1>:                          Usage and interface (class).
* module/3:                              Marking modules and files for debugging with the embedded debugger.
* module_of/2 <1>:                       Documentation on exports (compiler).
* module_of/2:                           Usage and interface (compiler).
* modules, active:                       Types of executables generated.
* Monash U.:                             Acknowledgments.
* month/1 <1>:                           Documentation on exports (pillow_types).
* month/1:                               Usage and interface (pillow_types).
* mshare/1 <1>:                          Documentation on exports (native_props).
* mshare/1:                              Usage and interface (native_props).
* multi-evaluated:                       Documentation on new declarations (class).
* multiarchitecture support:             Multiarchitecture support.
* multibar_attribute/1:                  Documentation on internals (genmultibar).
* multibarchart/10 <1>:                  Documentation on exports (genmultibar).
* multibarchart/10 <2>:                  Usage and interface (genmultibar).
* multibarchart/10:                      Documentation on exports (chartlib).
* multibarchart/8 <1>:                   Documentation on exports (genmultibar).
* multibarchart/8 <2>:                   Usage and interface (genmultibar).
* multibarchart/8:                       Documentation on exports (chartlib).
* multifile/1 <1>:                       Usage and interface (class).
* multifile/1 <2>:                       The module system.
* multifile/1 <3>:                       Documentation on exports (ciaosh).
* multifile/1:                           Usage and interface (ciaosh).
* multpredspec/1:                        Documentation on internals (debugger).
* mut_exclusive/1 <1>:                   Documentation on exports (native_props).
* mut_exclusive/1:                       Usage and interface (native_props).
* my_url/1 <1>:                          Documentation on exports (html).
* my_url/1:                              Usage and interface (html).
* mysql_connect/5 <1>:                   Documentation on exports (mysql_client).
* mysql_connect/5:                       Usage and interface (mysql_client).
* mysql_disconnect/1 <1>:                Documentation on exports (mysql_client).
* mysql_disconnect/1 <2>:                Usage and interface (mysql_client).
* mysql_disconnect/1:                    Documentation on internals (persdbrt_mysql).
* mysql_fetch/2 <1>:                     Documentation on exports (mysql_client).
* mysql_fetch/2:                         Usage and interface (mysql_client).
* mysql_free_query_connection/1 <1>:     Documentation on exports (mysql_client).
* mysql_free_query_connection/1:         Usage and interface (mysql_client).
* mysql_get_tables/2 <1>:                Documentation on exports (mysql_client).
* mysql_get_tables/2:                    Usage and interface (mysql_client).
* mysql_query/3 <1>:                     Documentation on exports (mysql_client).
* mysql_query/3:                         Usage and interface (mysql_client).
* mysql_query_one_tuple/3 <1>:           Documentation on exports (mysql_client).
* mysql_query_one_tuple/3:               Usage and interface (mysql_client).
* mysql_table_types/3 <1>:               Documentation on exports (mysql_client).
* mysql_table_types/3:                   Usage and interface (mysql_client).
* n_assrt_body/5:                        Documentation on exports (assertions_props).
* nabody/1 <1>:                          Documentation on exports (assertions_props).
* nabody/1:                              Usage and interface (assertions_props).
* Name:                                  Documentation on exports (foreign_interface_properties).
* name of a location:                    Documentation on internals (persdbrt_mysql).
* name server:                           Active modules (high-level distributed execution).
* name/2 <1>:                            Documentation on exports (html).
* name/2 <2>:                            Documentation on exports (atomic_basic).
* name/2:                                Usage and interface (atomic_basic).
* name_menu/1 <1>:                       Documentation on exports (menu_class).
* name_menu/1:                           Usage and interface (menu_class).
* Naming term aguments:                  Terms with named arguments -records/feature terms.
* native/1 <1>:                          Documentation on exports (foreign_interface_properties).
* native/1:                              Usage and interface (foreign_interface_properties).
* native/2 <1>:                          Documentation on exports (foreign_interface_properties).
* native/2:                              Usage and interface (foreign_interface_properties).
* negated comparison goal:               Documentation on internals (pl2sql).
* negated database goal:                 Documentation on internals (pl2sql).
* negated goals:                         Documentation on internals (pl2sql).
* negated_comparison/2:                  Documentation on internals (pl2sql).
* negations:                             Documentation on exports (pl2sql).
* neighbors/3 <1>:                       Documentation on exports (ugraphs).
* neighbors/3:                           Usage and interface (ugraphs).
* netscape <1>:                          Checking for correct installation on Un*x.
* netscape:                              Testing your Ciao Un*x installation.
* New Mexico State University:           Acknowledgments.
* new/2 <1>:                             Documentation on exports (objects_rt).
* new/2 <2>:                             Usage and interface (objects_rt).
* new/2 <3>:                             Error reporting at compile time (objects).
* new/2 <4>:                             Documentation on new declarations (objects).
* new/2 <5>:                             Usage and interface (objects).
* new/2:                                 Documentation on exports (class).
* new_atom/1 <1>:                        Documentation on exports (prolog_sys).
* new_atom/1:                            Usage and interface (prolog_sys).
* new_declaration/1 <1>:                 Documentation on internals (syntax_extensions).
* new_declaration/1:                     Basic builtin directives.
* new_declaration/2 <1>:                 Documentation on internals (syntax_extensions).
* new_declaration/2:                     Basic builtin directives.
* new_interp/1 <1>:                      Documentation on exports (bltclass).
* new_interp/1 <2>:                      Usage and interface (bltclass).
* new_interp/1 <3>:                      Documentation on exports (tcltk_low_level).
* new_interp/1:                          Usage and interface (tcltk_low_level).
* new_interp/2 <1>:                      Documentation on exports (tcltk_low_level).
* new_interp/2:                          Usage and interface (tcltk_low_level).
* new_interp_file/2 <1>:                 Documentation on exports (tcltk_low_level).
* new_interp_file/2:                     Usage and interface (tcltk_low_level).
* nl/0 <1>:                              Documentation on exports (io_basic).
* nl/0:                                  Usage and interface (io_basic).
* nl/1 <1>:                              Documentation on exports (io_basic).
* nl/1:                                  Usage and interface (io_basic).
* nnegint/1 <1>:                         Documentation on exports (basic_props).
* nnegint/1:                             Usage and interface (basic_props).
* no_path_file_name/2 <1>:               Documentation on exports (filenames).
* no_path_file_name/2:                   Usage and interface (filenames).
* nobreakall/0 <1>:                      Documentation on exports (debugger).
* nobreakall/0:                          Usage and interface (debugger).
* nobreakpt/6 <1>:                       Documentation on exports (debugger).
* nobreakpt/6 <2>:                       Usage and interface (debugger).
* nobreakpt/6 <3>:                       Marking modules and files for debugging with the embedded debugger.
* nobreakpt/6:                           The debugging process.
* nocontainsx/2 <1>:                     Documentation on exports (lists).
* nocontainsx/2:                         Usage and interface (lists).
* nodebug <1>:                           Options available during debugging.
* nodebug:                               The debugging process.
* nodebug/0 <1>:                         Documentation on exports (debugger).
* nodebug/0:                             Usage and interface (debugger).
* nodebug_module/1 <1>:                  Documentation on exports (debugger).
* nodebug_module/1 <2>:                  Usage and interface (debugger).
* nodebug_module/1:                      Marking modules and files for debugging in the top-level debugger.
* nodeDeclaration/4 <1>:                 Documentation on exports (parser).
* nodeDeclaration/4 <2>:                 Usage and interface (parser).
* nodeDeclaration/4 <3>:                 Documentation on exports (generator).
* nodeDeclaration/4:                     Usage and interface (generator).
* nofileerrors/0 <1>:                    Documentation on exports (prolog_flags).
* nofileerrors/0:                        Usage and interface (prolog_flags).
* nogc/0 <1>:                            Documentation on exports (prolog_flags).
* nogc/0:                                Usage and interface (prolog_flags).
* nonsingle/1 <1>:                       Documentation on exports (lists).
* nonsingle/1:                           Usage and interface (lists).
* nonvar/1 <1>:                          Documentation on exports (term_typing).
* nonvar/1:                              Usage and interface (term_typing).
* nospy:                                 Options available during debugging.
* nospy/1 <1>:                           Documentation on exports (debugger).
* nospy/1 <2>:                           Usage and interface (debugger).
* nospy/1 <3>:                           Acknowledgements.
* nospy/1 <4>:                           Marking modules and files for debugging with the embedded debugger.
* nospy/1:                               The debugging process.
* nospyall/0 <1>:                        Documentation on exports (debugger).
* nospyall/0:                            Usage and interface (debugger).
* NOT EXISTS-subqueries:                 Documentation on internals (pl2sql).
* not_covered/1 <1>:                     Documentation on exports (native_props).
* not_covered/1:                         Usage and interface (native_props).
* not_empty/3 <1>:                       Documentation on exports (test_format).
* not_empty/3:                           Usage and interface (test_format).
* not_empty/4 <1>:                       Documentation on exports (test_format).
* not_empty/4:                           Usage and interface (test_format).
* not_fails/1 <1>:                       Documentation on exports (native_props).
* not_fails/1:                           Usage and interface (native_props).
* not_further_inst/1:                    Documentation on exports (assertions_props).
* not_further_inst/2 <1>:                Documentation on exports (basic_props).
* not_further_inst/2:                    Usage and interface (basic_props).
* not_mut_exclusive/1 <1>:               Documentation on exports (native_props).
* not_mut_exclusive/1:                   Usage and interface (native_props).
* notation:                              Syntax terminology and notational conventions.
* note/1:                                Documentation on exports (io_aux).
* note_message/1 <1>:                    Documentation on exports (messages).
* note_message/1:                        Usage and interface (messages).
* note_message/2 <1>:                    Documentation on exports (messages).
* note_message/2:                        Usage and interface (messages).
* note_message/3 <1>:                    Documentation on exports (messages).
* note_message/3:                        Usage and interface (messages).
* notrace/0 <1>:                         Documentation on exports (debugger).
* notrace/0:                             Usage and interface (debugger).
* ntemacs <1>:                           Win32 binary installation summary.
* ntemacs:                               Un*x full installation instructions.
* nth/3 <1>:                             Documentation on exports (lists).
* nth/3:                                 Usage and interface (lists).
* null/1 <1>:                            Documentation on exports (foreign_interface_properties).
* null/1:                                Usage and interface (foreign_interface_properties).
* null_dict/1 <1>:                       Documentation on exports (vndict).
* null_dict/1:                           Usage and interface (vndict).
* num/1 <1>:                             Documentation on exports (basic_props).
* num/1:                                 Usage and interface (basic_props).
* number/1 <1>:                          Documentation on exports (term_typing).
* number/1:                              Usage and interface (term_typing).
* number_chars/2 <1>:                    Documentation on exports (iso_byte_char).
* number_chars/2:                        Usage and interface (iso_byte_char).
* number_codes/2 <1>:                    Documentation on exports (atomic_basic).
* number_codes/2:                        Usage and interface (atomic_basic).
* number_codes/3 <1>:                    Documentation on exports (atomic_basic).
* number_codes/3:                        Usage and interface (atomic_basic).
* numbervars/3 <1>:                      Documentation on exports (write).
* numbervars/3:                          Usage and interface (write).
* numlist/1 <1>:                         Documentation on exports (numlists).
* numlist/1:                             Usage and interface (numlists).
* object:                                Run time usage of objects.
* object oriented programming <1>:       *** PART VII - Ciao Prolog extensions.
* object oriented programming:           PART VII - Ciao Prolog extensions.
* objects/objects_rt <1>:                Usage and interface (text_class).
* objects/objects_rt <2>:                Usage and interface (line_class).
* objects/objects_rt <3>:                Usage and interface (poly_class).
* objects/objects_rt <4>:                Usage and interface (oval_class).
* objects/objects_rt <5>:                Usage and interface (arc_class).
* objects/objects_rt <6>:                Usage and interface (shape_class).
* objects/objects_rt <7>:                Usage and interface (menu_entry_class).
* objects/objects_rt <8>:                Usage and interface (menubutton_class).
* objects/objects_rt <9>:                Usage and interface (label_class).
* objects/objects_rt <10>:               Usage and interface (entry_class).
* objects/objects_rt <11>:               Usage and interface (radiobutton_class).
* objects/objects_rt <12>:               Usage and interface (checkbutton_class).
* objects/objects_rt <13>:               Usage and interface (button_class).
* objects/objects_rt <14>:               Usage and interface (canvas_class).
* objects/objects_rt <15>:               Usage and interface (menu_class).
* objects/objects_rt <16>:               Usage and interface (widget_class).
* objects/objects_rt <17>:               Usage and interface (window_class).
* objects/objects_rt <18>:               Usage and interface (objects).
* objects/objects_rt:                    Usage and interface (class).
* old_database:                          Usage and interface (classic).
* once/1 <1>:                            Documentation on exports (iso_misc).
* once/1:                                Usage and interface (iso_misc).
* op/3 <1>:                              Documentation on exports (operators).
* op/3 <2>:                              Usage and interface (operators).
* op/3:                                  Documentation on internals (syntax_extensions).
* open/3 <1>:                            Documentation on exports (streams_basic).
* open/3:                                Usage and interface (streams_basic).
* open/4 <1>:                            Documentation on exports (iso_incomplete).
* open/4:                                Usage and interface (iso_incomplete).
* open_DEF/5 <1>:                        Documentation on exports (generator_util).
* open_DEF/5:                            Usage and interface (generator_util).
* open_EXTERNPROTO/5 <1>:                Documentation on exports (generator_util).
* open_EXTERNPROTO/5:                    Usage and interface (generator_util).
* open_input/2 <1>:                      Documentation on exports (streams).
* open_input/2:                          Usage and interface (streams).
* open_node/6 <1>:                       Documentation on exports (generator_util).
* open_node/6:                           Usage and interface (generator_util).
* open_null_stream/1 <1>:                Documentation on exports (streams).
* open_null_stream/1:                    Usage and interface (streams).
* open_output/2 <1>:                     Documentation on exports (streams).
* open_output/2:                         Usage and interface (streams).
* open_predicate/1 <1>:                  Documentation on exports (data_facts).
* open_predicate/1:                      Usage and interface (data_facts).
* open_PROTO/4 <1>:                      Documentation on exports (generator_util).
* open_PROTO/4:                          Usage and interface (generator_util).
* open_Script/5 <1>:                     Documentation on exports (generator_util).
* open_Script/5:                         Usage and interface (generator_util).
* operations file:                       Implementation Issues.
* operator table:                        Documentation on internals (syntax_extensions).
* operator_specifier/1 <1>:              Documentation on exports (basic_props).
* operator_specifier/1:                  Usage and interface (basic_props).
* operators <1>:                         Usage and interface (parser_util).
* operators <2>:                         Usage and interface (parser).
* operators <3>:                         Usage and interface (lookup).
* operators <4>:                         Usage and interface (io).
* operators <5>:                         Usage and interface (generator).
* operators <6>:                         Usage and interface (dictionary_tree).
* operators <7>:                         Usage and interface (dictionary).
* operators <8>:                         Usage and interface (boundary).
* operators <9>:                         Usage and interface (objects_rt).
* operators <10>:                        Usage and interface (functions).
* operators <11>:                        Usage and interface (runtime_ops).
* operators <12>:                        Usage and interface (classic).
* operators <13>:                        Usage and interface (write).
* operators <14>:                        Usage and interface (read).
* operators:                             Usage and interface (iso).
* option/1 <1>:                          Documentation on exports (canvas_class).
* option/1 <2>:                          Usage and interface (canvas_class).
* option/1 <3>:                          Documentation on exports (window_class).
* option/1:                              Usage and interface (window_class).
* optional_message/2 <1>:                Documentation on exports (messages).
* optional_message/2:                    Usage and interface (messages).
* optional_message/3 <1>:                Documentation on exports (messages).
* optional_message/3:                    Usage and interface (messages).
* ord_delete/3 <1>:                      Documentation on exports (sets).
* ord_delete/3:                          Usage and interface (sets).
* ord_disjoint/2 <1>:                    Documentation on exports (sets).
* ord_disjoint/2:                        Usage and interface (sets).
* ord_intersect/2 <1>:                   Documentation on exports (sets).
* ord_intersect/2:                       Usage and interface (sets).
* ord_intersection/3 <1>:                Documentation on exports (sets).
* ord_intersection/3:                    Usage and interface (sets).
* ord_intersection_diff/4 <1>:           Documentation on exports (sets).
* ord_intersection_diff/4:               Usage and interface (sets).
* ord_member/2 <1>:                      Documentation on exports (sets).
* ord_member/2:                          Usage and interface (sets).
* ord_subset/2 <1>:                      Documentation on exports (sets).
* ord_subset/2:                          Usage and interface (sets).
* ord_subset_diff/3 <1>:                 Documentation on exports (sets).
* ord_subset_diff/3:                     Usage and interface (sets).
* ord_subtract/3 <1>:                    Documentation on exports (sets).
* ord_subtract/3:                        Usage and interface (sets).
* ord_test_member/3 <1>:                 Documentation on exports (sets).
* ord_test_member/3:                     Usage and interface (sets).
* ord_union/3 <1>:                       Documentation on exports (sets).
* ord_union/3:                           Usage and interface (sets).
* ord_union_change/3 <1>:                Documentation on exports (sets).
* ord_union_change/3:                    Usage and interface (sets).
* ord_union_diff/4 <1>:                  Documentation on exports (sets).
* ord_union_diff/4:                      Usage and interface (sets).
* ord_union_symdiff/4 <1>:               Documentation on exports (sets).
* ord_union_symdiff/4:                   Usage and interface (sets).
* out/1 <1>:                             Documentation on exports (io).
* out/1 <2>:                             Usage and interface (io).
* out/1 <3>:                             Documentation on new modes (basicmodes).
* out/1:                                 Usage and interface (basicmodes).
* out/2 <1>:                             Documentation on new modes (basicmodes).
* out/2:                                 Usage and interface (basicmodes).
* out/3 <1>:                             Documentation on exports (io).
* out/3:                                 Usage and interface (io).
* outline_color/1 <1>:                   Documentation on exports (poly_class).
* outline_color/1 <2>:                   Usage and interface (poly_class).
* outline_color/1 <3>:                   Documentation on exports (oval_class).
* outline_color/1 <4>:                   Usage and interface (oval_class).
* outline_color/1 <5>:                   Documentation on exports (arc_class).
* outline_color/1:                       Usage and interface (arc_class).
* output_error/1 <1>:                    Documentation on exports (error).
* output_error/1:                        Usage and interface (error).
* output_html/1 <1>:                     Documentation on multifiles (html).
* output_html/1 <2>:                     Documentation on exports (html).
* output_html/1:                         Usage and interface (html).
* overriden:                             Documentation on new declarations (class).
* P. Lincoln:                            Entering recursive (conjunctive) shell levels.
* package file:                          Documentation on internals (syntax_extensions).
* padx_value/1 <1>:                      Documentation on exports (canvas_class).
* padx_value/1 <2>:                      Usage and interface (canvas_class).
* padx_value/1 <3>:                      Documentation on exports (widget_class).
* padx_value/1:                          Usage and interface (widget_class).
* pady_value/1 <1>:                      Documentation on exports (canvas_class).
* pady_value/1 <2>:                      Usage and interface (canvas_class).
* pady_value/1 <3>:                      Documentation on exports (widget_class).
* pady_value/1:                          Usage and interface (widget_class).
* pair/1:                                Documentation on internals (graphs).
* parallel programming <1>:              *** PART VII - Ciao Prolog extensions.
* parallel programming:                  PART VII - Ciao Prolog extensions.
* parallel Prolog:                       Acknowledgments.
* parallelizing compiler:                Acknowledgments.
* parametric property:                   Documentation on internals (meta_props).
* parametric regular type abstractions:  Documentation on internals (meta_props).
* parametric type functor:               Documentation on new declarations (regtypes).
* PARFORCE:                              Acknowledgments.
* parse/1 <1>:                           Documentation on exports (internal_types).
* parse/1:                               Usage and interface (internal_types).
* parse_term/3 <1>:                      Documentation on exports (atom2term).
* parse_term/3:                          Usage and interface (atom2term).
* parser/2 <1>:                          Documentation on exports (parser).
* parser/2:                              Usage and interface (parser).
* passerta_fact/1 <1>:                   Documentation on exports (persdbrt).
* passerta_fact/1:                       Usage and interface (persdbrt).
* passertz_fact/1 <1>:                   Documentation on exports (persdbrt).
* passertz_fact/1:                       Usage and interface (persdbrt).
* passwd/1 <1>:                          Documentation on exports (db_client_types).
* passwd/1 <2>:                          Usage and interface (db_client_types).
* passwd/1:                              Documentation on exports (persdbrt_mysql).
* path:                                  Un*x full installation instructions.
* PATH:                                  Un*x full installation instructions.
* path <1>:                              Un*x installation summary.
* path:                                  Un*x user setup.
* path alias <1>:                        Operating system utilities.
* path alias <2>:                        Documentation on multifiles (streams_basic).
* path alias <3>:                        Documentation on exports (streams_basic).
* path alias <4>:                        Documentation on exports (libpaths).
* path alias <5>:                        Customizing library paths and path aliases.
* path alias:                            Documentation on exports (ciaosh).
* path aliases:                          Types of executables generated.
* path/1 <1>:                            Documentation on exports (andorra).
* path/1:                                Usage and interface (andorra).
* pattern/1 <1>:                         Documentation on exports (color_pattern).
* pattern/1 <2>:                         Usage and interface (color_pattern).
* pattern/1 <3>:                         Documentation on exports (patterns).
* pattern/1:                             Usage and interface (patterns).
* pattern/2 <1>:                         Documentation on exports (color_pattern).
* pattern/2:                             Usage and interface (color_pattern).
* patterns <1>:                          Pattern (regular expression) matching.
* patterns <2>:                          Documentation on exports (librowser).
* patterns:                              Usage and interface (librowser).
* Paulo Moura:                           Version/Change Log (ciao).
* pause/1 <1>:                           Documentation on exports (system).
* pause/1:                               Usage and interface (system).
* Pawel Pietrzak:                        Acknowledgments.
* Pedro Lopez:                           Acknowledgments.
* peek_byte/1 <1>:                       Documentation on exports (iso_byte_char).
* peek_byte/1:                           Usage and interface (iso_byte_char).
* peek_byte/2 <1>:                       Documentation on exports (iso_byte_char).
* peek_byte/2:                           Usage and interface (iso_byte_char).
* peek_char/1 <1>:                       Documentation on exports (iso_byte_char).
* peek_char/1:                           Usage and interface (iso_byte_char).
* peek_char/2 <1>:                       Documentation on exports (iso_byte_char).
* peek_char/2:                           Usage and interface (iso_byte_char).
* peek_code/1 <1>:                       Documentation on exports (io_basic).
* peek_code/1:                           Usage and interface (io_basic).
* peek_code/2 <1>:                       Documentation on exports (io_basic).
* peek_code/2:                           Usage and interface (io_basic).
* percentbarchart1/7 <1>:                Documentation on exports (genbar1).
* percentbarchart1/7 <2>:                Usage and interface (genbar1).
* percentbarchart1/7:                    Documentation on exports (chartlib).
* percentbarchart2/7 <1>:                Documentation on exports (genbar2).
* percentbarchart2/7 <2>:                Usage and interface (genbar2).
* percentbarchart2/7:                    Documentation on exports (chartlib).
* percentbarchart3/7 <1>:                Documentation on exports (genbar3).
* percentbarchart3/7 <2>:                Usage and interface (genbar3).
* percentbarchart3/7:                    Documentation on exports (chartlib).
* percentbarchart4/7 <1>:                Documentation on exports (genbar4).
* percentbarchart4/7 <2>:                Usage and interface (genbar4).
* percentbarchart4/7:                    Documentation on exports (chartlib).
* persdb <1>:                            Prolog to SQL translator.
* persdb <2>:                            SQL persistent database interface.
* persdb <3>:                            Documentation on exports (persdbrt).
* persdb <4>:                            Usage and interface (persdbrt).
* persdb:                                Persistent predicates.
* persdb_mysql/db_client_types <1>:      Usage and interface (mysql_client).
* persdb_mysql/db_client_types:          Usage and interface (persdbrt_mysql).
* persdb_mysql/delete_compiler/pl2sqldelete: Usage and interface (persdbrt_mysql).
* persdb_mysql/mysql_client:             Usage and interface (persdbrt_mysql).
* persdb_mysql/pl2sql:                   Usage and interface (persdbrt_mysql).
* persdb_sql:                            Persistent predicates.
* persdb_sql_common/pl2sqlinsert:        Usage and interface (persdbrt_mysql).
* persdb_sql_common/sqltypes <1>:        Usage and interface (pl2sql).
* persdb_sql_common/sqltypes:            Usage and interface (persdbrt_mysql).
* persistence set:                       Implementation Issues.
* persistent:                            Documentation on exports (persdbrt).
* persistent predicate:                  Introduction to persistent predicates.
* Persistent predicate <1>:              *** PART VIII - Interfaces to other languages and systems.
* Persistent predicate:                  PART VIII - Interfaces to other languages and systems.
* persistent predicates <1>:             Prolog to SQL translator.
* persistent predicates:                 SQL persistent database interface.
* persistent storage:                    Documentation on internals (persdbrt_mysql).
* persistent/2 <1>:                      Documentation on internals (persdbrt).
* persistent/2 <2>:                      Using file-based persistent predicates.
* persistent/2:                          Persistent predicates.
* persistent_dir:                        Documentation on internals (persdbrt).
* persistent_dir/2 <1>:                  Documentation on internals (persdbrt).
* persistent_dir/2 <2>:                  Documentation on multifiles (persdbrt).
* persistent_dir/2 <3>:                  Documentation on exports (persdbrt).
* persistent_dir/2 <4>:                  Usage and interface (persdbrt).
* persistent_dir/2:                      Using file-based persistent predicates.
* Peter Stuckey:                         Acknowledgments.
* phrase/2 <1>:                          Documentation on exports (dcg_expansion).
* phrase/2:                              Usage and interface (dcg_expansion).
* phrase/3 <1>:                          Documentation on exports (dcg_expansion).
* phrase/3:                              Usage and interface (dcg_expansion).
* Pierre Deransart:                      Acknowledgments.
* pillow:                                Persistent predicates.
* PiLLoW on-line tutorial:               The PiLLoW Web programming library.
* pillow.pl:                             Installing PiLLoW.
* pillow/html <1>:                       Usage and interface (provrml).
* pillow/html:                           Usage and interface (pillow).
* pillow/http <1>:                       Usage and interface (provrml).
* pillow/http:                           Usage and interface (pillow).
* pillow/http_ll:                        Usage and interface (http).
* pillow/pillow_aux <1>:                 Usage and interface (http).
* pillow/pillow_aux:                     Usage and interface (html).
* pillow/pillow_types <1>:               Usage and interface (http).
* pillow/pillow_types:                   Usage and interface (html).
* pkunzip:                               Win32 binary installation summary.
* pl2sql <1>:                            Documentation on exports (pl2sql).
* pl2sql:                                SQL persistent database interface.
* pl2sqlstring/3 <1>:                    Documentation on exports (pl2sql).
* pl2sqlstring/3 <2>:                    Usage and interface (pl2sql).
* pl2sqlstring/3 <3>:                    Prolog to SQL translator.
* pl2sqlstring/3:                        Documentation on internals (persdbrt_mysql).
* pl2sqlterm/3 <1>:                      Documentation on exports (pl2sql).
* pl2sqlterm/3 <2>:                      Usage and interface (pl2sql).
* pl2sqlterm/3:                          Prolog to SQL translator.
* platform-dependent:                    Types of executables generated.
* platform-independent:                  Types of executables generated.
* point/2 <1>:                           Documentation on exports (text_class).
* point/2:                               Usage and interface (text_class).
* point_to/3 <1>:                        Documentation on exports (ugraphs).
* point_to/3:                            Usage and interface (ugraphs).
* Polymorphism:                          Object oriented programming.
* pop_global/2 <1>:                      Documentation on exports (global).
* pop_global/2:                          Usage and interface (global).
* pop_prolog_flag/1 <1>:                 Documentation on exports (prolog_flags).
* pop_prolog_flag/1:                     Usage and interface (prolog_flags).
* popen/3 <1>:                           Documentation on exports (system).
* popen/3:                               Usage and interface (system).
* popen_mode/1 <1>:                      Documentation on exports (system).
* popen_mode/1:                          Usage and interface (system).
* portray/1 <1>:                         Documentation on multifiles (write).
* portray/1 <2>:                         Documentation on exports (write).
* portray/1:                             Usage and interface (write).
* portray_attribute/1:                   Documentation on exports (write).
* portray_attribute/2 <1>:               Documentation on multifiles (write).
* portray_attribute/2 <2>:               Usage and interface (write).
* portray_attribute/2:                   Other information (attributes).
* portray_clause/1 <1>:                  Documentation on exports (write).
* portray_clause/1:                      Usage and interface (write).
* portray_clause/2 <1>:                  Documentation on exports (write).
* portray_clause/2:                      Usage and interface (write).
* positive database goal:                Documentation on internals (pl2sql).
* Posix threads:                         Troubleshooting (nasty messages and nifty workarounds).
* possibly_fails/1 <1>:                  Documentation on exports (native_props).
* possibly_fails/1:                      Usage and interface (native_props).
* possibly_nondet/1 <1>:                 Documentation on exports (native_props).
* possibly_nondet/1:                     Usage and interface (native_props).
* powerset/2 <1>:                        Documentation on exports (lists).
* powerset/2:                            Usage and interface (lists).
* pred assertion:                        Documentation on new declarations (assertions).
* pred/1 <1>:                            Documentation on exports (assertions_props).
* pred/1 <2>:                            Documentation on new declarations (assertions).
* pred/1:                                Usage and interface (assertions).
* pred/2 <1>:                            Documentation on new declarations (assertions).
* pred/2:                                Usage and interface (assertions).
* predfunctor/1 <1>:                     Documentation on exports (assertions_props).
* predfunctor/1:                         Usage and interface (assertions_props).
* predicate declarations:                Printing the declarations and code in a file.
* predicate spec:                        Documentation on exports (concurrency).
* predicate_property/2 <1>:              Documentation on exports (prolog_sys).
* predicate_property/2:                  Usage and interface (prolog_sys).
* predname/1 <1>:                        Documentation on exports (assertions_props).
* predname/1 <2>:                        Documentation on exports (basic_props).
* predname/1:                            Usage and interface (basic_props).
* preprocessor <1>:                      *** PART I - The program development environment.
* preprocessor:                          PART I - The program development environment.
* pretract_fact/1 <1>:                   Documentation on exports (persdbrt).
* pretract_fact/1:                       Usage and interface (persdbrt).
* pretty_print/2 <1>:                    Documentation on exports (pretty_print).
* pretty_print/2:                        Usage and interface (pretty_print).
* pretty_print/3 <1>:                    Documentation on exports (pretty_print).
* pretty_print/3:                        Usage and interface (pretty_print).
* prettyvars/1 <1>:                      Documentation on exports (write).
* prettyvars/1:                          Usage and interface (write).
* print:                                 Options available during debugging.
* print/1 <1>:                           Documentation on exports (write).
* print/1 <2>:                           Usage and interface (write).
* print/1:                               Acknowledgements.
* print/2 <1>:                           Documentation on exports (write).
* print/2:                               Usage and interface (write).
* printable_char/1 <1>:                  Documentation on exports (write).
* printable_char/1:                      Usage and interface (write).
* printdepth:                            Options available during debugging.
* printing assertion information:        Printing the declarations and code in a file.
* printing code-related information:     Printing the declarations and code in a file.
* printing, manual <1>:                  Checking for correct installation on Win32.
* printing, manual <2>:                  Printing manuals (Win32).
* printing, manual <3>:                  Testing your Ciao Win32 installation.
* printing, manual:                      Printing manuals (Un*x).
* Procedure Box:                         The interactive debugger.
* program assertions:                    The Ciao assertion package.
* program development tools:             Un*x full installation instructions.
* programming environment <1>:           *** PART I - The program development environment.
* programming environment:               PART I - The program development environment.
* project files:                         The stand-alone command-line compiler.
* projterm/1 <1>:                        Documentation on exports (pl2sql).
* projterm/1 <2>:                        Usage and interface (pl2sql).
* projterm/1:                            Documentation on exports (persdbrt_mysql).
* prolog flag <1>:                       Documentation on exports (io_aux).
* prolog flag <2>:                       Changing system behaviour and various flags.
* prolog flag <3>:                       Documentation on exports (streams_basic).
* prolog flag <4>:                       How it works.
* prolog flag:                           Shell invocation and startup.
* Prolog predicate argument positions:   Documentation on multifiles (pl2sql).
* Prolog predicate names:                Documentation on multifiles (pl2sql).
* Prolog scripts <1>:                    Un*x full installation instructions.
* Prolog scripts:                        Running Ciao scripts (Un*x).
* Prolog shell:                          Un*x full installation instructions.
* Prolog shell scripts:                  The script interpreter.
* Prolog to SQL compiler:                Prolog to SQL translator.
* Prolog to SQL translation:             Documentation on internals (persdbrt_mysql).
* Prolog to SQL translator:              SQL persistent database interface.
* prolog_flag/3 <1>:                     Documentation on exports (prolog_flags).
* prolog_flag/3:                         Usage and interface (prolog_flags).
* prolog_predicate/N:                    Declaration of Types.
* prolog_sys <1>:                        Usage and interface (objects_rt).
* prolog_sys <2>:                        Usage and interface (conc_aggregates).
* prolog_sys <3>:                        Usage and interface (concurrency).
* prolog_sys:                            Usage and interface (dynamic).
* PrologName:                            Documentation on exports (foreign_interface_properties).
* prompt:                                Usage and interface (davinci).
* prompt/2 <1>:                          Documentation on exports (prolog_flags).
* prompt/2:                              Usage and interface (prolog_flags).
* prop assertion:                        Documentation on new declarations (assertions).
* prop/1 <1>:                            Documentation on new declarations (assertions).
* prop/1:                                Usage and interface (assertions).
* prop/2 <1>:                            Documentation on exports (meta_props).
* prop/2 <2>:                            Usage and interface (meta_props).
* prop/2 <3>:                            Documentation on new declarations (assertions).
* prop/2:                                Usage and interface (assertions).
* prop_abs/1:                            Documentation on internals (meta_props).
* properties of computations:            Defining properties.
* properties of execution states:        Defining properties.
* properties, basic:                     Basic data types and properties.
* properties, native:                    Properties which are native to analyzers.
* property:                              Documentation on new declarations (assertions).
* property abstraction:                  Documentation on internals (meta_props).
* property compatibility:                Documentation on exports (basic_props).
* property declarations:                 Printing the declarations and code in a file.
* property_conjunction/1 <1>:            Documentation on exports (assertions_props).
* property_conjunction/1:                Usage and interface (assertions_props).
* property_starterm/1 <1>:               Documentation on exports (assertions_props).
* property_starterm/1:                   Usage and interface (assertions_props).
* propfunctor/1 <1>:                     Documentation on exports (assertions_props).
* propfunctor/1:                         Usage and interface (assertions_props).
* protected:                             Documentation on new declarations (class).
* proves/2:                              Documentation on multifiles (rtchecks).
* providing information to the compiler <1>: Documentation on exports (assertions).
* providing information to the compiler: Documentation on new declarations (assertions).
* ProVRML:                               ProVRML - a Prolog interface for VRML.
* provrml/boundary <1>:                  Usage and interface (lookup).
* provrml/boundary:                      Usage and interface (field_value_check).
* provrml/dictionary:                    Usage and interface (lookup).
* provrml/dictionary_tree <1>:           Usage and interface (parser_util).
* provrml/dictionary_tree:               Usage and interface (lookup).
* provrml/error <1>:                     Usage and interface (tokeniser).
* provrml/error <2>:                     Usage and interface (parser).
* provrml/error <3>:                     Usage and interface (lookup).
* provrml/error <4>:                     Usage and interface (generator_util).
* provrml/error <5>:                     Usage and interface (generator).
* provrml/error <6>:                     Usage and interface (field_value).
* provrml/error:                         Usage and interface (boundary).
* provrml/field_type:                    Usage and interface (lookup).
* provrml/field_value:                   Usage and interface (parser).
* provrml/field_value_check <1>:         Usage and interface (lookup).
* provrml/field_value_check:             Usage and interface (generator_util).
* provrml/generator <1>:                 Usage and interface (field_value_check).
* provrml/generator:                     Usage and interface (provrml).
* provrml/generator_util <1>:            Usage and interface (lookup).
* provrml/generator_util <2>:            Usage and interface (generator).
* provrml/generator_util:                Usage and interface (field_value_check).
* provrml/internal_types <1>:            Usage and interface (parser_util).
* provrml/internal_types <2>:            Usage and interface (generator).
* provrml/internal_types <3>:            Usage and interface (dictionary_tree).
* provrml/internal_types <4>:            Usage and interface (dictionary).
* provrml/internal_types:                Usage and interface (boundary).
* provrml/io <1>:                        Usage and interface (lookup).
* provrml/io <2>:                        Usage and interface (generator_util).
* provrml/io <3>:                        Usage and interface (generator).
* provrml/io <4>:                        Usage and interface (field_value_check).
* provrml/io:                            Usage and interface (provrml).
* provrml/lookup <1>:                    Usage and interface (parser).
* provrml/lookup <2>:                    Usage and interface (generator_util).
* provrml/lookup:                        Usage and interface (generator).
* provrml/parser <1>:                    Usage and interface (field_value).
* provrml/parser:                        Usage and interface (provrml).
* provrml/parser_util <1>:               Usage and interface (parser).
* provrml/parser_util <2>:               Usage and interface (lookup).
* provrml/parser_util <3>:               Usage and interface (generator_util).
* provrml/parser_util <4>:               Usage and interface (generator).
* provrml/parser_util <5>:               Usage and interface (field_value_check).
* provrml/parser_util:                   Usage and interface (field_value).
* provrml/possible:                      Usage and interface (parser).
* provrml/tokeniser <1>:                 Usage and interface (parser).
* provrml/tokeniser:                     Usage and interface (field_value_check).
* prune_dict/3 <1>:                      Documentation on exports (vndict).
* prune_dict/3:                          Usage and interface (vndict).
* public:                                Documentation on new declarations (class).
* public domain <1>:                     Summary.
* public domain:                         (outside of any node).
* public interface:                      Documentation on new declarations (class).
* public/1 <1>:                          Class and Interface error reporting at compile time.
* public/1 <2>:                          Documentation on new declarations (class).
* public/1:                              Usage and interface (class).
* pure <1>:                              *** PART II - The Ciao basic language (engine).
* pure:                                  PART II - The Ciao basic language (engine).
* pure Prolog <1>:                       Pure Prolog package.
* pure Prolog <2>:                       *** PART VII - Ciao Prolog extensions.
* pure Prolog:                           PART VII - Ciao Prolog extensions.
* push_dictionaries/3 <1>:               Documentation on exports (parser_util).
* push_dictionaries/3:                   Usage and interface (parser_util).
* push_global/2 <1>:                     Documentation on exports (global).
* push_global/2:                         Usage and interface (global).
* push_prolog_flag/2 <1>:                Documentation on exports (prolog_flags).
* push_prolog_flag/2:                    Usage and interface (prolog_flags).
* push_whitespace/3 <1>:                 Documentation on exports (parser_util).
* push_whitespace/3:                     Usage and interface (parser_util).
* put_byte/1 <1>:                        Documentation on exports (iso_byte_char).
* put_byte/1:                            Usage and interface (iso_byte_char).
* put_byte/2 <1>:                        Documentation on exports (iso_byte_char).
* put_byte/2:                            Usage and interface (iso_byte_char).
* put_char/1 <1>:                        Documentation on exports (iso_byte_char).
* put_char/1:                            Usage and interface (iso_byte_char).
* put_char/2 <1>:                        Documentation on exports (iso_byte_char).
* put_char/2:                            Usage and interface (iso_byte_char).
* put_code/1 <1>:                        Documentation on exports (io_basic).
* put_code/1:                            Usage and interface (io_basic).
* put_code/2 <1>:                        Documentation on exports (io_basic).
* put_code/2:                            Usage and interface (io_basic).
* q_delete/3 <1>:                        Documentation on exports (queues).
* q_delete/3:                            Usage and interface (queues).
* q_empty/1 <1>:                         Documentation on exports (queues).
* q_empty/1:                             Usage and interface (queues).
* q_insert/3 <1>:                        Documentation on exports (queues).
* q_insert/3:                            Usage and interface (queues).
* q_member/2 <1>:                        Documentation on exports (queues).
* q_member/2:                            Usage and interface (queues).
* qualified attributes:                  Documentation on internals (pl2sql).
* query:                                 Shell interaction.
* query_generation/3:                    Documentation on internals (pl2sql).
* querybody/1 <1>:                       Documentation on internals (pl2sql).
* querybody/1 <2>:                       Documentation on exports (pl2sql).
* querybody/1 <3>:                       Usage and interface (pl2sql).
* querybody/1:                           Documentation on exports (persdbrt_mysql).
* quoted string:                         Documentation on exports (arithmetic).
* random/1 <1>:                          Documentation on exports (random).
* random/1:                              Usage and interface (random).
* random/3 <1>:                          Documentation on exports (random).
* random/3:                              Usage and interface (random).
* random/random <1>:                     Usage and interface (genmultibar).
* random/random <2>:                     Usage and interface (gengraph2).
* random/random <3>:                     Usage and interface (gengraph1).
* random/random <4>:                     Usage and interface (genbar4).
* random/random <5>:                     Usage and interface (genbar3).
* random/random <6>:                     Usage and interface (genbar2).
* random/random <7>:                     Usage and interface (genbar1).
* random/random:                         Usage and interface (color_pattern).
* random_color/1 <1>:                    Documentation on exports (color_pattern).
* random_color/1:                        Usage and interface (color_pattern).
* random_darkcolor/1 <1>:                Documentation on exports (color_pattern).
* random_darkcolor/1:                    Usage and interface (color_pattern).
* random_lightcolor/1 <1>:               Documentation on exports (color_pattern).
* random_lightcolor/1:                   Usage and interface (color_pattern).
* random_pattern/1 <1>:                  Documentation on exports (color_pattern).
* random_pattern/1:                      Usage and interface (color_pattern).
* range variable:                        Documentation on internals (pl2sql).
* read <1>:                              Usage and interface (parser_util).
* read <2>:                              Usage and interface (parser).
* read <3>:                              Usage and interface (lookup).
* read <4>:                              Usage and interface (io).
* read <5>:                              Usage and interface (generator).
* read <6>:                              Usage and interface (dictionary_tree).
* read <7>:                              Usage and interface (dictionary).
* read <8>:                              Usage and interface (boundary).
* read <9>:                              Usage and interface (bltclass).
* read <10>:                             Usage and interface (persdbrt).
* read <11>:                             Usage and interface (tcltk_low_level).
* read <12>:                             Usage and interface (davinci).
* read <13>:                             Usage and interface (objects_rt).
* read <14>:                             Usage and interface (functions).
* read <15>:                             Usage and interface (librowser).
* read <16>:                             Usage and interface (file_utils).
* read <17>:                             Usage and interface (iso).
* read:                                  Usage and interface (debugger).
* read/1 <1>:                            Documentation on exports (read).
* read/1 <2>:                            Usage and interface (read).
* read/1:                                Documentation on exports (io_aux).
* read/2 <1>:                            Documentation on exports (sockets).
* read/2 <2>:                            Documentation on exports (read).
* read/2:                                Usage and interface (read).
* read_option/1 <1>:                     Documentation on internals (read).
* read_option/1:                         Documentation on exports (read).
* read_page/2:                           Documentation on internals (provrml).
* read_term/2 <1>:                       Documentation on exports (write).
* read_term/2 <2>:                       Documentation on exports (read).
* read_term/2:                           Usage and interface (read).
* read_term/3 <1>:                       Documentation on exports (write).
* read_term/3 <2>:                       Documentation on exports (read).
* read_term/3 <3>:                       Usage and interface (read).
* read_term/3:                           Documentation on exports (io_basic).
* read_term/[2,3]:                       Documentation on internals (read).
* read_terms_file/2 <1>:                 Documentation on exports (io).
* read_terms_file/2:                     Usage and interface (io).
* read_top_level/3 <1>:                  Documentation on exports (read).
* read_top_level/3:                      Usage and interface (read).
* read_vrml_file/2 <1>:                  Documentation on exports (io).
* read_vrml_file/2:                      Usage and interface (io).
* reading/4 <1>:                         Documentation on exports (generator_util).
* reading/4:                             Usage and interface (generator_util).
* reading/5 <1>:                         Documentation on exports (generator_util).
* reading/5:                             Usage and interface (generator_util).
* reading/6 <1>:                         Documentation on exports (generator_util).
* reading/6:                             Usage and interface (generator_util).
* rebuild_foreign_interface/1 <1>:       Documentation on exports (build_foreign_interface).
* rebuild_foreign_interface/1:           Usage and interface (build_foreign_interface).
* rebuild_foreign_interface_explicit_decls/2 <1>: Documentation on exports (build_foreign_interface).
* rebuild_foreign_interface_explicit_decls/2: Usage and interface (build_foreign_interface).
* rebuild_foreign_interface_object/1 <1>: Documentation on exports (build_foreign_interface).
* rebuild_foreign_interface_object/1:    Usage and interface (build_foreign_interface).
* receive_confirm/2 <1>:                 Documentation on exports (tcltk_low_level).
* receive_confirm/2:                     Usage and interface (tcltk_low_level).
* receive_event/2 <1>:                   Documentation on exports (tcltk_low_level).
* receive_event/2:                       Usage and interface (tcltk_low_level).
* receive_list/2 <1>:                    Documentation on exports (tcltk_low_level).
* receive_list/2:                        Usage and interface (tcltk_low_level).
* receive_result/2 <1>:                  Documentation on exports (tcltk_low_level).
* receive_result/2:                      Usage and interface (tcltk_low_level).
* recorda/3 <1>:                         Documentation on exports (old_database).
* recorda/3:                             Usage and interface (old_database).
* recorded/3 <1>:                        Documentation on exports (old_database).
* recorded/3:                            Usage and interface (old_database).
* records <1>:                           Documentation on new declarations (argnames).
* records <2>:                           Terms with named arguments -records/feature terms.
* records <3>:                           *** PART VII - Ciao Prolog extensions.
* records:                               PART VII - Ciao Prolog extensions.
* recordz/3 <1>:                         Documentation on exports (old_database).
* recordz/3:                             Usage and interface (old_database).
* recursive level <1>:                   Entering recursive (conjunctive) shell levels.
* recursive level:                       Shell interaction.
* redefined:                             Documentation on exports (class).
* RedHat 5.0:                            Troubleshooting (nasty messages and nifty workarounds).
* reduce_indentation/3 <1>:              Documentation on exports (parser_util).
* reduce_indentation/3:                  Usage and interface (parser_util).
* reference/1:                           Documentation on internals (data_facts).
* references, to Ciao:                   Referring to Ciao.
* referring to Ciao:                     Referring to Ciao.
* regedit:                               Uninstallation under Windows.
* regtype assertion:                     Documentation on new declarations (regtypes).
* regtype/1 <1>:                         Documentation on new declarations (regtypes).
* regtype/1 <2>:                         Usage and interface (regtypes).
* regtype/1 <3>:                         Documentation on exports (basic_props).
* regtype/1:                             Usage and interface (basic_props).
* regtype/2 <1>:                         Documentation on exports (meta_props).
* regtype/2 <2>:                         Usage and interface (meta_props).
* regtype/2 <3>:                         Documentation on new declarations (regtypes).
* regtype/2:                             Usage and interface (regtypes).
* regular expresions:                    Documentation on exports (librowser).
* regular expressions:                   Pattern (regular expression) matching.
* regular type:                          Documentation on new declarations (regtypes).
* regular type abstractions:             Documentation on new declarations (regtypes).
* regular type definitions:              Declaring regular types.
* regular type expression:               Documentation on new declarations (regtypes).
* regular types:                         Declaring regular types.
* relation name:                         Documentation on internals (pl2sql).
* relation/3 <1>:                        Documentation on multifiles (pl2sql).
* relation/3 <2>:                        Documentation on exports (pl2sql).
* relation/3 <3>:                        Usage and interface (pl2sql).
* relation/3:                            Prolog to SQL translator.
* relational databases:                  SQL persistent database interface.
* relief_type/1 <1>:                     Documentation on exports (widget_class).
* relief_type/1:                         Usage and interface (widget_class).
* rem/2:                                 Documentation on exports (arithmetic).
* remote/ciao_client_rt:                 Usage and interface (remote).
* remove_code/3 <1>:                     Documentation on exports (parser_util).
* remove_code/3:                         Usage and interface (parser_util).
* remove_comments/4 <1>:                 Documentation on exports (generator_util).
* remove_comments/4:                     Usage and interface (generator_util).
* rename/2 <1>:                          Documentation on exports (vndict).
* rename/2:                              Usage and interface (vndict).
* rename_file/2 <1>:                     Documentation on exports (system).
* rename_file/2:                         Usage and interface (system).
* repeat/0 <1>:                          Documentation on exports (basiccontrol).
* repeat/0:                              Usage and interface (basiccontrol).
* reporting bugs <1>:                    Reporting bugs.
* reporting bugs <2>:                    *** PART XII - Appendices.
* reporting bugs:                        PART XII - Appendices.
* reserved_words/1 <1>:                  Documentation on exports (boundary).
* reserved_words/1:                      Usage and interface (boundary).
* retract/1 <1>:                         Documentation on exports (dynamic).
* retract/1:                             Usage and interface (dynamic).
* retract_fact/1 <1>:                    Documentation on exports (persdbrt_mysql).
* retract_fact/1 <2>:                    SQL persistent database interface.
* retract_fact/1 <3>:                    Documentation on exports (persdbrt).
* retract_fact/1 <4>:                    Usage and interface (persdbrt).
* retract_fact/1 <5>:                    Introduction to persistent predicates.
* retract_fact/1 <6>:                    Documentation on exports (data_facts).
* retract_fact/1:                        Usage and interface (data_facts).
* retract_fact_nb/1 <1>:                 Documentation on exports (data_facts).
* retract_fact_nb/1:                     Usage and interface (data_facts).
* retractall/1 <1>:                      Documentation on exports (dynamic).
* retractall/1:                          Usage and interface (dynamic).
* retractall_fact/1 <1>:                 Documentation on exports (persdbrt_mysql).
* retractall_fact/1 <2>:                 SQL persistent database interface.
* retractall_fact/1 <3>:                 Documentation on exports (data_facts).
* retractall_fact/1:                     Usage and interface (data_facts).
* retry:                                 Options available during debugging.
* returns/2 <1>:                         Documentation on exports (foreign_interface_properties).
* returns/2:                             Usage and interface (foreign_interface_properties).
* reverse/2 <1>:                         Documentation on exports (lists).
* reverse/2:                             Usage and interface (lists).
* reverse/3 <1>:                         Documentation on exports (lists).
* reverse/3:                             Usage and interface (lists).
* reverse_parsed/2 <1>:                  Documentation on exports (parser_util).
* reverse_parsed/2:                      Usage and interface (parser_util).
* Roger Nasr <1>:                        Entering recursive (conjunctive) shell levels.
* Roger Nasr:                            Acknowledgments.
* round/1:                               Documentation on exports (arithmetic).
* row/1:                                 Documentation on internals (table_widget1).
* row_value/1 <1>:                       Documentation on exports (widget_class).
* row_value/1:                           Usage and interface (widget_class).
* rowspan_value/1 <1>:                   Documentation on exports (widget_class).
* rowspan_value/1:                       Usage and interface (widget_class).
* rtchecks/rtchecks_sys:                 Usage and interface (rtchecks).
* run-time checks <1>:                   Run-time checking of assertions.
* run-time checks:                       Documentation on new declarations (assertions).
* run-time libraries:                    Un*x full installation instructions.
* running programs <1>:                  Running Ciao scripts (Win32).
* running programs <2>:                  Compiling and running programs (Win32).
* running programs <3>:                  Running Ciao scripts (Un*x).
* running programs:                      Compiling and running programs (Un*x).
* s_assrt_body/1 <1>:                    Documentation on exports (assertions_props).
* s_assrt_body/1:                        Usage and interface (assertions_props).
* Saumya Debray:                         Acknowledgments.
* scattergraph1_b1/13:                   Documentation on exports (gengraph1).
* scattergraph_b1/12 <1>:                Documentation on exports (gengraph1).
* scattergraph_b1/12 <2>:                Usage and interface (gengraph1).
* scattergraph_b1/12:                    Documentation on exports (chartlib).
* scattergraph_b1/8 <1>:                 Documentation on exports (gengraph1).
* scattergraph_b1/8 <2>:                 Usage and interface (gengraph1).
* scattergraph_b1/8:                     Documentation on exports (chartlib).
* scattergraph_b2/12 <1>:                Documentation on exports (gengraph2).
* scattergraph_b2/12 <2>:                Usage and interface (gengraph2).
* scattergraph_b2/12:                    Documentation on exports (chartlib).
* scattergraph_b2/8 <1>:                 Documentation on exports (gengraph2).
* scattergraph_b2/8 <2>:                 Usage and interface (gengraph2).
* scattergraph_b2/8:                     Documentation on exports (chartlib).
* scattergraph_w1/12 <1>:                Documentation on exports (gengraph1).
* scattergraph_w1/12 <2>:                Usage and interface (gengraph1).
* scattergraph_w1/12:                    Documentation on exports (chartlib).
* scattergraph_w1/8 <1>:                 Documentation on exports (gengraph2).
* scattergraph_w1/8 <2>:                 Documentation on exports (gengraph1).
* scattergraph_w1/8 <3>:                 Usage and interface (gengraph1).
* scattergraph_w1/8:                     Documentation on exports (chartlib).
* scattergraph_w2/12 <1>:                Documentation on exports (gengraph2).
* scattergraph_w2/12 <2>:                Usage and interface (gengraph2).
* scattergraph_w2/12:                    Documentation on exports (chartlib).
* scattergraph_w2/13:                    Documentation on exports (gengraph2).
* scattergraph_w2/8 <1>:                 Documentation on exports (gengraph2).
* scattergraph_w2/8 <2>:                 Usage and interface (gengraph2).
* scattergraph_w2/8:                     Documentation on exports (chartlib).
* scripts <1>:                           Checking for correct installation on Un*x.
* scripts <2>:                           Un*x full installation instructions.
* scripts <3>:                           Running Ciao scripts (Win32).
* scripts <4>:                           Running Ciao scripts (Un*x).
* scripts:                               Testing your Ciao Un*x installation.
* second_prompt/2 <1>:                   Documentation on exports (read).
* second_prompt/2:                       Usage and interface (read).
* see/1 <1>:                             Documentation on exports (dec10_io).
* see/1:                                 Usage and interface (dec10_io).
* seeing/1 <1>:                          Documentation on exports (dec10_io).
* seeing/1:                              Usage and interface (dec10_io).
* seen/0 <1>:                            Documentation on exports (dec10_io).
* seen/0:                                Usage and interface (dec10_io).
* Seif Haridi:                           Acknowledgments.
* select/3 <1>:                          Documentation on exports (lists).
* select/3:                              Usage and interface (lists).
* select_socket/5 <1>:                   Documentation on exports (sockets).
* select_socket/5:                       Usage and interface (sockets).
* self/1 <1>:                            Documentation on exports (class).
* self/1:                                Usage and interface (class).
* semantic analisys:                     Documentation on exports (objects_rt).
* semaphore:                             Documentation on exports (concurrency).
* send_term/2 <1>:                       Documentation on exports (tcltk_low_level).
* send_term/2:                           Usage and interface (tcltk_low_level).
* sequence/2 <1>:                        Documentation on exports (basic_props).
* sequence/2:                            Usage and interface (basic_props).
* sequence_or_list/2 <1>:                Documentation on exports (basic_props).
* sequence_or_list/2:                    Usage and interface (basic_props).
* server_notrace/1:                      Documentation on exports (remote).
* server_stop/1:                         Documentation on exports (remote).
* server_trace/1:                        Documentation on exports (remote).
* set_action/1 <1>:                      Documentation on exports (menu_entry_class).
* set_action/1:                          Usage and interface (menu_entry_class).
* set_cookie/2 <1>:                      Documentation on exports (html).
* set_cookie/2:                          Usage and interface (html).
* set_debug_mode/1 <1>:                  Documentation on exports (compiler).
* set_debug_mode/1 <2>:                  Usage and interface (compiler).
* set_debug_mode/1 <3>:                  Marking modules and files for debugging in the top-level debugger.
* set_debug_mode/1 <4>:                  Documentation on exports (ciaosh).
* set_debug_mode/1:                      Usage and interface (ciaosh).
* set_debug_module/1 <1>:                Documentation on exports (compiler).
* set_debug_module/1:                    Usage and interface (compiler).
* set_debug_module_source/1 <1>:         Documentation on exports (compiler).
* set_debug_module_source/1:             Usage and interface (compiler).
* set_environment/3 <1>:                 Documentation on exports (parser_util).
* set_environment/3:                     Usage and interface (parser_util).
* set_fact/1 <1>:                        Documentation on exports (data_facts).
* set_fact/1:                            Usage and interface (data_facts).
* set_global/2 <1>:                      Documentation on exports (global).
* set_global/2:                          Usage and interface (global).
* set_input/1 <1>:                       Documentation on exports (streams_basic).
* set_input/1:                           Usage and interface (streams_basic).
* set_name/1 <1>:                        Documentation on exports (menu_entry_class).
* set_name/1:                            Usage and interface (menu_entry_class).
* set_nodebug_mode/1 <1>:                Documentation on exports (compiler).
* set_nodebug_mode/1 <2>:                Usage and interface (compiler).
* set_nodebug_mode/1 <3>:                Marking modules and files for debugging in the top-level debugger.
* set_nodebug_mode/1 <4>:                Documentation on exports (ciaosh).
* set_nodebug_mode/1:                    Usage and interface (ciaosh).
* set_nodebug_module/1 <1>:              Documentation on exports (compiler).
* set_nodebug_module/1:                  Usage and interface (compiler).
* set_output/1 <1>:                      Documentation on exports (streams_basic).
* set_output/1:                          Usage and interface (streams_basic).
* set_parsed/3 <1>:                      Documentation on exports (parser_util).
* set_parsed/3:                          Usage and interface (parser_util).
* set_prolog_flag/1:                     Normal Prolog module system interaction.
* set_prolog_flag/2 <1>:                 Documentation on exports (prolog_flags).
* set_prolog_flag/2:                     Usage and interface (prolog_flags).
* setarg/3 <1>:                          Documentation on exports (odd).
* setarg/3:                              Usage and interface (odd).
* setcounter/2 <1>:                      Documentation on exports (counters).
* setcounter/2:                          Usage and interface (counters).
* setenvstr/2 <1>:                       Documentation on exports (system).
* setenvstr/2:                           Usage and interface (system).
* setof/3 <1>:                           Documentation on exports (pl2sql).
* setof/3 <2>:                           Known bugs and planned improvements (conc_aggregates).
* setof/3 <3>:                           Documentation on exports (aggregates).
* setof/3:                               Usage and interface (aggregates).
* setproduct/3 <1>:                      Documentation on exports (sets).
* setproduct/3:                          Usage and interface (sets).
* sets <1>:                              Usage and interface (vndict).
* sets <2>:                              Usage and interface (lgraphs).
* sets <3>:                              Usage and interface (wgraphs).
* sets <4>:                              Usage and interface (ugraphs).
* sets:                                  Usage and interface (when).
* SETTINGS <1>:                          Troubleshooting (nasty messages and nifty workarounds).
* SETTINGS <2>:                          Un*x full installation instructions.
* SETTINGS:                              Un*x installation summary.
* sh <1>:                                Un*x full installation instructions.
* sh <2>:                                Un*x installation summary.
* sh:                                    Un*x user setup.
* sh-compatible shell <1>:               Un*x full installation instructions.
* sh-compatible shell <2>:               Un*x installation summary.
* sh-compatible shell:                   Un*x user setup.
* shape/1 <1>:                           Documentation on exports (canvas_class).
* shape/1:                               Usage and interface (canvas_class).
* shape_class/0 <1>:                     Documentation on exports (shape_class).
* shape_class/0:                         Usage and interface (shape_class).
* shape_class/1 <1>:                     Documentation on exports (shape_class).
* shape_class/1:                         Usage and interface (shape_class).
* sharing sets:                          Documentation on exports (native_props).
* shell:                                 Starting/exiting the top-level shell (Win32).
* shell scripts:                         The stand-alone command-line compiler.
* shell/0 <1>:                           Documentation on exports (system).
* shell/0:                               Usage and interface (system).
* shell/1 <1>:                           Documentation on exports (system).
* shell/1:                               Usage and interface (system).
* shell/2 <1>:                           Documentation on exports (system).
* shell/2:                               Usage and interface (system).
* shortcut, windows:                     Win32 binary installation summary.
* show/0 <1>:                            Documentation on exports (canvas_class).
* show/0 <2>:                            Usage and interface (canvas_class).
* show/0 <3>:                            Documentation on exports (window_class).
* show/0:                                Usage and interface (window_class).
* shutdown_type/1 <1>:                   Documentation on exports (sockets).
* shutdown_type/1:                       Usage and interface (sockets).
* SICS:                                  Acknowledgments.
* SICStus Prolog:                        Acknowledgments.
* side_type/1 <1>:                       Documentation on exports (canvas_class).
* side_type/1 <2>:                       Usage and interface (canvas_class).
* side_type/1 <3>:                       Documentation on exports (widget_class).
* side_type/1:                           Usage and interface (widget_class).
* sideff_hard/1 <1>:                     Documentation on exports (native_props).
* sideff_hard/1:                         Usage and interface (native_props).
* sideff_pure/1 <1>:                     Documentation on exports (native_props).
* sideff_pure/1:                         Usage and interface (native_props).
* sideff_soft/1 <1>:                     Documentation on exports (native_props).
* sideff_soft/1:                         Usage and interface (native_props).
* sign/1:                                Documentation on exports (arithmetic).
* simple_client.pl:                      Active modules (high-level distributed execution).
* simple_message/1 <1>:                  Documentation on exports (messages).
* simple_message/1:                      Usage and interface (messages).
* simple_message/2 <1>:                  Documentation on exports (messages).
* simple_message/2:                      Usage and interface (messages).
* sin/1:                                 Documentation on exports (arithmetic).
* site-specific programs:                Un*x full installation instructions.
* size/1 <1>:                            Documentation on exports (gengraph1).
* size/1:                                Usage and interface (gengraph1).
* size_lb/2 <1>:                         Documentation on exports (native_props).
* size_lb/2:                             Usage and interface (native_props).
* size_of/2:                             Equivalence between Ciao Prolog and C types.
* size_of/3 <1>:                         Documentation on exports (foreign_interface_properties).
* size_of/3:                             Usage and interface (foreign_interface_properties).
* size_ub/2 <1>:                         Documentation on exports (native_props).
* size_ub/2:                             Usage and interface (native_props).
* skip:                                  Options available during debugging.
* skip_code/1 <1>:                       Documentation on exports (io_basic).
* skip_code/1:                           Usage and interface (io_basic).
* skip_code/2 <1>:                       Documentation on exports (io_basic).
* skip_code/2:                           Usage and interface (io_basic).
* SmallerThan(X, Y):                     Documentation on exports (hiordlib).
* smooth/1 <1>:                          Documentation on exports (gengraph1).
* smooth/1:                              Usage and interface (gengraph1).
* Socket interface <1>:                  *** PART VIII - Interfaces to other languages and systems.
* Socket interface:                      PART VIII - Interfaces to other languages and systems.
* socket_accept/2 <1>:                   Documentation on exports (sockets).
* socket_accept/2:                       Usage and interface (sockets).
* socket_recv/2 <1>:                     Documentation on exports (sockets).
* socket_recv/2:                         Usage and interface (sockets).
* socket_recv_code/3 <1>:                Documentation on exports (sockets).
* socket_recv_code/3:                    Usage and interface (sockets).
* socket_send/2 <1>:                     Documentation on exports (sockets).
* socket_send/2:                         Usage and interface (sockets).
* socket_shutdown/2 <1>:                 Documentation on exports (sockets).
* socket_shutdown/2:                     Usage and interface (sockets).
* socket_type/1 <1>:                     Documentation on exports (sockets).
* socket_type/1:                         Usage and interface (sockets).
* socketname/1 <1>:                      Documentation on exports (db_client_types).
* socketname/1 <2>:                      Usage and interface (db_client_types).
* socketname/1:                          Documentation on exports (persdbrt_mysql).
* sockets:                               Porting to currently unsupported operating systems.
* sockets/sockets <1>:                   Usage and interface (bltclass).
* sockets/sockets:                       Usage and interface (tcltk_low_level).
* sockets/sockets_c:                     Usage and interface (sockets).
* soft side-effects:                     Documentation on exports (native_props).
* Solaris:                               Multiarchitecture support.
* sort <1>:                              Usage and interface (vndict).
* sort <2>:                              Usage and interface (sets).
* sort <3>:                              Usage and interface (lgraphs).
* sort <4>:                              Usage and interface (wgraphs).
* sort <5>:                              Usage and interface (ugraphs).
* sort <6>:                              Usage and interface (graphs).
* sort <7>:                              Usage and interface (when).
* sort <8>:                              Usage and interface (terms_vars).
* sort <9>:                              Usage and interface (native_props).
* sort <10>:                             Usage and interface (classic).
* sort <11>:                             Usage and interface (write).
* sort <12>:                             Usage and interface (aggregates).
* sort:                                  Usage and interface (debugger).
* sort/2 <1>:                            Documentation on exports (sort).
* sort/2:                                Usage and interface (sort).
* source directory:                      Un*x full installation instructions.
* source-level debugger:                 The interactive debugger.
* source-level debugging <1>:            The procedure box control flow model.
* source-level debugging <2>:            The debugging process.
* source-level debugging:                Marking modules and files for debugging in the top-level debugger.
* sourcename/1 <1>:                      Documentation on exports (streams_basic).
* sourcename/1 <2>:                      Usage and interface (streams_basic).
* sourcename/1:                          Documentation on internals (ciaosh).
* sourcenames/1:                         Documentation on internals (ciaosh).
* specifications:                        The Ciao assertion package.
* spy:                                   Options available during debugging.
* spy-points <1>:                        Marking modules and files for debugging with the embedded debugger.
* spy-points:                            The interactive debugger.
* spy/1 <1>:                             Documentation on exports (debugger).
* spy/1 <2>:                             Usage and interface (debugger).
* spy/1 <3>:                             Acknowledgements.
* spy/1 <4>:                             Marking modules and files for debugging with the embedded debugger.
* spy/1:                                 The debugging process.
* SQL <1>:                               Prolog to SQL translator.
* SQL:                                   SQL persistent database interface.
* SQL attributes:                        Documentation on multifiles (pl2sql).
* SQL query <1>:                         Documentation on exports (pl2sql).
* SQL query <2>:                         Documentation on internals (persdbrt_mysql).
* SQL query:                             Documentation on exports (persdbrt_mysql).
* SQL server:                            Documentation on exports (pl2sql).
* SQL table names:                       Documentation on multifiles (pl2sql).
* SQL tables <1>:                        Documentation on multifiles (pl2sql).
* SQL tables:                            Prolog to SQL translator.
* SQL-like database interface <1>:       *** PART VIII - Interfaces to other languages and systems.
* SQL-like database interface:           PART VIII - Interfaces to other languages and systems.
* sql_get_tables/2 <1>:                  Documentation on exports (persdbrt_mysql).
* sql_get_tables/2:                      Usage and interface (persdbrt_mysql).
* sql_persistent/3 <1>:                  Documentation on internals (persdbrt_mysql).
* sql_persistent/3:                      Documentation on exports (persdbrt_mysql).
* sql_persistent_location:               Documentation on internals (persdbrt_mysql).
* sql_persistent_location/2 <1>:         Documentation on multifiles (persdbrt_mysql).
* sql_persistent_location/2:             Usage and interface (persdbrt_mysql).
* sql_query/3 <1>:                       Documentation on internals (persdbrt_mysql).
* sql_query/3 <2>:                       Documentation on exports (persdbrt_mysql).
* sql_query/3:                           Usage and interface (persdbrt_mysql).
* sql_query_one_tuple/3:                 Documentation on internals (persdbrt_mysql).
* sql_table_types/3 <1>:                 Documentation on exports (persdbrt_mysql).
* sql_table_types/3:                     Usage and interface (persdbrt_mysql).
* sqlstring/1 <1>:                       Documentation on exports (db_client_types).
* sqlstring/1 <2>:                       Usage and interface (db_client_types).
* sqlstring/1 <3>:                       Documentation on exports (pl2sql).
* sqlstring/1:                           Usage and interface (pl2sql).
* sqlterm2string/2 <1>:                  Documentation on exports (pl2sql).
* sqlterm2string/2:                      Usage and interface (pl2sql).
* sqltype/1 <1>:                         Documentation on multifiles (pl2sql).
* sqltype/1 <2>:                         Documentation on exports (pl2sql).
* sqltype/1:                             Documentation on exports (persdbrt_mysql).
* sqltypes <1>:                          Documentation on exports (pl2sql).
* sqltypes:                              Documentation on exports (persdbrt_mysql).
* sqrt/1:                                Documentation on exports (arithmetic).
* srandom/1 <1>:                         Documentation on exports (random).
* srandom/1:                             Usage and interface (random).
* standalone compiler <1>:               Checking for correct installation on Un*x.
* standalone compiler <2>:               Un*x full installation instructions.
* standalone compiler:                   Testing your Ciao Un*x installation.
* standalone utilities <1>:              *** PART X - Miscellaneous standalone utilities.
* standalone utilities:                  PART X - Miscellaneous standalone utilities.
* standard total ordering:               Comparing terms.
* start_vrmlScene/4 <1>:                 Documentation on exports (generator_util).
* start_vrmlScene/4:                     Usage and interface (generator_util).
* statistics/0 <1>:                      Documentation on exports (prolog_sys).
* statistics/0:                          Usage and interface (prolog_sys).
* statistics/2 <1>:                      Documentation on exports (prolog_sys).
* statistics/2:                          Usage and interface (prolog_sys).
* status, this manual:                   About this manual.
* steps_lb/2 <1>:                        Documentation on exports (native_props).
* steps_lb/2:                            Usage and interface (native_props).
* steps_ub/2 <1>:                        Documentation on exports (native_props).
* steps_ub/2:                            Usage and interface (native_props).
* stop_parse/2 <1>:                      Documentation on exports (parser_util).
* stop_parse/2:                          Usage and interface (parser_util).
* stream/1 <1>:                          Documentation on exports (streams_basic).
* stream/1:                              Usage and interface (streams_basic).
* stream_alias/1 <1>:                    Documentation on exports (streams_basic).
* stream_alias/1:                        Usage and interface (streams_basic).
* stream_code/2 <1>:                     Documentation on exports (streams_basic).
* stream_code/2:                         Usage and interface (streams_basic).
* stream_property/2 <1>:                 Documentation on exports (iso_incomplete).
* stream_property/2:                     Usage and interface (iso_incomplete).
* stream_to_string/2 <1>:                Documentation on exports (file_utils).
* stream_to_string/2:                    Usage and interface (file_utils).
* streams <1>:                           Usage and interface (persdbrt).
* streams <2>:                           Usage and interface (build_foreign_interface).
* streams <3>:                           Usage and interface (librowser).
* streams <4>:                           Usage and interface (file_utils).
* streams:                               Usage and interface (dec10_io).
* string/1 <1>:                          Documentation on exports (basic_props).
* string/1:                              Usage and interface (basic_props).
* string/3 <1>:                          Documentation on exports (strings).
* string/3:                              Usage and interface (strings).
* string2term/2 <1>:                     Documentation on exports (atom2term).
* string2term/2:                         Usage and interface (atom2term).
* stringcommand/1 <1>:                   Documentation on exports (assertions_props).
* stringcommand/1:                       Documentation on new declarations (assertions).
* strings <1>:                           Usage and interface (bltclass).
* strings <2>:                           Usage and interface (http).
* strings <3>:                           Usage and interface (html).
* strings <4>:                           Usage and interface (canvas_class).
* strings <5>:                           Usage and interface (window_class).
* strings <6>:                           Usage and interface (tcltk_low_level).
* strings <7>:                           Usage and interface (tcltk).
* strings:                               Usage and interface (classic).
* strip_clean/2 <1>:                     Documentation on exports (parser_util).
* strip_clean/2:                         Usage and interface (parser_util).
* strip_exposed/2 <1>:                   Documentation on exports (parser_util).
* strip_exposed/2:                       Usage and interface (parser_util).
* strip_from_list/2 <1>:                 Documentation on exports (parser_util).
* strip_from_list/2:                     Usage and interface (parser_util).
* strip_from_term/2 <1>:                 Documentation on exports (parser_util).
* strip_from_term/2:                     Usage and interface (parser_util).
* strip_interface/2 <1>:                 Documentation on exports (parser_util).
* strip_interface/2:                     Usage and interface (parser_util).
* strip_restricted/2 <1>:                Documentation on exports (parser_util).
* strip_restricted/2:                    Usage and interface (parser_util).
* struct/1 <1>:                          Documentation on exports (basic_props).
* struct/1:                              Usage and interface (basic_props).
* style sheets <1>:                      Checking for correct installation on Win32.
* style sheets <2>:                      Checking for correct installation on Un*x.
* style sheets <3>:                      Testing your Ciao Win32 installation.
* style sheets:                          Testing your Ciao Un*x installation.
* style_type/1 <1>:                      Documentation on exports (arc_class).
* style_type/1:                          Usage and interface (arc_class).
* sub_atom/4 <1>:                        Documentation on exports (atomic_basic).
* sub_atom/4:                            Usage and interface (atomic_basic).
* sub_atom/5 <1>:                        Documentation on exports (iso_misc).
* sub_atom/5:                            Usage and interface (iso_misc).
* sublist/2 <1>:                         Documentation on exports (lists).
* sublist/2:                             Usage and interface (lists).
* subordlist/2 <1>:                      Documentation on exports (lists).
* subordlist/2:                          Usage and interface (lists).
* subterm:                               Options available during debugging.
* subtract/3 <1>:                        Documentation on exports (idlists).
* subtract/3:                            Usage and interface (idlists).
* success assertion:                     Documentation on new declarations (assertions).
* success/1 <1>:                         Documentation on new declarations (assertions).
* success/1:                             Usage and interface (assertions).
* success/2 <1>:                         Documentation on new declarations (assertions).
* success/2:                             Usage and interface (assertions).
* sum_list/2 <1>:                        Documentation on exports (numlists).
* sum_list/2:                            Usage and interface (numlists).
* sum_list/3 <1>:                        Documentation on exports (numlists).
* sum_list/3:                            Usage and interface (numlists).
* sum_list_of_lists/2 <1>:               Documentation on exports (numlists).
* sum_list_of_lists/2:                   Usage and interface (numlists).
* sum_list_of_lists/3 <1>:               Documentation on exports (numlists).
* sum_list_of_lists/3:                   Usage and interface (numlists).
* super class:                           Documentation on new declarations (class).
* Swedish Institute of Computer Science: Acknowledgments.
* symbol/1 <1>:                          Documentation on exports (gengraph1).
* symbol/1:                              Usage and interface (gengraph1).
* symbol_option/1:                       Documentation on internals (prolog_sys).
* symbol_result/1:                       Documentation on internals (prolog_sys).
* syntax of regular types:               Declaring regular types.
* system <1>:                            Usage and interface (bltclass).
* system <2>:                            Usage and interface (persdbrt).
* system <3>:                            Usage and interface (html).
* system <4>:                            Usage and interface (canvas_class).
* system <5>:                            Usage and interface (window_class).
* system <6>:                            Usage and interface (tcltk_low_level).
* system <7>:                            Usage and interface (davinci).
* system <8>:                            Usage and interface (build_foreign_interface).
* system <9>:                            Usage and interface (foreign_compilation).
* system <10>:                           Usage and interface (objects_rt).
* system <11>:                           Usage and interface (librowser).
* system <12>:                           Usage and interface (ctrlcclean).
* system <13>:                           Usage and interface (libpaths).
* system <14>:                           Usage and interface (debugger).
* system <15>:                           Compiling and running programs (Win32).
* system:                                Compiling and running programs (Un*x).
* system libraries:                      Documentation on exports (librowser).
* system/1 <1>:                          Documentation on exports (system).
* system/1:                              Usage and interface (system).
* system/2 <1>:                          Documentation on exports (system).
* system/2:                              Usage and interface (system).
* system_lib/1 <1>:                      Documentation on exports (librowser).
* system_lib/1:                          Usage and interface (librowser).
* tab/1 <1>:                             Documentation on exports (io_basic).
* tab/1:                                 Usage and interface (io_basic).
* tab/2 <1>:                             Documentation on exports (io_basic).
* tab/2:                                 Usage and interface (io_basic).
* table name:                            Documentation on internals (persdbrt_mysql).
* table/1 <1>:                           Documentation on exports (table_widget1).
* table/1:                               Usage and interface (table_widget1).
* table_widget1:                         Documentation on exports (chartlib).
* table_widget2:                         Documentation on exports (chartlib).
* table_widget3:                         Documentation on exports (chartlib).
* table_widget4:                         Documentation on exports (chartlib).
* tablewidget1/4 <1>:                    Documentation on exports (table_widget1).
* tablewidget1/4 <2>:                    Usage and interface (table_widget1).
* tablewidget1/4:                        Documentation on exports (chartlib).
* tablewidget1/5 <1>:                    Documentation on exports (table_widget1).
* tablewidget1/5 <2>:                    Usage and interface (table_widget1).
* tablewidget1/5:                        Documentation on exports (chartlib).
* tablewidget2/4 <1>:                    Documentation on exports (table_widget2).
* tablewidget2/4 <2>:                    Usage and interface (table_widget2).
* tablewidget2/4:                        Documentation on exports (chartlib).
* tablewidget2/5 <1>:                    Documentation on exports (table_widget2).
* tablewidget2/5 <2>:                    Usage and interface (table_widget2).
* tablewidget2/5:                        Documentation on exports (chartlib).
* tablewidget3/4 <1>:                    Documentation on exports (table_widget3).
* tablewidget3/4 <2>:                    Usage and interface (table_widget3).
* tablewidget3/4:                        Documentation on exports (chartlib).
* tablewidget3/5 <1>:                    Documentation on exports (table_widget3).
* tablewidget3/5 <2>:                    Usage and interface (table_widget3).
* tablewidget3/5:                        Documentation on exports (chartlib).
* tablewidget4/4 <1>:                    Documentation on exports (table_widget4).
* tablewidget4/4 <2>:                    Usage and interface (table_widget4).
* tablewidget4/4:                        Documentation on exports (chartlib).
* tablewidget4/5 <1>:                    Documentation on exports (table_widget4).
* tablewidget4/5 <2>:                    Usage and interface (table_widget4).
* tablewidget4/5:                        Documentation on exports (chartlib).
* tag_attrib/1:                          Documentation on exports (pillow_types).
* tar:                                   Un*x full installation instructions.
* Tcl/tk interface <1>:                  *** PART VIII - Interfaces to other languages and systems.
* Tcl/tk interface:                      PART VIII - Interfaces to other languages and systems.
* tcl_delete/1 <1>:                      Documentation on exports (tcltk).
* tcl_delete/1:                          Usage and interface (tcltk).
* tcl_eval/3 <1>:                        Documentation on exports (tcltk).
* tcl_eval/3:                            Usage and interface (tcltk).
* tcl_event/3 <1>:                       Documentation on exports (tcltk).
* tcl_event/3:                           Usage and interface (tcltk).
* tcl_name/1 <1>:                        Documentation on exports (menu_class).
* tcl_name/1:                            Usage and interface (menu_class).
* tcl_new/1 <1>:                         Documentation on exports (tcltk).
* tcl_new/1:                             Usage and interface (tcltk).
* tclCommand/1 <1>:                      Documentation on exports (tcltk).
* tclCommand/1:                          Usage and interface (tcltk).
* tclInterpreter/1 <1>:                  Documentation on exports (tcltk).
* tclInterpreter/1:                      Usage and interface (tcltk).
* tcltk <1>:                             Low level interface library to Tcl/Tk.
* tcltk:                                 The Tcl/Tk interface.
* tcltk/2 <1>:                           Documentation on exports (tcltk_low_level).
* tcltk/2:                               Usage and interface (tcltk_low_level).
* tcltk/examples/tk_test_aux:            Usage and interface (entry_class).
* tcltk/tcltk <1>:                       Usage and interface (entry_class).
* tcltk/tcltk <2>:                       Usage and interface (canvas_class).
* tcltk/tcltk <3>:                       Usage and interface (menu_class).
* tcltk/tcltk:                           Usage and interface (window_class).
* tcltk/tcltk_low_level <1>:             Usage and interface (canvas_class).
* tcltk/tcltk_low_level <2>:             Usage and interface (menu_class).
* tcltk/tcltk_low_level <3>:             Usage and interface (window_class).
* tcltk/tcltk_low_level:                 Usage and interface (tcltk).
* tcltk_low_level <1>:                   Other information (tcltk_low_level).
* tcltk_low_level:                       Low level interface library to Tcl/Tk.
* tcltk_obj/canvas_class:                Usage and interface (shape_class).
* tcltk_obj/menu_class:                  Usage and interface (menu_entry_class).
* tcltk_obj/menu_entry_class:            Usage and interface (menu_class).
* tcltk_obj/shape_class:                 Usage and interface (canvas_class).
* tcltk_obj/window_class <1>:            Usage and interface (canvas_class).
* tcltk_obj/window_class:                Usage and interface (menu_class).
* tcltk_raw_code/2 <1>:                  Documentation on exports (bltclass).
* tcltk_raw_code/2 <2>:                  Usage and interface (bltclass).
* tcltk_raw_code/2 <3>:                  Documentation on exports (tcltk_low_level).
* tcltk_raw_code/2:                      Usage and interface (tcltk_low_level).
* tcsh <1>:                              Un*x full installation instructions.
* tcsh <2>:                              Un*x installation summary.
* tcsh:                                  Un*x user setup.
* tearoff_value/1 <1>:                   Documentation on exports (menu_class).
* tearoff_value/1:                       Usage and interface (menu_class).
* Technical University of Madrid:        Acknowledgments.
* tell/1 <1>:                            Documentation on exports (dec10_io).
* tell/1:                                Usage and interface (dec10_io).
* telling/1 <1>:                         Documentation on exports (dec10_io).
* telling/1:                             Usage and interface (dec10_io).
* term/1 <1>:                            Documentation on exports (basic_props).
* term/1:                                Usage and interface (basic_props).
* terms <1>:                             Usage and interface (bltclass).
* terms <2>:                             Usage and interface (persdbrt_mysql).
* terms <3>:                             Usage and interface (persdbrt).
* terms <4>:                             Usage and interface (tcltk_low_level).
* terms <5>:                             Usage and interface (build_foreign_interface).
* terms:                                 Usage and interface (dcg_expansion).
* terms_file_to_vrml/2 <1>:              Documentation on exports (provrml).
* terms_file_to_vrml/2:                  Usage and interface (provrml).
* terms_file_to_vrml_file/2 <1>:         Documentation on exports (provrml).
* terms_file_to_vrml_file/2:             Usage and interface (provrml).
* terms_to_vrml/2 <1>:                   Documentation on exports (provrml).
* terms_to_vrml/2:                       Usage and interface (provrml).
* terms_to_vrml_file/2 <1>:              Documentation on exports (provrml).
* terms_to_vrml_file/2:                  Usage and interface (provrml).
* terms_vars <1>:                        Usage and interface (vndict).
* terms_vars <2>:                        Usage and interface (persdbrt_mysql).
* terms_vars <3>:                        Usage and interface (when).
* terms_vars:                            Usage and interface (native_props).
* text_characters/1 <1>:                 Documentation on exports (text_class).
* text_characters/1 <2>:                 Usage and interface (text_class).
* text_characters/1 <3>:                 Documentation on exports (widget_class).
* text_characters/1:                     Usage and interface (widget_class).
* textvariable_entry/1 <1>:              Documentation on exports (entry_class).
* textvariable_entry/1:                  Usage and interface (entry_class).
* textvariable_label/1 <1>:              Documentation on exports (label_class).
* textvariable_label/1:                  Usage and interface (label_class).
* textvariablevalue_number/1 <1>:        Documentation on exports (entry_class).
* textvariablevalue_number/1:            Usage and interface (entry_class).
* textvariablevalue_string/1 <1>:        Documentation on exports (entry_class).
* textvariablevalue_string/1:            Usage and interface (entry_class).
* this_module/1 <1>:                     Documentation on exports (system_info).
* this_module/1:                         Usage and interface (system_info).
* throw/1 <1>:                           Documentation on exports (exceptions).
* throw/1:                               Usage and interface (exceptions).
* time/1 <1>:                            Documentation on exports (system).
* time/1:                                Usage and interface (system).
* time_option/1:                         Documentation on internals (prolog_sys).
* time_result/1:                         Documentation on internals (prolog_sys).
* title/1 <1>:                           Documentation on exports (genbar1).
* title/1 <2>:                           Usage and interface (genbar1).
* title/1 <3>:                           Documentation on exports (window_class).
* title/1:                               Usage and interface (window_class).
* tk_event_loop/1 <1>:                   Documentation on exports (tcltk).
* tk_event_loop/1:                       Usage and interface (tcltk).
* tk_loop/1 <1>:                         Documentation on exports (tcltk).
* tk_loop/1:                             Usage and interface (tcltk).
* tk_new/2 <1>:                          Documentation on exports (tcltk).
* tk_new/2:                              Usage and interface (tcltk).
* tk_next_event/2 <1>:                   Documentation on exports (tcltk).
* tk_next_event/2:                       Usage and interface (tcltk).
* token_read/3 <1>:                      Documentation on exports (tokeniser).
* token_read/3:                          Usage and interface (tokeniser).
* tokeniser/2 <1>:                       Documentation on exports (tokeniser).
* tokeniser/2:                           Usage and interface (tokeniser).
* tokenize:                              Usage and interface (read).
* told/0 <1>:                            Documentation on exports (dec10_io).
* told/0:                                Usage and interface (dec10_io).
* top-level:                             The interactive debugger.
* top-level shell, starting, unix:       Starting/exiting the top-level shell (Un*x).
* top-level shell, starting, windows:    Starting/exiting the top-level shell (Win32).
* topd/0 <1>:                            Documentation on exports (davinci).
* topd/0:                                Usage and interface (davinci).
* toplevel:                              Documentation on exports (system_info).
* tour, of the manual:                   A tour of the manual.
* trace:                                 The debugging process.
* trace/0 <1>:                           Documentation on exports (debugger).
* trace/0 <2>:                           Usage and interface (debugger).
* trace/0:                               The debugging process.
* trace/1:                               Marking modules and files for debugging with the embedded debugger.
* transactional update:                  Introduction to persistent predicates.
* transient state:                       Implementation Issues.
* translate_arithmetic_function/5:       Documentation on internals (pl2sql).
* translate_comparison/5:                Documentation on internals (pl2sql).
* translate_conjunction/5:               Documentation on internals (pl2sql).
* translate_goal/5:                      Documentation on internals (pl2sql).
* translate_projection/3:                Documentation on exports (pl2sql).
* translation_predname/1:                Documentation on internals (syntax_extensions).
* transpose/2 <1>:                       Documentation on exports (ugraphs).
* transpose/2:                           Usage and interface (ugraphs).
* tree/1 <1>:                            Documentation on exports (internal_types).
* tree/1:                                Usage and interface (internal_types).
* triple/1:                              Documentation on internals (graphs).
* troubleshooting <1>:                   Installing Ciao from a Win32 binary distribution.
* troubleshooting <2>:                   Troubleshooting (nasty messages and nifty workarounds).
* troubleshooting:                       Installing Ciao from the source distribution.
* true assertion:                        Documentation on exports (assertions).
* true/0 <1>:                            Documentation on exports (basiccontrol).
* true/0 <2>:                            Usage and interface (basiccontrol).
* true/0:                                The module system.
* true/1 <1>:                            Documentation on exports (assertions).
* true/1:                                Usage and interface (assertions).
* truncate/1:                            Documentation on exports (arithmetic).
* trust assertion:                       Documentation on exports (assertions).
* trust/1 <1>:                           Documentation on exports (assertions).
* trust/1:                               Usage and interface (assertions).
* ttydisplay/1 <1>:                      Documentation on exports (ttyout).
* ttydisplay/1:                          Usage and interface (ttyout).
* ttydisplay_string/1 <1>:               Documentation on exports (ttyout).
* ttydisplay_string/1:                   Usage and interface (ttyout).
* ttydisplayq/1 <1>:                     Documentation on exports (ttyout).
* ttydisplayq/1:                         Usage and interface (ttyout).
* ttyflush/0 <1>:                        Documentation on exports (ttyout).
* ttyflush/0:                            Usage and interface (ttyout).
* ttyget/1 <1>:                          Documentation on exports (ttyout).
* ttyget/1:                              Usage and interface (ttyout).
* ttyget1/1 <1>:                         Documentation on exports (ttyout).
* ttyget1/1:                             Usage and interface (ttyout).
* ttynl/0 <1>:                           Documentation on exports (ttyout).
* ttynl/0:                               Usage and interface (ttyout).
* ttyout <1>:                            Usage and interface (classic).
* ttyout:                                Usage and interface (debugger).
* ttyput/1 <1>:                          Documentation on exports (ttyout).
* ttyput/1:                              Usage and interface (ttyout).
* ttyskip/1 <1>:                         Documentation on exports (ttyout).
* ttyskip/1:                             Usage and interface (ttyout).
* ttyskipeol/0 <1>:                      Documentation on exports (ttyout).
* ttyskipeol/0:                          Usage and interface (ttyout).
* ttytab/1 <1>:                          Documentation on exports (ttyout).
* ttytab/1:                              Usage and interface (ttyout).
* tuple/1 <1>:                           Documentation on exports (db_client_types).
* tuple/1 <2>:                           Usage and interface (db_client_types).
* tuple/1:                               Documentation on internals (persdbrt_mysql).
* tuples:                                Documentation on internals (persdbrt_mysql).
* type <1>:                              *** PART V - Annotated Prolog library (assertions).
* type:                                  PART V - Annotated Prolog library (assertions).
* type declarations:                     Printing the declarations and code in a file.
* type/2 <1>:                            Documentation on exports (term_typing).
* type/2:                                Usage and interface (term_typing).
* U. of Arizona:                         Acknowledgments.
* ugraph/1 <1>:                          Documentation on exports (ugraphs).
* ugraph/1 <2>:                          Usage and interface (ugraphs).
* ugraph/1:                              Documentation on internals (davinci).
* ugraph2term/2 <1>:                     Documentation on exports (davinci).
* ugraph2term/2:                         Usage and interface (davinci).
* ugraphs:                               Labeled graph-processing utilities.
* umask/2 <1>:                           Documentation on exports (system).
* umask/2:                               Usage and interface (system).
* undo/1 <1>:                            Documentation on exports (odd).
* undo/1:                                Usage and interface (odd).
* undo_force_lazy/1 <1>:                 Documentation on exports (ciaosh).
* undo_force_lazy/1:                     Usage and interface (ciaosh).
* unify:                                 Options available during debugging.
* unify_with_occurs_check/2 <1>:         Documentation on exports (iso_misc).
* unify_with_occurs_check/2:             Usage and interface (iso_misc).
* uninstalling <1>:                      Un*x full installation instructions.
* uninstalling:                          Un*x installation summary.
* UNION-operator:                        Documentation on internals (pl2sql).
* union/3 <1>:                           Documentation on exports (lists).
* union/3:                               Usage and interface (lists).
* union_idlists/3 <1>:                   Documentation on exports (idlists).
* union_idlists/3:                       Usage and interface (idlists).
* UNIX make:                             Un*x full installation instructions.
* unload/1 <1>:                          Documentation on exports (compiler).
* unload/1 <2>:                          Usage and interface (compiler).
* unload/1 <3>:                          Documentation on exports (ciaosh).
* unload/1:                              Usage and interface (ciaosh).
* unlock_atom/1 <1>:                     Documentation on exports (concurrency).
* unlock_atom/1:                         Usage and interface (concurrency).
* unlock_file/2 <1>:                     Documentation on exports (file_locks).
* unlock_file/2:                         Usage and interface (file_locks).
* unmarshalling <1>:                     *** PART VI - Ciao Prolog library miscellanea.
* unmarshalling:                         PART VI - Ciao Prolog library miscellanea.
* unzip:                                 Win32 binary installation summary.
* update/0 <1>:                          Documentation on exports (librowser).
* update/0:                              Usage and interface (librowser).
* update_attribute/2 <1>:                Documentation on exports (attributes).
* update_attribute/2:                    Usage and interface (attributes).
* update_files:                          Implementation Issues.
* update_files/0 <1>:                    Documentation on exports (persdbrt).
* update_files/0:                        Usage and interface (persdbrt).
* update_files/1 <1>:                    Documentation on exports (persdbrt).
* update_files/1:                        Usage and interface (persdbrt).
* updated state:                         Implementation Issues.
* Updates to persistent predicates:      Introduction to persistent predicates.
* UPM:                                   Acknowledgments.
* url_info/2 <1>:                        Documentation on exports (html).
* url_info/2:                            Usage and interface (html).
* url_info_relative/3 <1>:               Documentation on exports (html).
* url_info_relative/3:                   Usage and interface (html).
* url_query/2 <1>:                       Documentation on exports (html).
* url_query/2:                           Usage and interface (html).
* url_term/1 <1>:                        Documentation on exports (pillow_types).
* url_term/1:                            Usage and interface (pillow_types).
* usage:                                 Documentation on new declarations (assertions).
* usage relationship:                    Documentation on new declarations (objects).
* use_active_module:                     Active modules (high-level distributed execution).
* use_active_module/2 <1>:               Documentation on new declarations (actmods).
* use_active_module/2:                   Usage and interface (actmods).
* use_class/1 <1>:                       Documentation on exports (objects_rt).
* use_class/1 <2>:                       Usage and interface (objects_rt).
* use_class/1 <3>:                       Run time usage of objects.
* use_class/1 <4>:                       Error reporting at compile time (objects).
* use_class/1 <5>:                       Documentation on new declarations (objects).
* use_class/1 <6>:                       Usage and interface (objects).
* use_class/1:                           Documentation on new declarations (class).
* use_compiler/1:                        Documentation on internals (foreign_interface_properties).
* use_compiler/2:                        Documentation on internals (foreign_interface_properties).
* use_foreign_library/1:                 Documentation on internals (foreign_interface_properties).
* use_foreign_library/2:                 Documentation on internals (foreign_interface_properties).
* use_foreign_source/1:                  Documentation on internals (foreign_interface_properties).
* use_foreign_source/2:                  Documentation on internals (foreign_interface_properties).
* use_linker/1:                          Documentation on internals (foreign_interface_properties).
* use_linker/2:                          Documentation on internals (foreign_interface_properties).
* use_module:                            Active modules (high-level distributed execution).
* use_module/1 <1>:                      Known bugs and planned improvements (objects_rt).
* use_module/1 <2>:                      Documentation on exports (objects_rt).
* use_module/1 <3>:                      Documentation on new declarations (objects).
* use_module/1 <4>:                      Usage and interface (expansion_tools).
* use_module/1 <5>:                      Usage and interface (librowser).
* use_module/1 <6>:                      Documentation on exports (compiler).
* use_module/1 <7>:                      Usage and interface (compiler).
* use_module/1 <8>:                      Documentation on exports (streams_basic).
* use_module/1 <9>:                      Documentation on exports (ciaosh).
* use_module/1 <10>:                     Usage and interface (ciaosh).
* use_module/1 <11>:                     Shell invocation and startup.
* use_module/1 <12>:                     Types of executables generated.
* use_module/1:                          Paths used by the compiler during compilation.
* use_module/2 <1>:                      Documentation on exports (compiler).
* use_module/2 <2>:                      Usage and interface (compiler).
* use_module/2 <3>:                      Documentation on exports (ciaosh).
* use_module/2:                          Usage and interface (ciaosh).
* use_module/3 <1>:                      Documentation on exports (compiler).
* use_module/3:                          Usage and interface (compiler).
* use_package:                           Marking modules and files for debugging with the embedded debugger.
* use_package/1 <1>:                     Usage and interface (persdbrt_mysql).
* use_package/1 <2>:                     Usage and interface (persdbrt).
* use_package/1 <3>:                     ISO-Prolog package.
* use_package/1 <4>:                     Documentation on exports (ciaosh).
* use_package/1:                         Usage and interface (ciaosh).
* user module <1>:                       The module system.
* user module:                           Shell interaction.
* user modules, debugging:               Marking modules and files for debugging in the top-level debugger.
* user setup:                            Un*x user setup.
* user/1 <1>:                            Documentation on exports (db_client_types).
* user/1 <2>:                            Usage and interface (db_client_types).
* user/1:                                Documentation on exports (persdbrt_mysql).
* users mailing list:                    Keeping up to date with the Ciao users mailing list.
* using alternate engines or libraries:  Environment variables used by Ciao executables.
* valid_attributes/2 <1>:                Documentation on exports (test_format).
* valid_attributes/2:                    Usage and interface (test_format).
* valid_format/4 <1>:                    Documentation on exports (test_format).
* valid_format/4:                        Usage and interface (test_format).
* valid_table/2 <1>:                     Documentation on exports (test_format).
* valid_table/2:                         Usage and interface (test_format).
* valid_vectors/4 <1>:                   Documentation on exports (test_format).
* valid_vectors/4:                       Usage and interface (test_format).
* value_dict/1 <1>:                      Documentation on exports (pillow_types).
* value_dict/1:                          Usage and interface (pillow_types).
* var/1 <1>:                             Documentation on exports (assertions_props).
* var/1 <2>:                             Documentation on exports (term_typing).
* var/1:                                 Usage and interface (term_typing).
* variable names:                        Some attention points.
* variable_value/1 <1>:                  Documentation on exports (radiobutton_class).
* variable_value/1 <2>:                  Usage and interface (radiobutton_class).
* variable_value/1 <3>:                  Documentation on exports (checkbutton_class).
* variable_value/1:                      Usage and interface (checkbutton_class).
* variables occurring in several goals:  Documentation on internals (pl2sql).
* variant/2 <1>:                         Documentation on exports (terms_check).
* variant/2:                             Usage and interface (terms_check).
* varname/1 <1>:                         Documentation on exports (vndict).
* varname/1:                             Usage and interface (vndict).
* varnamedict/1 <1>:                     Documentation on exports (vndict).
* varnamedict/1:                         Usage and interface (vndict).
* varnamesl/1 <1>:                       Documentation on exports (vndict).
* varnamesl/1:                           Usage and interface (vndict).
* varnamesl2dict/2 <1>:                  Documentation on exports (vndict).
* varnamesl2dict/2:                      Usage and interface (vndict).
* vars_names_dict/3 <1>:                 Documentation on exports (vndict).
* vars_names_dict/3:                     Usage and interface (vndict).
* varsbag/3 <1>:                         Documentation on exports (terms_vars).
* varsbag/3:                             Usage and interface (terms_vars).
* varset/2 <1>:                          Documentation on exports (terms_vars).
* varset/2:                              Usage and interface (terms_vars).
* varset_in_args/2 <1>:                  Documentation on exports (terms_vars).
* varset_in_args/2:                      Usage and interface (terms_vars).
* vector/1 <1>:                          Documentation on exports (gengraph1).
* vector/1:                              Usage and interface (gengraph1).
* vectors_format/4 <1>:                  Documentation on exports (test_format).
* vectors_format/4:                      Usage and interface (test_format).
* verify_attribute/2 <1>:                Documentation on multifiles (when).
* verify_attribute/2 <2>:                Usage and interface (when).
* verify_attribute/2 <3>:                Documentation on multifiles (freeze).
* verify_attribute/2 <4>:                Usage and interface (freeze).
* verify_attribute/2 <5>:                Other information (attributes).
* verify_attribute/2 <6>:                Documentation on multifiles (attributes).
* verify_attribute/2:                    Usage and interface (attributes).
* Veroniek Dumortier:                    Acknowledgments.
* vertices/1 <1>:                        Documentation on exports (line_class).
* vertices/1 <2>:                        Usage and interface (line_class).
* vertices/1 <3>:                        Documentation on exports (poly_class).
* vertices/1:                            Usage and interface (poly_class).
* vertices/2 <1>:                        Documentation on exports (ugraphs).
* vertices/2:                            Usage and interface (ugraphs).
* vertices_edges_to_lgraph/3 <1>:        Documentation on exports (lgraphs).
* vertices_edges_to_lgraph/3:            Usage and interface (lgraphs).
* vertices_edges_to_ugraph/3 <1>:        Documentation on exports (ugraphs).
* vertices_edges_to_ugraph/3:            Usage and interface (ugraphs).
* vertices_edges_to_wgraph/3 <1>:        Documentation on exports (wgraphs).
* vertices_edges_to_wgraph/3:            Usage and interface (wgraphs).
* views:                                 SQL persistent database interface.
* virtual:                               Documentation on new declarations (class).
* virtual/1 <1>:                         Documentation on new declarations (class).
* virtual/1:                             Usage and interface (class).
* virtual_method_spec/1 <1>:             Documentation on exports (objects_rt).
* virtual_method_spec/1:                 Usage and interface (objects_rt).
* vndict:                                Usage and interface (pretty_print).
* vrml_file_to_terms/2 <1>:              Documentation on exports (provrml).
* vrml_file_to_terms/2:                  Usage and interface (provrml).
* vrml_file_to_terms_file/2 <1>:         Documentation on exports (provrml).
* vrml_file_to_terms_file/2:             Usage and interface (provrml).
* vrml_http_access/2 <1>:                Documentation on exports (provrml).
* vrml_http_access/2:                    Usage and interface (provrml).
* vrml_in_out/2 <1>:                     Documentation on exports (provrml).
* vrml_in_out/2:                         Usage and interface (provrml).
* vrml_to_terms/2 <1>:                   Documentation on exports (provrml).
* vrml_to_terms/2:                       Usage and interface (provrml).
* vrml_web_to_terms/2 <1>:               Documentation on exports (provrml).
* vrml_web_to_terms/2:                   Usage and interface (provrml).
* vrml_web_to_terms_file/2 <1>:          Documentation on exports (provrml).
* vrml_web_to_terms_file/2:              Usage and interface (provrml).
* wakeup_exp/1 <1>:                      Documentation on exports (when).
* wakeup_exp/1:                          Usage and interface (when).
* WAM:                                   Acknowledgments.
* warning/1:                             Documentation on exports (io_aux).
* warning_message/1 <1>:                 Documentation on exports (messages).
* warning_message/1:                     Usage and interface (messages).
* warning_message/2 <1>:                 Documentation on exports (messages).
* warning_message/2:                     Usage and interface (messages).
* warning_message/3 <1>:                 Documentation on exports (messages).
* warning_message/3:                     Usage and interface (messages).
* Web interface <1>:                     *** PART VIII - Interfaces to other languages and systems.
* Web interface:                         PART VIII - Interfaces to other languages and systems.
* WebDB:                                 Persistent predicates.
* weekday/1 <1>:                         Documentation on exports (pillow_types).
* weekday/1:                             Usage and interface (pillow_types).
* wellformed_body/3 <1>:                 Documentation on exports (dynamic).
* wellformed_body/3:                     Usage and interface (dynamic).
* when/2 <1>:                            Documentation on exports (when).
* when/2 <2>:                            Usage and interface (when).
* when/2:                                Delaying predicates (when).
* WHERE-clause:                          Documentation on internals (pl2sql).
* WHERE-clauses:                         Documentation on internals (pl2sql).
* where/1 <1>:                           Documentation on exports (librowser).
* where/1:                               Usage and interface (librowser).
* whitespace/1 <1>:                      Documentation on exports (internal_types).
* whitespace/1:                          Usage and interface (internal_types).
* whitespace/2 <1>:                      Documentation on exports (strings).
* whitespace/2:                          Usage and interface (strings).
* whitespace0/2 <1>:                     Documentation on exports (strings).
* whitespace0/2:                         Usage and interface (strings).
* why the name Ciao:                     About the name of the System.
* widget/1 <1>:                          Documentation on exports (window_class).
* widget/1:                              Usage and interface (window_class).
* width/1 <1>:                           Documentation on exports (oval_class).
* width/1 <2>:                           Usage and interface (oval_class).
* width/1 <3>:                           Documentation on exports (arc_class).
* width/1:                               Usage and interface (arc_class).
* width_value/1 <1>:                     Documentation on exports (canvas_class).
* width_value/1 <2>:                     Usage and interface (canvas_class).
* width_value/1 <3>:                     Documentation on exports (widget_class).
* width_value/1:                         Usage and interface (widget_class).
* Win32:                                 Running executables from the command line.
* window_class:                          The Tcl/Tk Class Interface.
* window_class/0 <1>:                    Documentation on exports (window_class).
* window_class/0:                        Usage and interface (window_class).
* window_class/3 <1>:                    Documentation on exports (window_class).
* window_class/3:                        Usage and interface (window_class).
* windows shortcut:                      Win32 binary installation summary.
* WinZip:                                Win32 binary installation summary.
* withdraw/0 <1>:                        Documentation on exports (window_class).
* withdraw/0:                            Usage and interface (window_class).
* Wlodek Drabent:                        Acknowledgments.
* working_directory/2 <1>:               Documentation on exports (system).
* working_directory/2:                   Usage and interface (system).
* write <1>:                             Usage and interface (tokeniser).
* write <2>:                             Usage and interface (parser_util).
* write <3>:                             Usage and interface (parser).
* write <4>:                             Usage and interface (lookup).
* write <5>:                             Usage and interface (io).
* write <6>:                             Usage and interface (generator).
* write <7>:                             Usage and interface (dictionary_tree).
* write <8>:                             Usage and interface (dictionary).
* write <9>:                             Usage and interface (boundary).
* write <10>:                            Usage and interface (bltclass).
* write <11>:                            Usage and interface (tcltk_low_level).
* write <12>:                            Usage and interface (tcltk).
* write <13>:                            Usage and interface (davinci).
* write <14>:                            Usage and interface (objects_rt).
* write <15>:                            Usage and interface (functions).
* write <16>:                            Usage and interface (pretty_print).
* write <17>:                            Usage and interface (format).
* write <18>:                            Usage and interface (iso).
* write <19>:                            Documentation on exports (io_aux).
* write <20>:                            Usage and interface (debugger).
* write:                                 Options available during debugging.
* write/1 <1>:                           Documentation on multifiles (write).
* write/1 <2>:                           Documentation on exports (write).
* write/1 <3>:                           Usage and interface (write).
* write/1 <4>:                           Documentation on exports (io_aux).
* write/1:                               Acknowledgements.
* write/2 <1>:                           Documentation on exports (sockets).
* write/2 <2>:                           Documentation on exports (write).
* write/2:                               Usage and interface (write).
* write_assertion/6 <1>:                 Documentation on exports (assrt_write).
* write_assertion/6:                     Usage and interface (assrt_write).
* write_assertion_as_comment/6 <1>:      Documentation on exports (assrt_write).
* write_assertion_as_comment/6:          Usage and interface (assrt_write).
* write_canonical/1 <1>:                 Documentation on exports (write).
* write_canonical/1:                     Usage and interface (write).
* write_canonical/2 <1>:                 Documentation on exports (write).
* write_canonical/2:                     Usage and interface (write).
* write_list1/1 <1>:                     Documentation on exports (write).
* write_list1/1:                         Usage and interface (write).
* write_option/1 <1>:                    Documentation on exports (write).
* write_option/1:                        Usage and interface (write).
* write_string/1 <1>:                    Documentation on exports (strings).
* write_string/1:                        Usage and interface (strings).
* write_string/2 <1>:                    Documentation on exports (strings).
* write_string/2:                        Usage and interface (strings).
* write_term/2 <1>:                      Documentation on exports (write).
* write_term/2:                          Usage and interface (write).
* write_term/3 <1>:                      Documentation on exports (write).
* write_term/3:                          Usage and interface (write).
* write_terms_file/2 <1>:                Documentation on exports (io).
* write_terms_file/2:                    Usage and interface (io).
* write_vrml_file/2 <1>:                 Documentation on exports (io).
* write_vrml_file/2:                     Usage and interface (io).
* writeq/1 <1>:                          Documentation on exports (write).
* writeq/1 <2>:                          Usage and interface (write).
* writeq/1:                              Documentation on exports (io_aux).
* writeq/2 <1>:                          Documentation on exports (write).
* writeq/2:                              Usage and interface (write).
* WWW <1>:                               Un*x full installation instructions.
* WWW:                                   Un*x installation summary.
* WWW browser <1>:                       Checking for correct installation on Un*x.
* WWW browser:                           Testing your Ciao Un*x installation.
* WWW, interfacing with:                 The PiLLoW Web programming library.
* xbarelement1:                          genbar1 (library).
* xbarelement1/1 <1>:                    Documentation on internals (genbar1).
* xbarelement1/1:                        genbar1 (library).
* xbarelement2/1 <1>:                    Documentation on exports (genbar2).
* xbarelement2/1 <2>:                    Usage and interface (genbar2).
* xbarelement2/1:                        genbar2 (library).
* xbarelement3/1:                        Documentation on internals (genbar3).
* xbarelement4/1:                        Documentation on internals (genbar4).
* xelement/1:                            Documentation on internals (genmultibar).
* XML <1>:                               HTML/XML/CGI programming.
* XML:                                   The PiLLoW Web programming library.
* xml2terms/2 <1>:                       Documentation on exports (html).
* xml2terms/2:                           Usage and interface (html).
* yelement/1 <1>:                        Documentation on exports (genbar1).
* yelement/1:                            Usage and interface (genbar1).
* |/2:                                   Documentation on internals (basiccontrol).
* ~/.cshrc <1>:                          Un*x full installation instructions.
* ~/.cshrc <2>:                          Un*x installation summary.
* ~/.cshrc:                              Un*x user setup.
* ~/.emacs <1>:                          Win32 binary installation summary.
* ~/.emacs <2>:                          Un*x full installation instructions.
* ~/.emacs <3>:                          Un*x installation summary.
* ~/.emacs:                              Un*x user setup.
* ~/.profile <1>:                        Un*x full installation instructions.
* ~/.profile <2>:                        Un*x installation summary.
* ~/.profile:                            Un*x user setup.
* ~/1:                                   Usage and interface (functions).



Tag Table:
Node: Top6643
Node: Summary13577
Node: Introduction17017
Node: About this manual17460
Node: About the Ciao Prolog development system19830
Node: ISO-Prolog compliance versus extensibility23241
Node: About the name of the System25844
Node: Referring to Ciao26833
Node: Syntax terminology and notational conventions27819
Node: Predicates and their components28585
Node: Characters and character strings29757
Node: Predicate specs30622
Node: Modes31295
Node: Properties and types32313
Node: Declarations33299
Node: Operators34638
Node: A tour of the manual35538
Node: PART I - The program development environment36490
Node: PART II - The Ciao basic language (engine)38343
Node: PART III - ISO-Prolog library (iso)39089
Node: PART IV - Classic Prolog library (classic)40265
Node: PART V - Annotated Prolog library (assertions)41002
Node: PART VI - Ciao Prolog library miscellanea41783
Node: PART VII - Ciao Prolog extensions42606
Node: PART VIII - Interfaces to other languages and systems43537
Node: PART IX - Abstract data types44338
Node: PART X - Miscellaneous standalone utilities44764
Node: PART XI - Contributed libraries45166
Node: PART XII - Appendices45588
Node: Acknowledgments45975
Node: Version/Change Log (ciao)49825
Node: Getting started on Un*x-like machines67179
Node: Testing your Ciao Un*x installation68453
Node: Un*x user setup70745
Node: Using Ciao from a Un*x command shell73381
Node: Starting/exiting the top-level shell (Un*x)73907
Node: Getting help (Un*x)74625
Node: Compiling and running programs (Un*x)75145
Node: Generating executables (Un*x)76924
Node: Running Ciao scripts (Un*x)78028
Node: The Ciao initialization file (Un*x)79152
Node: Printing manuals (Un*x)79869
Node: An introduction to the Ciao emacs environment (Un*x)80556
Node: Keeping up to date (Un*x)83954
Node: Getting started on Windows machines84373
Node: Testing your Ciao Win32 installation85636
Node: Using Ciao from the Windows explorer and command shell88080
Node: Starting/exiting the top-level shell (Win32)88687
Node: Getting help (Win32)89293
Node: Compiling and running programs (Win32)89836
Node: Generating executables (Win32)91638
Node: Running Ciao scripts (Win32)92811
Node: The Ciao initialization file (Win32)93950
Node: Printing manuals (Win32)94679
Node: An introduction to the Ciao emacs environment (Win32)95267
Node: Keeping up to date (Win32)98685
Node: *** PART I - The program development environment99106
Node: The stand-alone command-line compiler100956
Node: Introduction to building executables102189
Node: Paths used by the compiler during compilation105560
Node: Running executables from the command line106315
Node: Types of executables generated109466
Ref: Types of executables generated-Footnote-1115614
Ref: Types of executables generated-Footnote-2115980
Node: Environment variables used by Ciao executables116586
Node: Intermediate files in the compilation process118075
Node: Usage (ciaoc)119127
Node: The interactive top-level shell121281
Node: Shell invocation and startup122393
Node: Shell interaction123700
Node: Entering recursive (conjunctive) shell levels126193
Node: Usage and interface (ciaosh)127750
Node: Documentation on exports (ciaosh)128880
Node: Documentation on internals (ciaosh)136625
Node: The interactive debugger137230
Node: Marking modules and files for debugging in the top-level debugger139921
Node: The debugging process143882
Node: Marking modules and files for debugging with the embedded debugger145371
Node: The procedure box control flow model148205
Node: Format of debugging messages153699
Node: Options available during debugging157174
Node: Calling predicates that are not exported by a module165983
Node: Acknowledgements166733
Node: Predicates controlling the interactive debugger167606
Node: Usage and interface (debugger)168412
Node: Documentation on exports (debugger)169297
Node: Documentation on internals (debugger)177070
Node: Known bugs and planned improvements (debugger)178035
Node: The script interpreter178507
Node: How it works180129
Node: Command line arguments in scripts182556
Node: Customizing library paths and path aliases183223
Node: Usage and interface (libpaths)184058
Node: Documentation on exports (libpaths)184642
Node: Documentation on multifiles (libpaths)185612
Node: Using Ciao inside GNU emacs186177
Node: *** PART II - The Ciao basic language (engine)186730
Node: The module system187461
Node: Directives for using code in other files190309
Node: Control constructs/predicates190802
Node: Usage and interface (basiccontrol)191463
Node: Documentation on exports (basiccontrol)192107
Node: Documentation on internals (basiccontrol)196044
Node: Basic builtin directives196424
Node: Basic data types and properties197623
Node: Usage and interface (basic_props)198376
Node: Documentation on exports (basic_props)199220
Node: Extra-logical properties for typing208921
Node: Usage and interface (term_typing)209568
Node: Documentation on exports (term_typing)210119
Node: Basic term manipulation215001
Node: Usage and interface (term_basic)215370
Node: Documentation on exports (term_basic)215878
Node: Comparing terms219411
Node: Usage and interface (term_compare)220793
Node: Documentation on exports (term_compare)221297
Node: Basic predicates handling names of constants227648
Node: Usage and interface (atomic_basic)228256
Node: Documentation on exports (atomic_basic)228848
Node: Arithmetic238424
Node: Usage and interface (arithmetic)239417
Node: Documentation on exports (arithmetic)239919
Node: Basic file/stream handling247220
Node: Usage and interface (streams_basic)247800
Node: Documentation on exports (streams_basic)248741
Node: Documentation on multifiles (streams_basic)264788
Node: Basic input/output266137
Node: Usage and interface (io_basic)266927
Node: Documentation on exports (io_basic)267634
Node: Exception handling278062
Node: Usage and interface (exceptions)278537
Node: Documentation on exports (exceptions)278996
Node: Changing system behaviour and various flags282677
Node: Usage and interface (prolog_flags)286099
Node: Documentation on exports (prolog_flags)286812
Node: Documentation on multifiles (prolog_flags)293025
Node: Fast/concurrent update of facts295042
Node: Usage and interface (data_facts)296918
Node: Documentation on exports (data_facts)297641
Node: Documentation on internals (data_facts)306389
Node: Extending the syntax308023
Node: Usage and interface (syntax_extensions)308574
Node: Documentation on internals (syntax_extensions)308956
Node: Message printing primitives317516
Node: Usage and interface (io_aux)318049
Node: Documentation on exports (io_aux)318503
Node: Known bugs and planned improvements (io_aux)323041
Node: Attributed variables323368
Node: Usage and interface (attributes)324143
Node: Documentation on exports (attributes)324726
Node: Documentation on multifiles (attributes)327943
Node: Other information (attributes)329543
Node: Gathering some basic internal info331019
Node: Usage and interface (system_info)331602
Node: Documentation on exports (system_info)332129
Node: Documentation on internals (system_info)337323
Node: *** PART III - ISO-Prolog library (iso)337866
Node: ISO-Prolog package338998
Node: Usage and interface (iso)339439
Node: All solutions predicates339885
Node: Usage and interface (aggregates)340757
Node: Documentation on exports (aggregates)341307
Node: Dynamic predicates344744
Node: Usage and interface (dynamic)345895
Node: Documentation on exports (dynamic)346647
Node: Documentation on multifiles (dynamic)352251
Node: Term input352673
Node: Usage and interface (read)353185
Node: Documentation on exports (read)353751
Node: Documentation on multifiles (read)356508
Node: Documentation on internals (read)357286
Node: Term output358149
Node: Usage and interface (write)359103
Node: Documentation on exports (write)359945
Node: Documentation on multifiles (write)369594
Node: Defining operators371201
Node: Usage and interface (operators)372456
Node: Documentation on exports (operators)372901
Node: iso_byte_char (library)374629
Node: Usage and interface (iso_byte_char)374889
Node: Documentation on exports (iso_byte_char)375515
Node: iso_misc (library)377104
Node: Usage and interface (iso_misc)377383
Node: Documentation on exports (iso_misc)377895
Node: iso_incomplete (library)378606
Node: Usage and interface (iso_incomplete)378899
Node: Documentation on exports (iso_incomplete)379323
Node: *** PART IV - Classic Prolog library (classic)379826
Node: Classic Prolog package380516
Node: Usage and interface (classic)381074
Node: Definite clause grammars381631
Node: Usage and interface (dcg)386684
Node: Definite clause grammars (expansion)386953
Node: Usage and interface (dcg_expansion)387287
Node: Documentation on exports (dcg_expansion)387842
Node: List processing389012
Node: Usage and interface (lists)389421
Node: Documentation on exports (lists)390357
Node: Sorting lists397959
Node: Usage and interface (sort)398302
Node: Documentation on exports (sort)398687
Node: Documentation on internals (sort)400143
Node: Dictionaries400495
Node: Usage and interface (dict)400903
Node: Documentation on exports (dict)401365
Node: String processing403441
Node: Usage and interface (strings)403912
Node: Documentation on exports (strings)404374
Node: Documentation on internals (strings)406470
Node: Formatted output406836
Node: Usage and interface (format)408279
Node: Documentation on exports (format)408797
Node: DEC-10 Prolog file IO416232
Node: Usage and interface (dec10_io)416641
Node: Documentation on exports (dec10_io)417164
Node: ttyout (library)417982
Node: Usage and interface (ttyout)418243
Node: Documentation on exports (ttyout)418748
Node: compiler (library)419936
Node: Usage and interface (compiler)420292
Node: Documentation on exports (compiler)421020
Node: Quintus-like internal database422521
Node: Usage and interface (old_database)423720
Node: Documentation on exports (old_database)424161
Node: Enabling operators at run-time425930
Node: Usage and interface (runtime_ops)426611
Node: *** PART V - Annotated Prolog library (assertions)427022
Node: The Ciao assertion package427763
Node: More info429527
Node: Some attention points430358
Node: Usage and interface (assertions)431540
Node: Documentation on new declarations (assertions)432961
Node: Documentation on exports (assertions)444787
Node: Types and properties related to assertions449164
Node: Usage and interface (assertions_props)450159
Node: Documentation on exports (assertions_props)451060
Node: Declaring regular types465300
Node: Defining properties466730
Node: Usage and interface (regtypes)474405
Node: Documentation on new declarations (regtypes)475004
Node: Properties which are native to analyzers478510
Node: Usage and interface (native_props)479215
Node: Documentation on exports (native_props)480215
Node: Meta-properties486250
Node: Usage and interface (meta_props)487400
Node: Documentation on exports (meta_props)487956
Node: Documentation on multifiles (meta_props)489083
Node: Documentation on internals (meta_props)489705
Node: Known bugs and planned improvements (meta_props)490969
Node: ISO-Prolog modes491398
Node: Usage and interface (isomodes)491955
Node: Documentation on new modes (isomodes)492523
Node: Classical Prolog modes494618
Node: Usage and interface (basicmodes)495354
Node: Documentation on new modes (basicmodes)495978
Node: Run-time checking of assertions500053
Node: Usage and interface (rtchecks)500832
Node: Documentation on multifiles (rtchecks)501314
Node: Known bugs and planned improvements (rtchecks)502093
Node: *** PART VI - Ciao Prolog library miscellanea502564
Node: Structured stream handling503352
Node: Usage and interface (streams)503694
Node: Documentation on exports (streams)504145
Node: Operating system utilities504822
Node: Usage and interface (system)505661
Node: Documentation on exports (system)506916
Node: Documentation on multifiles (system)518766
Node: Prolog system internal predicates519113
Node: Usage and interface (prolog_sys)519831
Node: Documentation on exports (prolog_sys)520330
Node: Documentation on internals (prolog_sys)526495
Node: Known bugs and planned improvements (prolog_sys)529153
Node: Atom to term conversion529676
Node: Usage and interface (atom2term)530157
Node: Documentation on exports (atom2term)530560
Node: Known bugs and planned improvements (atom2term)531465
Node: ctrlcclean (library)531864
Node: Usage and interface (ctrlcclean)532147
Node: Documentation on exports (ctrlcclean)532641
Node: errhandle (library)533196
Node: Usage and interface (errhandle)533486
Node: Documentation on exports (errhandle)533870
Node: Fast reading and writing of terms534329
Node: Usage and interface (fastrw)534980
Node: Documentation on exports (fastrw)535522
Node: Known bugs and planned improvements (fastrw)536958
Node: File name manipulation537485
Node: Usage and interface (filenames)537990
Node: Documentation on exports (filenames)538515
Node: File I/O utilities542245
Node: Usage and interface (file_utils)542591
Node: Documentation on exports (file_utils)543121
Node: File locks545835
Node: Usage and interface (file_locks)546518
Node: Documentation on exports (file_locks)546884
Node: Known bugs and planned improvements (file_locks)547945
Node: Term manipulation utilities548221
Node: Usage and interface (terms)548586
Node: Documentation on exports (terms)548970
Node: Term checking utilities549811
Node: Usage and interface (terms_check)550162
Node: Documentation on exports (terms_check)550563
Node: Other information (terms_check)551220
Node: Term variables sets551724
Node: Usage and interface (terms_vars)552036
Node: Documentation on exports (terms_vars)552528
Node: Printing status and error messages553587
Node: Usage and interface (messages)554189
Node: Documentation on exports (messages)555156
Node: Documentation on multifiles (messages)565995
Node: Known bugs and planned improvements (messages)566819
Node: A simple pretty-printer for Ciao programs567174
Node: Usage and interface (pretty_print)567752
Node: Documentation on exports (pretty_print)568289
Node: Documentation on internals (pretty_print)569482
Node: Pretty-printing assertions571274
Node: Usage and interface (assrt_write)571821
Node: Documentation on exports (assrt_write)572408
Node: The Ciao library browser574124
Node: Usage and interface (librowser)575293
Node: Documentation on exports (librowser)576677
Node: Documentation on internals (librowser)581011
Node: Code translation utilities581515
Node: Usage and interface (expansion_tools)582456
Node: Documentation on exports (expansion_tools)583203
Node: Documentation on internals (expansion_tools)588169
Node: Known bugs and planned improvements (expansion_tools)588959
Node: Low-level concurrency/multithreading primitives589305
Node: Usage and interface (concurrency)591320
Node: Documentation on exports (concurrency)592117
Node: Known bugs and planned improvements (concurrency)602348
Node: All solutions concurrent predicates603054
Node: Usage and interface (conc_aggregates)604030
Node: Documentation on exports (conc_aggregates)604542
Node: Known bugs and planned improvements (conc_aggregates)605489
Node: The socket interface605881
Node: Usage and interface (sockets)606593
Node: Documentation on exports (sockets)607349
Node: *** PART VII - Ciao Prolog extensions614309
Node: Pure Prolog package615173
Node: Usage and interface (pure)617122
Node: Known bugs and planned improvements (pure)617437
Node: Higher-order617816
Node: Usage and interface (hiord_rt)618151
Node: Documentation on exports (hiord_rt)618489
Node: Higher-order predicates619101
Node: Usage and interface (hiordlib)619818
Node: Documentation on exports (hiordlib)620201
Node: Terms with named arguments -records/feature terms621743
Node: Usage and interface (argnames)622534
Node: Documentation on new declarations (argnames)623082
Node: Other information (argnames)627071
Node: Using argument names in a toy database627523
Node: Complete code for the zebra example628860
Node: Known bugs and planned improvements (argnames)631844
Node: functions (library)632230
Node: Usage and interface (functions)632457
Node: global (library)633051
Node: Usage and interface (global)633325
Node: Documentation on exports (global)633742
Node: Independent and-parallel execution634396
Node: Usage and interface (andprolog)635336
Node: Documentation on internals (andprolog)635753
Node: Known bugs and planned improvements (andprolog)637622
Node: Andorra execution638424
Node: Usage and interface (andorra)640743
Node: Documentation on new declarations (andorra)641281
Node: Documentation on exports (andorra)642649
Node: Other information (andorra)644621
Node: Call on determinate645116
Node: Usage and interface (det_hook_rt)645844
Node: Documentation on exports (det_hook_rt)646350
Node: Documentation on internals (det_hook_rt)647511
Node: Other information (det_hook_rt)648037
Node: Known bugs and planned improvements (det_hook_rt)649071
Node: Miscellaneous predicates649550
Node: Usage and interface (odd)650058
Node: Documentation on exports (odd)650407
Node: Delaying predicates (freeze)652036
Node: Usage and interface (freeze)652670
Node: Documentation on exports (freeze)653126
Node: Documentation on multifiles (freeze)654162
Node: Delaying predicates (when)654652
Node: Usage and interface (when)656397
Node: Documentation on exports (when)656986
Node: Documentation on multifiles (when)658794
Node: Known bugs and planned improvements (when)659325
Node: Active modules (high-level distributed execution)659661
Ref: Active modules (high-level distributed execution)-Footnote-1666250
Node: Active module name servers666505
Node: Active modules as agents669264
Node: Usage and interface (actmods)669632
Node: Documentation on new declarations (actmods)670087
Node: Known bugs and planned improvements (actmods)670941
Node: Breadth-first execution672187
Node: Usage and interface (bf)673646
Node: Known bugs and planned improvements (bf)674031
Node: Iterative-deepening execution674294
Node: Usage and interface (id)677284
Node: Constraint programming over rationals677558
Node: Usage and interface (clpq)678262
Node: Other information (clpq)678595
Node: Some CLP(Q) examples678816
Node: Constraint programming over reals680950
Node: Usage and interface (clpr)681514
Node: Other information (clpr)681839
Node: Some CLP(R) examples682056
Node: Fuzzy Prolog685728
Node: Usage and interface (fuzzy)687991
Node: Documentation on new declarations (fuzzy)688930
Node: Documentation on exports (fuzzy)689657
Node: Other information (fuzzy)695558
Node: Known bugs and planned improvements (fuzzy)696807
Node: Object oriented programming697268
Node: Early examples698438
Node: Recommendations on when to use objects704824
Node: Limitations on object usage706436
Node: Declaring classes and interfaces706863
Node: Usage and interface (class)708038
Node: Documentation on new declarations (class)710050
Node: Documentation on exports (class)718511
Node: Other information (class)723427
Node: Class and Interface error reporting at compile time724441
Node: Class and Interface error reporting at run time734909
Node: Normal Prolog module system interaction735384
Node: Known bugs and planned improvements (class)736647
Node: Compile-time usage of objects736968
Node: Usage and interface (objects)737573
Node: Documentation on new declarations (objects)738441
Node: Other information (objects)742104
Node: Error reporting at compile time (objects)743337
Node: Error reporting at run time (objects)749266
Node: Run time usage of objects750234
Node: Usage and interface (objects_rt)751484
Node: Documentation on exports (objects_rt)752552
Node: Known bugs and planned improvements (objects_rt)763058
Node: The Ciao Remote Services Package763867
Node: Usage and interface (remote)764377
Node: Documentation on exports (remote)764783
Node: Known bugs and planned improvements (remote)766097
Node: *** PART VIII - Interfaces to other languages and systems766787
Node: Foreign Language Interface767571
Node: Declaration of Types769058
Node: Equivalence between Ciao Prolog and C types770740
Node: Equivalence between Ciao Prolog and C modes773016
Node: Custom access to Prolog from C774458
Node: Term construction776064
Node: Testing the Type of a Term779196
Node: Term navigation780645
Node: Testing for Equality and Performing Unification782529
Node: Raising Exceptions783675
Node: Calling Prolog from C784288
Node: Examples786443
Node: Mathematical functions786794
Node: Addresses and C pointers788209
Node: Lists of bytes and buffers789663
Node: Lists of integers791366
Node: Strings and atoms792669
Node: Arbitrary Terms794965
Node: Exceptions797288
Node: Usage and interface (foreign_interface)798716
Node: Foreign Language Interface Properties799117
Node: Usage and interface (foreign_interface_properties)799780
Node: Documentation on exports (foreign_interface_properties)800486
Node: Documentation on internals (foreign_interface_properties)803358
Node: Known bugs and planned improvements (foreign_interface_properties)808794
Node: Utilities for on-demand compilation of foreign files809193
Node: Usage and interface (foreign_compilation)810271
Node: Documentation on exports (foreign_compilation)810864
Node: Foreign Language Interface Builder812394
Node: Usage and interface (build_foreign_interface)812898
Node: Documentation on exports (build_foreign_interface)813917
Node: Interface to daVinci817322
Node: Usage and interface (davinci)818373
Node: Documentation on exports (davinci)819079
Node: Documentation on internals (davinci)820996
Node: The Tcl/Tk interface823142
Node: Usage and interface (tcltk)825075
Node: Documentation on exports (tcltk)825750
Node: Low level interface library to Tcl/Tk833135
Node: Usage and interface (tcltk_low_level)834147
Node: Documentation on exports (tcltk_low_level)834950
Node: Documentation on internals (tcltk_low_level)840714
Node: Other information (tcltk_low_level)841469
Node: The Tcl/Tk Class Interface844176
Node: Usage and interface (window_class)845047
Node: Documentation on exports (window_class)845860
Node: widget_class (library)849197
Node: Usage and interface (widget_class)849462
Node: Documentation on exports (widget_class)850514
Node: menu_class (library)864813
Node: Usage and interface (menu_class)865066
Node: Documentation on exports (menu_class)865817
Node: canvas_class (library)869300
Node: Usage and interface (canvas_class)869561
Node: Documentation on exports (canvas_class)870448
Node: button_class (library)876465
Node: Usage and interface (button_class)876733
Node: Documentation on exports (button_class)877219
Node: checkbutton_class (library)878140
Node: Usage and interface (checkbutton_class)878433
Node: Documentation on exports (checkbutton_class)878954
Node: radiobutton_class (library)879863
Node: Usage and interface (radiobutton_class)880155
Node: Documentation on exports (radiobutton_class)880676
Node: entry_class (library)881580
Node: Usage and interface (entry_class)881842
Node: Documentation on exports (entry_class)882478
Node: label_class (library)885110
Node: Usage and interface (label_class)885371
Node: Documentation on exports (label_class)885854
Node: menubutton_class (library)886172
Node: Usage and interface (menubutton_class)886458
Node: Documentation on exports (menubutton_class)886976
Node: menu_entry_class (library)887771
Node: Usage and interface (menu_entry_class)888057
Node: Documentation on exports (menu_entry_class)888656
Node: shape_class (library)890635
Node: Usage and interface (shape_class)890894
Node: Documentation on exports (shape_class)891455
Node: arc_class (library)893205
Node: Usage and interface (arc_class)893450
Node: Documentation on exports (arc_class)894003
Node: oval_class (library)898515
Node: Usage and interface (oval_class)898763
Node: Documentation on exports (oval_class)899290
Node: poly_class (library)902023
Node: Usage and interface (poly_class)902272
Node: Documentation on exports (poly_class)902766
Node: line_class (library)904371
Node: Usage and interface (line_class)904620
Node: Documentation on exports (line_class)905111
Node: text_class (library)906793
Node: Usage and interface (text_class)907056
Node: Documentation on exports (text_class)907606
Node: The PiLLoW Web programming library911064
Node: Installing PiLLoW912215
Node: Usage and interface (pillow)913100
Node: HTML/XML/CGI programming913564
Node: Usage and interface (html)914296
Node: Documentation on exports (html)915248
Node: Documentation on multifiles (html)923150
Node: Other information (html)923704
Node: HTTP conectivity924089
Node: Usage and interface (http)924547
Node: Documentation on exports (http)925046
Node: PiLLoW types926133
Node: Usage and interface (pillow_types)926505
Node: Documentation on exports (pillow_types)927140
Node: Persistent predicate database943773
Node: Introduction to persistent predicates944704
Node: Persistent predicates946822
Node: Using file-based persistent predicates950001
Node: Implementation Issues952068
Node: Defining an initial database953912
Node: Using persistent predicates from the top level954381
Node: Usage and interface (persdbrt)955069
Node: Documentation on exports (persdbrt)956481
Node: Documentation on multifiles (persdbrt)961929
Node: Documentation on internals (persdbrt)963168
Node: Known bugs and planned improvements (persdbrt)964781
Node: Using the persdb library965169
Node: An example of persistent predicates (static version)965869
Node: An example of persistent predicates (dynamic version)966735
Node: A simple application / a persistent queue967542
Node: SQL persistent database interface968928
Node: Implementation of the Database Interface970936
Node: Example(s)972881
Node: Usage and interface (persdbrt_mysql)976397
Node: Documentation on exports (persdbrt_mysql)978116
Node: Documentation on multifiles (persdbrt_mysql)987292
Node: Documentation on internals (persdbrt_mysql)988757
Node: Known bugs and planned improvements (persdbrt_mysql)993921
Node: Prolog to SQL translator994578
Node: Usage and interface (pl2sql)997234
Node: Documentation on exports (pl2sql)997941
Node: Documentation on multifiles (pl2sql)1003999
Node: Documentation on internals (pl2sql)1006489
Node: Known bugs and planned improvements (pl2sql)1013356
Node: Low-level socket interface to SQL/ODBC databases1013652
Node: Usage and interface (mysql_client)1014282
Node: Documentation on exports (mysql_client)1015160
Node: Types for the Low-level interface to SQL databases1016669
Node: Usage and interface (db_client_types)1017133
Node: Documentation on exports (db_client_types)1017713
Node: *** PART IX - Abstract data types1019750
Node: counters (library)1020136
Node: Usage and interface (counters)1020414
Node: Documentation on exports (counters)1020802
Node: Identity lists1021281
Node: Usage and interface (idlists)1021681
Node: Documentation on exports (idlists)1022140
Node: Lists of numbers1023921
Node: Usage and interface (numlists)1024214
Node: Documentation on exports (numlists)1024800
Node: Pattern (regular expression) matching1027371
Node: Usage and interface (patterns)1027876
Node: Documentation on exports (patterns)1028519
Node: Graphs1031603
Node: Usage and interface (graphs)1032014
Node: Documentation on exports (graphs)1032601
Node: Documentation on internals (graphs)1035692
Node: Unweighted graph-processing utilities1036085
Node: Usage and interface (ugraphs)1037280
Node: Documentation on exports (ugraphs)1037966
Node: wgraphs (library)1040008
Node: Usage and interface (wgraphs)1040369
Node: Documentation on exports (wgraphs)1040824
Node: Labeled graph-processing utilities1041128
Node: Usage and interface (lgraphs)1041529
Node: Documentation on exports (lgraphs)1042069
Node: queues (library)1042519
Node: Usage and interface (queues)1042789
Node: Documentation on exports (queues)1043170
Node: Random numbers1043722
Node: Usage and interface (random)1044151
Node: Documentation on exports (random)1044510
Node: sets (library)1045355
Node: Usage and interface (sets)1045757
Node: Documentation on exports (sets)1046526
Node: Variable name dictionaries1050350
Node: Usage and interface (vndict)1050775
Node: Documentation on exports (vndict)1051521
Node: *** PART X - Miscellaneous standalone utilities1055245
Node: A Program to Help Cleaning your Directories1055798
Node: Usage (cleandirs)1056387
Node: Known bugs and planned improvements (cleandirs)1057894
Node: Printing the declarations and code in a file1058264
Node: Usage (fileinfo)1059269
Node: More detailed explanation of options (fileinfo)1060028
Node: Printing the contents of a bytecode file1061377
Node: Usage (viewpo)1061981
Node: Crossed-references of a program1062279
Node: Gathering the dependent files for a file1064695
Node: Usage (get_deps)1065635
Node: Finding differences between two Prolog files1066054
Node: Usage (pldiff)1066711
Node: Known bugs and planned improvements (pldiff)1067175
Node: The Ciao lpmake scripting facility1067615
Node: General operation1069917
Node: lpmake usage1071933
Node: Acknowledgments (lpmake)1073314
Node: Find out which architecture we are running on1073570
Node: Usage (ciao_get_arch)1074351
Node: More details1074602
Node: *** PART XI - Contributed libraries1074784
Node: Programming MYCIN rules1075197
Node: Usage and interface (mycin)1076357
Node: Documentation on new declarations (mycin)1076833
Node: Known bugs and planned improvements (mycin)1077869
Node: A Chart Library1078366
Node: Bar charts1079818
Ref: Bar charts-Footnote-11085167
Node: Line graphs1085309
Node: Scatter graphs1088317
Node: Tables1091335
Node: Overview of widgets1092907
Node: Usage and interface (chartlib)1096439
Node: Documentation on exports (chartlib)1097133
Node: Low level Interface between Prolog and blt1102552
Node: Usage and interface (bltclass)1103213
Node: Documentation on exports (bltclass)1103875
Node: chartlib_errhandle (library)1104997
Node: Usage and interface (chartlib_errhandle)1105636
Node: Documentation on exports (chartlib_errhandle)1106247
Node: Documentation on internals (chartlib_errhandle)1107196
Node: Color and Pattern Library1107942
Node: Usage and interface (color_pattern)1108323
Node: Documentation on exports (color_pattern)1108994
Node: genbar1 (library)1113406
Node: Usage and interface (genbar1)1115128
Node: Documentation on exports (genbar1)1115846
Node: Documentation on internals (genbar1)1121936
Node: genbar2 (library)1123804
Node: Usage and interface (genbar2)1125495
Node: Documentation on exports (genbar2)1126177
Node: genbar3 (library)1129986
Node: Usage and interface (genbar3)1131051
Node: Documentation on exports (genbar3)1131675
Node: Documentation on internals (genbar3)1133615
Node: genbar4 (library)1135189
Node: Usage and interface (genbar4)1136271
Node: Documentation on exports (genbar4)1136896
Node: Documentation on internals (genbar4)1139183
Node: gengraph1 (library)1140408
Ref: gengraph1 (library)-Footnote-11143118
Node: Usage and interface (gengraph1)1143223
Node: Documentation on exports (gengraph1)1144084
Node: gengraph2 (library)1153132
Ref: gengraph2 (library)-Footnote-11155330
Node: Usage and interface (gengraph2)1155427
Node: Documentation on exports (gengraph2)1156173
Node: genmultibar (library)1162287
Node: Usage and interface (genmultibar)1165095
Node: Documentation on exports (genmultibar)1165734
Node: Documentation on internals (genmultibar)1167930
Node: table_widget1 (library)1169857
Node: Usage and interface (table_widget1)1170433
Node: Documentation on exports (table_widget1)1171091
Node: Documentation on internals (table_widget1)1172985
Node: table_widget2 (library)1174065
Node: Usage and interface (table_widget2)1174661
Node: Documentation on exports (table_widget2)1175294
Node: table_widget3 (library)1176841
Node: Usage and interface (table_widget3)1177471
Node: Documentation on exports (table_widget3)1178104
Node: table_widget4 (library)1179229
Node: Usage and interface (table_widget4)1179834
Node: Documentation on exports (table_widget4)1180467
Node: test_format (library)1182298
Node: Usage and interface (test_format)1183180
Node: Documentation on exports (test_format)1183829
Node: ProVRML - a Prolog interface for VRML1186080
Node: Usage and interface (provrml)1187647
Node: Documentation on exports (provrml)1188496
Node: Documentation on internals (provrml)1193854
Node: boundary (library)1194466
Node: Usage and interface (boundary)1194895
Node: Documentation on exports (boundary)1195613
Node: dictionary (library)1198004
Node: Usage and interface (dictionary)1198400
Node: Documentation on exports (dictionary)1199003
Node: dictionary_tree (library)1200993
Node: Usage and interface (dictionary_tree)1201464
Node: Documentation on exports (dictionary_tree)1202285
Node: error (library)1206166
Node: Usage and interface (error)1206540
Node: Documentation on exports (error)1206893
Node: field_type (library)1207882
Node: Usage and interface (field_type)1208172
Node: Documentation on exports (field_type)1208541
Node: field_value (library)1209044
Node: Usage and interface (field_value)1209350
Node: Documentation on exports (field_value)1209899
Node: field_value_check (library)1210304
Node: Usage and interface (field_value_check)1210633
Node: Documentation on exports (field_value_check)1211307
Node: generator (library)1211748
Node: Usage and interface (generator)1212003
Node: Documentation on exports (generator)1212728
Node: generator_util (library)1213630
Node: Usage and interface (generator_util)1213902
Node: Documentation on exports (generator_util)1214866
Node: internal_types (library)1218681
Node: Usage and interface (internal_types)1219175
Node: Documentation on exports (internal_types)1219669
Node: io (library)1222793
Node: Usage and interface (io)1223131
Node: Documentation on exports (io)1223797
Node: lookup (library)1226479
Node: Usage and interface (lookup)1226741
Node: Documentation on exports (lookup)1227935
Node: parser (library)1235465
Node: Usage and interface (parser)1235691
Node: Documentation on exports (parser)1236399
Node: parser_util (library)1237361
Node: Usage and interface (parser_util)1237609
Node: Documentation on exports (parser_util)1239360
Node: possible (library)1258930
Node: Usage and interface (possible)1259213
Node: Documentation on exports (possible)1259652
Node: tokeniser (library)1259945
Node: Usage and interface (tokeniser)1260240
Node: Documentation on exports (tokeniser)1260746
Node: *** PART XII - Appendices1261808
Node: Installing Ciao from the source distribution1262224
Node: Un*x installation summary1263584
Node: Un*x full installation instructions1268875
Node: Checking for correct installation on Un*x1280443
Node: Cleaning up the source directory1283762
Node: Multiarchitecture support1284511
Node: Installation and compilation under Windows1287020
Node: Porting to currently unsupported operating systems1290101
Node: Troubleshooting (nasty messages and nifty workarounds)1292979
Node: Installing Ciao from a Win32 binary distribution1299537
Node: Win32 binary installation summary1300925
Node: Checking for correct installation on Win321305935
Node: Compiling the miscellaneous utilities under Windows1310229
Node: Server installation under Windows1310879
Node: CGI execution under IIS1311847
Node: Uninstallation under Windows1312491
Node: Beyond installation1313446
Node: Architecture-specific notes and limitations1313960
Node: Keeping up to date with the Ciao users mailing list1315434
Node: Downloading new versions1316468
Node: Reporting bugs1316918
Node: References1317904
Node: Library/Module Definition Index1334799
Node: Predicate/Method Definition Index1346539
Node: Property Definition Index1423774
Node: Regular Type Definition Index1430243
Node: Declaration Definition Index1443564
Node: Concept Definition Index1448962
Node: Global Index1473874

End Tag Table
