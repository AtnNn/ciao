#!/usr/bin/env ciao-shell
% -*- mode: ciao; -*-

:- use_package(assertions).
:- use_package(fsyntax).

:- doc(title, "Update Ciao Website").
:- doc(author, "Jose F. Morales").

:- doc(module, "This module implements a script for the updating (and
   generation) of Ciao website").

:- use_module(library(terms), [atom_concat/2]).
:- use_module(library(llists), [flatten/2]).
:- use_module(library(strings), [write_string/1]).

% ---------------------------------------------------------------------------
% The directory where this program lives (extracted using argv[0])

% TODO: Equivalent to get_mydir in my bash scripts, uses

:- data self_dir/1.

compute_self_dir :-
	( current_fact(self_dir(_)) ->
	    true
	; current_prolog_flag(argv, [X|_]),
	  absolute_file_name(X,'','','.',_,_,C) ->
	  assertz_fact(self_dir(C))
	).

% ---------------------------------------------------------------------------
% Some configuration paths

:- data param/2.

set_param(Param, Value) :-
	retractall_fact(param(Param, _)),
	assertz_fact(param(Param, Value)).

get_param(Param, Value) :-
	current_fact(param(Param, Value)).

% Setup variables for a given distribution type
setup_site_type(SiteType) :-
	% Values of CLIPDIST:
	%   yes - install in clip machine
	%   no  - do a personal instalation
	( SiteType = 'official' ->
	    set_param(official_site, yes),
	    set_param(remove_old_packages, yes),
	    set_param(fetch_new_packages, yes)
	; SiteType = 'testing-nofetch' ->
	    set_param(official_site, no),
	    set_param(remove_old_packages, no),
	    set_param(fetch_new_packages, no)
	; SiteType = 'testing' ->
	    set_param(official_site, no),
	    set_param(remove_old_packages, no),
	    set_param(fetch_new_packages, yes)
	; SiteType = 'personal' ->
	    set_param(official_site, no),
	    set_param(remove_old_packages, no),
	    set_param(fetch_new_packages, yes)
	; error(['Unknown site_type value ', SiteType]),
	  fail
	),
	%
	compute_ciaodir,
	compute_website_params,
	%
	set_param(websitedir, ~atom_concat(~get_param(ciaodir), '/website')),
	set_param(settings, ~atom_concat(~get_param(ciaodir), '/website/SETTINGS')),
	set_param(settings_pl, ~atom_concat(~get_param(ciaodir), '/website/SETTINGS.pl')),
	set_param(settings_skel_pl, ~atom_concat(~get_param(ciaodir), '/website/SETTINGS_skel.pl')).

compute_website_params :- get_param(official_site, yes), !,
	note(['Preparing an official website']),
	note(['(assuming a working local installation)']),
	% Settings for a installation in the clip machine (using latest working sources)
	% Where the web pages will go
	% TODO: Extract from configure!
	set_param(disthtmldir, '/home/ciao/srv/www'),
	set_param(disthtmlurl, '').
compute_website_params :-
	note(['Preparing a local website']),
	note(['(assuming a working local installation)']),
	% Settings for a personal installation from current sources
	set_param(disthtmldir, ~fixed_absolute_file_name('$HOME/public_html/ciao')),
	( get_param(disttype, personal) ->
	    current_env('USER', User),
	    set_param(disthtmlurl, ~atom_concat(['/~', User, '/ciao/']))
	; Home = ~fixed_absolute_file_name('$HOME'),
	  set_param(disthtmlurl, ~atom_concat(['file://', Home, '/public_html/ciao/']))
	).

% ---------------------------------------------------------------------------
% Abstraction of external commands (not written in Prolog or executed
% from different processes)

cmd_execname(lpdoc, X) :-
	X = ~atom_concat([~get_param(ciaodir), '/build/bin/lpdoc']).
cmd_execname(ciaoc, X) :-
	X = ~atom_concat([~get_param(ciaodir), '/build/bin/ciaoc']).
cmd_execname(lpdist, X) :-
	X = ~atom_concat([~get_param(ciaodir), '/website/lpdist']).

cmd_srcname(lpdist, X) :-
	X = ~atom_concat([~get_param(ciaodir), '/website/lpdist.pl']).

compute_ciaodir :-
	fixed_absolute_file_name(~atom_concat(~self_dir, '/..'), CiaoDir),
	set_param(ciaodir, CiaoDir).

% ---------------------------------------------------------------------------

% Update the pbundle local storage

% TODO: packages for branches (including stable versions) are not
%       removed or fetched! I dare doing that automatically, I prefer
%       doing if by hand at this moment... (JFMC)

:- use_module(library(system), [working_directory/2]).

update_local_pbundle_storage :-
	working_directory(Old, ~get_param(websitedir)),
	update_local_pbundle_storage_,
	working_directory(_, Old).

update_local_pbundle_storage_ :-
	% Compile lpdist
	invoke_cmd(ciaoc, [~cmd_srcname(lpdist)]),
	%
	( get_param(remove_old_packages, yes) ->
	    Branch = master,
	    DirsToRemove = ~invoke_cmd_to_atm(lpdist, ['wipe-list ', Branch])
	; DirsToRemove = ''
	),
	( DirsToRemove = '' ->
	    message(['No outdated pbundle found'])
	; message(['Deleting ', DirsToRemove]),
	  % TODO: Check that DirsToRemove is correct, then enable this code
	  message(['DO THIS: ', 'rm -rf ', DirsToRemove])
	),
        %
        ( get_param(fetch_new_packages, yes) ->
	    message(['Fetching new packages']),
	    invoke_cmd(lpdist, ['fetch-latest'])
	; true
	).

% ---------------------------------------------------------------------------
% Create the distribution

% A replace string filter that works for any combination of ':' and
% '/' characters.
% TODO: the whole program could be simplified so that this is not necessary

:- use_module(library(system_extra), [replace_params_in_file/3]).

% Patch SETTINGS_skel.pl
patch_lpsettings :-
	DistOwner = ~do_str_without_nl(['id -nu'], exception),
	DistGroup = ~do_str_without_nl(['id -ng'], exception),
	replace_params_in_file(
            ['DistOwner' = DistOwner,
	     'DistGroup' = DistGroup,
	     'DistHtmlDir' = ~get_param(disthtmldir),
	     'DistHtmlURL' = ~get_param(disthtmlurl),
	     'WebsiteDir' = ~self_dir],
	    ~get_param(settings_skel_pl), ~get_param(settings_pl)).

% ---------------------------------------------------------------------------

:- use_module(library(system), [working_directory/2]).

% Update the website
update_website :-
	do(['mkdir -p ', ~get_param(disthtmldir)], exception),
	working_directory(Old, ~get_param(disthtmldir)),
	% Do not do a realclean or you will lose any stored documentation 
	invoke_cmd(lpdoc, ['-f ', ~get_param(settings), ' realclean']), % TEMPORAL?
	invoke_cmd(lpdoc, ['-f ', ~get_param(settings), ' clean']), % TEMPORAL?
	invoke_cmd(lpdoc, ['-f ', ~get_param(settings), ' all']),
	working_directory(_, Old).

view_website :-
	working_directory(Old, ~get_param(disthtmldir)),
	invoke_cmd(lpdoc, ['-f ', ~get_param(settings), ' view']),
	working_directory(_, Old).

% ---------------------------------------------------------------------------

help :-
	current_prolog_flag(argv, [Arg0|_]),
	basename(Arg0, Basename),
	write_string(~flatten([
          "Usage: ", ~atom_codes(Basename),
	  " [personal|testing|testing-nofetch|official] [view]\n\n"
        ])),
	halt(1). % Exit with error status

% ---------------------------------------------------------------------------

% TODO: Implement 'fake fetch'

main([]) :- !, help.
main(['--help']) :- !, help.
main([Arg|Args]) :-
	compute_self_dir,
	setup_site_type(Arg),
	patch_lpsettings,
	( Args = [view] ->
	    view_website
	; update_local_pbundle_storage,
	  update_website
	).

% ===========================================================================
:- doc(section, "Auxiliary").

:- doc(subsection, "System Extra").

:- use_module(library(system_extra), [do/2, do_str_without_nl/3]).

invoke_cmd(Cmd, Args) :-
	cmd_execname(Cmd, Exec),
	do([Exec, ' '|Args], exception).

invoke_cmd_to_atm(Cmd, Args, R) :-
	cmd_execname(Cmd, Exec),
	do_str_without_nl([Exec, ' '|Args], exception, String),
	atom_codes(R, String).

:- doc(subsection, "Filesystem Abstraction").

% TODO: There is a problem with absolute_file_name/?, reported by
% Paulo Moura (it duplicates the last name -- this is necessary for
% locating modules but really strange for the end user).
fixed_absolute_file_name(X, Y) :-
	Dummy = '/(((...D-U-M-M-Y...)))',
	atom_concat(X, Dummy, X1),
	absolute_file_name(X1, Y1),
	atom_concat(Y, Dummy, Y1).

% TODO: Implement
basename(Path, Last) :-
	do_str_without_nl(['basename ', Path], exception, S),
	atom_codes(Last, S).

