[WARNING: do not edit, file automatically generated by lpdoc/texinfo]
 
INSTALL
*******

   This describes the installation procedure for the Ciao Prolog
system, including libraries and manuals. Please read *Note Un*x
installation summary:: and *Note Un*x full installation
instructions:: for the installation procedures from sources on Un*x
(Linux, SunOS, Solaris, etc.) machines. Windows NT/95/98 users are
referred to *Note Installation and compilation under Windows:: and
*Note Windows installation from the precompiled distribution::.

   If you find any problems during installation, please refer to
*Note Troubleshooting (nasty messages and nifty workarounds)::.  See
also *Note Downloading new versions:: and *Note Reporting bugs::.

Un*x installation summary
=========================

   *Note:* it is recommended that you read the full installation
instructions (specially if the installation will be shared by
different architectures). However, in many cases it suffices to
follow this summary:

  1. Uncompress and unpackage (using `gunzip' and `tar -xpf') the
     distribution. This will put everyting in a new directory whose
     name reflects the Ciao version.

  2. Enter the newly created directory (`SRC'). Edit `SETTINGS' and
     check/set the variables `SRC', `BINROOT' (where the executables
     will go), `LIBROOT' (where the libraries will go), and `DOCROOT'
     (where the documentation will go, preferably a directory
     *accessible via* WWW).

  3. Type `gmake install'. This will build executables, compile
     libraries, and install everything in a directory `LIBROOT/ciao'
     and in `BINROOT'.

     Note that `gmake' refers to the GNU implementation of the make
     Un*x command, which is available in many systems (including all
     Linux systems) simply as `make'. I.e., you can try simply typing
     `make install' if `gmake install' does not work. If typing
     `make' stops right away with error messages it is probably an
     older version and you need to install `gmake'.

  4. Make the following modifications in your startup scripts. If you
     are installing Ciao globally in a multi-user machine, make sure
     that you instruct all users to do the same. This will make the
     documentation accessible, set the correct mode when opening Ciao
     source files in `emacs', etc. (<LIBROOT> must be replaced by the
     appropriate value):

        * For users a *csh-compatible shell* (`csh', `tcsh', ...),
          add to `~/.cshrc':

                       if ( -e <LIBROOT>/ciao/DOTcshrc ) then
                          source <LIBROOT>/ciao/DOTcshrc
                       endif

        * For users of an *sh-compatible shell* (`sh', `bash', ...),
          add to `~/.profile':

                       if [ -f <LIBROOT>/ciao/DOTprofile ]; then
                          . <LIBROOT>/ciao/DOTprofile
                       fi

          This will set up things so that the Ciao executables are
          found and you can access the Ciao system manuals using the
          `info' command.

        * Also, if you use `emacs' (highly recommended) add this line
          to your `~/.emacs' file:

                       (load-file "<LIBROOT>/ciao/DOTemacs")

     If you are the system administrator, the previous steps can be
     done once and for all, and globally for all users by including
     the lines above in the central startup scripts (e.g., in Linux
     `/etc/cshrc'/`/etc/csh.cshrc', `/etc/bashrc',
     `/usr/share/emacs/.../lisp/site-init.pl', etc.).

  5. Downloading the emacs editor, if it is not available in the
     system, is highly recommended (see *Note Un*x full installation
     instructions::).

  6. You may want to read now *Note Checking for correct
     installation:: and the documentation, which is stored in
     `DOCROOT' (copied from `SRC/doc/reference') and can be easily
     accessed as explained in that same section.

  7. If you have any problems you may want to check the rest of the
     instructions. The system can be *uninstalled* by typing `gmake
     uninstall'.


Un*x full installation instructions
===================================

  1. *Uncompress and unpackage:* (using `gunzip' and `tar -xpf') the
     distribution in a suitable directory. This will create a new
     directory called `ciao-X.Y', where `X.Y' is the version number
     of the distribution. The `-p' option in the `tar' command
     ensures that the relative dates of the files in the package are
     preserved, which is needed for correct operation of the
     Makefiles.

  2. *Select Installation Options:* Edit the file `SETTINGS' and set
     the following variables:

        * `SRC': directory where the sources are stored.

        * `BINROOT': directory where the Ciao executables will go.
          For example, if `BINROOT=/usr/local/bin', then the Ciao
          compiler (`ciaoc') will be stored at `/usr/local/bin/ciaoc'
          (actually, it will be a link to `ciaoc-'*VersionNumber*
          -this applies also to other executables below and is done
          so that several versions can coexist).

        * `LIBROOT': directory where the run-time libraries will be
          installed.  The Ciao installation procedure will create a
          new subdirectory `ciao' below `LIBROOT' and a subdirectory
          below this one for each Ciao version installed. For
          example, if `LIBROOT=/usr/local/lib' and you have Ciao
          version `x.y', then the libraries will be installed under
          `/usr/local/lib/ciao/ciao-x.y'. This allows you to install
          site-specific programs under `/usr/local/lib/ciao' and they
          will not be overwritten if a new version of Ciao is
          installed. It also allows having several Ciao versions
          installed simultaneously (the *last one installed* will be
          used by default when typing `ciao').

        * `DOCROOT': directory where the manuals will be installed.
          It is often convenient of this directory is accessible via
          WWW (`DOCROOT=/home/httpd/html/ciao', or something like
          that).

     For network-based installations, it is of *utmost importance*
     that the paths given be reachable in all the networked machines.
     Different machines with different architectures can share the
     same physical `SRC' directory during installation, since
     compilations for different architectures take place in dedicated
     subdirectories. Also, different machines/architectures can share
     the same `LIBROOT' directory. This saves space since the
     architecture independent libraries will be shared. See *Note
     Multiarchitecture support:: below.

  3. *Compile Ciao:* At the ciao top level directory type `gmake all'.

     *Important:* use GNU make (`gmake'), not the standard UNIX make,
     as the latter does not support some features used during the
     compilation. It does not matter if the name of the executable is
     `make' or `gmake': only make sure that it is GNU make.

     This will:

        * Build an engine in `$(SRC)/bin/$(CIAOARCH)', where
          `$(CIAOARCH)' depends on the architecture. The engine is
          the actual interpreter of the low level code into which
          Ciao Prolog programs are compiled.

        * Build a new Ciao standalone compiler (`ciaoc'), with the
          default paths set for your local configuration
          (nonetheless, these can be overridden by environment
          variables, as described below).

        * Precompile all the libraries under `$(SRC)/lib' and
          `$(SRC)/library' using this compiler.

        * Compile a toplevel Prolog shell and a shell for Prolog
          scripts, under the `$(SRC)/shell' directory.

        * Compile some small, auxiliary applications (contained in
          the `etc' directory, and documented in the part of the
          manual on 'Miscellaneous Standalone Utilities').

     This step can be repeated successively for several architectures
     in the same source directory. Only the engine and some small
     parts of the libraries (those written in C) differ from one
     architecture to the other. Standard Ciao Prolog code compiles
     into bytecode object files (`.po') and/or executables which are
     portable among machines of different architecture, provided
     there is an executable engine accessible in every such machine.
     See more details below under *Note Multiarchitecture support::.

  4. *Check compilation:* If the above steps have been satisfactorily
     finished, the compiler has compiled itself and all the
     distribution modules, and very probably everything is fine. To
     further check this before final installation you can type `gmake
     test', which will compile and execute a small program containing
     several tests.

  5. *Install Ciao:* To install Ciao in the directories selected in
     the file `SETTINGS' during step 2 above, type `gmake
     justinstall'. This will:

        * Install the executables of the Ciao program development
          tools (i.e., the general driver/top-level `ciao', the
          standalone compiler `ciaoc', the script interpreter
          `ciao-shell', miscellaneous utilities, etc.) in `BINROOT'
          (see below). In order to use these tools, the `PATH'
          environment variable of users needs to contain the path
          `BINROOT'.

        * Install the Ciao libraries under `LIBROOT/ciao' (these will
          be automatically found).

        * Install under `DOCROOT' the Ciao manuals in several formats
          (such as GNU `info', `html', `postscript', etc.), depending
          on the distribution. In order for these manuals to be found
          when typing `M-x info' within `emacs', or by the standalone
          `info' and `man' commands, the `MANPATH' and `INFOPATH'
          environment variables of users both need to contain the
          path `DOCROOT'.

        * Install under `LIBROOT/ciao' the Ciao GNU `emacs' interface
          (`ciao.el', which provides an interactive interface to the
          Ciao program development tools, as well as some other
          auxiliary files) and a file `DOTemacs' containing the
          `emacs' initialization commands which are needed in order
          to use the Ciao `emacs' interface.

  6. *Set up user environments:* In order to automate the process of
     setting the variables above, the installation process leaves the
     files `LIBROOT/ciao/DOTcshrc' (for `csh'-like shells),
     `LIBROOT/ciao/DOTprofile' (for `sh'-like shells), and
     `LIBROOT/ciao/DOTemacs' (for emacs) with appropriate definitions
     which will take care of all needed environment variable
     definitions and emacs mode setup. Thus, if you are installing in
     a multi-user machine, make sure that you instruct all users to
     make the following modifications in their startup scripts or
     that you follow these instructions yourself if you are
     installing Ciao only for your personal use (<LIBROOT> must be
     replaced by the appropriate value):

        * For users a *csh-compatible shell* (`csh', `tcsh', ...),
          add to `~/.cshrc':

                       if ( -e <LIBROOT>/ciao/DOTcshrc ) then
                          source <LIBROOT>/ciao/DOTcshrc
                       endif

        * For users of an *sh-compatible shell* (`sh', `bash', ...),
          add to `~/.profile':

                       if [ -f <LIBROOT>/ciao/DOTprofile ]; then
                          . <LIBROOT>/ciao/DOTprofile
                       fi

          This will set up things so that the Ciao executables are
          found and you can access the Ciao system manuals using the
          `info' command.

        * Also, if you use `emacs' (highly recommended) add this line
          to your `~/.emacs' file:

                       (load-file "<LIBROOT>/ciao/DOTemacs")

     If you are the system administrator, the previous steps can be
     done once and for all, and globally for all users by including
     the lines above in the central startup scripts (e.g., in Linux
     `/etc/cshrc'/`/etc/csh.cshrc', `/etc/bashrc',
     `/usr/share/emacs/.../lisp/site-init.pl', etc.).

  7. *Download and install Emacs (optional):* If the `emacs' editor
     is not available in your system, its installation is highly
     recommended (if you are installing in a multi-user machine, you
     may want to do it in a general area so that it is available for
     other users, even if you do not use it yourself).

     The emacs editor (in all its versions: Un*x, Windows, etc.) can
     be donloaded from, for example, `http://www.emacs.org/', and
     also from the many GNU mirror sites worldwide (See
     `http://www.gnu.org/' for a list), in the `gnu/emacs' and
     `gnu/windows/emacs' directories. For example, at UPM it can be
     found at `ftp://ftp.fi.upm.es/pub/mirrors/gnu/emacs' and
     `ftp://ftp.fi.upm.es/pub/mirrors/gnu/windows/emacs'.

  8. *Check installation:* You may want to read now *Note Checking
     for correct installation:: and the documentation, which is
     stored in `DOCROOT' (copied from `SRC/doc/reference') and can be
     easily accessed as explained that same section.


   Other useful `make' targets are listed at the beginning of
`$(SRC)/Makefile'.

   If you have any problems you may want to check *Note
Troubleshooting (nasty messages and nifty workarounds)::.

   The system can be *uninstalled* by typing `gmake uninstall' in the
top directory (the variables in `SETTINGS' should have the same value
as when the install was performed, so that the same directories are
cleaned).

Installation and compilation under Windows
==========================================

   There are two possibilities in order to install Ciao Prolog on
Windows NT/95/98 machines:

   * Installing from the Windows *precompiled* distribution. This is
     the easiest since it requires no compilation and is highly
     recommended.

   * Installing the standard Ciao Prolog (Un*x) system source
     distribution and compiling it under Windows. This is somewhat
     more complex and currently requires the (freely available)
     Cygnus Win32 development libraries.

   The two procedures are described in the following sections.

Windows installation from the precompiled distribution
======================================================

   This describes the installation of Ciao after downloading the
Windows *precompiled* distribution. This is the simplest Windows
installation, since it requires no compilation and is highly
recommended.

Installation of the precompiled distribution
--------------------------------------------

   Please follow these steps (below we use the terms *folder* and
*directory* interchangeably):

  1. Download the precompiled distribution and unpack it into any
     suitable folder, such as, e.g., `C:\Program Files' (this will
     create there a folder whose name reflects the Ciao version). Due
     to limitations of Windows related to file associations, do not
     put Ciao too deep in the folder hierarchy. For unpacking you
     will need a recent version of a zip archive manager - there are
     many freely available such as `unzip', `pkunzip', `WinZip',
     etc.). If you have a previous version of Ciao installed, make
     sure you do not have any Ciao applications (including, e.g., a
     toplevel shell) running, or the extraction process may not be
     able to complete. You may want to delete the entire folder of
     the previous installation to save space.

  2. Run (e.g. by double-clicking on it) the `install'(`.bat')
     script. This will update the windows registry (the file
     `ciao.reg' lists the additions) and also create some `.bat'
     files for running Ciao executables from the command line. It
     also creates initialization scripts for the `emacs' editor.
     After that, you may need to reboot for the changes in the
     registry to take effect.

  3. You may want to add a *windows shortcut* in a convenient place,
     such as the desktop, to `ciaosh.cpx', the standard interactive
     toplevel shell. It is located inside the `shell' folder (e.g.,
     click on the file `ciaosh.cpx' with the right mouse button and
     select the appropriate option, `Send to->Desktop as shortcut').

  4. You may also want to add another shortcut to the file
     `ciao.html' located inside `doc\reference\ciao_html\ciao.html'
     so that you can open the Ciao manual by simply double-clicking
     on this shortcut.


Getting started after Windows installation
------------------------------------------

   The actions and registry changes performed by the installation
procedure, in addition to setting icons for ciao-related file types,
make several other things possible:

   * Double-clicking on the shortcut made above to `ciao.html' should
     show the Ciao manual in your default WWW browser. The
     `doc\reference' folder contains the manual also in the other
     formats present in the distribution, such as `info' (very
     convenient for users of the `emacs' editor/program development
     system) and `postscript' or `pdf', which are specially useful
     for printing, using an application such as `ghostview' (freely
     available from `http://www.cs.wisc.edu/~ghost/index.html') or
     `acrobat reader' (`http://www.adobe.com') respectively.

   * It is possible to run any Ciao executable (ending in `.cpx') by
     double-clicking on it. For example, you can try starting this
     way `ciaosh.cpx', from inside the shell folder or from the
     shortcut created above.

   * Once the shell is started, you can load and execute Prolog
     modules inside the interactive toplevel shell in the standard
     way (e.g., type `use_module(*file*).',
     `use_module(library(*file*)).' for library modules,
     `ensure_loaded(*file*).' for files which are not modules, and
     `use_package(*file*).' for library packages).

     For example, you may want to type `use_package(iso)' to ensure
     Ciao has loaded all the iso builtins (whether this is done by
     default or not depends on your `.ciaorc' file). Do not worry
     about any 'module already in executable messages' -these are
     normal and simply mean that a certain module is already
     pre-loaded in the toplevel shell. At this point, typing
     `write(hello).' should work.

   * To change the working directory to, say, the `tests' directory,
     first do:

              :- use_module(library(system)).

     (loading the `system' library makes a number of system-related
     predicates such as `cd/1' accessible) and then:

              :- cd('$/tests').

     (in Ciao the sequence `$/' *at the beginning of a path name* is
     replaced by the path of the Ciao root directory).

   * Executables can be generated from the toplevel shell (using
     `make_exec/2') or using the standalone compiler (`ciaoc.cpx',
     located in the `ciaoc' folder). To be able to make an
     executable, the file should define the predicate `main/1' (or
     `main/0'), which will be called upon startup (see the
     corresponding manual section for details).

     For example, within the `tests' directory, you can type:

              :- make_exec(hw,_).

     which should produce an executable. Double-clicking on this
     executable should execute it.

   * The Ciao toplevel can be made to execute upon startup a number
     of commands (such as, e.g., loading certain files or setting
     certain Prolog flags) contained in an initialization file. This
     file should be called `.ciaorc' and placed in your *home* folder
     (e.g., the same in which you put your `.emacs' file). You need
     to set the environment variable `HOME' to the path of this
     folder for the Ciao toplevel shell to be able to locate this
     file on startup.

   * To exit the top level shell, type `halt.' as usual, or <^Z>.

   * Another way of creating Ciao executables from source files is by
     right-clicking on `.pl' files and choosing "make executable".
     This also uses the standalone compiler.

   * Double-clicking on files ending in `.pls', "ciao prolog
     scripts", will also execute them. These are files containing
     Prolog source but which get executed without having to
     explicitly compile them (in the same way as, e.g., `.bat'
     files). As an example, you can double click on the file `hw.pls'
     in the `tests' folder and look at the source with an editor. You
     can try changing the `Hello world' message and double-clicking
     again.

     As you can see, the file should define the predicate `main/1',
     which will be called upon startup. The two header lines are only
     necessary in Un*x. You can leave them in in Windows (so that the
     script will work also in Un*x without any change) or you can
     take them out and leave two blank lines (this is necessary
     because the Ciao script processor skips the first two lines of
     Ciao scripts!). These two lines can be added automatically in
     `emacs' from the Ciao/Prolog menu or by typing <^C> <I> <S>.

Starting executables from the Windows command line
--------------------------------------------------

   The installation script also creates a `.bat' skeleton file
(`bat_skel' in folder Win32) which allows running Ciao executables
from the command line. If you want to run a Ciao executable
`file.cpx' from the command line, you normally copy the skeleton file
to the folder were the executable is and rename it to file.bat, then
change its contents as explained in a comment inside. Note that this
`.bat' file is usually not necessary in NT, as its command shell
understands file extension associations, i.e., in windows NT it is
possible to run the `file.cpx' executable directly. Due to
limitations of `.bat' files in Windows 95/98, in those OSs no more
than 9 command line arguments can be passed to the executable (in NT
there is no such restriction).

   The installation script creates also `ciaosh.bat' and `ciaoc.bat'
files (in the `shell' and `ciaoc' folders respectively). These allow
calling the interactive top-level and the standalone compiler from
the command line in Windows95/98.

Using the emacs environment under Windows
-----------------------------------------

   While it is easy to use Ciao with any editor of your choice, using
it within the `emacs' editor/program development system is highly
recommended: Ciao includes an `emacs' *mode* which greatly simplifies
many program development tasks (see *Note Using Ciao inside GNU
emacs:: for details on the capabilities of `ciao'/`emacs' combination.

   The emacs editor (in all its versions: Un*x, Windows, etc.) can be
donloaded from, for example, `http://www.emacs.org/', and also from
the many GNU mirror sites worldwide (See `http://www.gnu.org/' for a
list), in the `gnu/emacs' and `gnu/windows/emacs' directories. For
example, at UPM it can be found at
`ftp://ftp.fi.upm.es/pub/mirrors/gnu/emacs' and
`ftp://ftp.fi.upm.es/pub/mirrors/gnu/windows/emacs'.

   In order to allow `emacs' to load the Ciao mode automatically when
editing and to access the documentation, add the following line to
your `~/.emacs' file:

             (load-file "<CIAODIR>/DOTemacs")

where you should put in place of `<CIAODIR>' the directory where you
installed the Ciao distribution. After doing this (and exiting and
restarting `emacs') the following things should work:

   * When opening a Prolog file (with `.pl' or `.pls' ending) the
     code should appear highlighted according to syntax (e.g.,
     comments in red), and a `Ciao/Prolog' menu should appear in the
     menu bar on top of the `emacs' window.

   * Accessing the Ciao manuals from the `Ciao/Prolog' menu (or
     typing <^H> <i>) should open a list of manuals in info format in
     which the Ciao manual(s) should appear.

   * Loading the file using the `Ciao/Prolog' menu (or typing <^C>
     <l>) should start in another emacs buffer the Ciao toplevel
     shell and load the file. You should now be able to switch the
     the toplevel shell and make queries from within `emacs'.

   * You can also, e.g., create executables from the `Ciao/Prolog'
     menu. See *Note Using Ciao inside GNU emacs:: for the many other
     functionalities of this environment.

Compiling the miscellaneous utilities under Windows
---------------------------------------------------

   The `etc' folder contains a number of utilities, documented in the
manual in *PART V - Miscellaneous Standalone Utilities*. In the Win32
distribution these utilities are not compiled by the installation
process. You can create the executable for each of them when needed
by compiling the corresponding `.pl' file.

Server installation under Windows
---------------------------------

   If you would like to install Ciao on a server machine, used by
several clients, the following steps are recommended:

   * Follow the standard installation procedure on the server. All
     the functionality specified in the previous sections should then
     be available on the server.

   * Perform a *client installation* on each client, by running
     (e.g., double-click on it) the `client.bat' script. This should
     update the registry of each client.

Uninstallation under Windows
----------------------------

   To uninstall Ciao under Windows, simply delete the directory in
which you put the Ciao distribution. If you also want to delete the
registry entries created by the Ciao installation (not strictly
needed) this must currently be done by hand. The installation leaves
a list of these entries in the file `ciao.reg' to aid in this task.
Also, all the register entries contain the word *ciao*. Thus, to
delete all Ciao entries, run the application `regedit' (for example,
by selecting `Run' from the Windows `Start' menu), search (<^F>) for
*ciao* in all registry entries (i.e., select all of `Keys', `Values',
and `Data' in the `Edit->Find' dialog), and delete each matching key
(click on the left window to find the matching key for each entry
found).

Windows installation from the standard source distribution
==========================================================

   In order to compile Ciao Prolog for Win32 environments you need to
have the (public domain) *Cygnus Win32* and development libraries
installed in your system. Compilation should be performed preferably
under Windows NT.

   * Thus, the first step, if Cygnus Win32 is not installed in your
     system, is to download it (from, e.g.,
     `http://www.cygnus.com/misc/gnu-win32') and install it. The
     compilation process also requires that the executables `rm.exe',
     `sh.exe', and `uname.exe' from the Cygnus distribution be copied
     under `/bin' prior to starting the process (if these executables
     are not available under `/bin' the compilation process will
     produce a number of errors and eventually stop prematurely).

   * Assuming all of the above is installed, type `make allwin32'.
     This will compile both the engine and the Prolog libraries. In
     this process, system libraries that are normally linked
     dynamically under Un*x (i.e., those for which `.so' dynamically
     loadable files are generated) are linked statically into the
     engine (this is done instead of generating `.dll's because of a
     limitation in the current version of the Cygnus Win32
     environment). No actual installation is made at this point,
     i.e., this process leaves things in a similar state as if you
     had just downloaded and uncompressed the precompiled
     distribution. Thus, in order to complete the installation you
     should now:

   * Follow the procedure outlined in the first item of *Note Windows
     installation from the precompiled distribution:: above.

   A further note regarding the executables generated by the Ciao
compiler and top-level: the same considerations given in *Note
Windows installation from the precompiled distribution:: apply
regarding `.bat' files, etc. However, in a system in which Cygnus
Win32 is installed these executables can also be used in a very
simple way. In fact, the executables can be run as in Un*x by simply
typing their name at the `bash' shell command line without any
associated `.bat' files. This only requires that the `bash' shell
which comes with Cygnus Win32 be installed and accessible: simply,
make sure that `/bin/sh.exe' exists.

Checking for correct installation
=================================

   If everything has gone well, several applications and tools should
be available to a normal user. The most important ones are the
following:

   * Typing `ciao' (or `ciaosh') in Un*x or double-clicking on the
     `ciaosh.cpx' icon or its direct access in Windows) should start
     the typical Prolog top level (the sources are located in
     `$(SRC)/shell'). Typing, e.g., `use_module(library(dec10_io)).'
     at the top level prompt should show a message correctly loading
     this library from the library directories. Note that some
     predicates that are built-ins in other Prolog are available
     through libraries in Ciao. This facilitates making small
     executables.

   * Typing `ciaoc' in Un*x (or double-clicking on the `ciaoc.cpx'
     icon in Windows) should produce the help message from the Ciao
     standalone compiler (note that programs can also be compiled
     from the shell). In its simplest use, given a top-level
     *foo*`.pl' file for an application (the file must define the a
     predicate `main/0' or `main/1') it compiles an executable `foo',
     automatically detecting which other files need recompilation.

   * Typing `ciao-shell' should produce a message saying that no code
     was found. This is a Ciao application which can be used to write
     scripts written in Prolog, i.e., files which do not need any
     explicit compilation to be run. In Windows these scripts execute
     by simply double-clicking on them.

   Also, the following documentation-related actions should work:

   * If the `info' program is installed, starting `info' should
     produce a list of manuals which should include Ciao manual(s) in
     a separate section (you may need to log out and back in so that
     your shell variables are reinitialized).

   * If `emacs' is installed, typing `M-x info' should have the same
     result as above (you may also need to log out and back in for
     this).

   * Opening with a WWW browser (e.g., `netscape') the directory name
     or `URL' corresponding to `DOCROOT' should show a series of
     Ciao-related manuals.

   * In Un*x, typing `man ciao' should produce a man page with
     general information on Ciao.

Cleaning up the source directory
================================

   After installation, the source directory can be cleaned up in
several ways:

   * `gmake uninstall' removes the installation but does not touch
     the source directories.

   * `gmake totalclean' leaves the distribution is its original form,
     throwing away any intermediate files (as well as any unneeded
     files left behind by the Ciao developers), while still allowing
     recompilation.

   Other useful `make' targets are listed at the beginning of
`$(SRC)/Makefile'.

Environment variables used by Ciao executables
==============================================

   The executables generated by the Ciao compiler (including the ciao
development tools themselves) locate automatically where the Ciao
engine and libraries have been installed, since those paths are
stored as defaults in the engine and compiler at installation time.
Thus, there is no need for setting any environment variables in order
to *run* Ciao executables (on a single architecture - see *Note
Multiarchitecture support:: for running on multiple architectures).

   However, the default paths can be overridden by using the
environment variables `CIAOENGINE' and `CIAOLIB'. The first one will
tell the Ciao executables where to look for an engine, and the second
will tell them where to look for the libraries. Thus, it is possible
to actually use the Ciao system without installing it by setting
these variables to the following values:
   * `CIAOENGINE': `$(SRC)/bin/$(CIAOARCH)/ciaoengine'

   * `CIAOLIB': `$(SRC)'

   where `$(CIAOARCH)' is the string echoed by the command
`SRC/etc/ciao_get_arch' (or `BINROOT/ciao_get_arch', after
installation).

   This allows using alternate engines or libraries, which can be
very useful for system development and experimentation.

Multiarchitecture support
=========================

   As mentioned before, Ciao applications (including the compiler and
the top level) can run on several machines with different
architectures without any need for recompiling, provided there is one
Ciao engine (compiled for the corresponding architecture) accessible
in each machine. Also, the Ciao libraries (installed in `LIBROOT',
which contain also the engines) and the actual binaries (installed in
`BINROOT') can themselves be shared on several machines with
different architectures, saving disk space.

   For example, assume that the compiler is installed as:

   `/usr/local/share/bin/ciaoc'

   and the libraries are installed under

   `/usr/local/share/lib'

   Assume also that the `/usr/local/share' directory is mounted on,
say, a number of Linux and a number of Solaris boxes. In order for
`ciaoc' to run correctly on both machines, the following is needed:

  1. Make sure you that have done `gmake install' on one machine of
     each architecture (once for Linux and once for Solaris in our
     example). This recompiles and installs a new engine and any
     architecture-dependent parts of the libraries for each
     architecture. The engines will have names such as
     `ciaoengine.LINUXi86', `ciaoengine.SolarisSparc', and so on.

  2. In multi-architecture environments it is even more important to
     make sure that users make the modifications to their startup
     scripts using `<LIBROOT>/ciao/DOTcshrc' etc. The selection of
     the engine (and architecture-dependent parts of libraries) is
     done in these scripts by setting the environment variable
     `CIAOARCH', using the `ciao_get_arch' command, which is
     installed automatically when installing Ciao. This will set
     `CIAOARCH' to, say, `LINUXi86', `SolarisSparc', respectively,
     and `CIAOENGINE' will be set to `ciaoengine.'*CIAOARCH*.

     However, note that this is not strictly necessary if running on
     only one architecture: if `CIAOARCH' is not set (i.e.,
     undefined), the Ciao executables will look simply for
     `ciaoengine', which is always a link to the latest engine
     installed in the libraries. But including the initialization
     files provided has the advantage of setting also paths for the
     manuals, etc.


Architecture specific notes and limitations
===========================================

   Ciao makes use of advanced characteristics of modern architectures
and operating systems such as multithreading, shared memory, sockets,
locks, dynamic load libraries, etc., some of which which are
sometimes not present in a given system and others may be implemented
in very different ways across the different systems. As a result,
currently not all Ciao features are available in all supported
operating systems. Sometimes this is because not all the required
features are present in all the OS flavors supported and sometimes
because we simply have not had the time to port them yet.

   The current state of matters is as follows:

LINUX:
     multithreading, shared DB access, and locking working.

Solaris:
     multithreading, shared DB access, and locking working.

SunOS 4:
     multithreading, shared DB access, and locking NOT working.

Win 95/NT:
     multithreading, shared DB access, locking, and dynamic linking
     of object code (C) libraries NOT working.

   The features that do not work are disabled at compile time. If
problems appear, please disable them explicitly in the `SETTINGS'
file. We will make this more automatic sometime in the future.

Downloading new versions
========================

   Ciao and its related libraries and utilities are under constant
improvement, so you should make sure that you have the latest
versions of the different components, which can be dowloaded from:

   `http://clip.dia.fi.upm.es/Software'

Keeping up to date: the Ciao users mailing list
===============================================

   We recommend that you join the  Ciao *users mailing list*
(`ciao-users@clip.dia.fi.upm.es'), in order to receive information on
new versions and solutions to problems. Simply send a message to
<ciao-users-request@clip.dia.fi.upm.es>, containing in the body only
the word:

   `subscribe'

   alone in one line. Messages in the list are strictly limited to
issues directly related to Ciao Prolog and your email address will of
course be kept strictly confidential. You mail also want to subscribe
to the `comp.lang.prolog' newsgroup.

   There is additional info available on the Ciao system, other CLIP
group software, publications on the technology underlying these
systems, etc. in the CLIP group's WWW site
`http://clip.dia.fi.upm.es'.

Reporting bugs
==============

   If you still have problems after downloading the latest version
and reading the installation instructions you can send a message to
<ciao-bug@clip.dia.fi.upm.es>. Please be as informative as possible
in your messages, so that we can reproduce the bug.

   * For *installation problems* we typically need to have the
     version and patch number of the Ciao package (e.g., the name of
     the file downloaded), the output produced by the installation
     process (you can capture it by redirecting the output into a
     file or cutting and pasting with the mouse), and the exact
     version of the Operating System you are using (as well as the C
     compiler, if you took a source distribution).

   * For *problems during use* we also need the Ciao and OS versions
     and a small example of code which we can run to reproduce the
     bug.

Porting to currently unsupported operating systems
==================================================

   If you would like to port Ciao to a currently unsupported
platform, there are several issues to take into account. The main one
is to get the *engine* to compile in that platform, i.e., the C code
under the `engine' directory. To this end, look under the directory
`$(SRC)/makefile-sysdep': there is a `mkf-CIAOARCH' file for every
architecture/OS under which Ciao is known to compile. You can start
from the closest one and customize it for your local distribution or
installed tools. But please keep the original files! Once a working
engine is achieved, it should be possible to continue with the
standard installation procedure, which will try to use a completely
static version of the standalone compiler (`ciaoc.sta' in the `ciaoc'
directory) to compile the interactive top-level (`ciaosh') and a new
version of the standalone compiler (`ciaoc'). These in turn should be
able to compile the Prolog libraries. You may also need to look at
some libraries (such as, for example, `sockets') which contain C
code. Porting to other Un*x flavours should be easy while other
operating system families may require more work. If you do succeed in
porting to a platform that is currently please send the
`mkf-CIAOARCH' and any patches to <ciao@clip.dia.fi.upm.es>, and we
will include it (with due credit, of course) in the next distribution.

Troubleshooting (nasty messages and nifty workarounds)
======================================================

   The following a list of common installation problems reported by
users:

   * *Problem:*

     During engine compilation, the following message appears:
     `tasks.c:102:PTHREAD_CANCEL_ASYNCHRONOUS undeclared (first use
     of this function)'.

     *Possible reason and solution:*

     Your (Linux?) system does not have (yet) the Posix threads
     library installed. You can upgrade to one which does have it, or
     download the library from

     `http://pauillac.inria.fr/~xleroy/linuxthreads/index.html'

     and install it, or disable the use of threads in Linux: for
     this, edit the `SETTINGS' file and specify `USE_THREADS=no',
     which will avoid linking against thread libraries (it will
     disable the use of thread-related primitives as well). Clean the
     engine with `make engclean' and restart compilation.

     If you have any alternative threads library available, you can
     tinker with `engine/threads.h' and the files under
     `makefile-sysdep' in order to get the task managing macros right
     for your system. Be sure to link the right library. If you
     succeed, we (<ciao@clip.dia.fi.upm.es>) will be happy of knowing
     about what you have done.

   * *Problem:*

     `-lpthread: library not found' (or similar)

     *Possible reason and solution:*

     Your (Linux?) system seems to have Posix threads installed, but
     there is no threads library in the system. In newer releases
     (e.g., RedHat 5.0), the Posix threads system calls have been
     included in `glibc.so', so specifying `-lpthread' in
     `makefile-sysdep/mkf-LINUX' is not needed; remove it. `make
     engclean' and restart installation.

     Alternatively, you may have made a custom installation of Posix
     threads in a non-standard location: be sure to include the flag
     `-L/this/is/where/the/posix/libraries/are' *before* `-lpthread',
     and to update `/etc/ld.so.conf' (see `man ldconfig').

   * *Problem:*

     `Segmentation Violation' (when starting the first executable)

     *Possible reason and solution:*

     This has been observed with certain older versions of `gcc'
     which generated erroneous code under full optimization. The best
     solution is to upgrade to a newer version of `gcc'.
     Alternatively, lowering the level of optimization (by editing
     the `SETTINGS' file in the main directory of the distribution)
     normally solves the problem, at the cost of reduced execution
     speed.

   * *Problem:* `ciaoc:
     /home/clip/lib/ciao/ciao-X.Y/engine/ciaoengine: not found'

     *Possible reason and solution:*

        * The system was not fully installed and the variable
          `CIAOENGINE' was not set.

        * The system was installed, the variable `CIAOENGINE' is set,
          but it is does not point to a valid ciaoengine.

     See the file `LIBROOT/ciao/DOTcshrc' for user settings for
     environment variables.

   * *Problem:*

     `ERROR: File library(compiler) not found - aborting...' (or any
     other library is not found)

     *Possible reason and solution:*

        * The system was not installed and the variable `CIAOLIB' was
          not set.

        * The system is installed and the variable `CIAOLIB' is wrong.

     See the file `LIBROOT/ciao/DOTcshrc' for user settings for
     environment variables.

   * *Problem:*

     `ERROR: File <some_directory>/<some_file>.itf not found -
     aborting...'

     *Possible reason and solution:*

     Can appear when compiling `.pl' files. The file to compile
     (<some_file>.pl) is not in the directory <some_directory>. You
     gave a wrong file name or you are in the wrong directory.

   * *Problem:*

     `*ERROR*: /(write_option,1) is not a regular type' (and similar
     ones)

     *Possible reason and solution:*

     This is not a problem, but rather the type checker catching some
     minor inconsistencies which may appear while compiling the
     libraries. Bug us to remove it, but ignore it for now.

   * *Problem:*

     `WARNING: Predicate <some_predicate>/<N> undefined in module
     <some_module>'

     *Possible reason and solution:*

     It can appear when the compiler is compiling Ciao library
     modules. If so, ignore it (we will fix it). If it appears when
     compiling user programs or modules, you may want to check your
     program for those undefined predicates.

   * *Problem:*

     `gmake[1]: execve:
     /home/clip/mcarro/ciao-0.7p2/etc/collect_modules: No such file
     or directory'

     *Possible reason and solution:*

     Check if collect_modules is in $(SRC)/etc and is executable. If
     it is not here, your distribution is incorrect: please let us
     know.

   * *Problem:* `make: Fatal error in reader: COMMON, line 12:
     Unexpected end of line seen'

     *Possible reason and solution:*

     You are using standard Un*x make, not GNU's make implementation
     (gmake).

