{WARNING: do not edit, file automatically generated by lpdoc}

1 README_CIAODE
***************

This describes the installation procedure for the Ciao Development
Environment, including libraries and manuals, from a _source_
distribution. This applies primarily to Unix-type systems (Linux, Mac
OS X, Solaris, SunOS, etc.), and with some limitations to Windows
(using the Cygnus Win32 development libraries).

It is recommended that you read the `INSTALLATION' file that comes
with each component of CiaoDE. However, in many cases it suffices to
follow this summary:

Top
***

Software Requirements (ciaode)
==============================

For users of Linux distributions, you should install some packages
required by Ciao that do not come installed by default. Using the
corresponding automatic software management tool, those are:

     Debian/Ubuntu:
     	sudo apt-get install emacs build-essential \
     	    texi2html texlive texinfo imagemagick
     Fedora:
             su
     	yum install gcc kernel-headers kernel-devel emacs texi2html \
     	texinfo ImageMagick

   Some advanced libraries and components, like the cost analysis,
require an additional set of packages:

     Debian/Ubuntu:
     	sudo apt-get install libgsl0-dev libgsl0ldbl ant ant-optional \
                 sun-java6-jdk g++
     	sudo update-java-alternatives --set java-6-sun

   Fedora:
     	su
     	yum install gsl gsl-devel ant gnu-g++

   Debian/Ubuntu users for 64-bit systems would also need libraries
for 32-bit compatibility:
             sudo apt-get install gcc-multilib libc6-i386 \
                  lib6-dev-i386 ia32-libs
             # Optionally, for the Parma Polyhedra Library
             sudo apt-get install g++-multilib

   To install Java JDK on Fedora, please visit Sun Java website
(`http://java.sun.com/javase/downloads/index.jsp') and follow the
installation instructions there.

   If you are a Ciao developer, it is highly recommended to install
Subversion to access the latest source code in our repositories:

     Debian/Ubuntu:
     	sudo apt-get install subversion
     Fedora:
     	su
     	yum install subversion

   Users of other Linux variants or operating systems should use
similar tools to add the required packages. In Windows, doing a full
installation of CygWin ensures that you have all the required
packages.

Obtaining the Sources (ciaode)
==============================

  1. If you have obtained your copy of Ciao from a compressed source
     package, uncompress and unpackage it (using `gunzip' or `bzip2'
     and `tar -xpf'). This will put everything in a new directory
     whose name reflects the Ciao version.

  2. Other method to get the sources is from the subversion
     repository (available for ciao developers).


Quick Installation from Source (ciaode)
=======================================

The main command to build and install CiaoDE, located at the root of
the source tree, is called `ciaosetup'. It provides useful commands
to do quick installations from the sources with just one line:

  1. System-wide installation (e.g. as administrator or `root' user):

          ./ciaosetup system-install

  2. User-local installation (that will be accessible just for your
     user)

          ./ciaosetup user-install


   If you need a more advanced control of configuration read the
following section.

Custom Installations (ciaode)
=============================

More advanced uses of CiaoDE will require some customization of the
default build and installation options. Follow the next steps:

  1. Once you have placed the source files in an installation
     directory, run:

          ./ciaosetup configure

     This will generate some configuration files. Note that by
     default the system will be configured to be installed in
     `/usr/local', with some reasonable installation options, and
     *for all users* (for which you will need to run the installation
     as root). In case you want to change the installation choices
     (there are quite a few options!), install elsewhere, or make a
     personal installation, you can use a menu-driven procedure, as
     will be explained below.

     The configure command accepts several options. If you want to
     see a brief description use the `--help' argument (or check the
     next section bellow on configuration options):

          $ ./ciaosetup configure --help

     The `--menu' option shows a menu with configuration options. You
     must follow the instructions that appear on it. When asked for
     the configuration level, if you are happy with the default
     options, select the first option and no questions will be made.
     If you need a higher level of customization, select the last
     option. Note that for CiaoDE development is recommended to use
     the option `--instype=src' and `--sysavail=user', which prepares
     the CiaoDE to run from the sources directly, and configured in
     the user's home directory.

     Note that the GNU implementation of the make Un*x command is
     used internally in some specific parts. It is available in many
     systems (including all Linux systems and Mac OS X) simply as
     `make'. If this or next steps stop right away with `make' error
     messages it is probably an older version and you need to install
     `gmake'.

  2. Once the configuration process has finished, run:

          `./ciaosetup build'

     This will build executables and compile libraries.

  3. If you have obtained the CiaoDE source from the cvs repository,
     you need to generate the documentation. This can be done using:

          `./ciaosetup docs'

  4. After the compilation completes successfully, run:

          `./ciaosetup install'

     This will install everything in the specified directories.

     If you want to see the other available options, run `./ciaosetup
     help'

Configuration Options (ciaode)
==============================

This is the list of available configuration options for `./ciaosetup
configure', useful to customize your CiaoDE installation:

     List of configuration options:

     --help          Show this help.

     --menu          Configure options via a menu (recommended).

     --reset         Erase any previous configuration values.

     --preserve      Preserve previous configuration values.

     --default       Configure using default values.

     --silent=SILENT

     Removes several messages shown during installation.

     Valid values are [false,true]


     --sysavail=SYSAVAIL

     Select system availability:

             all  --  Make the system available to all users. Typically you
                      you will need to complete the installation as root.
                      NOTE: If you select this option, you will not be
                      able to use the experimental optimizing compiler.
             user --  Make the system available only for the current user
                      (configure it in the user's home directory).

     Valid values are [all,user]


     --instype=INSTYPE

     Select the type of installation:

             ins  --  Install the system in a separate location from the
                      sources and set up things to use the installed version.
                      The system will not require the sources to run, and
                      they can be erased after installation.
                      NOTE: If you select this option, you will not be
                      able to use the experimental optimizing compiler.
             src  --  The system will be compiled in, and run from the
                      sources (this is specially useful for developers).

     Valid values are [ins,src]


     --prefix=PREFIX

     Specify the directory to perform the installation.


     --extra_cflags=EXTRA_CFLAGS

     Specify additional C compiler flags


     --extra_ldflags=EXTRA_LDFLAGS

     Specify additional linker flags


     --optimizing_compiler=OPTIMIZING_COMPILER

     Specify if you want to install the optimizing compiler.

     Valid values are [yes,no]


     --stop_if_error=STOP_IF_ERROR

     Stop installation if an error is found.

     Valid values are [yes,no]


     --update_bashrc=UPDATE_BASHRC

     Set to "no" if you do not wish to configure bash to work with Ciao or
     if you wish to configure it by hand.

     Valid values are [yes,no]


     --dotbashrc=DOTBASHRC

     The bash initialization file where the Ciao variables are set.


     --update_cshrc=UPDATE_CSHRC

     Set to "no" if you do not wish to configure csh/tcsh to work with Ciao or
     if you wish to configure it by hand.

     Valid values are [yes,no]


     --dotcshrc=DOTCSHRC

     The csh/tcsh initialization file where the Ciao variables are set.
     Note that on some systems tcsh reads "~/.tcshrc".


     --install_emacs_support=INSTALL_EMACS_SUPPORT

     Set to "yes" if you wish to install the Ciao emacs libraries which
     implement the Emacs based graphical environment (highly recommended).
     It should be set to no if emacs is not installed in the system.  It
     is safe to leave as "yes" otherwise.

     Valid values are [yes,no]


     --emacs_for_ciao=EMACS_FOR_CIAO

     The version of emacs that you wish to use with Ciao. The development
     environment will be compiled for use with this version.


     --update_dotemacs=UPDATE_DOTEMACS

     Set to "yes" if you wish to configure emacs to
     work with Ciao (modify emacs initialization file).

     Valid values are [yes,no]


     --dotemacs=DOTEMACS

     Define the emacs initialization file where the Ciao settings will be added.


     --ciaomodeinitdir=CIAOMODEINITDIR

     Specify in what directory you want to copy the emacs ciao mode elisp
     code in order for it to be accessible to Emacs.


     --emacsinitfile=EMACSINITFILE

     Specify the name of the emacs lisp file defining the ciao mode.


     --install_xemacs_support=INSTALL_XEMACS_SUPPORT

     Set to "yes" if you wish to install the Ciao emacs libraries which
     implement the XEmacs based graphical environment (highly recommended).
     It should be set to no if xemacs is not installed in the system.  It
     is safe to leave as "yes" otherwise.

     Valid values are [yes,no]


     --xemacs_for_ciao=XEMACS_FOR_CIAO

     The version of xemacs that you wish to use with Ciao. The development
     environment will be compiled for use with this version.


     --update_dotxemacs=UPDATE_DOTXEMACS

     Set to "yes" if you wish to configure XEmacs to
     work with Ciao (modify xemacs initialization file).

     Valid values are [yes,no]


     --dotxemacs=DOTXEMACS

     Define the xemacs initialization file where the Ciao settings will be added.


     --xemacsinitdir=XEMACSINITDIR

     Specify in what directory you want to copy the xemacs ciao mode elisp
     file in order for it to be accessible to XEmacs.


     --xemacsinitfile=XEMACSINITFILE

     Specify the name of the xemacs lisp file defining the ciao mode.


     --htmldir=HTMLDIR

     Define this to be the directory in which you wish the documentation
     in html format to be installed. It is recommended that this directoriy
     be accessible via WWW.



     --htmlurl=HTMLURL

     Define the URL to access the previous directory via WWW.


     --docdir=DOCDIR

     Define this to be the directory in which you wish the documentation
     to be installed.



     --mandir=MANDIR

     Define this to be the directory in which you wish the man (unix manual entry) file
     to be installed.



     --infodir=INFODIR

     Define this to be the directory in which you wish the info file
     installed.  Ideally, this directory should be accesible via emacs.



     --web_images_path=WEB_IMAGES_PATH

     For the PiLLoW Web programming library, define the directory
     (accessible via WWW) where the icons which come with PiLLoW
     (in library/pillow/images) will go.


     --web_images_url=WEB_IMAGES_URL

     Define the URL to access the previous directory via WWW.


     --install_prolog_name=INSTALL_PROLOG_NAME

     Set to "yes" if you wish to create a link that brings up Ciao
     when you type "prolog". You may want to say no if there are other
     systems that support the Prolog language in your machine and you
     do not want to make Ciao the default.

     Valid values are [yes,no]


     --with_mysql=WITH_MYSQL

     Set to "yes" if you wish to interface with the MySQL database.
     If you choose to have the MySQL interface, you should have the MySQL
     client part installed in the machine where you are compiling and using
     it.  The MySQL daemon should also be up and running when using the
     interface.

     Valid values are [yes,no]


     --mysql_client_directory=MYSQL_CLIENT_DIRECTORY

     You should also specify where the MySQL client library is installed.


     --with_gsl=WITH_GSL

     Set to "yes" if you wish to interface with the GSL (GNU Scientific
     Library). If you choose to have the GSL interface, you should have the
     GSL development library installed in the machine where you are
     compiling and using it.

     Valid values are [yes,no]


     --with_ppl=WITH_PPL

     Set to "yes" if you wish to interface with the PPL

     Valid values are [yes,no]


     --with_java_interface=WITH_JAVA_INTERFACE

     Whether you have a reasonably recent version of Java.
     If so the utilities for the Java interface under
     $(CIAOSRC)/library/javall will be compiled , along with
     examples and documentation.

     Valid values are [yes,no]


     --with_ant=WITH_ANT

     Verify if ant (a Java based make tool) is installed
     in the system.

     Valid values are [yes,no]


     --use_threads=USE_THREADS

     If you wish to compile an engine with threads capability
     (concurrency), set the following variable to "yes".  Otherwise, set
     it to "no".  If the architecture does not support threads (or
     thread support has not yet been added to Ciao for this
     architecture), this will be automatically disabled at compile time.
     Concurrency support does not cause any appreciable runtime overhead
     for non-concurrent programs, so it is safe to leave it as "yes".

     Valid values are [yes,no]


     --use_posix_locks=USE_POSIX_LOCKS

     When using threads, locks are mandatory, and they do not make any
     sense if you are not using threads.  So, threads enable locks.  Ciao
     includes native code locks for some architectures, but allows
     specifying the use of POSIX-compliant locks if posix libraries are
     available.  Posix locks will be automatically selected if no native
     lock implementation is included in Ciao for a given architecture.  We
     recommend letting this option set to "no" since a primitive lock
     implementation is usually much faster than the library-based POSIX
     one.

     Valid values are [yes,no]


     --and_parallel_execution=AND_PARALLEL_EXECUTION

     Set the following variable to "yes" if you wish to compile an
     engine with support for and-parallel execution of goals in
     (Herbrand-)independent fashion or to "visandor" if you wish also
     support for VisAndOr's events. Choose one of:

             yes             -- Support for and-parallel execution.
             visandor        -- Support for and-parallel execution and
                                VisAndOr's events.
             no              -- No support.

     Valid values are [yes,visandor,no]


     --par_back=PAR_BACK

     Set the following variable to "yes" if you wish to compile an
     engine with support for parallel backtracking execution of goals.
     This feature is experimental and may not be available in all releases.

     Valid values are [yes,no]


     --tabled_execution=TABLED_EXECUTION

     Set the following variable to "yes" if you wish to compile an
     engine with support for tabled execution of goals.
     This feature is experimental and may not be available in all releases.

     Valid values are [yes,no]


     --compile_chr=COMPILE_CHR

     Please specify if you would like to compile CHR (adds significant time
     to compilation).

     Valid values are [yes,no]


     --optim_level=OPTIM_LEVEL

     Optimization level used when compiling the bytecode emulator. Choose
     one of:

        optimized       -- Turn on optimization flags
        normal          -- Normal emulator (non-optimized code)

     For normal use, we recommend leaving it as "optimized".  But if you
     suspect that your C compiler performs buggy optimizations (which should
     not be the case), turn optimization off.  This can be happen more
     easily in concurrent applicacions: if you write any thread-based
     program and unexpected results appear, try recompiling Ciao without
     optimization options first.

     Valid values are [optimized,normal]


     --execmode=EXECMODE

     Permissions for installed execs/dirs


     --datamode=DATAMODE

     Permissions for installed data files


     --installgroup=INSTALLGROUP

     Group for the installed files (empty means use default)


     --compile_ciaoppcl=COMPILE_CIAOPPCL

     Please specify if you want to compile the CiaoPP Command Line Utility.

     Valid values are [yes,no]


     --cross_compiler_host=CROSS_COMPILER_HOST

     If you will cross-compile the engine later, please enter the user
     name and address of the target machine to extract run-time
     characteristics from -- e.g., "root@my.other.host.com".  If you
     are not going to crosscompile, leave the default value.
     Cross-compiling is at the moment done with "make crossengine" once
     the regular compilation is over.


     --debug_level=DEBUG_LEVEL

     You only want to change this if you are a developer.  Additionally,
     setting the environment variable CIAODEBUG to the value '-debug'
     at the time of compiling the engine will override the OPTIM_LEVEL
     and DEBUG_LEVEL flags, and produce non optimized emulator code with
     debugging information.

     Level of debugging built into the bytecode emulator. Choose one of:

        nodebug         -- Do not include debug information or messages
        debug           -- Emulator with C level debugging info available
                           plus extended C compilation warnings
        profile         -- Include profiling options for the emulator
        profile-debug   -- Include profiling and debug options for the
                           emulator
        paranoid-debug  -- Emulator with C level debugging info available
                           plus paranoid C compilation warnings.

     Valid values are [nodebug,debug,profile,profile-debug,paranoid-debug]


     --unused_pred_warnings=UNUSED_PRED_WARNINGS

     If you wish to show warnings about unused predicates, set this
     variable to "yes".

     Valid values are [yes,no]


     --compress_lib=COMPRESS_LIB

     If you wish to compile the Ciao libraries with their bytecode
     compressed then set the following variable to "yes". Libraries
     generated this way will be smaller at the cost of a slightly slower
     usage, both in their load as when employed to create an executable.

     Valid values are [yes,no]


     --runtime_checks=RUNTIME_CHECKS

     If you wish to compile the Ciao libraries with runtime checks
     enabled then set the following variable to "yes".

     Valid values are [yes,no]


     --set_flag_options=SET_FLAG_OPTIONS

     Set the prolog flags configured here in the ciao shell script.

     Valid values are [yes,no]


     --ciaosh_commands=CIAOSH_COMMANDS

     Pass extra commands to the ciao shell script.

