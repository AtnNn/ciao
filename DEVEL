{WARNING: do not edit, file automatically generated by lpdoc}

1 DEVEL_CIAODE
**************

This file provides some random, useful notes for developers who may
wish to contribute to the Ciao library code base.

Top
***

The Installation Process
========================

The entry point of all the install process is the shell utility
`./ciaosetup'. This file is a wrapper for the `lpmake' utility. The
installation options are implemented in the `installer*.pl' files
that are in the subdirectories `installer/'. `Lpmake' looks for
targets in this file instead of `Makefile.pl'.

   Inside the `installer/' directories there is a CONFIG.pl file,
which contains the description of the CiaoDE component, and the alias
path definitions used when compiling and installing the system.

Automatically Generated Modules
===============================

The name of modules that are generated automatically should end in
`_auto.pl'. Those modules will be removed when a `realclean' is done.
There are two special cases that should be considered:

   * If the automatically generated file contains information about
     absolute paths, and needs to be recreated when the CiaoDE
     sources are relocated, then the file should finish in
     `_src_auto.pl'. The generation of such files must be in the
     lpmake environment option of the file `installer*.pl'.

   * If the auto generated file contains information about absolute
     paths, and needs to be recreated when CiaoDE is relocated, then
     the file should finish in `_ins_auto.pl'. This kind of files are
     generated in the `lpmake' reconfigure option of the file
     `installer*.pl'.


Avoid Module Pre-compilation
============================

The installation process will find all modules recursivelly and
precompile them. To skip the compilation of the modules in a
directory (and subdirectories) you should create an empty file called
`NOCOMPILE' in such directory. If you need a more refined control of
the compilation, you should create a file `NOCOMPILEFILES' containing
the file patterns that must not be compiled.

Avoid Module Distribution
=========================

To indicate that some directory must not be included in a
_distribution package_, you should create an empty file called
`NODISTRIBUTE' in such directory.

Avoid Module Installation
=========================

To indicate that some directory must not be copied during
installation (i.e., during the execution of the `./ciaosetup install'
option), you should create the empty file `NOINSTALL' in such
directory.

Source Cleaning
===============

`./ciaosetup' provides several options to cleanning the sources. The
strongest is realclean, which leaves the source code as obtained from
svn.

   `./ciaosetup recursiveclean' can be invoked inside any
subdirectory to clean all the auto generated files.

   Remember that if `instype' is `src', uninstallation does not
delete any files, it only removes the configuration settings in shell
scripts and emacs initialization files.

Customization of Installation Output
====================================

Sometimes when you are creating binary packages, or simply testing
installation, you require to simulate the installation in a directory
other than root, but without to change the links and file references,
considering that such precompiled package should work well when be
moved to the root of the machine. To do that, before to call the
`./ciaosetup install' tool you should export the variable
`BUILD_ROOT' pointing to the directory where the fake installation
will be done.

Building Distribution Packages
==============================

`./ciaosetup' offers some commands to build distribution packages for
several platforms:

   * `installer_win32'. Creates a Windows installer.

   * `installer_rpm [--option=value...]'. Creates an `RPM' package.
     One or more options may be added; main ones are:

    subpackages=yes
          Creates separate packages, one for each component, plus a
          CiaoDE metapackage that depends on all of them. If disabled
          only a single CiaoDE package is created with the whole
          bundle.

    versionp=yes
          Creates versioned packages instead of regular ones.
          Versioned packages are meant to coexist with older or newer
          ones. Each package gets labeled with the component's main
          version (e.g. -v1.14) and can be installed together with
          the regular package or other versioned packages, provided
          they are all different versions. This needs
          `subpackages=yes'.

    vendor_independent=yes
          Creates packages that should work in all mainstream `RPM'
          Linux distributions. This is the default. If disabled,
          packages are only guaranteed to work in the same
          distribution (vendor) they were generated for.

    svn_sources=yes
          Builds CiaoDE straight from subversion repository sources
          instead of a distribution tarball.


     For more details please read the documentation for the
     `installer_rpm' module (`installer/installer_rpm.pl'.)

   * `installer_bin'. Creates the binary packages (using `gz' and
     `bzip2').

   * `installer_bin_tgz'. Creates the binary package compressed using
     `gz'.

   * `installer_bin_tbz'. Creates the binary package compressed using
     `bzip2'.

   * `installer_src'. Creates the `tar' packages in `gz' and `bzip2'
     compressed formats.

   * `installer_tgz'. Creates the `tar' packages in `gz' compressed
     format.

   * `installer_tbz'. Creates the `tar' packages in `bzip2'
     compressed format.


Adding new Java Examples to the Cost Analysis
=============================================

The new examples must be in the directory
`ciaopp/ilciao/examples/Resources', and if at this point, such
examples are located in subdirectories, is necessary to update the
target `clean' in the `build.xml' file.

