:- module(readme_generator, [], [fsyntax, hiord, assertions]).

:- doc(title,  "Readme File Generator").
:- doc(author, "Jose F. Morales").
:- doc(author, "Edison Mera (original author)").
:- doc(module, "This module defines predicates to generate README files from .lpdoc files").

:- use_module(library(terms),        [atom_concat/2]).
:- use_module(library(file_utils)).
:- use_module(library(lists)).
:- use_module(library(strings)).
:- use_module(library(dict)).
:- use_module(library(write)).

:- use_module(ciaodesrc(makedir(makedir_aux)), [invoke_lpdoc/1]).

:- doc(bug, "This module could be unnecessary with minor additions
in LPdoc. For example, adding parameters as input.").

% TODO: Document
:- export(generate_readme_files/3).

% The input of this predicate is a list of documents, where each one
% can be a file name (an lpdoc file) or a pair File-Params. Each
% document is processed (with lpdoc) and the ASCII output is emitted
% in the current directory.

generate_readme_files([], _SrcDir, _DocDir).
generate_readme_files([X|Xs], SrcDir, DocDir) :-
	( X = as(X1, OutName0) ->
	    OutName = OutName0
	; X1 = X,
	  OutName = Name
	),
	( X1 = Name-Params ->
	    true
	; Name = X1,
	  Params = []
	),
	( generate_readme_file(Name, Params, OutName, SrcDir, DocDir) ->
	    true
	; throw(cannot_generate_readme_file(Name))
	),
	generate_readme_files(Xs, SrcDir, DocDir).

generate_readme_file(Name, Params, OutName, SrcDir, DocDir) :-
	Opts = ~atom_concat([' -d filepath=', SrcDir]),
	invoke_lpdoc(~atom_concat([Opts, ' -c ', Name, '.ascii'])),
	Ascii = ~atom_concat([Name, '.ascii']),
	DocSrc = ~atom_concat([DocDir, '/', Ascii]),
	( Params = [] ->
	    release_readme_file(DocSrc, OutName)
	; release_param_readme_file(DocSrc, Params, OutName)
	).

:- pred release_readme_file(Src, Target) : (atm(Src), atm(Target))

# "Copy from @var{Src} to @var{Target} file adding the header of
  @pred{warning_autogen/1}".

release_readme_file(Src, Target) :-
	file_to_string(Src, SrcStr),
	append(~warning_autogen, SrcStr, TargetStr),
	string_to_file(TargetStr, Target).

% (like release_readme_file, but replaces some elements)
% TODO: This is really ugly... use lpdoc instead
release_param_readme_file(Input, Params, Output) :-
	params_to_dic(Params, Dic),
	Str = ~file_to_string(Input),
	replace_strings(Str, Dic, Str2),
	open(Output, write, Stream),
	warning_autogen(AutoGen),
	write_string(Stream, AutoGen),
	write_string(Stream, Str2),
	close(Stream).

params_to_dic([], _).
params_to_dic([K=V|KVs], Dic) :-
	dic_lookup(Dic, K, V),
	params_to_dic(KVs, Dic).

% Replace "<v>Key</v>" strings in input by values in Dic
replace_strings(Str, Dic, Str2) :-
	parse_key(Str, Before, Key, After),
	!,
	dic_lookup(Dic, Key, Value),
	( atom(Value) -> atom_codes(Value, ValueStr)
	; string(Value) -> ValueStr = Value
	; throw(unknown_value_in_replace_strings(Value))
	),
	Str2 = ~append(Before, S0),
	S0 = ~append(ValueStr, S1),
	S1 = ~append(After, Rest),
	!,
	replace_strings(After, Dic, Rest).
replace_strings(Str, _, Str).

parse_key(Str, Before, Key, After) :-
	append(Before , "<v>"||Str0, Str),
	append(KeyStr, "</v>"||After, Str0),
	atom_codes(Key, KeyStr).

warning_autogen("{WARNING: do not edit, file automatically generated by lpdoc}\n\n").

